This archive contains Ultimate.
Please direct any questions to one of the maintainers and/or consult the
websites.

Websites:
https://github.com/ultimate-pa/ultimate
https://ultimate.informatik.uni-freiburg.de/

Maintainers:
dietsch@informatik.uni-freiburg.de
heizmann@informatik.uni-freiburg.de
nutz@informatik.uni-freiburg.de
greitsch@informatik.uni-freiburg.de

This archive also contains a binary of the Z3 theorem prover.
https://github.com/Z3Prover

--------------------------------------------------------------------------------

1. Requirements
You require a working version of Python2.7. Its executable should be present in
your PATH variable.

2. Usage
This Ultimate tool should be called by the Python wrapper script Ultimate.py. 
The script supports the input parameters that are used in the SV-COMP and
whould be invoked as follows.

 $ ./Ultimate.py <propfile> <inputfile> <architecture> <memorymodel>

where
 * <propfile> is a property file, usually with the ending *.prp,
 * <inputfile> is a C program,
 * <architecture> is either '32bit' or '64bit' (without quotes), and
 * <memorymodel> is the memory model to be used, either 'simple' or 'precise'
   (without quotes).

The output of the Ultimate tool is written to the file Ultimate.log and the
result is written to stdout. 

If the checked property, specified in the property file, does not hold, a human
readable counterexample is written to UltimateCounterExample.errorpath and an
error witness is written to witness.graphml.

3. Choosing the right parameters
3.1 Property files 
This archive contains a set of property files located in the directory props/
 * Deref.prp
   The result is 'TRUE' iff all pointer dereferences are valid, i.e., iff the
   program does never access memory that is not allocated.
 * Memsafety.prp
   The result is 'TRUE' iff all pointer dereferences are valid,
   all deallocations are valid, and all allocated memory is eventually freed. 
 * Overflow.prp
   The result is 'TRUE' iff no operations on signed integers results in an 
   overflow. (Operations on unsigned integers are not checked as their
   behaviour is always defined by the C standard.)
 * Reach.prp
   The result is 'TRUE' iff the program does not contain an execution that
   calls the SV-COMP error function __VERIFIER_error().
 * Termination.prp
   The result is 'TRUE' iff every program execution reaches the end of the
   program, i.e., iff all program executions are finite.  
For each of this property files (except Termination.prp) Ultimate also checks
if all ACSL specifications (e.g., "//@ assert x > 0") are valid.

3.2 Architecture 
The architecture parameter specifies whether the program is written for an
ILP32 (32bit) or an LP64 (64bit) architecture.

3.3 Memory model
In the current version this option does not have any effect.

4. Results
The wrapper script provides output to stdout that indicates whether the checked
property is violated or not. The output can be one of the following:
* TRUE
  The property holds.
* FALSE(P)
  Generally means that the property is violated. P specifies which property is
  violated. If the result is "FALSE(P)", the wrapper script produces the file
  "UltimateCounterExample.errorpath" in the current working directory. This
  file contains a counterexample in human-readable form. 

The wrapper script also records the original output of Ultimate in the file
"Ultimate.log" in the current working directory. 
