// Simple scalable test for computation of Owicki-Gries annotation for Petri Net with a cycle such that init marking can be reached infinitely often
// -------------------------------------------------------------------------------------------------------------------------------------------------

//@ variables (x Int)

//@ semantics [0] {x} (= x 0)
//@ semantics [1] { } (= x 0)
//@ semantics [2] { } (distinct x 0)

PetriNet program = (
  alphabet    = { "[0]" "[1]" "[2]" },
  places      = { "l0" "l1" "e" },
  transitions = {
    ({ "l0" }  "[0]" { "l1" })
    ({ "l1" } "[1]" { "l0" })
    ({ "l1" } "[2]" { "e" })
  },
  initialMarking = { "l0" },
  acceptingPlaces = { "e" }
);

FiniteAutomaton proof = (
     alphabet      = { "[0]" "[1]" "[2]" },
     states        = { "true" "(= x 0)" "false" },
     initialStates = { "true" },
     finalStates   = { "false" },
     transitions   = {
       ("true" "[0]" "(= x 0)")
       ("(= x 0)" "[0]" "(= x 0)")
       ("(= x 0)" "[1]" "(= x 0)")
       ("(= x 0)" "[2]" "false")
     }
);



