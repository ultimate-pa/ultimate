// Simple test for transitions that are not always enabled if a marking contains a predecessor
// -------------------------------------------------------------------------------------------

//@ variables (y Int)

//@ semantics [0] {  } true
//@ semantics [1] {  } false

PetriNet program = (
  alphabet    = { "[0]" "[1]" },
  places      = { "l0" "l1" "l2" "l3" "l4" "l5" "e" },
  transitions = {
    ({ "l0" } "[0]" { "l1" "l2" })
    ({ "l1" "l2" } "[0]" { "l3" })
    ({ "l3" } "[0]" { "l2" "l4" })
    ({ "l2" "l4" } "[0]" { "l5" })
    ({ "l5" } "[0]" { "l0" })
    ({ "l3" } "[1]" { "e" })
  },
  initialMarking = { "l0" },
  acceptingPlaces = { "e" }
);

FiniteAutomaton proof = (
     alphabet      = { "[0]" "[1]" },
     states        = { "true" "false" },
     initialStates = { "true" },
     finalStates   = { "false" },
     transitions   = {
       ("true" "[1]" "false")
     }
);
