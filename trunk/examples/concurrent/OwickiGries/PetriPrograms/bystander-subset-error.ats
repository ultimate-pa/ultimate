// Simple scalable test for computation of Owicki-Gries annotation for Petri Net with a main thread and a temporary worker thread
// ------------------------------------------------------------------------------------------------------------------------------

//@ variables (g Int)

//@ semantics [0] {g} (= g 0)
//@ semantics [1] { } true
//@ semantics [2] { } (= g 1)
//@ semantics [3] {g} (= g 1)
//@ semantics [4] { } false

PetriNet program = (
  alphabet    = { "[0]" "[1]" "[2]" "[3]" "[4]" },
  places      = { "i" "p1" "p2" "p3" "p4" "p5" "e" },
  transitions = {
    ({ "i" }  "[0]" { "p1" "p2" })
    ({ "p1" } "[1]" { "p3" })
    ({ "p3" } "[2]" { "p5" })
    ({ "p2" } "[3]" { "p4" })
    ({ "p5" } "[4]" { "e" })
  },
  initialMarking = { "i" },
  acceptingPlaces = { "e" }
);

FiniteAutomaton proof = (
     alphabet      = { "[0]" "[1]" "[2]" "[3]" "[4]" },
     states        = { "true" "(= g 0)" "(= g 1)" "false" },
     initialStates = { "true" },
     finalStates   = { "false" },
     transitions   = {
       ("true" "[0]" "(= g 0)")
       ("(= g 0)" "[1]" "(= g 0)")
       ("(= g 0)" "[2]" "false")
       ("(= g 0)" "[3]" "(= g 1)")
       ("(= g 1)" "[1]" "(= g 1)")
       ("(= g 1)" "[2]" "(= g 1)")
       ("(= g 1)" "[4]" "false")
     }
);



