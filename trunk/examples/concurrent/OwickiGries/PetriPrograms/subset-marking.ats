// Test where one marking is subset of another,
// and corresponding assertions differ.
// ------------------------------------------------------

//@ variables (y Int) (x Int)

//@ semantics [0] {x} (= x 1)
//@ semantics [1] {y} (= y 1)
//@ semantics [2] { } (and (= x 0) (= y 0))

PetriNet program = (
  alphabet    = { "[0]" "[1]" "[2]" },
  places      = { "l0" "l1" "l2" "e" },
  transitions = {
    ({ "l0" } "[0]" { "l1" })
    ({ "l0" } "[1]" { "l1" "l2" })
    ({ "l1" } "[2]" { "e" })
    ({ "l1" "l2" } "[2]" { "e" })
  },
  initialMarking = { "l0" },
  acceptingPlaces = { "e" }
);

FiniteAutomaton proof = (
     alphabet      = { "[0]" "[1]" "[2]" },
     states        = { "true" "(= x 1)" "(= y 1)" "false" },
     initialStates = { "true" },
     finalStates   = { "false" },
     transitions   = {
       ("true"    "[0]" "(= x 1)")
       ("true"    "[1]" "(= y 1)")
       ("(= x 1)" "[2]" "false")
       ("(= y 1)" "[2]" "false")
     }
);


