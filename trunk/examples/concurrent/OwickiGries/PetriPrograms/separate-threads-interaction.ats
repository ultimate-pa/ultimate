// Simple scalable test for computation of Owicki-Gries annotation for Petri Net with a main thread and a temporary worker thread
// ------------------------------------------------------------------------------------------------------------------------------

//@ variables (g Int) (z1 Int) (z2 Int)

//@ semantics [0] {g} (= g 0)
//@ semantics [1] {z1,z2} (and (= z1 1) (= z2 1))
//@ semantics [2] {z1,z2} (and (= z1 (* |old(z1)| 2)) (= z2 (* |old(z2)| 2)))
//@ semantics [3] {g} (and (= |old(g)| 0) (= g 1))
//@ semantics [4] { } (= g 1)
//@ semantics [5] {z1} (= z1 (+ |old(z1)| 1))
//@ semantics [6] {z2} (= z2 (+ |old(z2)| 1))
//@ semantics [7] { } (distinct 5 (+ z1 z2))

PetriNet program = (
  alphabet    = { "[0]" "[1]" "[2]" "[3]" "[4]" "[5]" "[6]" "[7]" },
  places      = { "m.l0" "m.l1" "t1.l0" "t1.l1" "t1.l2" "t1.l3" "t2.l0" "t2.l1" "t2.l2" "t2.l3" "e" },
  transitions = {
    ({ "m.l0" } "[0]" { "m.l1" })
    ({ "m.l1" } "[1]" { "t1.l0" "t2.l0" })
    ({ "t1.l0" "t2.l0" } "[2]" { "t1.l1" "t2.l1" })
    ({ "t1.l1" } "[3]" { "t1.l2" })
    ({ "t1.l1" } "[4]" { "t1.l3" })
    ({ "t1.l2" } "[5]" { "t1.l3" })
    ({ "t2.l1" } "[3]" { "t2.l2" })
    ({ "t2.l1" } "[4]" { "t2.l3" })
    ({ "t2.l2" } "[6]" { "t2.l3" })
    ({ "t1.l3" "t2.l3" } "[7]" { "e" })
  },
  initialMarking = { "m.l0" },
  acceptingPlaces = { "e" }
);

FiniteAutomaton proof = (
     alphabet      = { "[0]" "[1]" "[2]" "[3]" "[4]" "[5]" "[6]" "[7]" },
     states        = { "true" "(= g 0)" "(and (= g 0) (= z1 1) (= z2 1))" "(and (= g 0) (= z1 2) (= z2 2))" "(and (= g 1) (= z1 2) (= z2 2))" "(and (= g 1) (= z1 3) (= z2 2))" "(and (= g 1) (= z1 2) (= z2 3))" "false" },
     initialStates = { "true" },
     finalStates   = { "false" },
     transitions   = {
       ("true" "[0]" "(= g 0)")
       ("(= g 0)" "[1]" "(and (= g 0) (= z1 1) (= z2 1))")
       ("(and (= g 0) (= z1 1) (= z2 1))" "[2]" "(and (= g 0) (= z1 2) (= z2 2))")
       ("(and (= g 0) (= z1 2) (= z2 2))" "[3]" "(and (= g 1) (= z1 2) (= z2 2))")
       ("(and (= g 0) (= z1 2) (= z2 2))" "[4]" "false")
       ("(and (= g 1) (= z1 2) (= z2 2))" "[4]" "(and (= g 1) (= z1 2) (= z2 2))")
       ("(and (= g 1) (= z1 2) (= z2 2))" "[5]" "(and (= g 1) (= z1 3) (= z2 2))")
       ("(and (= g 1) (= z1 2) (= z2 2))" "[6]" "(and (= g 1) (= z1 2) (= z2 3))")
       ("(and (= g 1) (= z1 2) (= z2 2))" "[3]" "false")
       ("(and (= g 1) (= z1 3) (= z2 2))" "[4]" "(and (= g 1) (= z1 3) (= z2 2))")
       ("(and (= g 1) (= z1 3) (= z2 2))" "[7]" "false")
       ("(and (= g 1) (= z1 3) (= z2 2))" "[3]" "false")
       ("(and (= g 1) (= z1 2) (= z2 3))" "[4]" "(and (= g 1) (= z1 2) (= z2 3))")
       ("(and (= g 1) (= z1 2) (= z2 3))" "[7]" "false")
       ("(and (= g 1) (= z1 2) (= z2 3))" "[3]" "false")
     }
);



