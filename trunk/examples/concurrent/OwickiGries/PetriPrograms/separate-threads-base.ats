// Simple test for computation of Owicki-Gries annotation
// ------------------------------------------------------

//@ variables (z1 Int) (z2 Int)

//@ semantics [0] {z1,z2} (and (= z1 1) (= z2 1))
//@ semantics [1] {z1} (= z1 (+ |old(z1)| 1))
//@ semantics [2] {  } (< z1 2)
//@ semantics [3] {z2} (= z2 (+ |old(z2)| 1))
//@ semantics [4] {  } (< z2 2)

PetriNet program = (
  alphabet    = { "[0]" "[1]" "[2]" "[3]" "[4]" },
  places      = { "main.l0" "t1.l1" "t1.l2" "t1.e" "t2.l1" "t2.l2" "t2.e" },
  transitions = {
    ({ "main.l0" } "[0]" { "t1.l1" "t2.l1" })
    ({ "t1.l1" } "[1]" { "t1.l2" })
    ({ "t1.l2" } "[2]" { "t1.e"  })
    ({ "t2.l1" } "[3]" { "t2.l2" })
    ({ "t2.l2" } "[4]" { "t2.e"  })
  },
  initialMarking = { "main.l0" },
  acceptingPlaces = { "t1.e" "t2.e" }
);

FiniteAutomaton proof1 = (
     alphabet      = { "[0]" "[1]" "[2]" "[3]" "[4]" },
     states        = { "true" "(= z1 1)" "(= z1 2)" "false" },
     initialStates = { "true" },
     finalStates   = { "false" },
     transitions   = {
       ("true"    "[0]" "(= z1 1)")

       ("(= z1 1)" "[3]" "(= z1 1)")
       ("(= z1 1)" "[4]" "(= z1 1)")
       ("(= z1 1)" "[1]" "(= z1 2)")

       ("(= z1 2)" "[3]" "(= z1 2)")
       ("(= z1 2)" "[4]" "(= z1 2)")
       ("(= z1 2)" "[2]" "false")

       ("false" "[3]" "false")
       ("false" "[4]" "false")
     }
);

FiniteAutomaton proof2 = (
     alphabet      = { "[0]" "[1]" "[2]" "[3]" "[4]" },
     states        = { "true" "(= z2 1)" "(= z2 2)" "false" },
     initialStates = { "true" },
     finalStates   = { "false" },
     transitions   = {
       ("true"    "[0]" "(= z2 1)")

       ("(= z2 1)" "[1]" "(= z2 1)")
       ("(= z2 1)" "[2]" "(= z2 1)")
       ("(= z2 1)" "[3]" "(= z2 2)")

       ("(= z2 2)" "[1]" "(= z2 2)")
       ("(= z2 2)" "[2]" "(= z2 2)")
       ("(= z2 2)" "[4]" "false")

       ("false" "[1]" "false")
       ("false" "[2]" "false")
     }
);


