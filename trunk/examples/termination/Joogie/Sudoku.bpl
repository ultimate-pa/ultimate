type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var $fresh15 : [int]int;
var $fresh3 : [int][int]int;
var $fresh4 : int;
var $fresh19 : int;
var $fresh21 : int;
var $fresh23 : int;
var $fresh9 : int;
var $fresh6 : int;
var $fresh13 : int;
var $fresh10 : int;
var $fresh20 : int;
var $fresh1 : [int][int]int;
var $fresh5 : int;
var $fresh7 : int;
var $fresh24 : int;
var $fresh22 : int;
var int$lp$$rp$$lp$$rp$$Sudoku$grid254 : Field [int][int]int;
var $fresh4 : int;
var $fresh18 : int;
var $fresh8 : int;
var $fresh11 : int;
var $fresh1 : [int]int;
var $fresh12 : int;
var $fresh2 : int;
var $fresh3 : int;
var $fresh16 : int;
var $fresh17 : int;
var $fresh14 : int;
var $fresh2 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 38
// <Sudoku: boolean resolve_aux(int)>
procedure boolean$Sudoku$resolve_aux$2230(__this : ref, $param_0 : int) returns (__ret : int)
  modifies $intArrSize;
  requires ($neref((__this), ($null))==1);
 {
var $z030 : int;
var $i234 : int;
var $r436 : [int][int]int;
var i442 : int;
var i544 : int;
var i645 : int;
var $r739 : [int]int;
var $i340 : int;
var r028 : ref;
var $r333 : [int]int;
var $z135 : int;
var $i132 : int;
var z343 : int;
var r127 : [int]int;
var $r537 : [int]int;
var i023 : int;
var $r638 : [int][int]int;
var $r231 : [int][int]int;
Block42:
	r028 := __this;
	i023 := $param_0;
	 goto Block43;
	 //  @line: 39
Block43:
	 goto Block44, Block46;
	 //  @line: 39
Block44:
	 assume ($leint((i023), (0))==1);
	 goto Block45;
	 //  @line: 39
Block46:
	 //  @line: 39
	 assume ($negInt(($leint((i023), (0))))==1);
	 //  @line: 40
	i442 := 0;
	 //  @line: 41
	z343 := 0;
	 //  @line: 42
	i544 := 0;
	 goto Block47;
	 //  @line: 60
Block45:
	 //  @line: 60
	__ret := 1;
	 return;
	 //  @line: 42
Block47:
	 goto Block50, Block48;
	 //  @line: 42
Block50:
	 //  @line: 42
	 assume ($negInt(($geint((i544), (9))))==1);
	 //  @line: 43
	i442 := 0;
	 goto Block51;
	 //  @line: 42
Block48:
	 assume ($geint((i544), (9))==1);
	 goto Block49;
	 //  @line: 43
Block51:
	 goto Block52, Block54;
	 //  @line: 48
Block49:
	 //  @line: 48
	r127 := $reftointarr(($newvariable((65))));
	$intArrSize[$reftointarr(($newvariable((65))))[$arrSizeIdx]] := 9;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((65))))), ($intArrNull))))==1);
	 goto Block66;
	 //  @line: 43
Block52:
	 assume ($geint((i442), (9))==1);
	 goto Block53;
	 //  @line: 43
Block54:
	 //  @line: 43
	 assume ($negInt(($geint((i442), (9))))==1);
	 assert ($neref((r028), ($null))==1);
	 //  @line: 44
	$r638 := $HeapVar[r028, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 assert ($geint((i544), (0))==1);
	 assert ($ltint((i544), ($fresh5))==1);
	 //  @line: 44
	$r739 := $r638[i544];
	 assert ($geint((i442), (0))==1);
	 assert ($ltint((i442), ($intArrSize[$r739[$arrSizeIdx]]))==1);
	 //  @line: 44
	$i340 := $r739[i442];
	 goto Block55;
	 //  @line: 49
Block66:
	 assert ($neref((r028), ($null))==1);
	 //  @line: 49
	 call void$Sudoku$possibleValues$2231((r028), (i544), (i442), (r127));
	 //  @line: 50
	i645 := 0;
	 goto Block67;
	 //  @line: 45
Block53:
	 goto Block62, Block60;
	 //  @line: 44
Block55:
	 goto Block58, Block56;
	 //  @line: 50
Block67:
	 goto Block70, Block68;
	 //  @line: 45
Block62:
	 //  @line: 45
	 assume ($negInt(($eqint((z343), (0))))==1);
	 goto Block63;
	 //  @line: 45
Block60:
	 assume ($eqint((z343), (0))==1);
	 goto Block61;
	 //  @line: 44
Block58:
	 //  @line: 44
	 assume ($negInt(($neint(($i340), (0))))==1);
	 //  @line: 43
	z343 := 1;
	 goto Block53;
	 //  @line: 44
Block56:
	 assume ($neint(($i340), (0))==1);
	 goto Block57;
	 //  @line: 50
Block70:
	 //  @line: 50
	 assume ($negInt(($geint((i645), (9))))==1);
	 assert ($geint((i645), (0))==1);
	 assert ($ltint((i645), ($intArrSize[r127[$arrSizeIdx]]))==1);
	 //  @line: 51
	$z030 := r127[i645];
	 goto Block71;
	 //  @line: 50
Block68:
	 assume ($geint((i645), (9))==1);
	 goto Block69;
	 //  @line: 42
Block63:
	 goto Block49;
	 //  @line: 42
Block61:
	 //  @line: 42
	i544 := $addint((i544), (1));
	 goto Block64;
	 //  @line: 43
Block57:
	 //  @line: 43
	i442 := $addint((i442), (1));
	 goto Block59;
	 //  @line: 51
Block71:
	 goto Block74, Block72;
	 //  @line: 58
Block69:
	 //  @line: 58
	__ret := 0;
	 return;
	 //  @line: 42
Block64:
	 goto Block47;
	 //  @line: 43
Block59:
	 goto Block51;
	 //  @line: 51
Block74:
	 //  @line: 51
	 assume ($negInt(($eqint(($z030), (0))))==1);
	 assert ($neref((r028), ($null))==1);
	 //  @line: 52
	$r231 := $HeapVar[r028, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 assert ($geint((i544), (0))==1);
	 assert ($ltint((i544), ($fresh6))==1);
	 //  @line: 52
	$r333 := $r231[i544];
	 //  @line: 52
	$i132 := $addint((i645), (1));
	 assert ($geint((i442), (0))==1);
	 assert ($ltint((i442), ($intArrSize[$r333[$arrSizeIdx]]))==1);
	 //  @line: 52
	$r333[i442] := $i132;
	 //  @line: 53
	$i234 := $subint((i023), (1));
	 assert ($neref((r028), ($null))==1);
	 //  @line: 53
	 call $z135 := boolean$Sudoku$resolve_aux$2230((r028), ($i234));
	 goto Block75;
	 //  @line: 51
Block72:
	 assume ($eqint(($z030), (0))==1);
	 goto Block73;
	 //  @line: 53
Block75:
	 goto Block78, Block76;
	 //  @line: 50
Block73:
	 //  @line: 50
	i645 := $addint((i645), (1));
	 goto Block67;
	 //  @line: 53
Block78:
	 //  @line: 53
	 assume ($negInt(($eqint(($z135), (0))))==1);
	 //  @line: 54
	__ret := 1;
	 return;
	 //  @line: 53
Block76:
	 assume ($eqint(($z135), (0))==1);
	 goto Block77;
	 //  @line: 56
Block77:
	 assert ($neref((r028), ($null))==1);
	 //  @line: 56
	$r436 := $HeapVar[r028, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 goto Block79;
	 //  @line: 56
Block79:
	 assert ($geint((i544), (0))==1);
	 assert ($ltint((i544), ($fresh7))==1);
	 //  @line: 56
	$r537 := $r436[i544];
	 assert ($geint((i442), (0))==1);
	 assert ($ltint((i442), ($intArrSize[$r537[$arrSizeIdx]]))==1);
	 //  @line: 56
	$r537[i442] := 0;
	 goto Block73;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


	 //  @line: 80
// <Sudoku: void main(java.lang.String[])>
procedure void$Sudoku$main$2232($param_0 : [int]ref)
  modifies $stringSize, $intArrSize, $refArrSize;
 {
var $i493 : int;
var $i288 : int;
var $r798 : [int]int;
var $r495 : [int][int]int;
var $r14106 : ref;
var $r596 : [int]int;
var $r12103 : [int]int;
var $r10101 : [int]int;
var $r11102 : [int]int;
var $i390 : int;
var $r899 : [int]int;
var $r13104 : [int]int;
var $r392 : ref;
var r087 : [int]ref;
var $r289 : ref;
var $r697 : [int]int;
var i194 : int;
var r1105 : [int][int]int;
var $r9100 : [int]int;
var i091 : int;

 //temp local variables 
var $freshlocal0 : int;

Block115:
	r087 := $param_0;
	 //  @line: 81
	$i288 := $refArrSize[r087[$arrSizeIdx]];
	 goto Block116;
	 //  @line: 81
Block116:
	 goto Block117, Block119;
	 //  @line: 81
Block117:
	 assume ($ltint(($i288), (2))==1);
	 goto Block118;
	 //  @line: 81
Block119:
	 //  @line: 81
	 assume ($negInt(($ltint(($i288), (2))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($refArrSize[r087[$arrSizeIdx]]))==1);
	 //  @line: 82
	$r289 := r087[0];
	$i390 := $stringSize[$r289];
	 //  @line: 82
	i091 := $modint(($i390), (10));
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($refArrSize[r087[$arrSizeIdx]]))==1);
	 //  @line: 83
	$r392 := r087[1];
	$i493 := $stringSize[$r392];
	 //  @line: 83
	i194 := $modint(($i493), (10));
	 //  @line: 84
	$r495 := $fresh3;
	$fresh14 := 9;
	 assume ($negInt(($fresh4))==1);
	 //  @line: 84
	$r596 := $reftointarr(($newvariable((121))));
	$intArrSize[$reftointarr(($newvariable((121))))[$arrSizeIdx]] := 9;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((121))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r596[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r596[0] := 0;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r596[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r596[1] := 3;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r596[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r596[2] := 0;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r596[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r596[3] := 0;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r596[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r596[4] := 0;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r596[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r596[5] := 0;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r596[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r596[6] := 0;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r596[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r596[7] := 6;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($intArrSize[$r596[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r596[8] := 0;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($fresh16))==1);
	 //  @line: 84
	$r495[0] := $r596;
	 //  @line: 84
	$r697 := $reftointarr(($newvariable((122))));
	$intArrSize[$reftointarr(($newvariable((122))))[$arrSizeIdx]] := 9;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((122))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r697[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r697[0] := 7;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r697[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r697[1] := 0;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r697[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r697[2] := 0;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r697[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r697[3] := 0;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r697[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r697[4] := 1;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r697[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r697[5] := 0;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r697[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r697[6] := 0;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r697[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r697[7] := 0;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($intArrSize[$r697[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r697[8] := 9;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($fresh17))==1);
	 //  @line: 84
	$r495[1] := $r697;
	 //  @line: 84
	$r798 := $reftointarr(($newvariable((123))));
	$intArrSize[$reftointarr(($newvariable((123))))[$arrSizeIdx]] := 9;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((123))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r798[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r798[0] := 4;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r798[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r798[1] := 0;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r798[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r798[2] := 0;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r798[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r798[3] := 7;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r798[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r798[4] := 0;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r798[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r798[5] := 6;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r798[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r798[6] := 0;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r798[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r798[7] := 0;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($intArrSize[$r798[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r798[8] := 5;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($fresh18))==1);
	 //  @line: 84
	$r495[2] := $r798;
	 //  @line: 84
	$r899 := $reftointarr(($newvariable((124))));
	$intArrSize[$reftointarr(($newvariable((124))))[$arrSizeIdx]] := 9;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((124))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r899[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r899[0] := 0;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r899[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r899[1] := 0;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r899[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r899[2] := i091;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r899[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r899[3] := 3;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r899[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r899[4] := 0;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r899[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r899[5] := 9;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r899[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r899[6] := 7;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r899[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r899[7] := 0;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($intArrSize[$r899[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r899[8] := 0;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($fresh19))==1);
	 //  @line: 84
	$r495[3] := $r899;
	 //  @line: 84
	$r9100 := $reftointarr(($newvariable((125))));
	$intArrSize[$reftointarr(($newvariable((125))))[$arrSizeIdx]] := 9;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((125))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r9100[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r9100[0] := 0;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r9100[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r9100[1] := 0;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r9100[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r9100[2] := 0;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r9100[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r9100[3] := 0;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r9100[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r9100[4] := 2;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r9100[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r9100[5] := 0;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r9100[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r9100[6] := 0;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r9100[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r9100[7] := 0;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($intArrSize[$r9100[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r9100[8] := 0;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($fresh20))==1);
	 //  @line: 84
	$r495[4] := $r9100;
	 //  @line: 84
	$r10101 := $reftointarr(($newvariable((126))));
	$intArrSize[$reftointarr(($newvariable((126))))[$arrSizeIdx]] := 9;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((126))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r10101[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r10101[0] := 0;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r10101[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r10101[1] := 0;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r10101[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r10101[2] := i194;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r10101[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r10101[3] := 1;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r10101[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r10101[4] := 0;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r10101[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r10101[5] := 4;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r10101[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r10101[6] := 9;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r10101[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r10101[7] := 0;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($intArrSize[$r10101[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r10101[8] := 0;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($fresh21))==1);
	 //  @line: 84
	$r495[5] := $r10101;
	 //  @line: 84
	$r11102 := $reftointarr(($newvariable((127))));
	$intArrSize[$reftointarr(($newvariable((127))))[$arrSizeIdx]] := 9;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((127))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r11102[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r11102[0] := 6;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r11102[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r11102[1] := 0;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r11102[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r11102[2] := 0;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r11102[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r11102[3] := 2;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r11102[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r11102[4] := 0;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r11102[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r11102[5] := 8;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r11102[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r11102[6] := 0;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r11102[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r11102[7] := 0;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($intArrSize[$r11102[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r11102[8] := 1;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($fresh22))==1);
	 //  @line: 84
	$r495[6] := $r11102;
	 //  @line: 84
	$r12103 := $reftointarr(($newvariable((128))));
	$intArrSize[$reftointarr(($newvariable((128))))[$arrSizeIdx]] := 9;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((128))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r12103[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r12103[0] := 8;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r12103[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r12103[1] := 0;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r12103[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r12103[2] := 0;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r12103[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r12103[3] := 0;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r12103[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r12103[4] := 5;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r12103[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r12103[5] := 0;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r12103[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r12103[6] := 0;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r12103[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r12103[7] := 0;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($intArrSize[$r12103[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r12103[8] := 2;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($fresh23))==1);
	 //  @line: 84
	$r495[7] := $r12103;
	 //  @line: 84
	$r13104 := $reftointarr(($newvariable((129))));
	$intArrSize[$reftointarr(($newvariable((129))))[$arrSizeIdx]] := 9;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((129))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r13104[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r13104[0] := 0;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r13104[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r13104[1] := 5;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r13104[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r13104[2] := 0;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r13104[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r13104[3] := 0;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r13104[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r13104[4] := 0;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r13104[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r13104[5] := 0;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r13104[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r13104[6] := 0;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r13104[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r13104[7] := 4;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($intArrSize[$r13104[$arrSizeIdx]]))==1);
	 //  @line: 84
	$r13104[8] := 0;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($fresh24))==1);
	 //  @line: 84
	$r495[8] := $r13104;
	 //  @line: 84
	r1105 := $r495;
	 //  @line: 98
	$r14106 := $newvariable((130));
	 assume ($neref(($newvariable((130))), ($null))==1);
	 assert ($neref(($r14106), ($null))==1);
	 //  @line: 98
	 call void$Sudoku$$la$init$ra$$2228(($r14106), (r1105));
	 assert ($neref(($r14106), ($null))==1);
	 //  @line: 98
	 call $freshlocal0 := boolean$Sudoku$resolve$2229(($r14106));
	 goto Block118;
	 //  @line: 106
Block118:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 3
// <Sudoku: void <init>(int[][])>
procedure void$Sudoku$$la$init$ra$$2228(__this : ref, $param_0 : [int][int]int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r16 : [int][int]int;
var i110 : int;
var r01 : ref;
var $i08 : int;
var $r35 : [int][int]int;
var $r47 : [int]int;
var i211 : int;
var $r22 : [int][int]int;
var $r59 : [int]int;
Block16:
	r01 := __this;
	r16 := $param_0;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 4
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 //  @line: 5
	$r22 := $fresh1;
	 assume ($negInt(($fresh2))==1);
	 assert ($neref((r01), ($null))==1);
	 //  @line: 5
	$HeapVar[r01, int$lp$$rp$$lp$$rp$$Sudoku$grid254] := $r22;
	 //  @line: 6
	i110 := 0;
	 goto Block18;
	 //  @line: 6
Block18:
	 goto Block19, Block21;
	 //  @line: 6
Block19:
	 assume ($geint((i110), (9))==1);
	 goto Block20;
	 //  @line: 6
Block21:
	 //  @line: 6
	 assume ($negInt(($geint((i110), (9))))==1);
	 //  @line: 7
	i211 := 0;
	 goto Block22;
	 //  @line: 9
Block20:
	 return;
	 //  @line: 7
Block22:
	 goto Block23, Block25;
	 //  @line: 7
Block23:
	 assume ($geint((i211), (9))==1);
	 goto Block24;
	 //  @line: 7
Block25:
	 //  @line: 7
	 assume ($negInt(($geint((i211), (9))))==1);
	 assert ($neref((r01), ($null))==1);
	 //  @line: 8
	$r35 := $HeapVar[r01, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 assert ($geint((i110), (0))==1);
	 assert ($ltint((i110), ($fresh2))==1);
	 //  @line: 8
	$r59 := $r35[i110];
	 assert ($geint((i110), (0))==1);
	 assert ($ltint((i110), ($fresh3))==1);
	 //  @line: 8
	$r47 := r16[i110];
	 assert ($geint((i211), (0))==1);
	 assert ($ltint((i211), ($intArrSize[$r47[$arrSizeIdx]]))==1);
	 //  @line: 8
	$i08 := $r47[i211];
	 assert ($geint((i211), (0))==1);
	 assert ($ltint((i211), ($intArrSize[$r59[$arrSizeIdx]]))==1);
	 //  @line: 8
	$r59[i211] := $i08;
	 //  @line: 7
	i211 := $addint((i211), (1));
	 goto Block22;
	 //  @line: 6
Block24:
	 //  @line: 6
	i110 := $addint((i110), (1));
	 goto Block26;
	 //  @line: 6
Block26:
	 goto Block18;
}


// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 30
// <Sudoku: boolean resolve()>
procedure boolean$Sudoku$resolve$2229(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $z015 : int;
var r014 : ref;
var i120 : int;
var i221 : int;
var $r218 : [int]int;
var i322 : int;
var $i019 : int;
var $r117 : [int][int]int;
Block27:
	r014 := __this;
	 //  @line: 31
	i120 := 0;
	 //  @line: 32
	i221 := 0;
	 goto Block28;
	 //  @line: 32
Block28:
	 goto Block29, Block31;
	 //  @line: 32
Block29:
	 assume ($geint((i221), (9))==1);
	 goto Block30;
	 //  @line: 32
Block31:
	 //  @line: 32
	 assume ($negInt(($geint((i221), (9))))==1);
	 //  @line: 33
	i322 := 0;
	 goto Block32;
	 //  @line: 35
Block30:
	 assert ($neref((r014), ($null))==1);
	 //  @line: 35
	 call $z015 := boolean$Sudoku$resolve_aux$2230((r014), (i120));
	 goto Block41;
	 //  @line: 33
Block32:
	 goto Block35, Block33;
	 //  @line: 35
Block41:
	 //  @line: 35
	__ret := $z015;
	 return;
	 //  @line: 33
Block35:
	 //  @line: 33
	 assume ($negInt(($geint((i322), (9))))==1);
	 assert ($neref((r014), ($null))==1);
	 //  @line: 34
	$r117 := $HeapVar[r014, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 assert ($geint((i221), (0))==1);
	 assert ($ltint((i221), ($fresh4))==1);
	 //  @line: 34
	$r218 := $r117[i221];
	 assert ($geint((i322), (0))==1);
	 assert ($ltint((i322), ($intArrSize[$r218[$arrSizeIdx]]))==1);
	 //  @line: 34
	$i019 := $r218[i322];
	 goto Block36;
	 //  @line: 33
Block33:
	 assume ($geint((i322), (9))==1);
	 goto Block34;
	 //  @line: 34
Block36:
	 goto Block39, Block37;
	 //  @line: 32
Block34:
	 //  @line: 32
	i221 := $addint((i221), (1));
	 goto Block40;
	 //  @line: 34
Block39:
	 //  @line: 34
	 assume ($negInt(($neint(($i019), (0))))==1);
	 //  @line: 33
	i120 := $addint((i120), (1));
	 goto Block38;
	 //  @line: 34
Block37:
	 assume ($neint(($i019), (0))==1);
	 goto Block38;
	 //  @line: 32
Block40:
	 goto Block28;
	 //  @line: 33
Block38:
	 //  @line: 33
	i322 := $addint((i322), (1));
	 goto Block32;
}


// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 63
// <Sudoku: void possibleValues(int,int,boolean[])>
procedure void$Sudoku$possibleValues$2231(__this : ref, $param_0 : int, $param_1 : int, $param_2 : [int]int)  requires ($neref((__this), ($null))==1);
 {
var $i1075 : int;
var $i562 : int;
var $r866 : [int][int]int;
var i2186 : int;
var $r255 : [int][int]int;
var $i250 : int;
var $r459 : [int][int]int;
var i2085 : int;
var $r967 : [int]int;
var $i461 : int;
var $r1273 : [int][int]int;
var i1984 : int;
var $r663 : [int][int]int;
var $r1070 : [int][int]int;
var $r764 : [int]int;
var i1378 : int;
var $r560 : [int]int;
var i1580 : int;
var i1681 : int;
var $i1176 : int;
var r054 : ref;
var i1883 : int;
var $r356 : [int]int;
var $i357 : int;
var $i148 : int;
var i1277 : int;
var r158 : [int]int;
var $i869 : int;
var i1479 : int;
var $r1171 : [int]int;
var $r1374 : [int]int;
var $i665 : int;
var i051 : int;
var $i768 : int;
var i1782 : int;
var $i972 : int;
Block80:
	r054 := __this;
	i1277 := $param_0;
	i1378 := $param_1;
	r158 := $param_2;
	 //  @line: 64
	i1479 := 0;
	 goto Block81;
	 //  @line: 64
Block81:
	 goto Block82, Block84;
	 //  @line: 64
Block82:
	 assume ($geint((i1479), (9))==1);
	 goto Block83;
	 //  @line: 64
Block84:
	 //  @line: 64
	 assume ($negInt(($geint((i1479), (9))))==1);
	 assert ($geint((i1479), (0))==1);
	 assert ($ltint((i1479), ($intArrSize[r158[$arrSizeIdx]]))==1);
	 //  @line: 66
	r158[i1479] := 1;
	 //  @line: 66
	i1479 := $addint((i1479), (1));
	 goto Block81;
	 //  @line: 66
Block83:
	 //  @line: 66
	i1580 := 0;
	 goto Block85;
	 //  @line: 66
Block85:
	 goto Block86, Block88;
	 //  @line: 66
Block86:
	 assume ($geint((i1580), (9))==1);
	 goto Block87;
	 //  @line: 66
Block88:
	 //  @line: 66
	 assume ($negInt(($geint((i1580), (9))))==1);
	 assert ($neref((r054), ($null))==1);
	 //  @line: 67
	$r1070 := $HeapVar[r054, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 assert ($geint((i1277), (0))==1);
	 assert ($ltint((i1277), ($fresh8))==1);
	 //  @line: 67
	$r1171 := $r1070[i1277];
	 assert ($geint((i1580), (0))==1);
	 assert ($ltint((i1580), ($intArrSize[$r1171[$arrSizeIdx]]))==1);
	 //  @line: 67
	$i972 := $r1171[i1580];
	 goto Block89;
	 //  @line: 69
Block87:
	 //  @line: 69
	i1681 := 0;
	 goto Block93;
	 //  @line: 67
Block89:
	 goto Block90, Block92;
	 //  @line: 69
Block93:
	 goto Block94, Block96;
	 //  @line: 67
Block90:
	 assume ($eqint(($i972), (0))==1);
	 goto Block91;
	 //  @line: 67
Block92:
	 //  @line: 67
	 assume ($negInt(($eqint(($i972), (0))))==1);
	 assert ($neref((r054), ($null))==1);
	 //  @line: 66
	$r1273 := $HeapVar[r054, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 assert ($geint((i1277), (0))==1);
	 assert ($ltint((i1277), ($fresh9))==1);
	 //  @line: 66
	$r1374 := $r1273[i1277];
	 assert ($geint((i1580), (0))==1);
	 assert ($ltint((i1580), ($intArrSize[$r1374[$arrSizeIdx]]))==1);
	 //  @line: 66
	$i1075 := $r1374[i1580];
	 //  @line: 66
	$i1176 := $subint(($i1075), (1));
	 assert ($geint(($i1176), (0))==1);
	 assert ($ltint(($i1176), ($intArrSize[r158[$arrSizeIdx]]))==1);
	 //  @line: 66
	r158[$i1176] := 0;
	 goto Block91;
	 //  @line: 69
Block94:
	 assume ($geint((i1681), (9))==1);
	 goto Block95;
	 //  @line: 69
Block96:
	 //  @line: 69
	 assume ($negInt(($geint((i1681), (9))))==1);
	 assert ($neref((r054), ($null))==1);
	 //  @line: 70
	$r663 := $HeapVar[r054, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 assert ($geint((i1681), (0))==1);
	 assert ($ltint((i1681), ($fresh10))==1);
	 //  @line: 70
	$r764 := $r663[i1681];
	 assert ($geint((i1378), (0))==1);
	 assert ($ltint((i1378), ($intArrSize[$r764[$arrSizeIdx]]))==1);
	 //  @line: 70
	$i665 := $r764[i1378];
	 goto Block97;
	 //  @line: 66
Block91:
	 //  @line: 66
	i1580 := $addint((i1580), (1));
	 goto Block85;
	 //  @line: 72
Block95:
	 //  @line: 72
	$i148 := $modint((i1277), (3));
	 goto Block101;
	 //  @line: 70
Block97:
	 goto Block100, Block98;
	 //  @line: 72
Block101:
	 //  @line: 72
	i1782 := $subint((i1277), ($i148));
	 //  @line: 73
	$i250 := $modint((i1378), (3));
	 //  @line: 73
	i1883 := $subint((i1378), ($i250));
	 //  @line: 74
	i1984 := $addint((i1782), (3));
	 //  @line: 74
	i051 := $addint((i1883), (3));
	 //  @line: 75
	i2085 := i1782;
	 goto Block102;
	 //  @line: 70
Block100:
	 //  @line: 70
	 assume ($negInt(($eqint(($i665), (0))))==1);
	 assert ($neref((r054), ($null))==1);
	 //  @line: 69
	$r866 := $HeapVar[r054, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 assert ($geint((i1681), (0))==1);
	 assert ($ltint((i1681), ($fresh11))==1);
	 //  @line: 69
	$r967 := $r866[i1681];
	 assert ($geint((i1378), (0))==1);
	 assert ($ltint((i1378), ($intArrSize[$r967[$arrSizeIdx]]))==1);
	 //  @line: 69
	$i768 := $r967[i1378];
	 //  @line: 69
	$i869 := $subint(($i768), (1));
	 assert ($geint(($i869), (0))==1);
	 assert ($ltint(($i869), ($intArrSize[r158[$arrSizeIdx]]))==1);
	 //  @line: 69
	r158[$i869] := 0;
	 goto Block99;
	 //  @line: 70
Block98:
	 assume ($eqint(($i665), (0))==1);
	 goto Block99;
	 //  @line: 75
Block102:
	 goto Block103, Block105;
	 //  @line: 69
Block99:
	 //  @line: 69
	i1681 := $addint((i1681), (1));
	 goto Block93;
	 //  @line: 75
Block103:
	 assume ($geint((i2085), (i1984))==1);
	 goto Block104;
	 //  @line: 75
Block105:
	 //  @line: 75
	 assume ($negInt(($geint((i2085), (i1984))))==1);
	 //  @line: 76
	i2186 := i1883;
	 goto Block106;
	 //  @line: 78
Block104:
	 return;
	 //  @line: 76
Block106:
	 goto Block109, Block107;
	 //  @line: 76
Block109:
	 //  @line: 76
	 assume ($negInt(($geint((i2186), (i051))))==1);
	 assert ($neref((r054), ($null))==1);
	 //  @line: 77
	$r255 := $HeapVar[r054, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 assert ($geint((i2085), (0))==1);
	 assert ($ltint((i2085), ($fresh12))==1);
	 //  @line: 77
	$r356 := $r255[i2085];
	 assert ($geint((i2186), (0))==1);
	 assert ($ltint((i2186), ($intArrSize[$r356[$arrSizeIdx]]))==1);
	 //  @line: 77
	$i357 := $r356[i2186];
	 goto Block110;
	 //  @line: 76
Block107:
	 assume ($geint((i2186), (i051))==1);
	 goto Block108;
	 //  @line: 77
Block110:
	 goto Block111, Block113;
	 //  @line: 75
Block108:
	 //  @line: 75
	i2085 := $addint((i2085), (1));
	 goto Block114;
	 //  @line: 77
Block111:
	 assume ($eqint(($i357), (0))==1);
	 goto Block112;
	 //  @line: 77
Block113:
	 //  @line: 77
	 assume ($negInt(($eqint(($i357), (0))))==1);
	 assert ($neref((r054), ($null))==1);
	 //  @line: 76
	$r459 := $HeapVar[r054, int$lp$$rp$$lp$$rp$$Sudoku$grid254];
	 assert ($geint((i2085), (0))==1);
	 assert ($ltint((i2085), ($fresh13))==1);
	 //  @line: 76
	$r560 := $r459[i2085];
	 assert ($geint((i2186), (0))==1);
	 assert ($ltint((i2186), ($intArrSize[$r560[$arrSizeIdx]]))==1);
	 //  @line: 76
	$i461 := $r560[i2186];
	 //  @line: 76
	$i562 := $subint(($i461), (1));
	 assert ($geint(($i562), (0))==1);
	 assert ($ltint(($i562), ($intArrSize[r158[$arrSizeIdx]]))==1);
	 //  @line: 76
	r158[$i562] := 0;
	 goto Block112;
	 //  @line: 75
Block114:
	 goto Block102;
	 //  @line: 76
Block112:
	 //  @line: 76
	i2186 := $addint((i2186), (1));
	 goto Block106;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


