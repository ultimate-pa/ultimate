type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 





// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 20
// <Power: boolean even(int)>
procedure boolean$Power$even$2231($param_0 : int) returns (__ret : int) {
var i024 : int;
var $z026 : int;
var $i125 : int;
Block38:
	i024 := $param_0;
	 goto Block39;
	 //  @line: 21
Block39:
	 goto Block40, Block42;
	 //  @line: 21
Block40:
	 assume ($gtint((i024), (0))==1);
	 goto Block41;
	 //  @line: 21
Block42:
	 //  @line: 21
	 assume ($negInt(($gtint((i024), (0))))==1);
	 //  @line: 23
	__ret := 1;
	 return;
	 //  @line: 22
Block41:
	 goto Block45, Block43;
	 //  @line: 22
Block45:
	 //  @line: 22
	 assume ($negInt(($neint((i024), (1))))==1);
	 goto Block46;
	 //  @line: 22
Block43:
	 assume ($neint((i024), (1))==1);
	 goto Block44;
	 //  @line: 23
Block46:
	 //  @line: 23
	__ret := 0;
	 return;
	 //  @line: 23
Block44:
	 //  @line: 23
	$i125 := $subint((i024), (1));
	 goto Block47;
	 //  @line: 23
Block47:
	 //  @line: 23
	 call $z026 := boolean$Power$odd$2232(($i125));
	 //  @line: 23
	__ret := $z026;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



	 //  @line: 10
// <Power: int power(int,int)>
procedure int$Power$power$2230($param_0 : int, $param_1 : int) returns (__ret : int) {
var $i419 : int;
var i116 : int;
var i221 : int;
var $i522 : int;
var $i623 : int;
var i017 : int;
var $i318 : int;
Block23:
	i017 := $param_0;
	i116 := $param_1;
	 goto Block24;
	 //  @line: 11
Block24:
	 goto Block25, Block27;
	 //  @line: 11
Block25:
	 assume ($gtint((i116), (0))==1);
	 goto Block26;
	 //  @line: 11
Block27:
	 //  @line: 11
	 assume ($negInt(($gtint((i116), (0))))==1);
	 //  @line: 16
	__ret := 1;
	 return;
	 //  @line: 12
Block26:
	 goto Block30, Block28;
	 //  @line: 12
Block30:
	 //  @line: 12
	 assume ($negInt(($neint((i116), (1))))==1);
	 goto Block31;
	 //  @line: 12
Block28:
	 assume ($neint((i116), (1))==1);
	 goto Block29;
	 //  @line: 16
Block31:
	 //  @line: 16
	__ret := i017;
	 return;
	 //  @line: 14
Block29:
	 //  @line: 14
	$i419 := $mulint((i017), (i017));
	 goto Block32;
	 //  @line: 14
Block32:
	 assert ($neint((2), (0))==1);
	 //  @line: 14
	$i318 := $divint((i116), (2));
	 //  @line: 14
	 call i221 := int$Power$power$2230(($i419), ($i318));
	 //  @line: 15
	$i522 := $modint((i116), (2));
	 goto Block33;
	 //  @line: 15
Block33:
	 goto Block34, Block36;
	 //  @line: 15
Block34:
	 assume ($neint(($i522), (0))==1);
	 goto Block35;
	 //  @line: 15
Block36:
	 //  @line: 15
	 assume ($negInt(($neint(($i522), (0))))==1);
	 //  @line: 16
	__ret := i221;
	 return;
	 //  @line: 16
Block35:
	 //  @line: 16
	$i623 := $mulint((i017), (i221));
	 goto Block37;
	 //  @line: 16
Block37:
	 //  @line: 16
	__ret := $i623;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 26
// <Power: boolean odd(int)>
procedure boolean$Power$odd$2232($param_0 : int) returns (__ret : int) {
var $i128 : int;
var i027 : int;
var $z029 : int;
Block48:
	i027 := $param_0;
	 goto Block49;
	 //  @line: 27
Block49:
	 goto Block50, Block52;
	 //  @line: 27
Block50:
	 assume ($gtint((i027), (0))==1);
	 goto Block51;
	 //  @line: 27
Block52:
	 //  @line: 27
	 assume ($negInt(($gtint((i027), (0))))==1);
	 //  @line: 29
	__ret := 0;
	 return;
	 //  @line: 28
Block51:
	 goto Block53, Block55;
	 //  @line: 28
Block53:
	 assume ($neint((i027), (1))==1);
	 goto Block54;
	 //  @line: 28
Block55:
	 //  @line: 28
	 assume ($negInt(($neint((i027), (1))))==1);
	 goto Block56;
	 //  @line: 29
Block54:
	 //  @line: 29
	$i128 := $subint((i027), (1));
	 goto Block57;
	 //  @line: 29
Block56:
	 //  @line: 29
	__ret := 1;
	 return;
	 //  @line: 29
Block57:
	 //  @line: 29
	 call $z029 := boolean$Power$even$2231(($i128));
	 //  @line: 29
	__ret := $z029;
	 return;
}


	 //  @line: 2
// <Power: void main(java.lang.String[])>
procedure void$Power$main$2229($param_0 : [int]ref)
  modifies $stringSize;
 {
var $i27 : int;
var $r15 : ref;
var $i613 : int;
var $i411 : int;
var $i512 : int;
var $i04 : int;
var r03 : [int]ref;
var $i38 : int;
var $r210 : ref;
var i715 : int;
var $i16 : int;

 //temp local variables 
var $freshlocal1 : int;
var $freshlocal0 : int;

Block17:
	r03 := $param_0;
	 //  @line: 3
	i715 := 0;
	 goto Block18;
	 //  @line: 3
Block18:
	 //  @line: 3
	$i04 := $refArrSize[r03[$arrSizeIdx]];
	 goto Block19;
	 //  @line: 3
Block19:
	 goto Block20, Block22;
	 //  @line: 3
Block20:
	 assume ($geint((i715), ($i04))==1);
	 goto Block21;
	 //  @line: 3
Block22:
	 //  @line: 3
	 assume ($negInt(($geint((i715), ($i04))))==1);
	 //  @line: 4
	$i16 := $refArrSize[r03[$arrSizeIdx]];
	 assert ($geint((i715), (0))==1);
	 assert ($ltint((i715), ($refArrSize[r03[$arrSizeIdx]]))==1);
	 //  @line: 4
	$r15 := r03[i715];
	$i27 := $stringSize[$r15];
	 //  @line: 4
	 call $i38 := int$Power$power$2230(($i16), ($i27));
	 //  @line: 4
	 call $freshlocal0 := boolean$Power$even$2231(($i38));
	 //  @line: 5
	$i411 := $refArrSize[r03[$arrSizeIdx]];
	 assert ($geint((i715), (0))==1);
	 assert ($ltint((i715), ($refArrSize[r03[$arrSizeIdx]]))==1);
	 //  @line: 5
	$r210 := r03[i715];
	$i512 := $stringSize[$r210];
	 //  @line: 5
	 call $i613 := int$Power$power$2230(($i411), ($i512));
	 //  @line: 5
	 call $freshlocal1 := boolean$Power$odd$2232(($i613));
	 //  @line: 3
	i715 := $addint((i715), (1));
	 goto Block18;
	 //  @line: 8
Block21:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


// <Power: void <init>()>
procedure void$Power$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


