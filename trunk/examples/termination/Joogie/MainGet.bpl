type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254 : Field ref;
var int$DoublyLinkedList.DoublyLinkedList$value0 : Field int;
var DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255 : Field ref;
var java.lang.String$lp$$rp$$DoublyLinkedList.Random$args256 : [int]ref;
var int$DoublyLinkedList.Random$index0 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 6
// <DoublyLinkedList.MainGet: void <init>()>
procedure void$DoublyLinkedList.MainGet$$la$init$ra$$2239(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r076 : ref;
Block103:
	r076 := __this;
	 assert ($neref((r076), ($null))==1);
	 //  @line: 7
	 call void$java.lang.Object$$la$init$ra$$28((r076));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 89
// <DoublyLinkedList.DoublyLinkedList: DoublyLinkedList.DoublyLinkedList copy()>
procedure DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$copy$2236(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r055 : ref;
var r157 : ref;
var $r258 : ref;
Block82:
	r055 := __this;
	 assert ($neref((r055), ($null))==1);
	 //  @line: 90
	 call r157 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$getFirst$2229((r055));
	 assert ($neref((r157), ($null))==1);
	 //  @line: 91
	 call $r258 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$copyR$2237((r157), ($null));
	 //  @line: 91
	__ret := $r258;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 23
// <DoublyLinkedList.DoublyLinkedList: void move(int)>
procedure void$DoublyLinkedList.DoublyLinkedList$move$2230(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r1223 : ref;
var $r717 : ref;
var $r919 : ref;
var r08 : ref;
var $r1021 : ref;
var r1122 : ref;
var $r211 : ref;
var $r515 : ref;
var $i220 : int;
var $r19 : ref;
var $r413 : ref;
var $r312 : ref;
var $r818 : ref;
var i07 : int;
var $i114 : int;
var $r616 : ref;
Block23:
	r08 := __this;
	i07 := $param_0;
	 goto Block24;
	 //  @line: 24
Block24:
	 goto Block27, Block25;
	 //  @line: 24
Block27:
	 //  @line: 24
	 assume ($negInt(($neint((i07), (0))))==1);
	 return;
	 //  @line: 24
Block25:
	 assume ($neint((i07), (0))==1);
	 goto Block26;
	 //  @line: 27
Block26:
	 goto Block28, Block30;
	 //  @line: 27
Block28:
	 assume ($leint((i07), (0))==1);
	 goto Block29;
	 //  @line: 27
Block30:
	 //  @line: 27
	 assume ($negInt(($leint((i07), (0))))==1);
	 goto Block31;
	 //  @line: 38
Block29:
	 goto Block39, Block41;
	 //  @line: 49
Block31:
	 assert ($neref((r08), ($null))==1);
	 //  @line: 49
	$r616 := $HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 goto Block32;
	 //  @line: 38
Block39:
	 assume ($geint((i07), (0))==1);
	 goto Block40;
	 //  @line: 38
Block41:
	 //  @line: 38
	 assume ($negInt(($geint((i07), (0))))==1);
	 assert ($neref((r08), ($null))==1);
	 //  @line: 49
	$r19 := $HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 goto Block42;
	 //  @line: 49
Block32:
	 goto Block34, Block33;
	 //  @line: 49
Block40:
	 return;
	 //  @line: 49
Block42:
	 goto Block43, Block44;
	 //  @line: 49
Block34:
	 //  @line: 49
	 assume ($negInt(($eqref(($r616), ($null))))==1);
	 assert ($neref((r08), ($null))==1);
	 //  @line: 28
	r1122 := $HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 assert ($neref((r08), ($null))==1);
	 //  @line: 29
	$r717 := $HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 goto Block35;
	 //  @line: 49
Block33:
	 assume ($eqref(($r616), ($null))==1);
	 goto Block29;
	 //  @line: 49
Block43:
	 assume ($eqref(($r19), ($null))==1);
	 goto Block40;
	 //  @line: 49
Block44:
	 //  @line: 49
	 assume ($negInt(($eqref(($r19), ($null))))==1);
	 assert ($neref((r08), ($null))==1);
	 //  @line: 39
	r1223 := $HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 assert ($neref((r08), ($null))==1);
	 //  @line: 40
	$r211 := $HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 goto Block45;
	 //  @line: 29
Block35:
	 goto Block36, Block38;
	 //  @line: 40
Block45:
	 goto Block48, Block46;
	 //  @line: 29
Block36:
	 assume ($eqref(($r717), ($null))==1);
	 goto Block37;
	 //  @line: 29
Block38:
	 //  @line: 29
	 assume ($negInt(($eqref(($r717), ($null))))==1);
	 assert ($neref((r08), ($null))==1);
	 //  @line: 30
	$r1021 := $HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 assert ($neref(($r1021), ($null))==1);
	 //  @line: 30
	$HeapVar[$r1021, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255] := r1122;
	 goto Block37;
	 //  @line: 40
Block48:
	 //  @line: 40
	 assume ($negInt(($eqref(($r211), ($null))))==1);
	 assert ($neref((r08), ($null))==1);
	 //  @line: 41
	$r515 := $HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 assert ($neref(($r515), ($null))==1);
	 //  @line: 41
	$HeapVar[$r515, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254] := r1223;
	 goto Block47;
	 //  @line: 40
Block46:
	 assume ($eqref(($r211), ($null))==1);
	 goto Block47;
	 //  @line: 32
Block37:
	 assert ($neref((r08), ($null))==1);
	 //  @line: 32
	$r818 := $HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 assert ($neref((r1122), ($null))==1);
	 //  @line: 32
	$HeapVar[r1122, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254] := $r818;
	 assert ($neref((r1122), ($null))==1);
	 //  @line: 33
	$r919 := $HeapVar[r1122, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 assert ($neref((r08), ($null))==1);
	 //  @line: 33
	$HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255] := $r919;
	 assert ($neref((r1122), ($null))==1);
	 //  @line: 34
	$HeapVar[r1122, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255] := r08;
	 assert ($neref((r08), ($null))==1);
	 //  @line: 35
	$HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254] := r1122;
	 //  @line: 36
	$i220 := $subint((i07), (1));
	 assert ($neref((r08), ($null))==1);
	 //  @line: 36
	 call void$DoublyLinkedList.DoublyLinkedList$move$2230((r08), ($i220));
	 goto Block29;
	 //  @line: 43
Block47:
	 assert ($neref((r08), ($null))==1);
	 //  @line: 43
	$r312 := $HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 assert ($neref((r1223), ($null))==1);
	 //  @line: 43
	$HeapVar[r1223, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255] := $r312;
	 assert ($neref((r1223), ($null))==1);
	 //  @line: 44
	$r413 := $HeapVar[r1223, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 assert ($neref((r08), ($null))==1);
	 //  @line: 44
	$HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254] := $r413;
	 assert ($neref((r1223), ($null))==1);
	 //  @line: 45
	$HeapVar[r1223, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254] := r08;
	 assert ($neref((r08), ($null))==1);
	 //  @line: 46
	$HeapVar[r08, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255] := r1223;
	 //  @line: 47
	$i114 := $subint((i07), (1));
	 assert ($neref((r08), ($null))==1);
	 //  @line: 47
	 call void$DoublyLinkedList.DoublyLinkedList$move$2230((r08), ($i114));
	 goto Block40;
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


	 //  @line: 55
// <DoublyLinkedList.DoublyLinkedList: DoublyLinkedList.DoublyLinkedList getR(int)>
procedure DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$getR$2232(__this : ref, $param_0 : int) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r029 : ref;
var $i131 : int;
var $r333 : ref;
var $r232 : ref;
var i028 : int;
var $r130 : ref;
Block50:
	r029 := __this;
	i028 := $param_0;
	 goto Block51;
	 //  @line: 56
Block51:
	 goto Block52, Block54;
	 //  @line: 56
Block52:
	 assume ($eqint((i028), (0))==1);
	 goto Block53;
	 //  @line: 56
Block54:
	 //  @line: 56
	 assume ($negInt(($eqint((i028), (0))))==1);
	 assert ($neref((r029), ($null))==1);
	 //  @line: 57
	$r130 := $HeapVar[r029, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 goto Block55;
	 //  @line: 57
Block53:
	 //  @line: 57
	__ret := r029;
	 return;
	 //  @line: 57
Block55:
	 goto Block56, Block58;
	 //  @line: 57
Block56:
	 assume ($neref(($r130), ($null))==1);
	 goto Block57;
	 //  @line: 57
Block58:
	 //  @line: 57
	 assume ($negInt(($neref(($r130), ($null))))==1);
	 goto Block53;
	 //  @line: 59
Block57:
	 assert ($neref((r029), ($null))==1);
	 //  @line: 59
	$r232 := $HeapVar[r029, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 goto Block59;
	 //  @line: 59
Block59:
	 //  @line: 59
	$i131 := $subint((i028), (1));
	 assert ($neref(($r232), ($null))==1);
	 //  @line: 59
	 call $r333 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$getR$2232(($r232), ($i131));
	 //  @line: 59
	__ret := $r333;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 67
// <DoublyLinkedList.DoublyLinkedList: DoublyLinkedList.DoublyLinkedList findR(int)>
procedure DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$findR$2234(__this : ref, $param_0 : int) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var i040 : int;
var $r344 : ref;
var r039 : ref;
var $i141 : int;
var $r243 : ref;
var $r142 : ref;
Block61:
	r039 := __this;
	i040 := $param_0;
	 assert ($neref((r039), ($null))==1);
	 //  @line: 68
	$i141 := $HeapVar[r039, int$DoublyLinkedList.DoublyLinkedList$value0];
	 goto Block62;
	 //  @line: 68
Block62:
	 goto Block63, Block65;
	 //  @line: 68
Block63:
	 assume ($neint(($i141), (i040))==1);
	 goto Block64;
	 //  @line: 68
Block65:
	 //  @line: 68
	 assume ($negInt(($neint(($i141), (i040))))==1);
	 //  @line: 69
	__ret := r039;
	 return;
	 //  @line: 71
Block64:
	 assert ($neref((r039), ($null))==1);
	 //  @line: 71
	$r142 := $HeapVar[r039, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 goto Block66;
	 //  @line: 71
Block66:
	 goto Block67, Block69;
	 //  @line: 71
Block67:
	 assume ($eqref(($r142), ($null))==1);
	 goto Block68;
	 //  @line: 71
Block69:
	 //  @line: 71
	 assume ($negInt(($eqref(($r142), ($null))))==1);
	 assert ($neref((r039), ($null))==1);
	 //  @line: 72
	$r243 := $HeapVar[r039, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 assert ($neref(($r243), ($null))==1);
	 //  @line: 72
	 call $r344 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$findR$2234(($r243), (i040));
	 //  @line: 72
	__ret := $r344;
	 return;
	 //  @line: 74
Block68:
	 //  @line: 74
	__ret := $null;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 62
// <DoublyLinkedList.DoublyLinkedList: DoublyLinkedList.DoublyLinkedList find(int)>
procedure DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$find$2233(__this : ref, $param_0 : int) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r034 : ref;
var i037 : int;
var r136 : ref;
var $r238 : ref;
Block60:
	r034 := __this;
	i037 := $param_0;
	 assert ($neref((r034), ($null))==1);
	 //  @line: 63
	 call r136 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$getFirst$2229((r034));
	 assert ($neref((r136), ($null))==1);
	 //  @line: 64
	 call $r238 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$findR$2234((r136), (i037));
	 //  @line: 64
	__ret := $r238;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


	 //  @line: 106
// <DoublyLinkedList.DoublyLinkedList: DoublyLinkedList.DoublyLinkedList createList()>
procedure DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$createList$2238() returns (__ret : ref)
  modifies $HeapVar;
 {
var i068 : int;
var r071 : ref;
var i275 : int;
var r274 : ref;
var $r172 : ref;
var $i173 : int;
	 //  @line: 107
Block93:
	 //  @line: 107
	 call i068 := int$DoublyLinkedList.Random$random$2242();
	 //  @line: 108
	r274 := $null;
	 //  @line: 109
	i275 := 0;
	 goto Block94;
	 //  @line: 109
Block94:
	 goto Block97, Block95;
	 //  @line: 109
Block97:
	 //  @line: 109
	 assume ($negInt(($geint((i275), (i068))))==1);
	 //  @line: 110
	r071 := r274;
	 //  @line: 111
	$r172 := $newvariable((98));
	 assume ($neref(($newvariable((98))), ($null))==1);
	 //  @line: 111
	 call $i173 := int$DoublyLinkedList.Random$random$2242();
	 assert ($neref(($r172), ($null))==1);
	 //  @line: 111
	 call void$DoublyLinkedList.DoublyLinkedList$$la$init$ra$$2228(($r172), ($i173));
	 //  @line: 111
	r274 := $r172;
	 assert ($neref((r274), ($null))==1);
	 //  @line: 112
	$HeapVar[r274, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254] := r071;
	 goto Block99;
	 //  @line: 109
Block95:
	 assume ($geint((i275), (i068))==1);
	 goto Block96;
	 //  @line: 113
Block99:
	 goto Block102, Block100;
	 //  @line: 118
Block96:
	 //  @line: 118
	__ret := r274;
	 return;
	 //  @line: 113
Block102:
	 //  @line: 113
	 assume ($negInt(($eqref((r071), ($null))))==1);
	 assert ($neref((r071), ($null))==1);
	 //  @line: 114
	$HeapVar[r071, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255] := r274;
	 goto Block101;
	 //  @line: 113
Block100:
	 assume ($eqref((r071), ($null))==1);
	 goto Block101;
	 //  @line: 109
Block101:
	 //  @line: 109
	i275 := $addint((i275), (1));
	 goto Block94;
}


	 //  @line: 6
// <DoublyLinkedList.Random: int random()>
procedure int$DoublyLinkedList.Random$random$2242() returns (__ret : int)
  modifies $stringSize, int$DoublyLinkedList.Random$index0;
 {
var $i084 : int;
var $i490 : int;
var $r183 : [int]ref;
var $i389 : int;
var $r287 : [int]ref;
var $i286 : int;
var r088 : ref;
var $i591 : int;
var $i185 : int;
	 //  @line: 7
Block106:
	 //  @line: 7
	$r183 := java.lang.String$lp$$rp$$DoublyLinkedList.Random$args256;
	 //  @line: 7
	$i185 := $refArrSize[$r183[$arrSizeIdx]];
	 //  @line: 7
	$i084 := int$DoublyLinkedList.Random$index0;
	 goto Block107;
	 //  @line: 7
Block107:
	 goto Block110, Block108;
	 //  @line: 7
Block110:
	 //  @line: 7
	 assume ($negInt(($gtint(($i185), ($i084))))==1);
	 //  @line: 8
	__ret := 0;
	 return;
	 //  @line: 7
Block108:
	 assume ($gtint(($i185), ($i084))==1);
	 goto Block109;
	 //  @line: 10
Block109:
	 //  @line: 10
	$r287 := java.lang.String$lp$$rp$$DoublyLinkedList.Random$args256;
	 goto Block111;
	 //  @line: 10
Block111:
	 //  @line: 10
	$i286 := int$DoublyLinkedList.Random$index0;
	 assert ($geint(($i286), (0))==1);
	 assert ($ltint(($i286), ($refArrSize[$r287[$arrSizeIdx]]))==1);
	 //  @line: 10
	r088 := $r287[$i286];
	 //  @line: 11
	$i389 := int$DoublyLinkedList.Random$index0;
	 //  @line: 11
	$i490 := $addint(($i389), (1));
	 //  @line: 11
	int$DoublyLinkedList.Random$index0 := $i490;
	 goto Block112;
	 //  @line: 12
Block112:
	 goto Block115, Block113;
	 //  @line: 12
Block115:
	 //  @line: 12
	 assume ($negInt(($neref((r088), ($null))))==1);
	 //  @line: 13
	__ret := 0;
	 return;
	 //  @line: 12
Block113:
	 assume ($neref((r088), ($null))==1);
	 goto Block114;
	 //  @line: 15
Block114:
	$i591 := $stringSize[r088];
	 goto Block116;
	 //  @line: 15
Block116:
	 //  @line: 15
	__ret := $i591;
	 return;
}


	 //  @line: 3
// <DoublyLinkedList.Random: void <clinit>()>
procedure void$DoublyLinkedList.Random$$la$clinit$ra$$2243()
  modifies int$DoublyLinkedList.Random$index0;
 {
	 //  @line: 4
Block117:
	 //  @line: 4
	int$DoublyLinkedList.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 94
// <DoublyLinkedList.DoublyLinkedList: DoublyLinkedList.DoublyLinkedList copyR(DoublyLinkedList.DoublyLinkedList)>
procedure DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$copyR$2237(__this : ref, $param_0 : ref) returns (__ret : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r163 : ref;
var $r359 : ref;
var $r565 : ref;
var r262 : ref;
var r060 : ref;
var $i061 : int;
var $r464 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block83:
	r060 := __this;
	r163 := $param_0;
	 //  @line: 95
	$r359 := $newvariable((84));
	 assume ($neref(($newvariable((84))), ($null))==1);
	 assert ($neref((r060), ($null))==1);
	 //  @line: 95
	$i061 := $HeapVar[r060, int$DoublyLinkedList.DoublyLinkedList$value0];
	 assert ($neref(($r359), ($null))==1);
	 //  @line: 95
	 call void$DoublyLinkedList.DoublyLinkedList$$la$init$ra$$2228(($r359), ($i061));
	 //  @line: 95
	r262 := $r359;
	 assert ($neref((r262), ($null))==1);
	 //  @line: 96
	$HeapVar[r262, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254] := r163;
	 goto Block85;
	 //  @line: 97
Block85:
	 goto Block88, Block86;
	 //  @line: 97
Block88:
	 //  @line: 97
	 assume ($negInt(($eqref((r163), ($null))))==1);
	 assert ($neref((r163), ($null))==1);
	 //  @line: 98
	$HeapVar[r163, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255] := r262;
	 goto Block87;
	 //  @line: 97
Block86:
	 assume ($eqref((r163), ($null))==1);
	 goto Block87;
	 //  @line: 100
Block87:
	 assert ($neref((r060), ($null))==1);
	 //  @line: 100
	$r464 := $HeapVar[r060, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 goto Block89;
	 //  @line: 100
Block89:
	 goto Block92, Block90;
	 //  @line: 100
Block92:
	 //  @line: 100
	 assume ($negInt(($eqref(($r464), ($null))))==1);
	 assert ($neref((r060), ($null))==1);
	 //  @line: 101
	$r565 := $HeapVar[r060, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 assert ($neref(($r565), ($null))==1);
	 //  @line: 101
	 call $freshlocal0 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$copyR$2237(($r565), (r262));
	 goto Block91;
	 //  @line: 100
Block90:
	 assume ($eqref(($r464), ($null))==1);
	 goto Block91;
	 //  @line: 103
Block91:
	 //  @line: 103
	__ret := r262;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



	 //  @line: 11
// <DoublyLinkedList.DoublyLinkedList: void <init>(int)>
procedure void$DoublyLinkedList.DoublyLinkedList$$la$init$ra$$2228(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
var i02 : int;
Block16:
	r01 := __this;
	i02 := $param_0;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 12
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 assert ($neref((r01), ($null))==1);
	 //  @line: 13
	$HeapVar[r01, int$DoublyLinkedList.DoublyLinkedList$value0] := i02;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 16
// <DoublyLinkedList.DoublyLinkedList: DoublyLinkedList.DoublyLinkedList getFirst()>
procedure DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$getFirst$2229(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r25 : ref;
var $r36 : ref;
var $r14 : ref;
var r03 : ref;
Block17:
	r03 := __this;
	 assert ($neref((r03), ($null))==1);
	 //  @line: 17
	$r14 := $HeapVar[r03, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 goto Block18;
	 //  @line: 17
Block18:
	 goto Block19, Block21;
	 //  @line: 17
Block19:
	 assume ($neref(($r14), ($null))==1);
	 goto Block20;
	 //  @line: 17
Block21:
	 //  @line: 17
	 assume ($negInt(($neref(($r14), ($null))))==1);
	 //  @line: 18
	__ret := r03;
	 return;
	 //  @line: 20
Block20:
	 assert ($neref((r03), ($null))==1);
	 //  @line: 20
	$r25 := $HeapVar[r03, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 goto Block22;
	 //  @line: 20
Block22:
	 assert ($neref(($r25), ($null))==1);
	 //  @line: 20
	 call $r36 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$getFirst$2229(($r25));
	 //  @line: 20
	__ret := $r36;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 1
// <DoublyLinkedList.Random: void <init>()>
procedure void$DoublyLinkedList.Random$$la$init$ra$$2241(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r082 : ref;
Block105:
	r082 := __this;
	 assert ($neref((r082), ($null))==1);
	 //  @line: 2
	 call void$java.lang.Object$$la$init$ra$$28((r082));
	 return;
}


	 //  @line: 8
// <DoublyLinkedList.MainGet: void main(java.lang.String[])>
procedure void$DoublyLinkedList.MainGet$main$2240($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$DoublyLinkedList.Random$args256, $stringSize;
 {
var r077 : [int]ref;
var $i080 : int;
var r179 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block104:
	r077 := $param_0;
	 //  @line: 9
	java.lang.String$lp$$rp$$DoublyLinkedList.Random$args256 := r077;
	 //  @line: 10
	 call r179 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$createList$2238();
	 //  @line: 11
	 call $i080 := int$DoublyLinkedList.Random$random$2242();
	 assert ($neref((r179), ($null))==1);
	 //  @line: 11
	 call $freshlocal0 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$get$2231((r179), ($i080));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 51
// <DoublyLinkedList.DoublyLinkedList: DoublyLinkedList.DoublyLinkedList get(int)>
procedure DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$get$2231(__this : ref, $param_0 : int) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r125 : ref;
var $r227 : ref;
var r024 : ref;
var i026 : int;
Block49:
	r024 := __this;
	i026 := $param_0;
	 assert ($neref((r024), ($null))==1);
	 //  @line: 52
	 call $r125 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$getFirst$2229((r024));
	 assert ($neref(($r125), ($null))==1);
	 //  @line: 52
	 call $r227 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$getR$2232(($r125), (i026));
	 //  @line: 52
	__ret := $r227;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


	 //  @line: 77
// <DoublyLinkedList.DoublyLinkedList: void delete(int)>
procedure void$DoublyLinkedList.DoublyLinkedList$delete$2235(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r148 : ref;
var $r350 : ref;
var $r552 : ref;
var $r249 : ref;
var r045 : ref;
var $r754 : ref;
var $r653 : ref;
var $r451 : ref;
var i046 : int;
Block70:
	r045 := __this;
	i046 := $param_0;
	 assert ($neref((r045), ($null))==1);
	 //  @line: 78
	 call r148 := DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$find$2233((r045), (i046));
	 goto Block71;
	 //  @line: 79
Block71:
	 goto Block72, Block74;
	 //  @line: 79
Block72:
	 assume ($eqref((r148), ($null))==1);
	 goto Block73;
	 //  @line: 79
Block74:
	 //  @line: 79
	 assume ($negInt(($eqref((r148), ($null))))==1);
	 assert ($neref((r148), ($null))==1);
	 //  @line: 80
	$r249 := $HeapVar[r148, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 goto Block75;
	 //  @line: 87
Block73:
	 return;
	 //  @line: 80
Block75:
	 goto Block76, Block78;
	 //  @line: 80
Block76:
	 assume ($eqref(($r249), ($null))==1);
	 goto Block77;
	 //  @line: 80
Block78:
	 //  @line: 80
	 assume ($negInt(($eqref(($r249), ($null))))==1);
	 assert ($neref((r148), ($null))==1);
	 //  @line: 81
	$r754 := $HeapVar[r148, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 assert ($neref((r148), ($null))==1);
	 //  @line: 81
	$r653 := $HeapVar[r148, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 assert ($neref(($r754), ($null))==1);
	 //  @line: 81
	$HeapVar[$r754, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255] := $r653;
	 goto Block77;
	 //  @line: 83
Block77:
	 assert ($neref((r148), ($null))==1);
	 //  @line: 83
	$r350 := $HeapVar[r148, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 goto Block79;
	 //  @line: 83
Block79:
	 goto Block81, Block80;
	 //  @line: 83
Block81:
	 //  @line: 83
	 assume ($negInt(($eqref(($r350), ($null))))==1);
	 assert ($neref((r148), ($null))==1);
	 //  @line: 84
	$r552 := $HeapVar[r148, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$next255];
	 assert ($neref((r148), ($null))==1);
	 //  @line: 84
	$r451 := $HeapVar[r148, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254];
	 assert ($neref(($r552), ($null))==1);
	 //  @line: 84
	$HeapVar[$r552, DoublyLinkedList.DoublyLinkedList$DoublyLinkedList.DoublyLinkedList$prev254] := $r451;
	 goto Block73;
	 //  @line: 83
Block80:
	 assume ($eqref(($r350), ($null))==1);
	 goto Block73;
}


