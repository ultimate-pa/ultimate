type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var List$List$tail254 : Field ref;
var int$List$head0 : Field int;
var java.lang.String$lp$$rp$$Random$args255 : [int]ref;
var int$Random$index0 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2235(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r030 : ref;
Block39:
	r030 := __this;
	 assert ($neref((r030), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r030));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2237()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block46:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2236() returns (__ret : int)
  modifies $stringSize, int$Random$index0;
 {
var r036 : ref;
var $i133 : int;
var $r131 : [int]ref;
var $i337 : int;
var $i539 : int;
var $i234 : int;
var $r235 : [int]ref;
var $i438 : int;
var $i032 : int;
	 //  @line: 6
Block40:
	 //  @line: 6
	$i133 := int$Random$index0;
	 //  @line: 6
	$r131 := java.lang.String$lp$$rp$$Random$args255;
	 //  @line: 6
	$i032 := $refArrSize[$r131[$arrSizeIdx]];
	 goto Block41;
	 //  @line: 6
Block41:
	 goto Block42, Block44;
	 //  @line: 6
Block42:
	 assume ($ltint(($i133), ($i032))==1);
	 goto Block43;
	 //  @line: 6
Block44:
	 //  @line: 6
	 assume ($negInt(($ltint(($i133), ($i032))))==1);
	 //  @line: 7
	__ret := 0;
	 return;
	 //  @line: 9
Block43:
	 //  @line: 9
	$r235 := java.lang.String$lp$$rp$$Random$args255;
	 goto Block45;
	 //  @line: 9
Block45:
	 //  @line: 9
	$i234 := int$Random$index0;
	 assert ($geint(($i234), (0))==1);
	 assert ($ltint(($i234), ($refArrSize[$r235[$arrSizeIdx]]))==1);
	 //  @line: 9
	r036 := $r235[$i234];
	 //  @line: 10
	$i337 := int$Random$index0;
	 //  @line: 10
	$i438 := $addint(($i337), (1));
	 //  @line: 10
	int$Random$index0 := $i438;
	$i539 := $stringSize[r036];
	 //  @line: 11
	__ret := $i539;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 14
// <List: List mk(int)>
procedure List$List$mk$2234($param_0 : int) returns (__ret : ref) {
var $r026 : ref;
var $i127 : int;
var i228 : int;
var $i025 : int;
var r129 : ref;
Block32:
	i228 := $param_0;
	 //  @line: 15
	r129 := $null;
	 goto Block33;
	 //  @line: 17
Block33:
	 //  @line: 17
	$i025 := i228;
	 //  @line: 17
	i228 := $addint((i228), (-1));
	 goto Block34;
	 //  @line: 17
Block34:
	 goto Block37, Block35;
	 //  @line: 17
Block37:
	 //  @line: 17
	 assume ($negInt(($leint(($i025), (0))))==1);
	 //  @line: 18
	$r026 := $newvariable((38));
	 assume ($neref(($newvariable((38))), ($null))==1);
	 //  @line: 18
	 call $i127 := int$Random$random$2236();
	 assert ($neref(($r026), ($null))==1);
	 //  @line: 18
	 call void$List$$la$init$ra$$2232(($r026), ($i127), (r129));
	 //  @line: 18
	r129 := $r026;
	 goto Block33;
	 //  @line: 17
Block35:
	 assume ($leint(($i025), (0))==1);
	 goto Block36;
	 //  @line: 20
Block36:
	 //  @line: 20
	__ret := r129;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



	 //  @line: 4
// <List: void <init>(int,List)>
procedure void$List$$la$init$ra$$2232(__this : ref, $param_0 : int, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r120 : ref;
var i019 : int;
var r018 : ref;
Block30:
	r018 := __this;
	i019 := $param_0;
	r120 := $param_1;
	 assert ($neref((r018), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r018));
	 assert ($neref((r018), ($null))==1);
	 //  @line: 6
	$HeapVar[r018, int$List$head0] := i019;
	 assert ($neref((r018), ($null))==1);
	 //  @line: 7
	$HeapVar[r018, List$List$tail254] := r120;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// <FactSLR: void <init>()>
procedure void$FactSLR$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 10
// <List: List getTail()>
procedure List$List$getTail$2233(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r122 : ref;
var r021 : ref;
Block31:
	r021 := __this;
	 assert ($neref((r021), ($null))==1);
	 //  @line: 11
	$r122 := $HeapVar[r021, List$List$tail254];
	 //  @line: 11
	__ret := $r122;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 3
// <FactSLR: int factorial(int)>
procedure int$FactSLR$factorial$2229($param_0 : int) returns (__ret : int) {
var i02 : int;
var $i13 : int;
var $i35 : int;
var $i24 : int;
Block17:
	i02 := $param_0;
	 goto Block18;
	 //  @line: 4
Block18:
	 goto Block21, Block19;
	 //  @line: 4
Block21:
	 //  @line: 4
	 assume ($negInt(($geint((i02), (1))))==1);
	 //  @line: 5
	__ret := 1;
	 return;
	 //  @line: 4
Block19:
	 assume ($geint((i02), (1))==1);
	 goto Block20;
	 //  @line: 5
Block20:
	 //  @line: 5
	$i13 := $subint((i02), (1));
	 goto Block22;
	 //  @line: 5
Block22:
	 //  @line: 5
	 call $i24 := int$FactSLR$factorial$2229(($i13));
	 //  @line: 5
	$i35 := $mulint((i02), ($i24));
	 //  @line: 5
	__ret := $i35;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 8
// <FactSLR: int doSum(List)>
procedure int$FactSLR$doSum$2230($param_0 : ref) returns (__ret : int) {
var $i311 : int;
var $i07 : int;
var r06 : ref;
var $r19 : ref;
var $i210 : int;
var $i18 : int;
Block23:
	r06 := $param_0;
	 goto Block24;
	 //  @line: 9
Block24:
	 goto Block27, Block25;
	 //  @line: 9
Block27:
	 //  @line: 9
	 assume ($negInt(($neref((r06), ($null))))==1);
	 //  @line: 10
	__ret := 0;
	 return;
	 //  @line: 9
Block25:
	 assume ($neref((r06), ($null))==1);
	 goto Block26;
	 //  @line: 10
Block26:
	 assert ($neref((r06), ($null))==1);
	 //  @line: 10
	$i07 := $HeapVar[r06, int$List$head0];
	 goto Block28;
	 //  @line: 10
Block28:
	 //  @line: 10
	 call $i18 := int$FactSLR$factorial$2229(($i07));
	 assert ($neref((r06), ($null))==1);
	 //  @line: 10
	$r19 := $HeapVar[r06, List$List$tail254];
	 //  @line: 10
	 call $i210 := int$FactSLR$doSum$2230(($r19));
	 //  @line: 10
	$i311 := $addint(($i18), ($i210));
	 //  @line: 10
	__ret := $i311;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 13
// <FactSLR: void main(java.lang.String[])>
procedure void$FactSLR$main$2231($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$Random$args255;
 {
var $i014 : int;
var r012 : [int]ref;
var $i115 : int;

 //temp local variables 
var $freshlocal0 : ref;

Block29:
	r012 := $param_0;
	 //  @line: 14
	java.lang.String$lp$$rp$$Random$args255 := r012;
	 //  @line: 15
	 call $i014 := int$Random$random$2236();
	 //  @line: 15
	$i115 := $mulint((3), ($i014));
	 //  @line: 15
	 call $freshlocal0 := List$List$mk$2234(($i115));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


