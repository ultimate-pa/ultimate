type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.String$lp$$rp$$SharingAnalysisRec.Random$args254 : [int]ref;
var int$SharingAnalysisRec.Random$index0 : int;
var int$SharingAnalysisRec.SharingAnalysisRec$val0 : Field int;
var SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$field296 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 7
// <SharingAnalysisRec.Random: int random()>
procedure int$SharingAnalysisRec.Random$random$2229() returns (__ret : int)
  modifies $stringSize, int$SharingAnalysisRec.Random$index0;
 {
var $i37 : int;
var $i15 : int;
var r04 : ref;
var $i02 : int;
var $r13 : [int]ref;
var $i26 : int;
	 //  @line: 8
Block17:
	 //  @line: 8
	$r13 := java.lang.String$lp$$rp$$SharingAnalysisRec.Random$args254;
	 //  @line: 8
	$i02 := int$SharingAnalysisRec.Random$index0;
	 assert ($geint(($i02), (0))==1);
	 assert ($ltint(($i02), ($refArrSize[$r13[$arrSizeIdx]]))==1);
	 //  @line: 8
	r04 := $r13[$i02];
	 //  @line: 9
	$i15 := int$SharingAnalysisRec.Random$index0;
	 //  @line: 9
	$i26 := $addint(($i15), (1));
	 //  @line: 9
	int$SharingAnalysisRec.Random$index0 := $i26;
	$i37 := $stringSize[r04];
	 //  @line: 10
	__ret := $i37;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


	 //  @line: 2
// <SharingAnalysisRec.SharingAnalysisRec: void <init>()>
procedure void$SharingAnalysisRec.SharingAnalysisRec$$la$init$ra$$2453(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r08 : ref;
Block19:
	r08 := __this;
	 assert ($neref((r08), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r08));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



	 //  @line: 2
// <SharingAnalysisRec.Random: void <init>()>
procedure void$SharingAnalysisRec.Random$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 4
// <SharingAnalysisRec.Random: void <clinit>()>
procedure void$SharingAnalysisRec.Random$$la$clinit$ra$$2230()
  modifies int$SharingAnalysisRec.Random$index0;
 {
	 //  @line: 5
Block18:
	 //  @line: 5
	int$SharingAnalysisRec.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 31
// <SharingAnalysisRec.SharingAnalysisRec: SharingAnalysisRec.SharingAnalysisRec appendNewList(int)>
procedure SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$appendNewList$2456(__this : ref, $param_0 : int) returns (__ret : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r023 : ref;
var $r430 : ref;
var $r329 : ref;
var i026 : int;
var $r124 : ref;
var $i227 : int;
var $i125 : int;
var $r228 : ref;
Block29:
	r023 := __this;
	i026 := $param_0;
	 //  @line: 32
	$r124 := $newvariable((30));
	 assume ($neref(($newvariable((30))), ($null))==1);
	 assert ($neref(($r124), ($null))==1);
	 //  @line: 32
	 call void$SharingAnalysisRec.SharingAnalysisRec$$la$init$ra$$2453(($r124));
	 assert ($neref((r023), ($null))==1);
	 //  @line: 32
	$HeapVar[r023, SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$field296] := $r124;
	 //  @line: 33
	 call $i125 := int$SharingAnalysisRec.Random$random$2229();
	 assert ($neref((r023), ($null))==1);
	 //  @line: 33
	$HeapVar[r023, int$SharingAnalysisRec.SharingAnalysisRec$val0] := $i125;
	 goto Block31;
	 //  @line: 34
Block31:
	 goto Block34, Block32;
	 //  @line: 34
Block34:
	 //  @line: 34
	 assume ($negInt(($gtint((i026), (1))))==1);
	 assert ($neref((r023), ($null))==1);
	 //  @line: 35
	$r430 := $HeapVar[r023, SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$field296];
	 //  @line: 35
	__ret := $r430;
	 return;
	 //  @line: 34
Block32:
	 assume ($gtint((i026), (1))==1);
	 goto Block33;
	 //  @line: 37
Block33:
	 assert ($neref((r023), ($null))==1);
	 //  @line: 37
	$r228 := $HeapVar[r023, SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$field296];
	 goto Block35;
	 //  @line: 37
Block35:
	 //  @line: 37
	$i227 := $subint((i026), (1));
	 assert ($neref(($r228), ($null))==1);
	 //  @line: 37
	 call $r329 := SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$appendNewList$2456(($r228), ($i227));
	 //  @line: 37
	__ret := $r329;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 16
// <SharingAnalysisRec.SharingAnalysisRec: void copy(SharingAnalysisRec.SharingAnalysisRec,SharingAnalysisRec.SharingAnalysisRec)>
procedure void$SharingAnalysisRec.SharingAnalysisRec$copy$2455($param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
 {
var $r318 : ref;
var r121 : ref;
var $i020 : int;
var r017 : ref;
var r219 : ref;
var $r422 : ref;
Block22:
	r017 := $param_0;
	r121 := $param_1;
	 goto Block23;
	 //  @line: 17
Block23:
	 goto Block24, Block26;
	 //  @line: 17
Block24:
	 assume ($neref((r017), ($null))==1);
	 goto Block25;
	 //  @line: 17
Block26:
	 //  @line: 17
	 assume ($negInt(($neref((r017), ($null))))==1);
	 return;
	 //  @line: 20
Block25:
	 //  @line: 20
	$r318 := $newvariable((27));
	 assume ($neref(($newvariable((27))), ($null))==1);
	 goto Block28;
	 //  @line: 20
Block28:
	 assert ($neref(($r318), ($null))==1);
	 //  @line: 20
	 call void$SharingAnalysisRec.SharingAnalysisRec$$la$init$ra$$2453(($r318));
	 //  @line: 20
	r219 := $r318;
	 assert ($neref((r017), ($null))==1);
	 //  @line: 21
	$i020 := $HeapVar[r017, int$SharingAnalysisRec.SharingAnalysisRec$val0];
	 assert ($neref((r219), ($null))==1);
	 //  @line: 21
	$HeapVar[r219, int$SharingAnalysisRec.SharingAnalysisRec$val0] := $i020;
	 assert ($neref((r121), ($null))==1);
	 //  @line: 22
	$HeapVar[r121, SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$field296] := r219;
	 assert ($neref((r017), ($null))==1);
	 //  @line: 23
	$r422 := $HeapVar[r017, SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$field296];
	 //  @line: 23
	 call void$SharingAnalysisRec.SharingAnalysisRec$copy$2455(($r422), (r219));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 7
// <SharingAnalysisRec.SharingAnalysisRec: void main(java.lang.String[])>
procedure void$SharingAnalysisRec.SharingAnalysisRec$main$2454($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$SharingAnalysisRec.Random$args254, $HeapVar;
 {
var r09 : [int]ref;
var $r410 : ref;
var r316 : ref;
var $i014 : int;
var r111 : ref;
var r213 : ref;
Block20:
	r09 := $param_0;
	 //  @line: 8
	java.lang.String$lp$$rp$$SharingAnalysisRec.Random$args254 := r09;
	 //  @line: 9
	$r410 := $newvariable((21));
	 assume ($neref(($newvariable((21))), ($null))==1);
	 assert ($neref(($r410), ($null))==1);
	 //  @line: 9
	 call void$SharingAnalysisRec.SharingAnalysisRec$$la$init$ra$$2453(($r410));
	 //  @line: 9
	r111 := $r410;
	 assert ($neref((r111), ($null))==1);
	 //  @line: 10
	 call r213 := SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$appendNewList$2456((r111), (1));
	 //  @line: 11
	 call $i014 := int$SharingAnalysisRec.Random$random$2229();
	 assert ($neref((r213), ($null))==1);
	 //  @line: 11
	 call r316 := SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$appendNewList$2456((r213), ($i014));
	 assert ($neref((r213), ($null))==1);
	 //  @line: 12
	$HeapVar[r213, SharingAnalysisRec.SharingAnalysisRec$SharingAnalysisRec.SharingAnalysisRec$field296] := $null;
	 //  @line: 13
	 call void$SharingAnalysisRec.SharingAnalysisRec$copy$2455((r111), (r316));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


