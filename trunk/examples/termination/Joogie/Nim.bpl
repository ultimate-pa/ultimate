type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var $fresh10 : int;
var $fresh3 : int;
var $fresh8 : int;
var $fresh2 : [int]int;
var int$Random$index0 : int;
var $fresh6 : int;
var $fresh4 : int;
var $fresh1 : int;
var java.lang.String$lp$$rp$$Random$args254 : [int]ref;
var $fresh2 : int;
var $fresh5 : int;
var $fresh11 : int;
var $fresh1 : [int][int]int;
var $fresh7 : int;
var $fresh9 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2241()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block127:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2240() returns (__ret : int)
  modifies $stringSize, int$Random$index0;
 {
var $i0123 : int;
var $i3128 : int;
var $i4129 : int;
var $i1124 : int;
var $r2126 : [int]ref;
var $i2125 : int;
var $r1122 : [int]ref;
var $i5130 : int;
var r0127 : ref;
	 //  @line: 6
Block121:
	 //  @line: 6
	$i1124 := int$Random$index0;
	 //  @line: 6
	$r1122 := java.lang.String$lp$$rp$$Random$args254;
	 //  @line: 6
	$i0123 := $refArrSize[$r1122[$arrSizeIdx]];
	 goto Block122;
	 //  @line: 6
Block122:
	 goto Block125, Block123;
	 //  @line: 6
Block125:
	 //  @line: 6
	 assume ($negInt(($ltint(($i1124), ($i0123))))==1);
	 //  @line: 7
	__ret := 0;
	 return;
	 //  @line: 6
Block123:
	 assume ($ltint(($i1124), ($i0123))==1);
	 goto Block124;
	 //  @line: 9
Block124:
	 //  @line: 9
	$r2126 := java.lang.String$lp$$rp$$Random$args254;
	 goto Block126;
	 //  @line: 9
Block126:
	 //  @line: 9
	$i2125 := int$Random$index0;
	 assert ($geint(($i2125), (0))==1);
	 assert ($ltint(($i2125), ($refArrSize[$r2126[$arrSizeIdx]]))==1);
	 //  @line: 9
	r0127 := $r2126[$i2125];
	 //  @line: 10
	$i3128 := int$Random$index0;
	 //  @line: 10
	$i4129 := $addint(($i3128), (1));
	 //  @line: 10
	int$Random$index0 := $i4129;
	$i5130 := $stringSize[r0127];
	 //  @line: 11
	__ret := $i5130;
	 return;
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



	 //  @line: 45
// <Nim: int[][] decomposition(int[])>
procedure int$lp$$rp$$lp$$rp$$Nim$decomposition$2233($param_0 : [int]int) returns (__ret : [int][int]int)
  modifies $refArrSize;
 {
var $r239 : [int]int;
var r031 : [int]int;
var $i237 : int;
var i440 : int;
var $i338 : int;
var $i134 : int;
var i033 : int;
var r135 : [int][int]int;
Block45:
	r031 := $param_0;
	 //  @line: 46
	 call i033 := int$Nim$getBinaryLength$2232((r031));
	 //  @line: 47
	$i134 := $intArrSize[r031[$arrSizeIdx]];
	 //  @line: 47
	r135 := $fresh1;
	$fresh1 := $i134;
	 assume ($negInt(($fresh2))==1);
	 //  @line: 48
	i440 := 0;
	 goto Block47;
	 //  @line: 48
Block47:
	 //  @line: 48
	$i237 := $intArrSize[r031[$arrSizeIdx]];
	 goto Block48;
	 //  @line: 48
Block48:
	 goto Block51, Block49;
	 //  @line: 48
Block51:
	 //  @line: 48
	 assume ($negInt(($geint((i440), ($i237))))==1);
	 assert ($geint((i440), (0))==1);
	 assert ($ltint((i440), ($intArrSize[r031[$arrSizeIdx]]))==1);
	 //  @line: 49
	$i338 := r031[i440];
	 //  @line: 49
	 call $r239 := int$lp$$rp$$Nim$decimalToBinary$2231(($i338), (i033));
	 assert ($geint((i440), (0))==1);
	 assert ($ltint((i440), ($fresh3))==1);
	 //  @line: 49
	r135[i440] := $r239;
	 //  @line: 48
	i440 := $addint((i440), (1));
	 goto Block47;
	 //  @line: 48
Block49:
	 assume ($geint((i440), ($i237))==1);
	 goto Block50;
	 //  @line: 51
Block50:
	 //  @line: 51
	__ret := r135;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2239(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0121 : ref;
Block120:
	r0121 := __this;
	 assert ($neref((r0121), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r0121));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 71
// <Nim: int[] loserPick(int[])>
procedure int$lp$$rp$$Nim$loserPick$2236($param_0 : [int]int) returns (__ret : [int]int)
  modifies $intArrSize;
 {
var $i062 : int;
var r164 : [int]int;
var r061 : [int]int;
var $r263 : [int]int;
var i165 : int;
Block65:
	r061 := $param_0;
	 //  @line: 72
	i165 := 0;
	 goto Block66;
	 //  @line: 73
Block66:
	 assert ($geint((i165), (0))==1);
	 assert ($ltint((i165), ($intArrSize[r061[$arrSizeIdx]]))==1);
	 //  @line: 73
	$i062 := r061[i165];
	 goto Block67;
	 //  @line: 73
Block67:
	 goto Block70, Block68;
	 //  @line: 73
Block70:
	 //  @line: 73
	 assume ($negInt(($neint(($i062), (0))))==1);
	 //  @line: 74
	i165 := $addint((i165), (1));
	 goto Block66;
	 //  @line: 73
Block68:
	 assume ($neint(($i062), (0))==1);
	 goto Block69;
	 //  @line: 76
Block69:
	 //  @line: 76
	$r263 := $reftointarr(($newvariable((71))));
	$intArrSize[$reftointarr(($newvariable((71))))[$arrSizeIdx]] := 2;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((71))))), ($intArrNull))))==1);
	 goto Block72;
	 //  @line: 76
Block72:
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r263[$arrSizeIdx]]))==1);
	 //  @line: 76
	$r263[0] := i165;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r263[$arrSizeIdx]]))==1);
	 //  @line: 76
	$r263[1] := 1;
	 //  @line: 76
	r164 := $r263;
	 //  @line: 77
	__ret := r164;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// <Nim: void <init>()>
procedure void$Nim$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 22
// <Nim: int[] decimalToBinary(int,int)>
procedure int$lp$$rp$$Nim$decimalToBinary$2231($param_0 : int, $param_1 : int) returns (__ret : [int]int)
  modifies $intArrSize;
 {
var i118 : int;
var r019 : [int]int;
var i020 : int;
Block28:
	i020 := $param_0;
	i118 := $param_1;
	 //  @line: 23
	r019 := $reftointarr(($newvariable((29))));
	$intArrSize[$reftointarr(($newvariable((29))))[$arrSizeIdx]] := i118;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((29))))), ($intArrNull))))==1);
	 //  @line: 24
	 call void$Nim$decimalToBinaryAux$2230((i020), (0), (r019));
	 //  @line: 25
	__ret := r019;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 54
// <Nim: int[] binaryGrundy(int[][])>
procedure int$lp$$rp$$Nim$binaryGrundy$2234($param_0 : [int][int]int) returns (__ret : [int]int)
  modifies $intArrSize;
 {
var $i147 : int;
var $r242 : [int]int;
var $i350 : int;
var r041 : [int][int]int;
var r144 : [int]int;
var $r348 : [int]int;
var $i451 : int;
var $i552 : int;
var $i249 : int;
var i653 : int;
var i043 : int;
var i754 : int;
Block52:
	r041 := $param_0;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($fresh4))==1);
	 //  @line: 55
	$r242 := r041[0];
	 //  @line: 55
	i043 := $intArrSize[$r242[$arrSizeIdx]];
	 //  @line: 56
	r144 := $reftointarr(($newvariable((53))));
	$intArrSize[$reftointarr(($newvariable((53))))[$arrSizeIdx]] := i043;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((53))))), ($intArrNull))))==1);
	 //  @line: 57
	i653 := 0;
	 goto Block54;
	 //  @line: 57
Block54:
	 goto Block55, Block57;
	 //  @line: 57
Block55:
	 assume ($geint((i653), (i043))==1);
	 goto Block56;
	 //  @line: 57
Block57:
	 //  @line: 57
	 assume ($negInt(($geint((i653), (i043))))==1);
	 //  @line: 58
	i754 := 0;
	 goto Block58;
	 //  @line: 63
Block56:
	 //  @line: 63
	__ret := r144;
	 return;
	 //  @line: 58
Block58:
	 //  @line: 58
	$i147 := $fresh5;
	 goto Block59;
	 //  @line: 58
Block59:
	 goto Block62, Block60;
	 //  @line: 58
Block62:
	 //  @line: 58
	 assume ($negInt(($geint((i754), ($i147))))==1);
	 assert ($geint((i653), (0))==1);
	 assert ($ltint((i653), ($intArrSize[r144[$arrSizeIdx]]))==1);
	 //  @line: 59
	$i350 := r144[i653];
	 assert ($geint((i754), (0))==1);
	 assert ($ltint((i754), ($fresh6))==1);
	 //  @line: 59
	$r348 := r041[i754];
	 assert ($geint((i653), (0))==1);
	 assert ($ltint((i653), ($intArrSize[$r348[$arrSizeIdx]]))==1);
	 //  @line: 59
	$i249 := $r348[i653];
	 //  @line: 59
	$i451 := $addint(($i350), ($i249));
	 //  @line: 59
	$i552 := $modint(($i451), (2));
	 assert ($geint((i653), (0))==1);
	 assert ($ltint((i653), ($intArrSize[r144[$arrSizeIdx]]))==1);
	 //  @line: 59
	r144[i653] := $i552;
	 //  @line: 58
	i754 := $addint((i754), (1));
	 goto Block58;
	 //  @line: 58
Block60:
	 assume ($geint((i754), ($i147))==1);
	 goto Block61;
	 //  @line: 57
Block61:
	 //  @line: 57
	i653 := $addint((i653), (1));
	 goto Block63;
	 //  @line: 57
Block63:
	 goto Block54;
}


// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


	 //  @line: 108
// <Nim: void main(java.lang.String[])>
procedure void$Nim$main$2238($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$Random$args254, $intArrSize;
 {
var i13119 : int;
var $i7113 : int;
var $i097 : int;
var $i5110 : int;
var $i3104 : int;
var $i1100 : int;
var $i2102 : int;
var i11117 : int;
var r198 : [int]int;
var $i10116 : int;
var r2120 : [int]int;
var $i6112 : int;
var $i9115 : int;
var $i4106 : int;
var $i8114 : int;
var r096 : [int]ref;
var i12118 : int;
Block99:
	r096 := $param_0;
	 //  @line: 109
	java.lang.String$lp$$rp$$Random$args254 := r096;
	 //  @line: 110
	$i097 := $refArrSize[r096[$arrSizeIdx]];
	 goto Block100;
	 //  @line: 110
Block100:
	 goto Block103, Block101;
	 //  @line: 110
Block103:
	 //  @line: 110
	 assume ($negInt(($geint(($i097), (4))))==1);
	 return;
	 //  @line: 110
Block101:
	 assume ($geint(($i097), (4))==1);
	 goto Block102;
	 //  @line: 111
Block102:
	 //  @line: 111
	r198 := $reftointarr(($newvariable((104))));
	$intArrSize[$reftointarr(($newvariable((104))))[$arrSizeIdx]] := 4;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((104))))), ($intArrNull))))==1);
	 goto Block105;
	 //  @line: 112
Block105:
	 //  @line: 112
	 call $i1100 := int$Random$random$2240();
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[r198[$arrSizeIdx]]))==1);
	 //  @line: 112
	r198[0] := $i1100;
	 //  @line: 113
	 call $i2102 := int$Random$random$2240();
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[r198[$arrSizeIdx]]))==1);
	 //  @line: 113
	r198[1] := $i2102;
	 //  @line: 114
	 call $i3104 := int$Random$random$2240();
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[r198[$arrSizeIdx]]))==1);
	 //  @line: 114
	r198[2] := $i3104;
	 //  @line: 115
	 call $i4106 := int$Random$random$2240();
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[r198[$arrSizeIdx]]))==1);
	 //  @line: 115
	r198[3] := $i4106;
	 //  @line: 116
	i11117 := 0;
	 goto Block106;
	 //  @line: 116
Block106:
	 goto Block107, Block109;
	 //  @line: 116
Block107:
	 assume ($geint((i11117), (20))==1);
	 goto Block108;
	 //  @line: 116
Block109:
	 //  @line: 116
	 assume ($negInt(($geint((i11117), (20))))==1);
	 //  @line: 117
	i12118 := 0;
	 //  @line: 119
	i13119 := 0;
	 goto Block110;
	 //  @line: 131
Block108:
	 return;
	 //  @line: 119
Block110:
	 //  @line: 119
	$i5110 := $intArrSize[r198[$arrSizeIdx]];
	 goto Block111;
	 //  @line: 119
Block111:
	 goto Block114, Block112;
	 //  @line: 119
Block114:
	 //  @line: 119
	 assume ($negInt(($geint((i13119), ($i5110))))==1);
	 assert ($geint((i13119), (0))==1);
	 assert ($ltint((i13119), ($intArrSize[r198[$arrSizeIdx]]))==1);
	 //  @line: 121
	$i10116 := r198[i13119];
	 //  @line: 121
	i12118 := $addint((i12118), ($i10116));
	 //  @line: 119
	i13119 := $addint((i13119), (1));
	 goto Block110;
	 //  @line: 119
Block112:
	 assume ($geint((i13119), ($i5110))==1);
	 goto Block113;
	 //  @line: 124
Block113:
	 goto Block117, Block115;
	 //  @line: 124
Block117:
	 //  @line: 124
	 assume ($negInt(($gtint((i12118), (0))))==1);
	 goto Block118;
	 //  @line: 124
Block115:
	 assume ($gtint((i12118), (0))==1);
	 goto Block116;
	 //  @line: 125
Block118:
	 goto Block108;
	 //  @line: 127
Block116:
	 //  @line: 127
	 call r2120 := int$lp$$rp$$Nim$pick$2237((r198));
	 goto Block119;
	 //  @line: 129
Block119:
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[r2120[$arrSizeIdx]]))==1);
	 //  @line: 129
	$i6112 := r2120[0];
	 assert ($geint(($i6112), (0))==1);
	 assert ($ltint(($i6112), ($intArrSize[r198[$arrSizeIdx]]))==1);
	 //  @line: 129
	$i8114 := r198[$i6112];
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[r2120[$arrSizeIdx]]))==1);
	 //  @line: 129
	$i7113 := r2120[1];
	 //  @line: 129
	$i9115 := $subint(($i8114), ($i7113));
	 assert ($geint(($i6112), (0))==1);
	 assert ($ltint(($i6112), ($intArrSize[r198[$arrSizeIdx]]))==1);
	 //  @line: 129
	r198[$i6112] := $i9115;
	 //  @line: 116
	i11117 := $addint((i11117), (1));
	 goto Block106;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 29
// <Nim: int getBinaryLength(int[])>
procedure int$Nim$getBinaryLength$2232($param_0 : [int]int) returns (__ret : int) {
var r021 : [int]int;
var $i024 : int;
var i328 : int;
var i227 : int;
var $i126 : int;
var i530 : int;
var i429 : int;
Block30:
	r021 := $param_0;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[r021[$arrSizeIdx]]))==1);
	 //  @line: 30
	i227 := r021[0];
	 //  @line: 31
	i328 := 1;
	 goto Block31;
	 //  @line: 31
Block31:
	 //  @line: 31
	$i024 := $intArrSize[r021[$arrSizeIdx]];
	 goto Block32;
	 //  @line: 31
Block32:
	 goto Block33, Block35;
	 //  @line: 31
Block33:
	 assume ($geint((i328), ($i024))==1);
	 goto Block34;
	 //  @line: 31
Block35:
	 //  @line: 31
	 assume ($negInt(($geint((i328), ($i024))))==1);
	 assert ($geint((i328), (0))==1);
	 assert ($ltint((i328), ($intArrSize[r021[$arrSizeIdx]]))==1);
	 //  @line: 32
	$i126 := r021[i328];
	 goto Block36;
	 //  @line: 36
Block34:
	 //  @line: 36
	i429 := 0;
	 goto Block40;
	 //  @line: 32
Block36:
	 goto Block37, Block39;
	 //  @line: 37
Block40:
	 //  @line: 37
	i530 := 1;
	 goto Block41;
	 //  @line: 32
Block37:
	 assume ($leint(($i126), (i227))==1);
	 goto Block38;
	 //  @line: 32
Block39:
	 //  @line: 32
	 assume ($negInt(($leint(($i126), (i227))))==1);
	 assert ($geint((i328), (0))==1);
	 assert ($ltint((i328), ($intArrSize[r021[$arrSizeIdx]]))==1);
	 //  @line: 33
	i227 := r021[i328];
	 goto Block38;
	 //  @line: 38
Block41:
	 goto Block42, Block44;
	 //  @line: 31
Block38:
	 //  @line: 31
	i328 := $addint((i328), (1));
	 goto Block31;
	 //  @line: 38
Block42:
	 assume ($gtint((i530), (i227))==1);
	 goto Block43;
	 //  @line: 38
Block44:
	 //  @line: 38
	 assume ($negInt(($gtint((i530), (i227))))==1);
	 //  @line: 39
	i429 := $addint((i429), (1));
	 //  @line: 40
	i530 := $mulint((i530), (2));
	 goto Block41;
	 //  @line: 42
Block43:
	 //  @line: 42
	__ret := i429;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



	 //  @line: 4
// <Nim: int binaryToDecimal(int[])>
procedure int$Nim$binaryToDecimal$2229($param_0 : [int]int) returns (__ret : int) {
var i410 : int;
var i39 : int;
var i511 : int;
var $i17 : int;
var $i06 : int;
var $i28 : int;
var r05 : [int]int;
Block17:
	r05 := $param_0;
	 //  @line: 5
	i39 := 0;
	 //  @line: 6
	i410 := 1;
	 //  @line: 7
	i511 := 0;
	 goto Block18;
	 //  @line: 7
Block18:
	 //  @line: 7
	$i06 := $intArrSize[r05[$arrSizeIdx]];
	 goto Block19;
	 //  @line: 7
Block19:
	 goto Block22, Block20;
	 //  @line: 7
Block22:
	 //  @line: 7
	 assume ($negInt(($geint((i511), ($i06))))==1);
	 assert ($geint((i511), (0))==1);
	 assert ($ltint((i511), ($intArrSize[r05[$arrSizeIdx]]))==1);
	 //  @line: 8
	$i17 := r05[i511];
	 //  @line: 8
	$i28 := $mulint(($i17), (i410));
	 //  @line: 8
	i39 := $addint((i39), ($i28));
	 //  @line: 9
	i410 := $mulint((i410), (2));
	 //  @line: 7
	i511 := $addint((i511), (1));
	 goto Block18;
	 //  @line: 7
Block20:
	 assume ($geint((i511), ($i06))==1);
	 goto Block21;
	 //  @line: 11
Block21:
	 //  @line: 11
	__ret := i39;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 15
// <Nim: void decimalToBinaryAux(int,int,int[])>
procedure void$Nim$decimalToBinaryAux$2230($param_0 : int, $param_1 : int, $param_2 : [int]int) {
var i114 : int;
var $i417 : int;
var $i215 : int;
var r013 : [int]int;
var i012 : int;
var $i316 : int;
Block23:
	i012 := $param_0;
	i114 := $param_1;
	r013 := $param_2;
	 goto Block24;
	 //  @line: 16
Block24:
	 goto Block25, Block27;
	 //  @line: 16
Block25:
	 assume ($leint((i012), (0))==1);
	 goto Block26;
	 //  @line: 16
Block27:
	 //  @line: 16
	 assume ($negInt(($leint((i012), (0))))==1);
	 //  @line: 17
	$i215 := $modint((i012), (2));
	 assert ($geint((i114), (0))==1);
	 assert ($ltint((i114), ($intArrSize[r013[$arrSizeIdx]]))==1);
	 //  @line: 17
	r013[i114] := $i215;
	 assert ($neint((2), (0))==1);
	 //  @line: 18
	$i417 := $divint((i012), (2));
	 //  @line: 18
	$i316 := $addint((i114), (1));
	 //  @line: 18
	 call void$Nim$decimalToBinaryAux$2230(($i417), ($i316), (r013));
	 goto Block26;
	 //  @line: 20
Block26:
	 return;
}


	 //  @line: 80
// <Nim: int[] pick(int[])>
procedure int$lp$$rp$$Nim$pick$2237($param_0 : [int]int) returns (__ret : [int]int)
  modifies $intArrSize;
 {
var r995 : [int]int;
var $i173 : int;
var r168 : [int][int]int;
var $i785 : int;
var $r790 : [int]int;
var r272 : [int]int;
var $i1089 : int;
var i070 : int;
var r066 : [int]int;
var i1394 : int;
var $i480 : int;
var $i583 : int;
var $i684 : int;
var $i275 : int;
var $r687 : [int]int;
var $i988 : int;
var $i886 : int;
var i1192 : int;
var $r581 : [int]int;
var i1293 : int;
var $r891 : [int]int;
var $i378 : int;
var $r369 : [int]int;
var $r477 : [int]int;
Block73:
	r066 := $param_0;
	 //  @line: 81
	 call r168 := int$lp$$rp$$lp$$rp$$Nim$decomposition$2233((r066));
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($fresh7))==1);
	 //  @line: 82
	$r369 := r168[0];
	 //  @line: 82
	i070 := $intArrSize[$r369[$arrSizeIdx]];
	 //  @line: 83
	 call r272 := int$lp$$rp$$Nim$binaryGrundy$2234((r168));
	 //  @line: 85
	 call $i173 := int$Nim$binaryToDecimal$2229((r272));
	 goto Block74;
	 //  @line: 85
Block74:
	 goto Block75, Block77;
	 //  @line: 85
Block75:
	 assume ($neint(($i173), (0))==1);
	 goto Block76;
	 //  @line: 85
Block77:
	 //  @line: 85
	 assume ($negInt(($neint(($i173), (0))))==1);
	 //  @line: 86
	 call $r891 := int$lp$$rp$$Nim$loserPick$2236((r066));
	 //  @line: 86
	__ret := $r891;
	 return;
	 //  @line: 88
Block76:
	 //  @line: 88
	i1192 := $subint((i070), (1));
	 goto Block78;
	 //  @line: 89
Block78:
	 assert ($geint((i1192), (0))==1);
	 assert ($ltint((i1192), ($intArrSize[r272[$arrSizeIdx]]))==1);
	 //  @line: 89
	$i275 := r272[i1192];
	 goto Block79;
	 //  @line: 89
Block79:
	 goto Block80, Block82;
	 //  @line: 89
Block80:
	 assume ($neint(($i275), (0))==1);
	 goto Block81;
	 //  @line: 89
Block82:
	 //  @line: 89
	 assume ($negInt(($neint(($i275), (0))))==1);
	 //  @line: 90
	i1192 := $addint((i1192), (-1));
	 goto Block78;
	 //  @line: 92
Block81:
	 //  @line: 92
	i1293 := 0;
	 goto Block83;
	 //  @line: 93
Block83:
	 assert ($geint((i1293), (0))==1);
	 assert ($ltint((i1293), ($fresh8))==1);
	 //  @line: 93
	$r477 := r168[i1293];
	 assert ($geint((i1192), (0))==1);
	 assert ($ltint((i1192), ($intArrSize[$r477[$arrSizeIdx]]))==1);
	 //  @line: 93
	$i378 := $r477[i1192];
	 goto Block84;
	 //  @line: 93
Block84:
	 goto Block87, Block85;
	 //  @line: 93
Block87:
	 //  @line: 93
	 assume ($negInt(($neint(($i378), (0))))==1);
	 //  @line: 94
	i1293 := $addint((i1293), (1));
	 goto Block83;
	 //  @line: 93
Block85:
	 assume ($neint(($i378), (0))==1);
	 goto Block86;
	 //  @line: 96
Block86:
	 //  @line: 96
	i1394 := 0;
	 goto Block88;
	 //  @line: 96
Block88:
	 //  @line: 96
	$i480 := $intArrSize[r272[$arrSizeIdx]];
	 goto Block89;
	 //  @line: 96
Block89:
	 goto Block90, Block92;
	 //  @line: 96
Block90:
	 assume ($geint((i1394), ($i480))==1);
	 goto Block91;
	 //  @line: 96
Block92:
	 //  @line: 96
	 assume ($negInt(($geint((i1394), ($i480))))==1);
	 assert ($geint((i1394), (0))==1);
	 assert ($ltint((i1394), ($intArrSize[r272[$arrSizeIdx]]))==1);
	 //  @line: 97
	$i886 := r272[i1394];
	 goto Block93;
	 //  @line: 101
Block91:
	 //  @line: 101
	r995 := $reftointarr(($newvariable((97))));
	$intArrSize[$reftointarr(($newvariable((97))))[$arrSizeIdx]] := 2;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((97))))), ($intArrNull))))==1);
	 goto Block98;
	 //  @line: 97
Block93:
	 goto Block94, Block96;
	 //  @line: 102
Block98:
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[r995[$arrSizeIdx]]))==1);
	 //  @line: 102
	r995[0] := i1293;
	 assert ($geint((i1293), (0))==1);
	 assert ($ltint((i1293), ($intArrSize[r066[$arrSizeIdx]]))==1);
	 //  @line: 103
	$i583 := r066[i1293];
	 assert ($geint((i1293), (0))==1);
	 assert ($ltint((i1293), ($fresh11))==1);
	 //  @line: 103
	$r581 := r168[i1293];
	 //  @line: 103
	 call $i684 := int$Nim$binaryToDecimal$2229(($r581));
	 //  @line: 103
	$i785 := $subint(($i583), ($i684));
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[r995[$arrSizeIdx]]))==1);
	 //  @line: 103
	r995[1] := $i785;
	 //  @line: 105
	__ret := r995;
	 return;
	 //  @line: 97
Block94:
	 assume ($neint(($i886), (1))==1);
	 goto Block95;
	 //  @line: 97
Block96:
	 //  @line: 97
	 assume ($negInt(($neint(($i886), (1))))==1);
	 assert ($geint((i1293), (0))==1);
	 assert ($ltint((i1293), ($fresh9))==1);
	 //  @line: 98
	$r790 := r168[i1293];
	 assert ($geint((i1293), (0))==1);
	 assert ($ltint((i1293), ($fresh10))==1);
	 //  @line: 98
	$r687 := r168[i1293];
	 assert ($geint((i1394), (0))==1);
	 assert ($ltint((i1394), ($intArrSize[$r687[$arrSizeIdx]]))==1);
	 //  @line: 98
	$i988 := $r687[i1394];
	 //  @line: 98
	$i1089 := $subint((1), ($i988));
	 assert ($geint((i1394), (0))==1);
	 assert ($ltint((i1394), ($intArrSize[$r790[$arrSizeIdx]]))==1);
	 //  @line: 98
	$r790[i1394] := $i1089;
	 goto Block95;
	 //  @line: 96
Block95:
	 //  @line: 96
	i1394 := $addint((i1394), (1));
	 goto Block88;
}


// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 66
// <Nim: int Grundy(int[])>
procedure int$Nim$Grundy$2235($param_0 : [int]int) returns (__ret : int) {
var r157 : [int][int]int;
var $i059 : int;
var $r258 : [int]int;
var r055 : [int]int;
Block64:
	r055 := $param_0;
	 //  @line: 67
	 call r157 := int$lp$$rp$$lp$$rp$$Nim$decomposition$2233((r055));
	 //  @line: 68
	 call $r258 := int$lp$$rp$$Nim$binaryGrundy$2234((r157));
	 //  @line: 68
	 call $i059 := int$Nim$binaryToDecimal$2229(($r258));
	 //  @line: 68
	__ret := $i059;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


