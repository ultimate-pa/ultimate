type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.String$lp$$rp$$Random$args255 : [int]ref;
var int$IntList$value0 : Field int;
var int$Random$index0 : int;
var IntList$IntList$next254 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



	 //  @line: 3
// <ListContentTail: void main(java.lang.String[])>
procedure void$ListContentTail$main$2235($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$Random$args255, $stringSize;
 {
var $i027 : int;
var $i130 : int;
var r132 : ref;
var r024 : [int]ref;
var i233 : int;
Block40:
	r024 := $param_0;
	 //  @line: 4
	java.lang.String$lp$$rp$$Random$args255 := r024;
	 //  @line: 5
	 call r132 := IntList$IntList$createIntList$2229();
	 //  @line: 7
	 call $i027 := int$Random$random$2232();
	 //  @line: 7
	 call i233 := int$IntList$nth$2230(($i027), (r132));
	 goto Block41;
	 //  @line: 9
Block41:
	 goto Block42, Block44;
	 //  @line: 9
Block42:
	 assume ($leint((i233), (0))==1);
	 goto Block43;
	 //  @line: 9
Block44:
	 //  @line: 9
	 assume ($negInt(($leint((i233), (0))))==1);
	 assert ($neref((r132), ($null))==1);
	 //  @line: 11
	r132 := $HeapVar[r132, IntList$IntList$next254];
	 //  @line: 12
	 call $i130 := int$Random$random$2232();
	 //  @line: 12
	 call i233 := int$IntList$nth$2230(($i130), (r132));
	 goto Block41;
	 //  @line: 14
Block43:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 20
// <IntList: void <init>(int,IntList)>
procedure void$IntList$$la$init$ra$$2228(__this : ref, $param_0 : int, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
var r13 : ref;
var i02 : int;
Block16:
	r01 := __this;
	i02 := $param_0;
	r13 := $param_1;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 21
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 assert ($neref((r01), ($null))==1);
	 //  @line: 22
	$HeapVar[r01, int$IntList$value0] := i02;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 23
	$HeapVar[r01, IntList$IntList$next254] := r13;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 27
// <IntList: IntList createIntList()>
procedure IntList$IntList$createIntList$2229() returns (__ret : ref) {
var $r07 : ref;
var i19 : int;
var r110 : ref;
var $i08 : int;
	 //  @line: 28
Block17:
	 //  @line: 28
	 call i19 := int$Random$random$2232();
	 //  @line: 29
	r110 := $null;
	 goto Block18;
	 //  @line: 31
Block18:
	 goto Block21, Block19;
	 //  @line: 31
Block21:
	 //  @line: 31
	 assume ($negInt(($leint((i19), (0))))==1);
	 //  @line: 32
	$r07 := $newvariable((22));
	 assume ($neref(($newvariable((22))), ($null))==1);
	 //  @line: 32
	 call $i08 := int$Random$random$2232();
	 assert ($neref(($r07), ($null))==1);
	 //  @line: 32
	 call void$IntList$$la$init$ra$$2228(($r07), ($i08), (r110));
	 //  @line: 32
	r110 := $r07;
	 //  @line: 33
	i19 := $addint((i19), (-1));
	 goto Block18;
	 //  @line: 31
Block19:
	 assume ($leint((i19), (0))==1);
	 goto Block20;
	 //  @line: 36
Block20:
	 //  @line: 36
	__ret := r110;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2232() returns (__ret : int)
  modifies $stringSize, int$Random$index0;
 {
var $i221 : int;
var $i017 : int;
var $i322 : int;
var $r118 : [int]ref;
var r019 : ref;
var $i120 : int;
	 //  @line: 6
Block37:
	 //  @line: 6
	$r118 := java.lang.String$lp$$rp$$Random$args255;
	 //  @line: 6
	$i017 := int$Random$index0;
	 assert ($geint(($i017), (0))==1);
	 assert ($ltint(($i017), ($refArrSize[$r118[$arrSizeIdx]]))==1);
	 //  @line: 6
	r019 := $r118[$i017];
	 //  @line: 7
	$i120 := int$Random$index0;
	 //  @line: 7
	$i221 := $addint(($i120), (1));
	 //  @line: 7
	int$Random$index0 := $i221;
	$i322 := $stringSize[r019];
	 //  @line: 8
	__ret := $i322;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2233()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block38:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2231(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r016 : ref;
Block36:
	r016 := __this;
	 assert ($neref((r016), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r016));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 40
// <IntList: int nth(int,IntList)>
procedure int$IntList$nth$2230($param_0 : int, $param_1 : ref) returns (__ret : int) {
var i114 : int;
var $i013 : int;
var r015 : ref;
Block23:
	i114 := $param_0;
	r015 := $param_1;
	 goto Block24;
	 //  @line: 41
Block24:
	 goto Block27, Block25;
	 //  @line: 41
Block27:
	 //  @line: 41
	 assume ($negInt(($leint((i114), (1))))==1);
	 goto Block28;
	 //  @line: 41
Block25:
	 assume ($leint((i114), (1))==1);
	 goto Block26;
	 //  @line: 47
Block28:
	 goto Block29, Block30;
	 //  @line: 46
Block26:
	 goto Block31, Block33;
	 //  @line: 47
Block29:
	 assume ($eqref((r015), ($null))==1);
	 goto Block26;
	 //  @line: 47
Block30:
	 //  @line: 47
	 assume ($negInt(($eqref((r015), ($null))))==1);
	 //  @line: 42
	i114 := $addint((i114), (-1));
	 assert ($neref((r015), ($null))==1);
	 //  @line: 43
	r015 := $HeapVar[r015, IntList$IntList$next254];
	 goto Block24;
	 //  @line: 46
Block31:
	 assume ($neref((r015), ($null))==1);
	 goto Block32;
	 //  @line: 46
Block33:
	 //  @line: 46
	 assume ($negInt(($neref((r015), ($null))))==1);
	 goto Block34;
	 //  @line: 47
Block32:
	 assert ($neref((r015), ($null))==1);
	 //  @line: 47
	$i013 := $HeapVar[r015, int$IntList$value0];
	 goto Block35;
	 //  @line: 47
Block34:
	 //  @line: 47
	__ret := 0;
	 return;
	 //  @line: 47
Block35:
	 //  @line: 47
	__ret := $i013;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// <ListContentTail: void <init>()>
procedure void$ListContentTail$$la$init$ra$$2234(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r023 : ref;
Block39:
	r023 := __this;
	 assert ($neref((r023), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r023));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


