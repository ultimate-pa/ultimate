type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.String$lp$$rp$$Random$args255 : [int]ref;
var int$Random$index0 : int;
var int$lp$$rp$$TriTas$a254 : [int]int;
var int$TriTas$N0 : int;
var int$TriTas$nTas0 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 18
// <TriTas: int Maximum()>
procedure int$TriTas$Maximum$2230() returns (__ret : int) {
var $r020 : [int]int;
var $i021 : int;
	 //  @line: 19
Block31:
	 //  @line: 19
	$r020 := int$lp$$rp$$TriTas$a254;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r020[$arrSizeIdx]]))==1);
	 //  @line: 19
	$i021 := $r020[0];
	 //  @line: 19
	__ret := $i021;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 3
// <TriTas: void <clinit>()>
procedure void$TriTas$$la$clinit$ra$$2234()
  modifies int$TriTas$nTas0;
 {
	 //  @line: 4
Block70:
	 //  @line: 4
	int$TriTas$nTas0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 7
// <TriTas: void Ajouter(int)>
procedure void$TriTas$Ajouter$2229($param_0 : int)
  modifies int$TriTas$nTas0;
 {
var $i44 : int;
var $i1015 : int;
var $r110 : [int]int;
var $i33 : int;
var $i22 : int;
var $i58 : int;
var $r316 : [int]int;
var i118 : int;
var $i913 : int;
var $i69 : int;
var $r214 : [int]int;
var $i1117 : int;
var i1219 : int;
var $r07 : [int]int;
var $i812 : int;
var i06 : int;
var $i711 : int;
Block17:
	i06 := $param_0;
	 //  @line: 8
	$i22 := int$TriTas$nTas0;
	 //  @line: 8
	$i33 := $addint(($i22), (1));
	 //  @line: 8
	int$TriTas$nTas0 := $i33;
	 //  @line: 9
	$i44 := int$TriTas$nTas0;
	 //  @line: 9
	i1219 := $subint(($i44), (1));
	 goto Block18;
	 //  @line: 10
Block18:
	 goto Block19, Block21;
	 //  @line: 10
Block19:
	 assume ($leint((i1219), (0))==1);
	 goto Block20;
	 //  @line: 10
Block21:
	 //  @line: 10
	 assume ($negInt(($leint((i1219), (0))))==1);
	 //  @line: 16
	$r110 := int$lp$$rp$$TriTas$a254;
	 //  @line: 16
	$i58 := $subint((i1219), (1));
	 assert ($neint((2), (0))==1);
	 //  @line: 16
	$i69 := $divint(($i58), (2));
	 assert ($geint(($i69), (0))==1);
	 assert ($ltint(($i69), ($intArrSize[$r110[$arrSizeIdx]]))==1);
	 //  @line: 16
	$i711 := $r110[$i69];
	 goto Block22;
	 //  @line: 15
Block20:
	 //  @line: 15
	$r07 := int$lp$$rp$$TriTas$a254;
	 goto Block30;
	 //  @line: 16
Block22:
	 goto Block23, Block24;
	 //  @line: 15
Block30:
	 assert ($geint((i1219), (0))==1);
	 assert ($ltint((i1219), ($intArrSize[$r07[$arrSizeIdx]]))==1);
	 //  @line: 15
	$r07[i1219] := i06;
	 return;
	 //  @line: 16
Block23:
	 assume ($gtint(($i711), (i06))==1);
	 goto Block20;
	 //  @line: 16
Block24:
	 //  @line: 16
	 assume ($negInt(($gtint(($i711), (i06))))==1);
	 //  @line: 11
	$r316 := int$lp$$rp$$TriTas$a254;
	 //  @line: 11
	$r214 := int$lp$$rp$$TriTas$a254;
	 //  @line: 11
	$i812 := $subint((i1219), (1));
	 assert ($neint((2), (0))==1);
	 //  @line: 11
	$i913 := $divint(($i812), (2));
	 assert ($geint(($i913), (0))==1);
	 assert ($ltint(($i913), ($intArrSize[$r214[$arrSizeIdx]]))==1);
	 //  @line: 11
	$i1015 := $r214[$i913];
	 assert ($geint((i1219), (0))==1);
	 assert ($ltint((i1219), ($intArrSize[$r316[$arrSizeIdx]]))==1);
	 //  @line: 11
	$r316[i1219] := $i1015;
	 //  @line: 12
	$i1117 := $subint((i1219), (1));
	 assert ($neint((2), (0))==1);
	 //  @line: 12
	i118 := $divint(($i1117), (2));
	 goto Block25;
	 //  @line: 13
Block25:
	 goto Block26, Block28;
	 //  @line: 13
Block26:
	 assume ($ltint((i118), (i1219))==1);
	 goto Block27;
	 //  @line: 13
Block28:
	 //  @line: 13
	 assume ($negInt(($ltint((i118), (i1219))))==1);
	 goto Block20;
	 //  @line: 13
Block27:
	 //  @line: 13
	i1219 := i118;
	 goto Block29;
	 //  @line: 13
Block29:
	 goto Block18;
}


// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 53
// <TriTas: void main(java.lang.String[])>
procedure void$TriTas$main$2233($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$Random$args255, $stringSize, $intArrSize, int$TriTas$N0, int$lp$$rp$$TriTas$a254;
 {
var $i063 : int;
var $i369 : int;
var $i164 : int;
var i470 : int;
var $r165 : [int]int;
var $r268 : [int]int;
var r062 : [int]ref;
var $i267 : int;
Block62:
	r062 := $param_0;
	 //  @line: 54
	java.lang.String$lp$$rp$$Random$args255 := r062;
	 //  @line: 55
	$i063 := $refArrSize[r062[$arrSizeIdx]];
	 //  @line: 55
	int$TriTas$N0 := $i063;
	 //  @line: 56
	$i164 := int$TriTas$N0;
	 //  @line: 56
	$r165 := $reftointarr(($newvariable((63))));
	$intArrSize[$reftointarr(($newvariable((63))))[$arrSizeIdx]] := $i164;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((63))))), ($intArrNull))))==1);
	 //  @line: 56
	int$lp$$rp$$TriTas$a254 := $r165;
	 //  @line: 57
	i470 := 0;
	 goto Block64;
	 //  @line: 57
Block64:
	 //  @line: 57
	$i267 := int$TriTas$N0;
	 goto Block65;
	 //  @line: 57
Block65:
	 goto Block68, Block66;
	 //  @line: 57
Block68:
	 //  @line: 57
	 assume ($negInt(($geint((i470), ($i267))))==1);
	 //  @line: 58
	$r268 := int$lp$$rp$$TriTas$a254;
	 //  @line: 58
	 call $i369 := int$Random$random$2236();
	 assert ($geint((i470), (0))==1);
	 assert ($ltint((i470), ($intArrSize[$r268[$arrSizeIdx]]))==1);
	 //  @line: 58
	$r268[i470] := $i369;
	 //  @line: 57
	i470 := $addint((i470), (1));
	 goto Block64;
	 //  @line: 57
Block66:
	 assume ($geint((i470), ($i267))==1);
	 goto Block67;
	 //  @line: 62
Block67:
	 //  @line: 62
	 call void$TriTas$HeapSort$2232();
	 goto Block69;
	 //  @line: 66
Block69:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2235(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r071 : ref;
Block71:
	r071 := __this;
	 assert ($neref((r071), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r071));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2236() returns (__ret : int)
  modifies $stringSize, int$Random$index0;
 {
var $r172 : [int]ref;
var $r276 : [int]ref;
var $i073 : int;
var r077 : ref;
var $i174 : int;
var $i275 : int;
var $i378 : int;
var $i479 : int;
var $i580 : int;
	 //  @line: 6
Block72:
	 //  @line: 6
	$i174 := int$Random$index0;
	 //  @line: 6
	$r172 := java.lang.String$lp$$rp$$Random$args255;
	 //  @line: 6
	$i073 := $refArrSize[$r172[$arrSizeIdx]];
	 goto Block73;
	 //  @line: 6
Block73:
	 goto Block74, Block76;
	 //  @line: 6
Block74:
	 assume ($ltint(($i174), ($i073))==1);
	 goto Block75;
	 //  @line: 6
Block76:
	 //  @line: 6
	 assume ($negInt(($ltint(($i174), ($i073))))==1);
	 //  @line: 7
	__ret := 0;
	 return;
	 //  @line: 9
Block75:
	 //  @line: 9
	$r276 := java.lang.String$lp$$rp$$Random$args255;
	 goto Block77;
	 //  @line: 9
Block77:
	 //  @line: 9
	$i275 := int$Random$index0;
	 assert ($geint(($i275), (0))==1);
	 assert ($ltint(($i275), ($refArrSize[$r276[$arrSizeIdx]]))==1);
	 //  @line: 9
	r077 := $r276[$i275];
	 //  @line: 10
	$i378 := int$Random$index0;
	 //  @line: 10
	$i479 := $addint(($i378), (1));
	 //  @line: 10
	int$Random$index0 := $i479;
	$i580 := $stringSize[r077];
	 //  @line: 11
	__ret := $i580;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// <TriTas: void <init>()>
procedure void$TriTas$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2237()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block78:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 41
// <TriTas: void HeapSort()>
procedure void$TriTas$HeapSort$2232()
  modifies int$TriTas$nTas0;
 {
var i056 : int;
var i460 : int;
var $r057 : [int]int;
var i561 : int;
var $i153 : int;
var $i359 : int;
var $r158 : [int]int;
var $i254 : int;
	 //  @line: 42
Block51:
	 //  @line: 42
	int$TriTas$nTas0 := 0;
	 //  @line: 43
	i460 := 0;
	 goto Block52;
	 //  @line: 43
Block52:
	 //  @line: 43
	$i153 := int$TriTas$N0;
	 goto Block53;
	 //  @line: 43
Block53:
	 goto Block54, Block56;
	 //  @line: 43
Block54:
	 assume ($geint((i460), ($i153))==1);
	 goto Block55;
	 //  @line: 43
Block56:
	 //  @line: 43
	 assume ($negInt(($geint((i460), ($i153))))==1);
	 //  @line: 44
	$r158 := int$lp$$rp$$TriTas$a254;
	 assert ($geint((i460), (0))==1);
	 assert ($ltint((i460), ($intArrSize[$r158[$arrSizeIdx]]))==1);
	 //  @line: 44
	$i359 := $r158[i460];
	 //  @line: 44
	 call void$TriTas$Ajouter$2229(($i359));
	 //  @line: 43
	i460 := $addint((i460), (1));
	 goto Block52;
	 //  @line: 45
Block55:
	 //  @line: 45
	$i254 := int$TriTas$N0;
	 goto Block57;
	 //  @line: 45
Block57:
	 //  @line: 45
	i561 := $subint(($i254), (1));
	 goto Block58;
	 //  @line: 45
Block58:
	 goto Block61, Block59;
	 //  @line: 45
Block61:
	 //  @line: 45
	 assume ($negInt(($ltint((i561), (0))))==1);
	 //  @line: 47
	 call i056 := int$TriTas$Maximum$2230();
	 //  @line: 48
	 call void$TriTas$Supprimer$2231();
	 //  @line: 49
	$r057 := int$lp$$rp$$TriTas$a254;
	 assert ($geint((i561), (0))==1);
	 assert ($ltint((i561), ($intArrSize[$r057[$arrSizeIdx]]))==1);
	 //  @line: 49
	$r057[i561] := i056;
	 //  @line: 45
	i561 := $addint((i561), (-1));
	 goto Block58;
	 //  @line: 45
Block59:
	 assume ($ltint((i561), (0))==1);
	 goto Block60;
	 //  @line: 51
Block60:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 23
// <TriTas: void Supprimer()>
procedure void$TriTas$Supprimer$2231()
  modifies int$TriTas$nTas0;
 {
var $i1139 : int;
var $i223 : int;
var $i936 : int;
var $r024 : [int]int;
var $r847 : [int]int;
var $r644 : [int]int;
var $i427 : int;
var $i528 : int;
var i1750 : int;
var $i325 : int;
var $i834 : int;
var $r126 : [int]int;
var $i122 : int;
var $r230 : [int]int;
var $i1649 : int;
var $i1343 : int;
var $r542 : [int]int;
var $r746 : [int]int;
var $r440 : [int]int;
var $i632 : int;
var $i1548 : int;
var $i1038 : int;
var $i1445 : int;
var i1851 : int;
var $i733 : int;
var $i1241 : int;
var i031 : int;
var $r335 : [int]int;
	 //  @line: 24
Block32:
	 //  @line: 24
	$r126 := int$lp$$rp$$TriTas$a254;
	 //  @line: 24
	$r024 := int$lp$$rp$$TriTas$a254;
	 //  @line: 24
	$i122 := int$TriTas$nTas0;
	 //  @line: 24
	$i223 := $subint(($i122), (1));
	 assert ($geint(($i223), (0))==1);
	 assert ($ltint(($i223), ($intArrSize[$r024[$arrSizeIdx]]))==1);
	 //  @line: 24
	$i325 := $r024[$i223];
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r126[$arrSizeIdx]]))==1);
	 //  @line: 24
	$r126[0] := $i325;
	 //  @line: 25
	$i427 := int$TriTas$nTas0;
	 //  @line: 25
	$i528 := $subint(($i427), (1));
	 //  @line: 25
	int$TriTas$nTas0 := $i528;
	 //  @line: 26
	i1750 := 0;
	 //  @line: 26
	$r230 := int$lp$$rp$$TriTas$a254;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r230[$arrSizeIdx]]))==1);
	 //  @line: 26
	i031 := $r230[0];
	 goto Block33;
	 //  @line: 27
Block33:
	 //  @line: 27
	$i632 := $mulint((2), (i1750));
	 //  @line: 27
	$i834 := $addint(($i632), (1));
	 //  @line: 27
	$i733 := int$TriTas$nTas0;
	 goto Block34;
	 //  @line: 27
Block34:
	 goto Block37, Block35;
	 //  @line: 27
Block37:
	 //  @line: 27
	 assume ($negInt(($geint(($i834), ($i733))))==1);
	 //  @line: 29
	$i936 := $mulint((2), (i1750));
	 //  @line: 29
	i1851 := $addint(($i936), (1));
	 //  @line: 30
	$i1139 := $addint((i1851), (1));
	 //  @line: 30
	$i1038 := int$TriTas$nTas0;
	 goto Block38;
	 //  @line: 27
Block35:
	 assume ($geint(($i834), ($i733))==1);
	 goto Block36;
	 //  @line: 30
Block38:
	 goto Block39, Block41;
	 //  @line: 37
Block36:
	 //  @line: 37
	$r335 := int$lp$$rp$$TriTas$a254;
	 goto Block50;
	 //  @line: 30
Block39:
	 assume ($geint(($i1139), ($i1038))==1);
	 goto Block40;
	 //  @line: 30
Block41:
	 //  @line: 30
	 assume ($negInt(($geint(($i1139), ($i1038))))==1);
	 //  @line: 31
	$r746 := int$lp$$rp$$TriTas$a254;
	 //  @line: 31
	$i1445 := $addint((i1851), (1));
	 assert ($geint(($i1445), (0))==1);
	 assert ($ltint(($i1445), ($intArrSize[$r746[$arrSizeIdx]]))==1);
	 //  @line: 31
	$i1649 := $r746[$i1445];
	 //  @line: 31
	$r847 := int$lp$$rp$$TriTas$a254;
	 assert ($geint((i1851), (0))==1);
	 assert ($ltint((i1851), ($intArrSize[$r847[$arrSizeIdx]]))==1);
	 //  @line: 31
	$i1548 := $r847[i1851];
	 goto Block42;
	 //  @line: 37
Block50:
	 assert ($geint((i1750), (0))==1);
	 assert ($ltint((i1750), ($intArrSize[$r335[$arrSizeIdx]]))==1);
	 //  @line: 37
	$r335[i1750] := i031;
	 return;
	 //  @line: 33
Block40:
	 //  @line: 33
	$r440 := int$lp$$rp$$TriTas$a254;
	 assert ($geint((i1851), (0))==1);
	 assert ($ltint((i1851), ($intArrSize[$r440[$arrSizeIdx]]))==1);
	 //  @line: 33
	$i1241 := $r440[i1851];
	 goto Block45;
	 //  @line: 31
Block42:
	 goto Block44, Block43;
	 //  @line: 33
Block45:
	 goto Block46, Block48;
	 //  @line: 31
Block44:
	 //  @line: 31
	 assume ($negInt(($leint(($i1649), ($i1548))))==1);
	 //  @line: 32
	i1851 := $addint((i1851), (1));
	 goto Block40;
	 //  @line: 31
Block43:
	 assume ($leint(($i1649), ($i1548))==1);
	 goto Block40;
	 //  @line: 33
Block46:
	 assume ($ltint((i031), ($i1241))==1);
	 goto Block47;
	 //  @line: 33
Block48:
	 //  @line: 33
	 assume ($negInt(($ltint((i031), ($i1241))))==1);
	 goto Block36;
	 //  @line: 34
Block47:
	 //  @line: 34
	$r644 := int$lp$$rp$$TriTas$a254;
	 goto Block49;
	 //  @line: 34
Block49:
	 //  @line: 34
	$r542 := int$lp$$rp$$TriTas$a254;
	 assert ($geint((i1851), (0))==1);
	 assert ($ltint((i1851), ($intArrSize[$r542[$arrSizeIdx]]))==1);
	 //  @line: 34
	$i1343 := $r542[i1851];
	 assert ($geint((i1750), (0))==1);
	 assert ($ltint((i1750), ($intArrSize[$r644[$arrSizeIdx]]))==1);
	 //  @line: 34
	$r644[i1750] := $i1343;
	 //  @line: 35
	i1750 := i1851;
	 goto Block33;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


