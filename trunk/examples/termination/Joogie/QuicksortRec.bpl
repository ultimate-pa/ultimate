type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var int$QuicksortRec.List$value0 : Field int;
var java.lang.String$lp$$rp$$QuicksortRec.Random$args296 : [int]ref;
var $fresh2 : ref;
var int$QuicksortRec.Random$index0 : int;
var QuicksortRec.List$QuicksortRec.List$next254 : Field ref;
var $fresh1 : ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
procedure java.lang.StringBuilder$java.lang.StringBuilder$append$2237(__this : ref, $param_0 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 15
// <QuicksortRec.List: QuicksortRec.List copy(QuicksortRec.List)>
procedure QuicksortRec.List$QuicksortRec.List$copy$2230($param_0 : ref) returns (__ret : ref) {
var $r27 : ref;
var $r16 : ref;
var $i08 : int;
var $r39 : ref;
var r05 : ref;
Block18:
	r05 := $param_0;
	 goto Block19;
	 //  @line: 16
Block19:
	 goto Block20, Block22;
	 //  @line: 16
Block20:
	 assume ($neref((r05), ($null))==1);
	 goto Block21;
	 //  @line: 16
Block22:
	 //  @line: 16
	 assume ($negInt(($neref((r05), ($null))))==1);
	 //  @line: 17
	__ret := $null;
	 return;
	 //  @line: 17
Block21:
	 //  @line: 17
	$r16 := $newvariable((23));
	 assume ($neref(($newvariable((23))), ($null))==1);
	 goto Block24;
	 //  @line: 17
Block24:
	 assert ($neref((r05), ($null))==1);
	 //  @line: 17
	$i08 := $HeapVar[r05, int$QuicksortRec.List$value0];
	 assert ($neref((r05), ($null))==1);
	 //  @line: 17
	$r27 := $HeapVar[r05, QuicksortRec.List$QuicksortRec.List$next254];
	 //  @line: 17
	 call $r39 := QuicksortRec.List$QuicksortRec.List$copy$2230(($r27));
	 assert ($neref(($r16), ($null))==1);
	 //  @line: 17
	 call void$QuicksortRec.List$$la$init$ra$$2229(($r16), ($i08), ($r39));
	 //  @line: 17
	__ret := $r16;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
procedure java.lang.StringBuilder$java.lang.StringBuilder$append$2245(__this : ref, $param_0 : int) returns (__ret : ref);



	 //  @line: 7
// <QuicksortRec.Random: int random()>
procedure int$QuicksortRec.Random$random$2462() returns (__ret : int)
  modifies $stringSize, int$QuicksortRec.Random$index0;
 {
var $r270 : [int]ref;
var $i168 : int;
var $i269 : int;
var $i473 : int;
var $i372 : int;
var r071 : ref;
var $i574 : int;
var $r166 : [int]ref;
var $i067 : int;
	 //  @line: 8
Block76:
	 //  @line: 8
	$r166 := java.lang.String$lp$$rp$$QuicksortRec.Random$args296;
	 //  @line: 8
	$i168 := $refArrSize[$r166[$arrSizeIdx]];
	 //  @line: 8
	$i067 := int$QuicksortRec.Random$index0;
	 goto Block77;
	 //  @line: 8
Block77:
	 goto Block78, Block80;
	 //  @line: 8
Block78:
	 assume ($gtint(($i168), ($i067))==1);
	 goto Block79;
	 //  @line: 8
Block80:
	 //  @line: 8
	 assume ($negInt(($gtint(($i168), ($i067))))==1);
	 //  @line: 9
	__ret := 0;
	 return;
	 //  @line: 11
Block79:
	 //  @line: 11
	$r270 := java.lang.String$lp$$rp$$QuicksortRec.Random$args296;
	 goto Block81;
	 //  @line: 11
Block81:
	 //  @line: 11
	$i269 := int$QuicksortRec.Random$index0;
	 assert ($geint(($i269), (0))==1);
	 assert ($ltint(($i269), ($refArrSize[$r270[$arrSizeIdx]]))==1);
	 //  @line: 11
	r071 := $r270[$i269];
	 //  @line: 12
	$i372 := int$QuicksortRec.Random$index0;
	 //  @line: 12
	$i473 := $addint(($i372), (1));
	 //  @line: 12
	int$QuicksortRec.Random$index0 := $i473;
	 goto Block82;
	 //  @line: 13
Block82:
	 goto Block85, Block83;
	 //  @line: 13
Block85:
	 //  @line: 13
	 assume ($negInt(($neref((r071), ($null))))==1);
	 //  @line: 14
	__ret := 0;
	 return;
	 //  @line: 13
Block83:
	 assume ($neref((r071), ($null))==1);
	 goto Block84;
	 //  @line: 16
Block84:
	$i574 := $stringSize[r071];
	 goto Block86;
	 //  @line: 16
Block86:
	 //  @line: 16
	__ret := $i574;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



	 //  @line: 18
// <QuicksortRec.QuicksortRec: QuicksortRec.List sortedHigh(QuicksortRec.List,int)>
procedure QuicksortRec.List$QuicksortRec.QuicksortRec$sortedHigh$2457($param_0 : ref, $param_1 : int) returns (__ret : ref) {
var $r238 : ref;
var $i136 : int;
var i035 : int;
var $r137 : ref;
var $r643 : ref;
var $r440 : ref;
var r034 : ref;
var $r339 : ref;
var $i241 : int;
var $r542 : ref;
Block50:
	r034 := $param_0;
	i035 := $param_1;
	 goto Block51;
	 //  @line: 19
Block51:
	 goto Block52, Block54;
	 //  @line: 19
Block52:
	 assume ($neref((r034), ($null))==1);
	 goto Block53;
	 //  @line: 19
Block54:
	 //  @line: 19
	 assume ($negInt(($neref((r034), ($null))))==1);
	 //  @line: 20
	__ret := $null;
	 return;
	 //  @line: 21
Block53:
	 assert ($neref((r034), ($null))==1);
	 //  @line: 21
	$i136 := $HeapVar[r034, int$QuicksortRec.List$value0];
	 goto Block55;
	 //  @line: 21
Block55:
	 goto Block58, Block56;
	 //  @line: 21
Block58:
	 //  @line: 21
	 assume ($negInt(($leint(($i136), (i035))))==1);
	 //  @line: 22
	$r339 := $newvariable((59));
	 assume ($neref(($newvariable((59))), ($null))==1);
	 assert ($neref((r034), ($null))==1);
	 //  @line: 22
	$i241 := $HeapVar[r034, int$QuicksortRec.List$value0];
	 assert ($neref((r034), ($null))==1);
	 //  @line: 22
	$r440 := $HeapVar[r034, QuicksortRec.List$QuicksortRec.List$next254];
	 //  @line: 22
	 call $r542 := QuicksortRec.List$QuicksortRec.QuicksortRec$sortedHigh$2457(($r440), (i035));
	 assert ($neref(($r339), ($null))==1);
	 //  @line: 22
	 call void$QuicksortRec.List$$la$init$ra$$2229(($r339), ($i241), ($r542));
	 //  @line: 22
	 call $r643 := QuicksortRec.List$QuicksortRec.QuicksortRec$quicksort$2458(($r339));
	 //  @line: 22
	__ret := $r643;
	 return;
	 //  @line: 21
Block56:
	 assume ($leint(($i136), (i035))==1);
	 goto Block57;
	 //  @line: 24
Block57:
	 assert ($neref((r034), ($null))==1);
	 //  @line: 24
	$r137 := $HeapVar[r034, QuicksortRec.List$QuicksortRec.List$next254];
	 goto Block60;
	 //  @line: 24
Block60:
	 //  @line: 24
	 call $r238 := QuicksortRec.List$QuicksortRec.QuicksortRec$sortedHigh$2457(($r137), (i035));
	 //  @line: 24
	__ret := $r238;
	 return;
}


	 //  @line: 7
// <QuicksortRec.List: void <init>()>
procedure void$QuicksortRec.List$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 8
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.StringBuilder: java.lang.String toString()>
procedure java.lang.String$java.lang.StringBuilder$toString$2270(__this : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



	 //  @line: 4
// <QuicksortRec.Random: void <clinit>()>
procedure void$QuicksortRec.Random$$la$clinit$ra$$2463()
  modifies int$QuicksortRec.Random$index0;
 {
	 //  @line: 5
Block87:
	 //  @line: 5
	int$QuicksortRec.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 1
// <QuicksortRec.QuicksortRec: void <init>()>
procedure void$QuicksortRec.QuicksortRec$$la$init$ra$$2454(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r019 : ref;
Block32:
	r019 := __this;
	 assert ($neref((r019), ($null))==1);
	 //  @line: 2
	 call void$java.lang.Object$$la$init$ra$$28((r019));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// <java.lang.StringBuilder: void <init>()>
procedure void$java.lang.StringBuilder$$la$init$ra$$2232(__this : ref);



	 //  @line: 9
// <QuicksortRec.List: void <init>(int,QuicksortRec.List)>
procedure void$QuicksortRec.List$$la$init$ra$$2229(__this : ref, $param_0 : int, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r02 : ref;
var r14 : ref;
var i03 : int;
Block17:
	r02 := __this;
	i03 := $param_0;
	r14 := $param_1;
	 assert ($neref((r02), ($null))==1);
	 //  @line: 10
	 call void$java.lang.Object$$la$init$ra$$28((r02));
	 assert ($neref((r02), ($null))==1);
	 //  @line: 11
	$HeapVar[r02, int$QuicksortRec.List$value0] := i03;
	 assert ($neref((r02), ($null))==1);
	 //  @line: 12
	$HeapVar[r02, QuicksortRec.List$QuicksortRec.List$next254] := r14;
	 return;
}


	 //  @line: 28
// <QuicksortRec.QuicksortRec: QuicksortRec.List quicksort(QuicksortRec.List)>
procedure QuicksortRec.List$QuicksortRec.QuicksortRec$quicksort$2458($param_0 : ref) returns (__ret : ref) {
var $r450 : ref;
var $i045 : int;
var r148 : ref;
var $r346 : ref;
var $r553 : ref;
var r252 : ref;
var r044 : ref;
var $i149 : int;
Block61:
	r044 := $param_0;
	 goto Block62;
	 //  @line: 29
Block62:
	 goto Block65, Block63;
	 //  @line: 29
Block65:
	 //  @line: 29
	 assume ($negInt(($neref((r044), ($null))))==1);
	 //  @line: 30
	__ret := $null;
	 return;
	 //  @line: 29
Block63:
	 assume ($neref((r044), ($null))==1);
	 goto Block64;
	 //  @line: 32
Block64:
	 assert ($neref((r044), ($null))==1);
	 //  @line: 32
	$r346 := $HeapVar[r044, QuicksortRec.List$QuicksortRec.List$next254];
	 goto Block66;
	 //  @line: 32
Block66:
	 assert ($neref((r044), ($null))==1);
	 //  @line: 32
	$i045 := $HeapVar[r044, int$QuicksortRec.List$value0];
	 //  @line: 32
	 call r148 := QuicksortRec.List$QuicksortRec.QuicksortRec$sortedLow$2456(($r346), ($i045));
	 assert ($neref((r044), ($null))==1);
	 //  @line: 33
	$r450 := $HeapVar[r044, QuicksortRec.List$QuicksortRec.List$next254];
	 assert ($neref((r044), ($null))==1);
	 //  @line: 33
	$i149 := $HeapVar[r044, int$QuicksortRec.List$value0];
	 //  @line: 33
	 call r252 := QuicksortRec.List$QuicksortRec.QuicksortRec$sortedHigh$2457(($r450), ($i149));
	 //  @line: 34
	 call $r553 := QuicksortRec.List$QuicksortRec.QuicksortRec$append$2455((r148), (r252));
	 //  @line: 34
	__ret := $r553;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 20
// <QuicksortRec.List: java.lang.String print(QuicksortRec.List)>
procedure java.lang.String$QuicksortRec.List$print$2231($param_0 : ref) returns (__ret : ref)
  modifies $stringSize;
 {
var $r213 : ref;
var $r516 : ref;
var $r718 : ref;
var r010 : ref;
var $i012 : int;
var $r314 : ref;
var $r415 : ref;
var $r111 : ref;
var $r617 : ref;
Block25:
	r010 := $param_0;
	 goto Block26;
	 //  @line: 21
Block26:
	 goto Block27, Block29;
	 //  @line: 21
Block27:
	 assume ($neref((r010), ($null))==1);
	 goto Block28;
	 //  @line: 21
Block29:
	 //  @line: 21
	 assume ($negInt(($neref((r010), ($null))))==1);
	$stringSize[$fresh1] := 0;
	 //  @line: 22
	__ret := $fresh1;
	 return;
	 //  @line: 22
Block28:
	 //  @line: 22
	$r111 := $newvariable((30));
	 assume ($neref(($newvariable((30))), ($null))==1);
	 goto Block31;
	 //  @line: 22
Block31:
	 assert ($neref(($r111), ($null))==1);
	 //  @line: 22
	 call void$java.lang.StringBuilder$$la$init$ra$$2232(($r111));
	 assert ($neref((r010), ($null))==1);
	 //  @line: 22
	$i012 := $HeapVar[r010, int$QuicksortRec.List$value0];
	 assert ($neref(($r111), ($null))==1);
	 //  @line: 22
	 call $r213 := java.lang.StringBuilder$java.lang.StringBuilder$append$2245(($r111), ($i012));
	$stringSize[$fresh2] := 1;
	 assert ($neref(($r213), ($null))==1);
	 //  @line: 22
	 call $r314 := java.lang.StringBuilder$java.lang.StringBuilder$append$2237(($r213), ($fresh2));
	 assert ($neref((r010), ($null))==1);
	 //  @line: 22
	$r415 := $HeapVar[r010, QuicksortRec.List$QuicksortRec.List$next254];
	 //  @line: 22
	 call $r516 := java.lang.String$QuicksortRec.List$print$2231(($r415));
	 assert ($neref(($r314), ($null))==1);
	 //  @line: 22
	 call $r617 := java.lang.StringBuilder$java.lang.StringBuilder$append$2237(($r314), ($r516));
	 assert ($neref(($r617), ($null))==1);
	 //  @line: 22
	 call $r718 := java.lang.String$java.lang.StringBuilder$toString$2270(($r617));
	 //  @line: 22
	__ret := $r718;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 3
// <QuicksortRec.QuicksortRec: QuicksortRec.List append(QuicksortRec.List,QuicksortRec.List)>
procedure QuicksortRec.List$QuicksortRec.QuicksortRec$append$2455($param_0 : ref, $param_1 : ref) returns (__ret : ref) {
var $r323 : ref;
var $r222 : ref;
var r121 : ref;
var r020 : ref;
Block33:
	r020 := $param_0;
	r121 := $param_1;
	 goto Block34;
	 //  @line: 4
Block34:
	 goto Block37, Block35;
	 //  @line: 4
Block37:
	 //  @line: 4
	 assume ($negInt(($neref((r020), ($null))))==1);
	 //  @line: 5
	__ret := r121;
	 return;
	 //  @line: 4
Block35:
	 assume ($neref((r020), ($null))==1);
	 goto Block36;
	 //  @line: 5
Block36:
	 assert ($neref((r020), ($null))==1);
	 //  @line: 5
	$r222 := $HeapVar[r020, QuicksortRec.List$QuicksortRec.List$next254];
	 goto Block38;
	 //  @line: 5
Block38:
	 //  @line: 5
	 call $r323 := QuicksortRec.List$QuicksortRec.QuicksortRec$append$2455(($r222), (r121));
	 //  @line: 5
	__ret := $r323;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 8
// <QuicksortRec.QuicksortRec: QuicksortRec.List sortedLow(QuicksortRec.List,int)>
procedure QuicksortRec.List$QuicksortRec.QuicksortRec$sortedLow$2456($param_0 : ref, $param_1 : int) returns (__ret : ref) {
var $i126 : int;
var $r532 : ref;
var i025 : int;
var $r329 : ref;
var $i231 : int;
var $r430 : ref;
var $r127 : ref;
var $r633 : ref;
var $r228 : ref;
var r024 : ref;
Block39:
	r024 := $param_0;
	i025 := $param_1;
	 goto Block40;
	 //  @line: 9
Block40:
	 goto Block41, Block43;
	 //  @line: 9
Block41:
	 assume ($neref((r024), ($null))==1);
	 goto Block42;
	 //  @line: 9
Block43:
	 //  @line: 9
	 assume ($negInt(($neref((r024), ($null))))==1);
	 //  @line: 10
	__ret := $null;
	 return;
	 //  @line: 11
Block42:
	 assert ($neref((r024), ($null))==1);
	 //  @line: 11
	$i126 := $HeapVar[r024, int$QuicksortRec.List$value0];
	 goto Block44;
	 //  @line: 11
Block44:
	 goto Block45, Block47;
	 //  @line: 11
Block45:
	 assume ($gtint(($i126), (i025))==1);
	 goto Block46;
	 //  @line: 11
Block47:
	 //  @line: 11
	 assume ($negInt(($gtint(($i126), (i025))))==1);
	 //  @line: 12
	$r329 := $newvariable((48));
	 assume ($neref(($newvariable((48))), ($null))==1);
	 assert ($neref((r024), ($null))==1);
	 //  @line: 12
	$i231 := $HeapVar[r024, int$QuicksortRec.List$value0];
	 assert ($neref((r024), ($null))==1);
	 //  @line: 12
	$r430 := $HeapVar[r024, QuicksortRec.List$QuicksortRec.List$next254];
	 //  @line: 12
	 call $r532 := QuicksortRec.List$QuicksortRec.QuicksortRec$sortedLow$2456(($r430), (i025));
	 assert ($neref(($r329), ($null))==1);
	 //  @line: 12
	 call void$QuicksortRec.List$$la$init$ra$$2229(($r329), ($i231), ($r532));
	 //  @line: 12
	 call $r633 := QuicksortRec.List$QuicksortRec.QuicksortRec$quicksort$2458(($r329));
	 //  @line: 12
	__ret := $r633;
	 return;
	 //  @line: 14
Block46:
	 assert ($neref((r024), ($null))==1);
	 //  @line: 14
	$r127 := $HeapVar[r024, QuicksortRec.List$QuicksortRec.List$next254];
	 goto Block49;
	 //  @line: 14
Block49:
	 //  @line: 14
	 call $r228 := QuicksortRec.List$QuicksortRec.QuicksortRec$sortedLow$2456(($r127), (i025));
	 //  @line: 14
	__ret := $r228;
	 return;
}


	 //  @line: 2
// <QuicksortRec.Random: void <init>()>
procedure void$QuicksortRec.Random$$la$init$ra$$2461(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r065 : ref;
Block75:
	r065 := __this;
	 assert ($neref((r065), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r065));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 38
// <QuicksortRec.QuicksortRec: void main(java.lang.String[])>
procedure void$QuicksortRec.QuicksortRec$main$2459($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$QuicksortRec.Random$args296, $stringSize;
 {
var r054 : [int]ref;
var r157 : ref;
var $i055 : int;

 //temp local variables 
var $freshlocal0 : ref;

Block67:
	r054 := $param_0;
	 //  @line: 39
	java.lang.String$lp$$rp$$QuicksortRec.Random$args296 := r054;
	 //  @line: 40
	 call $i055 := int$QuicksortRec.Random$random$2462();
	 //  @line: 40
	 call r157 := QuicksortRec.List$QuicksortRec.QuicksortRec$createList$2460(($i055));
	 //  @line: 41
	 call $freshlocal0 := QuicksortRec.List$QuicksortRec.QuicksortRec$quicksort$2458((r157));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 45
// <QuicksortRec.QuicksortRec: QuicksortRec.List createList(int)>
procedure QuicksortRec.List$QuicksortRec.QuicksortRec$createList$2460($param_0 : int) returns (__ret : ref) {
var $r061 : ref;
var $i162 : int;
var $r164 : ref;
var $i263 : int;
var i060 : int;
Block68:
	i060 := $param_0;
	 goto Block69;
	 //  @line: 46
Block69:
	 goto Block72, Block70;
	 //  @line: 46
Block72:
	 //  @line: 46
	 assume ($negInt(($gtint((i060), (0))))==1);
	 //  @line: 47
	__ret := $null;
	 return;
	 //  @line: 46
Block70:
	 assume ($gtint((i060), (0))==1);
	 goto Block71;
	 //  @line: 49
Block71:
	 //  @line: 49
	$r061 := $newvariable((73));
	 assume ($neref(($newvariable((73))), ($null))==1);
	 goto Block74;
	 //  @line: 49
Block74:
	 //  @line: 49
	 call $i162 := int$QuicksortRec.Random$random$2462();
	 //  @line: 49
	$i263 := $subint((i060), (1));
	 //  @line: 49
	 call $r164 := QuicksortRec.List$QuicksortRec.QuicksortRec$createList$2460(($i263));
	 assert ($neref(($r061), ($null))==1);
	 //  @line: 49
	 call void$QuicksortRec.List$$la$init$ra$$2229(($r061), ($i162), ($r164));
	 //  @line: 49
	__ret := $r061;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


