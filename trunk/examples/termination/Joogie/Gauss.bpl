type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var $fresh2 : int;
var int$EquationSystem$n0 : Field int;
var $fresh15 : [int]ref;
var $fresh1 : int;
var $fresh13 : int;
var int$Rational$n0 : Field int;
var Rational$lp$$rp$$EquationSystem$b255 : Field [int]ref;
var $fresh16 : int;
var $fresh4 : int;
var Rational$lp$$rp$$lp$$rp$$EquationSystem$A254 : Field [int][int]ref;
var $fresh14 : int;
var $fresh2 : [int]ref;
var $fresh9 : int;
var int$Rational$d0 : Field int;
var $fresh4 : int;
var $fresh3 : int;
var $fresh8 : int;
var $fresh3 : [int][int]ref;
var $fresh5 : int;
var $fresh6 : int;
var $fresh11 : int;
var $fresh1 : [int][int]ref;
var $fresh10 : int;
var $fresh12 : int;
var $fresh7 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



	 //  @line: 50
// <EquationSystem: void divide(int,Rational)>
procedure void$EquationSystem$divide$2231(__this : ref, $param_0 : int, $param_1 : ref)  requires ($neref((__this), ($null))==1);
 {
var $i158 : int;
var r160 : ref;
var $r462 : [int][int]ref;
var $r259 : [int]ref;
var $r563 : [int]ref;
var i055 : int;
var r057 : ref;
var $r361 : ref;
var $r664 : ref;
var i265 : int;
Block49:
	r057 := __this;
	i055 := $param_0;
	r160 := $param_1;
	 //  @line: 51
	i265 := i055;
	 goto Block50;
	 //  @line: 51
Block50:
	 assert ($neref((r057), ($null))==1);
	 //  @line: 51
	$i158 := $HeapVar[r057, int$EquationSystem$n0];
	 goto Block51;
	 //  @line: 51
Block51:
	 goto Block52, Block54;
	 //  @line: 51
Block52:
	 assume ($geint((i265), ($i158))==1);
	 goto Block53;
	 //  @line: 51
Block54:
	 //  @line: 51
	 assume ($negInt(($geint((i265), ($i158))))==1);
	 assert ($neref((r057), ($null))==1);
	 //  @line: 53
	$r462 := $HeapVar[r057, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i055), (0))==1);
	 assert ($ltint((i055), ($fresh10))==1);
	 //  @line: 53
	$r563 := $r462[i055];
	 assert ($geint((i265), (0))==1);
	 assert ($ltint((i265), ($refArrSize[$r563[$arrSizeIdx]]))==1);
	 //  @line: 53
	$r664 := $r563[i265];
	 assert ($neref(($r664), ($null))==1);
	 //  @line: 53
	 call void$Rational$divideBy$2240(($r664), (r160));
	 //  @line: 53
	i265 := $addint((i265), (1));
	 goto Block50;
	 //  @line: 52
Block53:
	 assert ($neref((r057), ($null))==1);
	 //  @line: 52
	$r259 := $HeapVar[r057, Rational$lp$$rp$$EquationSystem$b255];
	 goto Block55;
	 //  @line: 52
Block55:
	 assert ($geint((i055), (0))==1);
	 assert ($ltint((i055), ($refArrSize[$r259[$arrSizeIdx]]))==1);
	 //  @line: 52
	$r361 := $r259[i055];
	 assert ($neref(($r361), ($null))==1);
	 //  @line: 52
	 call void$Rational$divideBy$2240(($r361), (r160));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 5
// <EquationSystem: void <init>(Rational[][],Rational[])>
procedure void$EquationSystem$$la$init$ra$$2228(__this : ref, $param_0 : [int][int]ref, $param_1 : [int]ref)
  modifies $HeapVar, $refArrSize;
  requires ($neref((__this), ($null))==1);
 {
var $r615 : [int]ref;
var $r918 : ref;
var $i512 : int;
var $i410 : int;
var r213 : [int]ref;
var $i37 : int;
var $i14 : int;
var i620 : int;
var $r1019 : [int]ref;
var r12 : [int][int]ref;
var $i25 : int;
var $r514 : ref;
var $r817 : [int]ref;
var $i03 : int;
var i721 : int;
var r01 : ref;
var $r48 : [int]ref;
var $r36 : [int][int]ref;
var $r716 : [int][int]ref;
Block16:
	r01 := __this;
	r12 := $param_0;
	r213 := $param_1;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 6
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 //  @line: 7
	$i03 := $fresh1;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 7
	$HeapVar[r01, int$EquationSystem$n0] := $i03;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 8
	$i25 := $HeapVar[r01, int$EquationSystem$n0];
	 assert ($neref((r01), ($null))==1);
	 //  @line: 8
	$i14 := $HeapVar[r01, int$EquationSystem$n0];
	 //  @line: 8
	$r36 := $fresh1;
	 assume ($negInt(($fresh2))==1);
	 assert ($neref((r01), ($null))==1);
	 //  @line: 8
	$HeapVar[r01, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254] := $r36;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 9
	$i37 := $HeapVar[r01, int$EquationSystem$n0];
	 //  @line: 9
	$r48 := $reftorefarr(($newvariable((18))));
	$refArrSize[$reftorefarr(($newvariable((18))))[$arrSizeIdx]] := $i37;
	 assume ($negInt(($eqrefarray(($reftorefarr(($newvariable((18))))), ($refArrNull))))==1);
	 assert ($neref((r01), ($null))==1);
	 //  @line: 9
	$HeapVar[r01, Rational$lp$$rp$$EquationSystem$b255] := $r48;
	 //  @line: 10
	i620 := 0;
	 goto Block19;
	 //  @line: 10
Block19:
	 assert ($neref((r01), ($null))==1);
	 //  @line: 10
	$i410 := $HeapVar[r01, int$EquationSystem$n0];
	 goto Block20;
	 //  @line: 10
Block20:
	 goto Block21, Block23;
	 //  @line: 10
Block21:
	 assume ($geint((i620), ($i410))==1);
	 goto Block22;
	 //  @line: 10
Block23:
	 //  @line: 10
	 assume ($negInt(($geint((i620), ($i410))))==1);
	 //  @line: 11
	i721 := 0;
	 goto Block24;
	 //  @line: 15
Block22:
	 return;
	 //  @line: 11
Block24:
	 assert ($neref((r01), ($null))==1);
	 //  @line: 11
	$i512 := $HeapVar[r01, int$EquationSystem$n0];
	 goto Block25;
	 //  @line: 11
Block25:
	 goto Block26, Block28;
	 //  @line: 11
Block26:
	 assume ($geint((i721), ($i512))==1);
	 goto Block27;
	 //  @line: 11
Block28:
	 //  @line: 11
	 assume ($negInt(($geint((i721), ($i512))))==1);
	 assert ($neref((r01), ($null))==1);
	 //  @line: 12
	$r716 := $HeapVar[r01, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i620), (0))==1);
	 assert ($ltint((i620), ($fresh3))==1);
	 //  @line: 12
	$r1019 := $r716[i620];
	 assert ($geint((i620), (0))==1);
	 assert ($ltint((i620), ($fresh4))==1);
	 //  @line: 12
	$r817 := r12[i620];
	 assert ($geint((i721), (0))==1);
	 assert ($ltint((i721), ($refArrSize[$r817[$arrSizeIdx]]))==1);
	 //  @line: 12
	$r918 := $r817[i721];
	 assert ($geint((i721), (0))==1);
	 assert ($ltint((i721), ($refArrSize[$r1019[$arrSizeIdx]]))==1);
	 //  @line: 12
	$r1019[i721] := $r918;
	 //  @line: 11
	i721 := $addint((i721), (1));
	 goto Block24;
	 //  @line: 13
Block27:
	 assert ($neref((r01), ($null))==1);
	 //  @line: 13
	$r615 := $HeapVar[r01, Rational$lp$$rp$$EquationSystem$b255];
	 goto Block29;
	 //  @line: 13
Block29:
	 assert ($geint((i620), (0))==1);
	 assert ($ltint((i620), ($refArrSize[r213[$arrSizeIdx]]))==1);
	 //  @line: 13
	$r514 := r213[i620];
	 assert ($geint((i620), (0))==1);
	 assert ($ltint((i620), ($refArrSize[$r615[$arrSizeIdx]]))==1);
	 //  @line: 13
	$r615[i620] := $r514;
	 //  @line: 10
	i620 := $addint((i620), (1));
	 goto Block19;
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 3
// <Rational: void <init>()>
procedure void$Rational$$la$init$ra$$2235(__this : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0124 : ref;
Block96:
	r0124 := __this;
	 assert ($neref((r0124), ($null))==1);
	 //  @line: 4
	 call void$java.lang.Object$$la$init$ra$$28((r0124));
	 assert ($neref((r0124), ($null))==1);
	 //  @line: 5
	$HeapVar[r0124, int$Rational$n0] := 0;
	 assert ($neref((r0124), ($null))==1);
	 //  @line: 5
	$HeapVar[r0124, int$Rational$d0] := 1;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 55
// <EquationSystem: void substract(int,int)>
procedure void$EquationSystem$substract$2232(__this : ref, $param_0 : int, $param_1 : int)  requires ($neref((__this), ($null))==1);
 {
var $r1787 : ref;
var $r1484 : [int]ref;
var $r1383 : [int][int]ref;
var $r572 : ref;
var $r1282 : [int]ref;
var r173 : ref;
var i388 : int;
var i070 : int;
var $r1080 : ref;
var i168 : int;
var $r369 : [int][int]ref;
var $r471 : [int]ref;
var $i275 : int;
var $r878 : ref;
var $r1585 : ref;
var $r676 : [int]ref;
var $r979 : ref;
var $r266 : ref;
var $r1686 : ref;
var $r777 : [int]ref;
var r067 : ref;
var $r1181 : [int][int]ref;
Block56:
	r067 := __this;
	i070 := $param_0;
	i168 := $param_1;
	 //  @line: 56
	$r266 := $newvariable((57));
	 assume ($neref(($newvariable((57))), ($null))==1);
	 assert ($neref((r067), ($null))==1);
	 //  @line: 56
	$r369 := $HeapVar[r067, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i168), (0))==1);
	 assert ($ltint((i168), ($fresh11))==1);
	 //  @line: 56
	$r471 := $r369[i168];
	 assert ($geint((i070), (0))==1);
	 assert ($ltint((i070), ($refArrSize[$r471[$arrSizeIdx]]))==1);
	 //  @line: 56
	$r572 := $r471[i070];
	 assert ($neref(($r266), ($null))==1);
	 //  @line: 56
	 call void$Rational$$la$init$ra$$2237(($r266), ($r572));
	 //  @line: 56
	r173 := $r266;
	 //  @line: 57
	i388 := i070;
	 goto Block58;
	 //  @line: 57
Block58:
	 assert ($neref((r067), ($null))==1);
	 //  @line: 57
	$i275 := $HeapVar[r067, int$EquationSystem$n0];
	 goto Block59;
	 //  @line: 57
Block59:
	 goto Block60, Block62;
	 //  @line: 57
Block60:
	 assume ($geint((i388), ($i275))==1);
	 goto Block61;
	 //  @line: 57
Block62:
	 //  @line: 57
	 assume ($negInt(($geint((i388), ($i275))))==1);
	 assert ($neref((r067), ($null))==1);
	 //  @line: 58
	$r1181 := $HeapVar[r067, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i168), (0))==1);
	 assert ($ltint((i168), ($fresh12))==1);
	 //  @line: 58
	$r1282 := $r1181[i168];
	 assert ($geint((i388), (0))==1);
	 assert ($ltint((i388), ($refArrSize[$r1282[$arrSizeIdx]]))==1);
	 //  @line: 58
	$r1686 := $r1282[i388];
	 assert ($neref((r067), ($null))==1);
	 //  @line: 58
	$r1383 := $HeapVar[r067, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i070), (0))==1);
	 assert ($ltint((i070), ($fresh13))==1);
	 //  @line: 58
	$r1484 := $r1383[i070];
	 assert ($geint((i388), (0))==1);
	 assert ($ltint((i388), ($refArrSize[$r1484[$arrSizeIdx]]))==1);
	 //  @line: 58
	$r1585 := $r1484[i388];
	 assert ($neref((r173), ($null))==1);
	 //  @line: 58
	 call $r1787 := Rational$Rational$times$2239((r173), ($r1585));
	 assert ($neref(($r1686), ($null))==1);
	 //  @line: 58
	 call void$Rational$minus$2238(($r1686), ($r1787));
	 //  @line: 57
	i388 := $addint((i388), (1));
	 goto Block58;
	 //  @line: 59
Block61:
	 assert ($neref((r067), ($null))==1);
	 //  @line: 59
	$r676 := $HeapVar[r067, Rational$lp$$rp$$EquationSystem$b255];
	 goto Block63;
	 //  @line: 59
Block63:
	 assert ($geint((i168), (0))==1);
	 assert ($ltint((i168), ($refArrSize[$r676[$arrSizeIdx]]))==1);
	 //  @line: 59
	$r979 := $r676[i168];
	 assert ($neref((r067), ($null))==1);
	 //  @line: 59
	$r777 := $HeapVar[r067, Rational$lp$$rp$$EquationSystem$b255];
	 assert ($geint((i070), (0))==1);
	 assert ($ltint((i070), ($refArrSize[$r777[$arrSizeIdx]]))==1);
	 //  @line: 59
	$r878 := $r777[i070];
	 assert ($neref((r173), ($null))==1);
	 //  @line: 59
	 call $r1080 := Rational$Rational$times$2239((r173), ($r878));
	 assert ($neref(($r979), ($null))==1);
	 //  @line: 59
	 call void$Rational$minus$2238(($r979), ($r1080));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 80
// <Rational: boolean isZero()>
procedure boolean$Rational$isZero$2245(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i0207 : int;
var r0206 : ref;
var $z0209 : int;
Block179:
	r0206 := __this;
	 assert ($neref((r0206), ($null))==1);
	 //  @line: 81
	$i0207 := $HeapVar[r0206, int$Rational$n0];
	 goto Block180;
	 //  @line: 81
Block180:
	 goto Block181, Block183;
	 //  @line: 81
Block181:
	 assume ($neint(($i0207), (0))==1);
	 goto Block182;
	 //  @line: 81
Block183:
	 //  @line: 81
	 assume ($negInt(($neint(($i0207), (0))))==1);
	 //  @line: 81
	$z0209 := 1;
	 goto Block184;
	 //  @line: 81
Block182:
	 //  @line: 81
	$z0209 := 0;
	 goto Block184;
	 //  @line: 81
Block184:
	 //  @line: 81
	__ret := $z0209;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


	 //  @line: 50
// <Rational: int abs(int)>
procedure int$Rational$abs$2243($param_0 : int) returns (__ret : int) {
var i0177 : int;
var $i1178 : int;
Block136:
	i0177 := $param_0;
	 goto Block137;
	 //  @line: 51
Block137:
	 goto Block138, Block140;
	 //  @line: 51
Block138:
	 assume ($geint((i0177), (0))==1);
	 goto Block139;
	 //  @line: 51
Block140:
	 //  @line: 51
	 assume ($negInt(($geint((i0177), (0))))==1);
	 //  @line: 52
	$i1178 := $mulint((-1), (i0177));
	 //  @line: 52
	__ret := $i1178;
	 return;
	 //  @line: 52
Block139:
	 //  @line: 52
	__ret := i0177;
	 return;
}


	 //  @line: 45
// <Rational: int min(int,int)>
procedure int$Rational$min$2242($param_0 : int, $param_1 : int) returns (__ret : int) {
var i0175 : int;
var i1176 : int;
Block131:
	i0175 := $param_0;
	i1176 := $param_1;
	 goto Block132;
	 //  @line: 46
Block132:
	 goto Block133, Block135;
	 //  @line: 46
Block133:
	 assume ($geint((i0175), (i1176))==1);
	 goto Block134;
	 //  @line: 46
Block135:
	 //  @line: 46
	 assume ($negInt(($geint((i0175), (i1176))))==1);
	 //  @line: 47
	__ret := i0175;
	 return;
	 //  @line: 47
Block134:
	 //  @line: 47
	__ret := i1176;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 28
// <Rational: void divideBy(Rational)>
procedure void$Rational$divideBy$2240(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r1155 : ref;
var r0154 : ref;
var $i4160 : int;
var $i2158 : int;
var $i1157 : int;
var $i0156 : int;
var $i5161 : int;
var $i3159 : int;
Block102:
	r0154 := __this;
	r1155 := $param_0;
	 assert ($neref((r0154), ($null))==1);
	 //  @line: 29
	$i1157 := $HeapVar[r0154, int$Rational$n0];
	 assert ($neref((r1155), ($null))==1);
	 //  @line: 29
	$i0156 := $HeapVar[r1155, int$Rational$d0];
	 //  @line: 29
	$i2158 := $mulint(($i1157), ($i0156));
	 assert ($neref((r0154), ($null))==1);
	 //  @line: 29
	$HeapVar[r0154, int$Rational$n0] := $i2158;
	 assert ($neref((r0154), ($null))==1);
	 //  @line: 30
	$i4160 := $HeapVar[r0154, int$Rational$d0];
	 assert ($neref((r1155), ($null))==1);
	 //  @line: 30
	$i3159 := $HeapVar[r1155, int$Rational$n0];
	 //  @line: 30
	$i5161 := $mulint(($i4160), ($i3159));
	 assert ($neref((r0154), ($null))==1);
	 //  @line: 30
	$HeapVar[r0154, int$Rational$d0] := $i5161;
	 assert ($neref((r0154), ($null))==1);
	 //  @line: 31
	 call void$Rational$simplify$2244((r0154));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 22
// <Rational: Rational times(Rational)>
procedure Rational$Rational$times$2239(__this : ref, $param_0 : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r0145 : ref;
var r2153 : ref;
var r1146 : ref;
var $r3144 : ref;
var $i0147 : int;
var $i3150 : int;
var $i2149 : int;
var $i1148 : int;
var $i5152 : int;
var $i4151 : int;
Block100:
	r0145 := __this;
	r1146 := $param_0;
	 //  @line: 23
	$r3144 := $newvariable((101));
	 assume ($neref(($newvariable((101))), ($null))==1);
	 assert ($neref((r0145), ($null))==1);
	 //  @line: 23
	$i1148 := $HeapVar[r0145, int$Rational$n0];
	 assert ($neref((r1146), ($null))==1);
	 //  @line: 23
	$i0147 := $HeapVar[r1146, int$Rational$n0];
	 //  @line: 23
	$i5152 := $mulint(($i1148), ($i0147));
	 assert ($neref((r0145), ($null))==1);
	 //  @line: 23
	$i3150 := $HeapVar[r0145, int$Rational$d0];
	 assert ($neref((r1146), ($null))==1);
	 //  @line: 23
	$i2149 := $HeapVar[r1146, int$Rational$d0];
	 //  @line: 23
	$i4151 := $mulint(($i3150), ($i2149));
	 assert ($neref(($r3144), ($null))==1);
	 //  @line: 23
	 call void$Rational$$la$init$ra$$2236(($r3144), ($i5152), ($i4151));
	 //  @line: 23
	r2153 := $r3144;
	 assert ($neref((r2153), ($null))==1);
	 //  @line: 24
	 call void$Rational$simplify$2244((r2153));
	 //  @line: 25
	__ret := r2153;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 55
// <Rational: void simplify()>
procedure void$Rational$simplify$2244(__this : ref)
  modifies $HeapVar, $intArrSize;
  requires ($neref((__this), ($null))==1);
 {
var i11202 : int;
var z1204 : int;
var $i9199 : int;
var $i0180 : int;
var $i4192 : int;
var $i3191 : int;
var i12203 : int;
var $i2188 : int;
var $i7195 : int;
var $i1183 : int;
var r1189 : [int]int;
var $i5193 : int;
var r0179 : ref;
var $i6194 : int;
var $z0197 : int;
var i10201 : int;
var i13205 : int;
var $i8198 : int;
Block141:
	r0179 := __this;
	 assert ($neref((r0179), ($null))==1);
	 //  @line: 56
	$i0180 := $HeapVar[r0179, int$Rational$n0];
	 //  @line: 56
	 call i10201 := int$Rational$abs$2243(($i0180));
	 assert ($neref((r0179), ($null))==1);
	 //  @line: 56
	$i1183 := $HeapVar[r0179, int$Rational$d0];
	 //  @line: 56
	 call i11202 := int$Rational$abs$2243(($i1183));
	 //  @line: 57
	 call i12203 := int$Rational$min$2242((i10201), (i11202));
	 //  @line: 59
	$i2188 := $addint((i12203), (1));
	 //  @line: 59
	r1189 := $reftointarr(($newvariable((142))));
	$intArrSize[$reftointarr(($newvariable((142))))[$arrSizeIdx]] := $i2188;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((142))))), ($intArrNull))))==1);
	 //  @line: 60
	 call void$Rational$eratosthene$2241((r1189));
	 //  @line: 62
	z1204 := 1;
	 goto Block143;
	 //  @line: 63
Block143:
	 goto Block144, Block146;
	 //  @line: 63
Block144:
	 assume ($eqint((z1204), (0))==1);
	 goto Block145;
	 //  @line: 63
Block146:
	 //  @line: 63
	 assume ($negInt(($eqint((z1204), (0))))==1);
	 //  @line: 64
	z1204 := 0;
	 //  @line: 65
	i13205 := 2;
	 goto Block147;
	 //  @line: 75
Block145:
	 assert ($neref((r0179), ($null))==1);
	 //  @line: 75
	$i3191 := $HeapVar[r0179, int$Rational$n0];
	 goto Block162;
	 //  @line: 65
Block147:
	 goto Block150, Block148;
	 //  @line: 75
Block162:
	 goto Block165, Block163;
	 //  @line: 65
Block150:
	 //  @line: 65
	 assume ($negInt(($gtint((i13205), (i12203))))==1);
	 assert ($geint((i13205), (0))==1);
	 assert ($ltint((i13205), ($intArrSize[r1189[$arrSizeIdx]]))==1);
	 //  @line: 66
	$z0197 := r1189[i13205];
	 goto Block151;
	 //  @line: 65
Block148:
	 assume ($gtint((i13205), (i12203))==1);
	 goto Block149;
	 //  @line: 75
Block165:
	 //  @line: 75
	 assume ($negInt(($ltint(($i3191), (0))))==1);
	 assert ($neref((r0179), ($null))==1);
	 //  @line: 77
	$i7195 := $HeapVar[r0179, int$Rational$d0];
	 goto Block166;
	 //  @line: 75
Block163:
	 assume ($ltint(($i3191), (0))==1);
	 goto Block164;
	 //  @line: 66
Block151:
	 goto Block152, Block154;
	 //  @line: 65
Block149:
	 goto Block143;
	 //  @line: 77
Block166:
	 goto Block167, Block169;
	 //  @line: 75
Block164:
	 assert ($neref((r0179), ($null))==1);
	 //  @line: 75
	$i4192 := $HeapVar[r0179, int$Rational$n0];
	 goto Block170;
	 //  @line: 66
Block152:
	 assume ($neint(($z0197), (0))==1);
	 goto Block153;
	 //  @line: 66
Block154:
	 //  @line: 66
	 assume ($negInt(($neint(($z0197), (0))))==1);
	 //  @line: 67
	$i8198 := $modint((i10201), (i13205));
	 goto Block155;
	 //  @line: 77
Block167:
	 assume ($geint(($i7195), (0))==1);
	 goto Block168;
	 //  @line: 77
Block169:
	 //  @line: 77
	 assume ($negInt(($geint(($i7195), (0))))==1);
	 goto Block164;
	 //  @line: 75
Block170:
	 goto Block173, Block171;
	 //  @line: 65
Block153:
	 //  @line: 65
	i13205 := $addint((i13205), (1));
	 goto Block161;
	 //  @line: 67
Block155:
	 goto Block156, Block157;
	 //  @line: 77
Block168:
	 assert ($neref((r0179), ($null))==1);
	 //  @line: 77
	$HeapVar[r0179, int$Rational$n0] := i10201;
	 assert ($neref((r0179), ($null))==1);
	 //  @line: 77
	$HeapVar[r0179, int$Rational$d0] := i11202;
	 goto Block177;
	 //  @line: 75
Block173:
	 //  @line: 75
	 assume ($negInt(($gtint(($i4192), (0))))==1);
	 assert ($neref((r0179), ($null))==1);
	 //  @line: 77
	$i6194 := $HeapVar[r0179, int$Rational$d0];
	 goto Block174;
	 //  @line: 75
Block171:
	 assume ($gtint(($i4192), (0))==1);
	 goto Block172;
	 //  @line: 65
Block161:
	 goto Block147;
	 //  @line: 67
Block156:
	 assume ($neint(($i8198), (0))==1);
	 goto Block153;
	 //  @line: 67
Block157:
	 //  @line: 67
	 assume ($negInt(($neint(($i8198), (0))))==1);
	 //  @line: 65
	$i9199 := $modint((i11202), (i13205));
	 goto Block158;
	 //  @line: 77
Block177:
	 return;
	 //  @line: 77
Block174:
	 goto Block176, Block175;
	 //  @line: 76
Block172:
	 //  @line: 76
	$i5193 := $mulint((-1), (i10201));
	 goto Block178;
	 //  @line: 65
Block158:
	 goto Block159, Block160;
	 //  @line: 77
Block176:
	 //  @line: 77
	 assume ($negInt(($gtint(($i6194), (0))))==1);
	 goto Block168;
	 //  @line: 77
Block175:
	 assume ($gtint(($i6194), (0))==1);
	 goto Block172;
	 //  @line: 76
Block178:
	 assert ($neref((r0179), ($null))==1);
	 //  @line: 76
	$HeapVar[r0179, int$Rational$n0] := $i5193;
	 assert ($neref((r0179), ($null))==1);
	 //  @line: 76
	$HeapVar[r0179, int$Rational$d0] := i11202;
	 goto Block177;
	 //  @line: 65
Block159:
	 assume ($neint(($i9199), (0))==1);
	 goto Block153;
	 //  @line: 65
Block160:
	 //  @line: 65
	 assume ($negInt(($neint(($i9199), (0))))==1);
	 assert ($neint((i13205), (0))==1);
	 //  @line: 68
	i10201 := $divint((i10201), (i13205));
	 assert ($neint((i13205), (0))==1);
	 //  @line: 68
	i11202 := $divint((i11202), (i13205));
	 //  @line: 69
	 call i12203 := int$Rational$min$2242((i10201), (i11202));
	 //  @line: 70
	z1204 := 1;
	 goto Block149;
}


	 //  @line: 32
// <EquationSystem: int searchRow(int)>
procedure int$EquationSystem$searchRow$2229(__this : ref, $param_0 : int) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i226 : int;
var i331 : int;
var $r228 : [int]ref;
var $r329 : ref;
var $z030 : int;
var r024 : ref;
var $r127 : [int][int]ref;
var $i125 : int;
var i022 : int;
Block30:
	r024 := __this;
	i022 := $param_0;
	 //  @line: 33
	i331 := i022;
	 goto Block31;
	 //  @line: 33
Block31:
	 assert ($neref((r024), ($null))==1);
	 //  @line: 33
	$i125 := $HeapVar[r024, int$EquationSystem$n0];
	 goto Block32;
	 //  @line: 33
Block32:
	 goto Block33, Block35;
	 //  @line: 33
Block33:
	 assume ($geint((i331), ($i125))==1);
	 goto Block34;
	 //  @line: 33
Block35:
	 //  @line: 33
	 assume ($negInt(($geint((i331), ($i125))))==1);
	 assert ($neref((r024), ($null))==1);
	 //  @line: 34
	$r127 := $HeapVar[r024, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i331), (0))==1);
	 assert ($ltint((i331), ($fresh5))==1);
	 //  @line: 34
	$r228 := $r127[i331];
	 assert ($geint((i022), (0))==1);
	 assert ($ltint((i022), ($refArrSize[$r228[$arrSizeIdx]]))==1);
	 //  @line: 34
	$r329 := $r228[i022];
	 assert ($neref(($r329), ($null))==1);
	 //  @line: 34
	 call $z030 := boolean$Rational$isZero$2245(($r329));
	 goto Block36;
	 //  @line: 35
Block34:
	 assert ($neref((r024), ($null))==1);
	 //  @line: 35
	$i226 := $HeapVar[r024, int$EquationSystem$n0];
	 goto Block41;
	 //  @line: 34
Block36:
	 goto Block37, Block39;
	 //  @line: 35
Block41:
	 //  @line: 35
	__ret := $i226;
	 return;
	 //  @line: 34
Block37:
	 assume ($neint(($z030), (0))==1);
	 goto Block38;
	 //  @line: 34
Block39:
	 //  @line: 34
	 assume ($negInt(($neint(($z030), (0))))==1);
	 //  @line: 33
	__ret := i331;
	 return;
	 //  @line: 33
Block38:
	 //  @line: 33
	i331 := $addint((i331), (1));
	 goto Block40;
	 //  @line: 33
Block40:
	 goto Block31;
}


// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



	 //  @line: 65
// <EquationSystem: boolean diagonalize()>
procedure boolean$EquationSystem$diagonalize$2233(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r090 : ref;
var $i191 : int;
var $r295 : ref;
var $r497 : [int]ref;
var i093 : int;
var $i294 : int;
var $r598 : ref;
var i5103 : int;
var $i3101 : int;
var i4102 : int;
var $r396 : [int][int]ref;
var r199 : ref;
Block64:
	r090 := __this;
	 //  @line: 66
	i4102 := 0;
	 goto Block65;
	 //  @line: 66
Block65:
	 assert ($neref((r090), ($null))==1);
	 //  @line: 66
	$i191 := $HeapVar[r090, int$EquationSystem$n0];
	 goto Block66;
	 //  @line: 66
Block66:
	 goto Block67, Block69;
	 //  @line: 66
Block67:
	 assume ($geint((i4102), ($i191))==1);
	 goto Block68;
	 //  @line: 66
Block69:
	 //  @line: 66
	 assume ($negInt(($geint((i4102), ($i191))))==1);
	 assert ($neref((r090), ($null))==1);
	 //  @line: 67
	 call i093 := int$EquationSystem$searchRow$2229((r090), (i4102));
	 assert ($neref((r090), ($null))==1);
	 //  @line: 68
	$i294 := $HeapVar[r090, int$EquationSystem$n0];
	 goto Block70;
	 //  @line: 76
Block68:
	 //  @line: 76
	__ret := 1;
	 return;
	 //  @line: 68
Block70:
	 goto Block71, Block73;
	 //  @line: 68
Block71:
	 assume ($neint((i093), ($i294))==1);
	 goto Block72;
	 //  @line: 68
Block73:
	 //  @line: 68
	 assume ($negInt(($neint((i093), ($i294))))==1);
	 //  @line: 72
	__ret := 0;
	 return;
	 //  @line: 69
Block72:
	 //  @line: 69
	$r295 := $newvariable((74));
	 assume ($neref(($newvariable((74))), ($null))==1);
	 goto Block75;
	 //  @line: 69
Block75:
	 assert ($neref((r090), ($null))==1);
	 //  @line: 69
	$r396 := $HeapVar[r090, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i093), (0))==1);
	 assert ($ltint((i093), ($fresh14))==1);
	 //  @line: 69
	$r497 := $r396[i093];
	 assert ($geint((i4102), (0))==1);
	 assert ($ltint((i4102), ($refArrSize[$r497[$arrSizeIdx]]))==1);
	 //  @line: 69
	$r598 := $r497[i4102];
	 assert ($neref(($r295), ($null))==1);
	 //  @line: 69
	 call void$Rational$$la$init$ra$$2237(($r295), ($r598));
	 //  @line: 69
	r199 := $r295;
	 assert ($neref((r090), ($null))==1);
	 //  @line: 70
	 call void$EquationSystem$permute$2230((r090), (i4102), (i093));
	 assert ($neref((r090), ($null))==1);
	 //  @line: 71
	 call void$EquationSystem$divide$2231((r090), (i4102), (r199));
	 //  @line: 72
	i5103 := 0;
	 goto Block76;
	 //  @line: 72
Block76:
	 assert ($neref((r090), ($null))==1);
	 //  @line: 72
	$i3101 := $HeapVar[r090, int$EquationSystem$n0];
	 goto Block77;
	 //  @line: 72
Block77:
	 goto Block80, Block78;
	 //  @line: 72
Block80:
	 //  @line: 72
	 assume ($negInt(($geint((i5103), ($i3101))))==1);
	 goto Block81;
	 //  @line: 72
Block78:
	 assume ($geint((i5103), ($i3101))==1);
	 goto Block79;
	 //  @line: 73
Block81:
	 goto Block82, Block84;
	 //  @line: 66
Block79:
	 //  @line: 66
	i4102 := $addint((i4102), (1));
	 goto Block85;
	 //  @line: 73
Block82:
	 assume ($eqint((i5103), (i4102))==1);
	 goto Block83;
	 //  @line: 73
Block84:
	 //  @line: 73
	 assume ($negInt(($eqint((i5103), (i4102))))==1);
	 assert ($neref((r090), ($null))==1);
	 //  @line: 72
	 call void$EquationSystem$substract$2232((r090), (i4102), (i5103));
	 goto Block83;
	 //  @line: 66
Block85:
	 goto Block65;
	 //  @line: 72
Block83:
	 //  @line: 72
	i5103 := $addint((i5103), (1));
	 goto Block76;
}


// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 11
// <Rational: void <init>(Rational)>
procedure void$Rational$$la$init$ra$$2237(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0128 : ref;
var $i0130 : int;
var r1129 : ref;
var $i1131 : int;
Block98:
	r0128 := __this;
	r1129 := $param_0;
	 assert ($neref((r0128), ($null))==1);
	 //  @line: 12
	 call void$java.lang.Object$$la$init$ra$$28((r0128));
	 assert ($neref((r1129), ($null))==1);
	 //  @line: 13
	$i0130 := $HeapVar[r1129, int$Rational$n0];
	 assert ($neref((r0128), ($null))==1);
	 //  @line: 13
	$HeapVar[r0128, int$Rational$n0] := $i0130;
	 assert ($neref((r1129), ($null))==1);
	 //  @line: 13
	$i1131 := $HeapVar[r1129, int$Rational$d0];
	 assert ($neref((r0128), ($null))==1);
	 //  @line: 13
	$HeapVar[r0128, int$Rational$d0] := $i1131;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



	 //  @line: 34
// <Rational: void eratosthene(boolean[])>
procedure void$Rational$eratosthene$2241($param_0 : [int]int) {
var r0163 : [int]int;
var $z0168 : int;
var i8174 : int;
var $i2166 : int;
var $i0164 : int;
var i7173 : int;
var i6172 : int;
var $i5171 : int;
var $i4170 : int;
var $i1165 : int;
var $i3167 : int;
Block103:
	r0163 := $param_0;
	 //  @line: 35
	i6172 := 0;
	 goto Block104;
	 //  @line: 35
Block104:
	 //  @line: 35
	$i0164 := $intArrSize[r0163[$arrSizeIdx]];
	 goto Block105;
	 //  @line: 35
Block105:
	 goto Block106, Block108;
	 //  @line: 35
Block106:
	 assume ($geint((i6172), ($i0164))==1);
	 goto Block107;
	 //  @line: 35
Block108:
	 //  @line: 35
	 assume ($negInt(($geint((i6172), ($i0164))))==1);
	 assert ($geint((i6172), (0))==1);
	 assert ($ltint((i6172), ($intArrSize[r0163[$arrSizeIdx]]))==1);
	 //  @line: 39
	r0163[i6172] := 0;
	 //  @line: 39
	i6172 := $addint((i6172), (1));
	 goto Block104;
	 //  @line: 36
Block107:
	 //  @line: 36
	$i1165 := $intArrSize[r0163[$arrSizeIdx]];
	 goto Block109;
	 //  @line: 36
Block109:
	 goto Block112, Block110;
	 //  @line: 36
Block112:
	 //  @line: 36
	 assume ($negInt(($gtint(($i1165), (4))))==1);
	 return;
	 //  @line: 36
Block110:
	 assume ($gtint(($i1165), (4))==1);
	 goto Block111;
	 //  @line: 37
Block111:
	 //  @line: 37
	i7173 := 1;
	 goto Block113;
	 //  @line: 38
Block113:
	 //  @line: 38
	$i3167 := $mulint((i7173), (i7173));
	 //  @line: 38
	$i2166 := $intArrSize[r0163[$arrSizeIdx]];
	 goto Block114;
	 //  @line: 38
Block114:
	 goto Block117, Block115;
	 //  @line: 38
Block117:
	 //  @line: 38
	 assume ($negInt(($geint(($i3167), ($i2166))))==1);
	 goto Block118;
	 //  @line: 38
Block115:
	 assume ($geint(($i3167), ($i2166))==1);
	 goto Block116;
	 //  @line: 39
Block118:
	 //  @line: 39
	i7173 := $addint((i7173), (1));
	 assert ($geint((i7173), (0))==1);
	 assert ($ltint((i7173), ($intArrSize[r0163[$arrSizeIdx]]))==1);
	 //  @line: 39
	$z0168 := r0163[i7173];
	 goto Block119;
	 //  @line: 43
Block116:
	 return;
	 //  @line: 39
Block119:
	 goto Block122, Block120;
	 //  @line: 39
Block122:
	 //  @line: 39
	 assume ($negInt(($eqint(($z0168), (0))))==1);
	 //  @line: 40
	$i5171 := $intArrSize[r0163[$arrSizeIdx]];
	 goto Block123;
	 //  @line: 39
Block120:
	 assume ($eqint(($z0168), (0))==1);
	 goto Block121;
	 //  @line: 40
Block123:
	 goto Block125, Block124;
	 //  @line: 40
Block121:
	 //  @line: 40
	i8174 := $mulint((2), (i7173));
	 goto Block126;
	 //  @line: 40
Block125:
	 //  @line: 40
	 assume ($negInt(($geint((i7173), ($i5171))))==1);
	 goto Block118;
	 //  @line: 40
Block124:
	 assume ($geint((i7173), ($i5171))==1);
	 goto Block121;
	 //  @line: 40
Block126:
	 //  @line: 40
	$i4170 := $intArrSize[r0163[$arrSizeIdx]];
	 goto Block127;
	 //  @line: 40
Block127:
	 goto Block128, Block130;
	 //  @line: 40
Block128:
	 assume ($geint((i8174), ($i4170))==1);
	 goto Block129;
	 //  @line: 40
Block130:
	 //  @line: 40
	 assume ($negInt(($geint((i8174), ($i4170))))==1);
	 assert ($geint((i8174), (0))==1);
	 assert ($ltint((i8174), ($intArrSize[r0163[$arrSizeIdx]]))==1);
	 //  @line: 41
	r0163[i8174] := 1;
	 //  @line: 40
	i8174 := $addint((i8174), (i7173));
	 goto Block126;
	 //  @line: 40
Block129:
	 goto Block113;
}


	 //  @line: 7
// <Rational: void <init>(int,int)>
procedure void$Rational$$la$init$ra$$2236(__this : ref, $param_0 : int, $param_1 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i0126 : int;
var r0125 : ref;
var i1127 : int;
Block97:
	r0125 := __this;
	i0126 := $param_0;
	i1127 := $param_1;
	 assert ($neref((r0125), ($null))==1);
	 //  @line: 8
	 call void$java.lang.Object$$la$init$ra$$28((r0125));
	 assert ($neref((r0125), ($null))==1);
	 //  @line: 9
	$HeapVar[r0125, int$Rational$n0] := i0126;
	 assert ($neref((r0125), ($null))==1);
	 //  @line: 9
	$HeapVar[r0125, int$Rational$d0] := i1127;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 91
// <EquationSystem: void main(java.lang.String[])>
procedure void$EquationSystem$main$2234($param_0 : [int]ref)
  modifies $stringSize, $refArrSize;
 {
var $r9116 : ref;
var r0104 : [int]ref;
var $r7113 : ref;
var $i3118 : int;
var $i4120 : int;
var r2107 : [int]ref;
var $r10119 : ref;
var $i2114 : int;
var $r5109 : ref;
var r1106 : [int][int]ref;
var $r6110 : [int]ref;
var $i1112 : int;
var r3122 : ref;
var $i0105 : int;
var $r11121 : ref;
var $r8115 : ref;
var $r4108 : ref;

 //temp local variables 
var $freshlocal0 : int;

Block86:
	r0104 := $param_0;
	 //  @line: 92
	$i0105 := $refArrSize[r0104[$arrSizeIdx]];
	 goto Block87;
	 //  @line: 92
Block87:
	 goto Block88, Block90;
	 //  @line: 92
Block88:
	 assume ($ltint(($i0105), (4))==1);
	 goto Block89;
	 //  @line: 92
Block90:
	 //  @line: 92
	 assume ($negInt(($ltint(($i0105), (4))))==1);
	 //  @line: 93
	r1106 := $fresh3;
	 assume ($negInt(($fresh4))==1);
	 //  @line: 94
	r2107 := $reftorefarr(($newvariable((92))));
	$refArrSize[$reftorefarr(($newvariable((92))))[$arrSizeIdx]] := 1;
	 assume ($negInt(($eqrefarray(($reftorefarr(($newvariable((92))))), ($refArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($fresh16))==1);
	 //  @line: 96
	$r6110 := r1106[0];
	 //  @line: 96
	$r4108 := $newvariable((93));
	 assume ($neref(($newvariable((93))), ($null))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($refArrSize[r0104[$arrSizeIdx]]))==1);
	 //  @line: 96
	$r5109 := r0104[0];
	$i1112 := $stringSize[$r5109];
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($refArrSize[r0104[$arrSizeIdx]]))==1);
	 //  @line: 96
	$r7113 := r0104[1];
	$i2114 := $stringSize[$r7113];
	 assert ($neref(($r4108), ($null))==1);
	 //  @line: 96
	 call void$Rational$$la$init$ra$$2236(($r4108), ($i1112), ($i2114));
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($refArrSize[$r6110[$arrSizeIdx]]))==1);
	 //  @line: 96
	$r6110[0] := $r4108;
	 //  @line: 97
	$r8115 := $newvariable((94));
	 assume ($neref(($newvariable((94))), ($null))==1);
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($refArrSize[r0104[$arrSizeIdx]]))==1);
	 //  @line: 97
	$r9116 := r0104[2];
	$i3118 := $stringSize[$r9116];
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($refArrSize[r0104[$arrSizeIdx]]))==1);
	 //  @line: 97
	$r10119 := r0104[3];
	$i4120 := $stringSize[$r10119];
	 assert ($neref(($r8115), ($null))==1);
	 //  @line: 97
	 call void$Rational$$la$init$ra$$2236(($r8115), ($i3118), ($i4120));
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($refArrSize[r2107[$arrSizeIdx]]))==1);
	 //  @line: 97
	r2107[0] := $r8115;
	 //  @line: 99
	$r11121 := $newvariable((95));
	 assume ($neref(($newvariable((95))), ($null))==1);
	 assert ($neref(($r11121), ($null))==1);
	 //  @line: 99
	 call void$EquationSystem$$la$init$ra$$2228(($r11121), (r1106), (r2107));
	 //  @line: 99
	r3122 := $r11121;
	 assert ($neref((r3122), ($null))==1);
	 //  @line: 102
	 call $freshlocal0 := boolean$EquationSystem$diagonalize$2233((r3122));
	 goto Block89;
	 //  @line: 104
Block89:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


	 //  @line: 39
// <EquationSystem: void permute(int,int)>
procedure void$EquationSystem$permute$2230(__this : ref, $param_0 : int, $param_1 : int)  requires ($neref((__this), ($null))==1);
 {
var r1553 : ref;
var $r1148 : ref;
var $r136 : [int]ref;
var $r340 : ref;
var $r643 : [int][int]ref;
var r1654 : ref;
var $r1451 : [int]ref;
var $r1249 : [int]ref;
var i138 : int;
var i352 : int;
var $r542 : [int]ref;
var $i235 : int;
var $r1047 : [int]ref;
var $r239 : [int]ref;
var $r1350 : [int][int]ref;
var $r441 : [int]ref;
var i032 : int;
var $r845 : [int][int]ref;
var $r744 : [int]ref;
var r034 : ref;
var $r946 : [int][int]ref;
Block42:
	r034 := __this;
	i032 := $param_0;
	i138 := $param_1;
	 //  @line: 40
	i352 := i032;
	 goto Block43;
	 //  @line: 40
Block43:
	 assert ($neref((r034), ($null))==1);
	 //  @line: 40
	$i235 := $HeapVar[r034, int$EquationSystem$n0];
	 goto Block44;
	 //  @line: 40
Block44:
	 goto Block45, Block47;
	 //  @line: 40
Block45:
	 assume ($geint((i352), ($i235))==1);
	 goto Block46;
	 //  @line: 40
Block47:
	 //  @line: 40
	 assume ($negInt(($geint((i352), ($i235))))==1);
	 assert ($neref((r034), ($null))==1);
	 //  @line: 41
	$r643 := $HeapVar[r034, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i032), (0))==1);
	 assert ($ltint((i032), ($fresh6))==1);
	 //  @line: 41
	$r744 := $r643[i032];
	 assert ($geint((i352), (0))==1);
	 assert ($ltint((i352), ($refArrSize[$r744[$arrSizeIdx]]))==1);
	 //  @line: 41
	r1553 := $r744[i352];
	 assert ($neref((r034), ($null))==1);
	 //  @line: 42
	$r845 := $HeapVar[r034, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i032), (0))==1);
	 assert ($ltint((i032), ($fresh7))==1);
	 //  @line: 42
	$r1249 := $r845[i032];
	 assert ($neref((r034), ($null))==1);
	 //  @line: 42
	$r946 := $HeapVar[r034, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i138), (0))==1);
	 assert ($ltint((i138), ($fresh8))==1);
	 //  @line: 42
	$r1047 := $r946[i138];
	 assert ($geint((i352), (0))==1);
	 assert ($ltint((i352), ($refArrSize[$r1047[$arrSizeIdx]]))==1);
	 //  @line: 42
	$r1148 := $r1047[i352];
	 assert ($geint((i352), (0))==1);
	 assert ($ltint((i352), ($refArrSize[$r1249[$arrSizeIdx]]))==1);
	 //  @line: 42
	$r1249[i352] := $r1148;
	 assert ($neref((r034), ($null))==1);
	 //  @line: 43
	$r1350 := $HeapVar[r034, Rational$lp$$rp$$lp$$rp$$EquationSystem$A254];
	 assert ($geint((i138), (0))==1);
	 assert ($ltint((i138), ($fresh9))==1);
	 //  @line: 43
	$r1451 := $r1350[i138];
	 assert ($geint((i352), (0))==1);
	 assert ($ltint((i352), ($refArrSize[$r1451[$arrSizeIdx]]))==1);
	 //  @line: 43
	$r1451[i352] := r1553;
	 //  @line: 40
	i352 := $addint((i352), (1));
	 goto Block43;
	 //  @line: 45
Block46:
	 assert ($neref((r034), ($null))==1);
	 //  @line: 45
	$r136 := $HeapVar[r034, Rational$lp$$rp$$EquationSystem$b255];
	 goto Block48;
	 //  @line: 45
Block48:
	 assert ($geint((i032), (0))==1);
	 assert ($ltint((i032), ($refArrSize[$r136[$arrSizeIdx]]))==1);
	 //  @line: 45
	r1654 := $r136[i032];
	 assert ($neref((r034), ($null))==1);
	 //  @line: 46
	$r441 := $HeapVar[r034, Rational$lp$$rp$$EquationSystem$b255];
	 assert ($neref((r034), ($null))==1);
	 //  @line: 46
	$r239 := $HeapVar[r034, Rational$lp$$rp$$EquationSystem$b255];
	 assert ($geint((i138), (0))==1);
	 assert ($ltint((i138), ($refArrSize[$r239[$arrSizeIdx]]))==1);
	 //  @line: 46
	$r340 := $r239[i138];
	 assert ($geint((i032), (0))==1);
	 assert ($ltint((i032), ($refArrSize[$r441[$arrSizeIdx]]))==1);
	 //  @line: 46
	$r441[i032] := $r340;
	 assert ($neref((r034), ($null))==1);
	 //  @line: 47
	$r542 := $HeapVar[r034, Rational$lp$$rp$$EquationSystem$b255];
	 assert ($geint((i138), (0))==1);
	 assert ($ltint((i138), ($refArrSize[$r542[$arrSizeIdx]]))==1);
	 //  @line: 47
	$r542[i138] := r1654;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 16
// <Rational: void minus(Rational)>
procedure void$Rational$minus$2238(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i4138 : int;
var $i9143 : int;
var $i5139 : int;
var $i8142 : int;
var r1133 : ref;
var $i6140 : int;
var $i3137 : int;
var $i7141 : int;
var $i1135 : int;
var $i2136 : int;
var r0132 : ref;
var $i0134 : int;
Block99:
	r0132 := __this;
	r1133 := $param_0;
	 assert ($neref((r0132), ($null))==1);
	 //  @line: 17
	$i1135 := $HeapVar[r0132, int$Rational$n0];
	 assert ($neref((r1133), ($null))==1);
	 //  @line: 17
	$i0134 := $HeapVar[r1133, int$Rational$d0];
	 //  @line: 17
	$i5139 := $mulint(($i1135), ($i0134));
	 assert ($neref((r1133), ($null))==1);
	 //  @line: 17
	$i3137 := $HeapVar[r1133, int$Rational$n0];
	 assert ($neref((r0132), ($null))==1);
	 //  @line: 17
	$i2136 := $HeapVar[r0132, int$Rational$d0];
	 //  @line: 17
	$i4138 := $mulint(($i3137), ($i2136));
	 //  @line: 17
	$i6140 := $subint(($i5139), ($i4138));
	 assert ($neref((r0132), ($null))==1);
	 //  @line: 17
	$HeapVar[r0132, int$Rational$n0] := $i6140;
	 assert ($neref((r0132), ($null))==1);
	 //  @line: 18
	$i8142 := $HeapVar[r0132, int$Rational$d0];
	 assert ($neref((r1133), ($null))==1);
	 //  @line: 18
	$i7141 := $HeapVar[r1133, int$Rational$d0];
	 //  @line: 18
	$i9143 := $mulint(($i8142), ($i7141));
	 assert ($neref((r0132), ($null))==1);
	 //  @line: 18
	$HeapVar[r0132, int$Rational$d0] := $i9143;
	 assert ($neref((r0132), ($null))==1);
	 //  @line: 19
	 call void$Rational$simplify$2244((r0132));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


