type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var CyclicalListDuplicate$CyclicalListDuplicate$next254 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 22
// <CyclicalListDuplicate: void <init>(CyclicalListDuplicate)>
procedure void$CyclicalListDuplicate$$la$init$ra$$2229(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r05 : ref;
var r16 : ref;
Block21:
	r05 := __this;
	r16 := $param_0;
	 assert ($neref((r05), ($null))==1);
	 //  @line: 23
	 call void$java.lang.Object$$la$init$ra$$28((r05));
	 assert ($neref((r05), ($null))==1);
	 //  @line: 24
	$HeapVar[r05, CyclicalListDuplicate$CyclicalListDuplicate$next254] := r16;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 28
// <CyclicalListDuplicate: CyclicalListDuplicate generate(int)>
procedure CyclicalListDuplicate$CyclicalListDuplicate$generate$2230($param_0 : int) returns (__ret : ref)
  modifies $HeapVar;
 {
var $r17 : ref;
var r09 : ref;
var $i112 : int;
var r314 : ref;
var i011 : int;
var i215 : int;
var $r213 : ref;
Block22:
	i011 := $param_0;
	 //  @line: 29
	$r17 := $newvariable((23));
	 assume ($neref(($newvariable((23))), ($null))==1);
	 assert ($neref(($r17), ($null))==1);
	 //  @line: 29
	 call void$CyclicalListDuplicate$$la$init$ra$$2229(($r17), ($null));
	 //  @line: 29
	r314 := $r17;
	 //  @line: 29
	r09 := $r17;
	 //  @line: 30
	i215 := 0;
	 goto Block24;
	 //  @line: 30
Block24:
	 //  @line: 30
	$i112 := $subint((i011), (1));
	 goto Block25;
	 //  @line: 30
Block25:
	 goto Block26, Block28;
	 //  @line: 30
Block26:
	 assume ($geint((i215), ($i112))==1);
	 goto Block27;
	 //  @line: 30
Block28:
	 //  @line: 30
	 assume ($negInt(($geint((i215), ($i112))))==1);
	 //  @line: 31
	$r213 := $newvariable((29));
	 assume ($neref(($newvariable((29))), ($null))==1);
	 assert ($neref(($r213), ($null))==1);
	 //  @line: 31
	 call void$CyclicalListDuplicate$$la$init$ra$$2229(($r213), (r314));
	 //  @line: 31
	r314 := $r213;
	 //  @line: 30
	i215 := $addint((i215), (1));
	 goto Block24;
	 //  @line: 33
Block27:
	 assert ($neref((r09), ($null))==1);
	 //  @line: 33
	$HeapVar[r09, CyclicalListDuplicate$CyclicalListDuplicate$next254] := r314;
	 goto Block30;
	 //  @line: 34
Block30:
	 //  @line: 34
	__ret := r314;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 41
// <CyclicalListDuplicate: void duplicate()>
procedure void$CyclicalListDuplicate$duplicate$2231(__this : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r321 : ref;
var r122 : ref;
var r016 : ref;
var z024 : int;
var $r220 : ref;
var $z125 : int;
var r423 : ref;
Block31:
	r016 := __this;
	 //  @line: 42
	r423 := r016;
	 //  @line: 43
	z024 := 1;
	 goto Block32;
	 //  @line: 44
Block32:
	 goto Block33, Block35;
	 //  @line: 44
Block33:
	 assume ($eqref((r423), ($null))==1);
	 goto Block34;
	 //  @line: 44
Block35:
	 //  @line: 44
	 assume ($negInt(($eqref((r423), ($null))))==1);
	 goto Block36;
	 //  @line: 53
Block34:
	 return;
	 //  @line: 46
Block36:
	 goto Block37, Block39;
	 //  @line: 46
Block37:
	 assume ($eqint((z024), (0))==1);
	 goto Block38;
	 //  @line: 46
Block39:
	 //  @line: 46
	 assume ($negInt(($eqint((z024), (0))))==1);
	 //  @line: 47
	$r220 := $newvariable((40));
	 assume ($neref(($newvariable((40))), ($null))==1);
	 assert ($neref((r423), ($null))==1);
	 //  @line: 47
	$r321 := $HeapVar[r423, CyclicalListDuplicate$CyclicalListDuplicate$next254];
	 assert ($neref(($r220), ($null))==1);
	 //  @line: 47
	 call void$CyclicalListDuplicate$$la$init$ra$$2229(($r220), ($r321));
	 //  @line: 47
	r122 := $r220;
	 assert ($neref((r423), ($null))==1);
	 //  @line: 48
	$HeapVar[r423, CyclicalListDuplicate$CyclicalListDuplicate$next254] := r122;
	 goto Block38;
	 //  @line: 50
Block38:
	 assert ($neref((r423), ($null))==1);
	 //  @line: 50
	r423 := $HeapVar[r423, CyclicalListDuplicate$CyclicalListDuplicate$next254];
	 goto Block41;
	 //  @line: 51
Block41:
	 goto Block42, Block44;
	 //  @line: 51
Block42:
	 assume ($neint((z024), (0))==1);
	 goto Block43;
	 //  @line: 51
Block44:
	 //  @line: 51
	 assume ($negInt(($neint((z024), (0))))==1);
	 //  @line: 44
	$z125 := 1;
	 goto Block45;
	 //  @line: 44
Block43:
	 //  @line: 44
	$z125 := 0;
	 goto Block45;
	 //  @line: 51
Block45:
	 //  @line: 51
	z024 := $z125;
	 goto Block46;
	 //  @line: 51
Block46:
	 goto Block32;
}


// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



	 //  @line: 12
// <CyclicalListDuplicate: void main(java.lang.String[])>
procedure void$CyclicalListDuplicate$main$2228($param_0 : [int]ref) {
var r14 : ref;
var $i02 : int;
var r01 : [int]ref;
Block16:
	r01 := $param_0;
	 //  @line: 13
	$i02 := $refArrSize[r01[$arrSizeIdx]];
	 //  @line: 13
	 call r14 := CyclicalListDuplicate$CyclicalListDuplicate$generate$2230(($i02));
	 goto Block17;
	 //  @line: 14
Block17:
	 goto Block18, Block20;
	 //  @line: 14
Block18:
	 assume ($eqref((r14), ($null))==1);
	 goto Block19;
	 //  @line: 14
Block20:
	 //  @line: 14
	 assume ($negInt(($eqref((r14), ($null))))==1);
	 assert ($neref((r14), ($null))==1);
	 //  @line: 15
	 call void$CyclicalListDuplicate$duplicate$2231((r14));
	 goto Block19;
	 //  @line: 17
Block19:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


