type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var IntListSumRec.List$IntListSumRec.List$next255 : Field ref;
var int$IntListSumRec.List$value0 : Field int;
var int$IntListSumRec.Random$index0 : int;
var java.lang.String$lp$$rp$$IntListSumRec.Random$args254 : [int]ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 15
// <IntListSumRec.List: void <init>(int,IntListSumRec.List)>
procedure void$IntListSumRec.List$$la$init$ra$$2233(__this : ref, $param_0 : int, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r015 : ref;
var r117 : ref;
var i016 : int;
Block21:
	r015 := __this;
	i016 := $param_0;
	r117 := $param_1;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 16
	 call void$java.lang.Object$$la$init$ra$$28((r015));
	 assert ($neref((r015), ($null))==1);
	 //  @line: 17
	$HeapVar[r015, int$IntListSumRec.List$value0] := i016;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 18
	$HeapVar[r015, IntListSumRec.List$IntListSumRec.List$next255] := r117;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


	 //  @line: 2
// <IntListSumRec.IntListSumRec: void <init>()>
procedure void$IntListSumRec.IntListSumRec$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 42
// <IntListSumRec.Random: void <clinit>()>
procedure void$IntListSumRec.Random$$la$clinit$ra$$2232()
  modifies int$IntListSumRec.Random$index0;
 {
	 //  @line: 43
Block20:
	 //  @line: 43
	int$IntListSumRec.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


	 //  @line: 21
// <IntListSumRec.List: int sumList()>
procedure int$IntListSumRec.List$sumList$2234(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i328 : int;
var i023 : int;
var $i222 : int;
var $i121 : int;
var r227 : ref;
var $r319 : ref;
var r018 : ref;
var r125 : ref;
var $i429 : int;
var $r420 : ref;
var $r626 : ref;
var $r524 : ref;
Block22:
	r018 := __this;
	 assert ($neref((r018), ($null))==1);
	 //  @line: 22
	$r319 := $HeapVar[r018, IntListSumRec.List$IntListSumRec.List$next255];
	 goto Block23;
	 //  @line: 22
Block23:
	 goto Block24, Block26;
	 //  @line: 22
Block24:
	 assume ($neref(($r319), ($null))==1);
	 goto Block25;
	 //  @line: 22
Block26:
	 //  @line: 22
	 assume ($negInt(($neref(($r319), ($null))))==1);
	 assert ($neref((r018), ($null))==1);
	 //  @line: 23
	$i429 := $HeapVar[r018, int$IntListSumRec.List$value0];
	 //  @line: 23
	__ret := $i429;
	 return;
	 //  @line: 25
Block25:
	 assert ($neref((r018), ($null))==1);
	 //  @line: 25
	$i222 := $HeapVar[r018, int$IntListSumRec.List$value0];
	 goto Block27;
	 //  @line: 25
Block27:
	 assert ($neref((r018), ($null))==1);
	 //  @line: 25
	$r420 := $HeapVar[r018, IntListSumRec.List$IntListSumRec.List$next255];
	 assert ($neref(($r420), ($null))==1);
	 //  @line: 25
	$i121 := $HeapVar[$r420, int$IntListSumRec.List$value0];
	 //  @line: 25
	i023 := $addint(($i222), ($i121));
	 assert ($neref((r018), ($null))==1);
	 //  @line: 26
	$r524 := $HeapVar[r018, IntListSumRec.List$IntListSumRec.List$next255];
	 assert ($neref(($r524), ($null))==1);
	 //  @line: 26
	r125 := $HeapVar[$r524, IntListSumRec.List$IntListSumRec.List$next255];
	 //  @line: 27
	$r626 := $newvariable((28));
	 assume ($neref(($newvariable((28))), ($null))==1);
	 assert ($neref(($r626), ($null))==1);
	 //  @line: 27
	 call void$IntListSumRec.List$$la$init$ra$$2233(($r626), (i023), (r125));
	 //  @line: 27
	r227 := $r626;
	 assert ($neref((r227), ($null))==1);
	 //  @line: 28
	 call $i328 := int$IntListSumRec.List$sumList$2234((r227));
	 //  @line: 28
	__ret := $i328;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



	 //  @line: 32
// <IntListSumRec.List: IntListSumRec.List createList(int)>
procedure IntListSumRec.List$IntListSumRec.List$createList$2235($param_0 : int) returns (__ret : ref) {
var $i132 : int;
var $i233 : int;
var $r031 : ref;
var $r134 : ref;
var i030 : int;
Block29:
	i030 := $param_0;
	 goto Block30;
	 //  @line: 33
Block30:
	 goto Block33, Block31;
	 //  @line: 33
Block33:
	 //  @line: 33
	 assume ($negInt(($geint((i030), (0))))==1);
	 //  @line: 34
	__ret := $null;
	 return;
	 //  @line: 33
Block31:
	 assume ($geint((i030), (0))==1);
	 goto Block32;
	 //  @line: 36
Block32:
	 //  @line: 36
	$r031 := $newvariable((34));
	 assume ($neref(($newvariable((34))), ($null))==1);
	 goto Block35;
	 //  @line: 36
Block35:
	 //  @line: 36
	 call $i132 := int$IntListSumRec.Random$random$2231();
	 //  @line: 36
	$i233 := $subint((i030), (1));
	 //  @line: 36
	 call $r134 := IntListSumRec.List$IntListSumRec.List$createList$2235(($i233));
	 assert ($neref(($r031), ($null))==1);
	 //  @line: 36
	 call void$IntListSumRec.List$$la$init$ra$$2233(($r031), ($i132), ($r134));
	 //  @line: 36
	__ret := $r031;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


	 //  @line: 40
// <IntListSumRec.Random: void <init>()>
procedure void$IntListSumRec.Random$$la$init$ra$$2230(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r08 : ref;
Block18:
	r08 := __this;
	 assert ($neref((r08), ($null))==1);
	 //  @line: 41
	 call void$java.lang.Object$$la$init$ra$$28((r08));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 45
// <IntListSumRec.Random: int random()>
procedure int$IntListSumRec.Random$random$2231() returns (__ret : int)
  modifies int$IntListSumRec.Random$index0, $stringSize;
 {
var r011 : ref;
var $i314 : int;
var $i112 : int;
var $i213 : int;
var $r110 : [int]ref;
var $i09 : int;
	 //  @line: 46
Block19:
	 //  @line: 46
	$r110 := java.lang.String$lp$$rp$$IntListSumRec.Random$args254;
	 //  @line: 46
	$i09 := int$IntListSumRec.Random$index0;
	 assert ($geint(($i09), (0))==1);
	 assert ($ltint(($i09), ($refArrSize[$r110[$arrSizeIdx]]))==1);
	 //  @line: 46
	r011 := $r110[$i09];
	 //  @line: 47
	$i112 := int$IntListSumRec.Random$index0;
	 //  @line: 47
	$i213 := $addint(($i112), (1));
	 //  @line: 47
	int$IntListSumRec.Random$index0 := $i213;
	$i314 := $stringSize[r011];
	 //  @line: 48
	__ret := $i314;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


	 //  @line: 4
// <IntListSumRec.IntListSumRec: void main(java.lang.String[])>
procedure void$IntListSumRec.IntListSumRec$main$2229($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$IntListSumRec.Random$args254;
 {
var $i13 : int;
var r02 : [int]ref;
var r15 : ref;

 //temp local variables 
var $freshlocal0 : int;

Block17:
	r02 := $param_0;
	 //  @line: 5
	java.lang.String$lp$$rp$$IntListSumRec.Random$args254 := r02;
	 //  @line: 6
	 call $i13 := int$IntListSumRec.Random$random$2231();
	 //  @line: 6
	 call r15 := IntListSumRec.List$IntListSumRec.List$createList$2235(($i13));
	 assert ($neref((r15), ($null))==1);
	 //  @line: 8
	 call $freshlocal0 := int$IntListSumRec.List$sumList$2234((r15));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


