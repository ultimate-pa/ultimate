type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var char$LinkedList$head0 : Field int;
var LinkedList$LinkedList$tail254 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// <Infix2Postfix: void <init>()>
procedure void$Infix2Postfix$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



	 //  @line: 20
// <Infix2Postfix: LinkedList toPostfix(LinkedList)>
procedure LinkedList$Infix2Postfix$toPostfix$2230($param_0 : ref) returns (__ret : ref) {
var $c133 : int;
var $r335 : ref;
var r537 : ref;
var r740 : ref;
var r638 : ref;
var r436 : ref;
var c239 : int;
var $r131 : ref;
var $r026 : ref;
var $r232 : ref;
var $c027 : int;
Block42:
	r436 := $param_0;
	 //  @line: 21
	r537 := $null;
	 //  @line: 21
	r638 := $null;
	 goto Block43;
	 //  @line: 22
Block43:
	 goto Block46, Block44;
	 //  @line: 22
Block46:
	 //  @line: 22
	 assume ($negInt(($eqref((r436), ($null))))==1);
	 assert ($neref((r436), ($null))==1);
	 //  @line: 23
	 call c239 := char$LinkedList$getFirst$2233((r436));
	 goto Block47;
	 //  @line: 22
Block44:
	 assume ($eqref((r436), ($null))==1);
	 goto Block45;
	 //  @line: 24
Block47:
	 goto Block48, Block50;
	 //  @line: 39
Block45:
	 //  @line: 39
	r740 := $null;
	 goto Block83;
	 //  @line: 25
Block48:
	 //  @line: 25
	 assume ($eqint((c239), (40))==1);
	 goto Block49;
	 //  @line: 25
Block50:
	 //  @line: 25
	 assume ($neint((c239), (40))==1);
	 goto Block51;
	 //  @line: 40
Block83:
	 goto Block84, Block86;
	 //  @line: 25
Block49:
	 goto Block76;
	 //  @line: 25
Block51:
	 goto Block54, Block52;
	 //  @line: 40
Block84:
	 assume ($eqref((r638), ($null))==1);
	 goto Block85;
	 //  @line: 40
Block86:
	 //  @line: 40
	 assume ($negInt(($eqref((r638), ($null))))==1);
	 //  @line: 41
	$r026 := $newvariable((87));
	 assume ($neref(($newvariable((87))), ($null))==1);
	 assert ($neref((r638), ($null))==1);
	 //  @line: 41
	 call $c027 := char$LinkedList$getFirst$2233((r638));
	 assert ($neref(($r026), ($null))==1);
	 //  @line: 41
	 call void$LinkedList$$la$init$ra$$2232(($r026), ($c027), (r740));
	 //  @line: 41
	r740 := $r026;
	 assert ($neref((r638), ($null))==1);
	 //  @line: 42
	 call r638 := LinkedList$LinkedList$getTail$2234((r638));
	 goto Block83;
	 //  @line: 36
Block76:
	 assert ($neref((r436), ($null))==1);
	 //  @line: 36
	 call r436 := LinkedList$LinkedList$getTail$2234((r436));
	 goto Block43;
	 //  @line: 30
Block54:
	 //  @line: 30
	 assume ($neint((c239), (41))==1);
	 goto Block55;
	 //  @line: 30
Block52:
	 //  @line: 30
	 assume ($eqint((c239), (41))==1);
	 goto Block53;
	 //  @line: 45
Block85:
	 //  @line: 45
	__ret := r740;
	 return;
	 //  @line: 30
Block55:
	 goto Block58, Block56;
	 //  @line: 30
Block53:
	 //  @line: 30
	$r232 := $newvariable((79));
	 assume ($neref(($newvariable((79))), ($null))==1);
	 goto Block80;
	 //  @line: 27
Block58:
	 //  @line: 27
	 assume ($neint((c239), (42))==1);
	 goto Block59;
	 //  @line: 27
Block56:
	 //  @line: 27
	 assume ($eqint((c239), (42))==1);
	 goto Block57;
	 //  @line: 30
Block80:
	 assert ($neref((r537), ($null))==1);
	 //  @line: 30
	 call $c133 := char$LinkedList$getFirst$2233((r537));
	 assert ($neref(($r232), ($null))==1);
	 //  @line: 30
	 call void$LinkedList$$la$init$ra$$2232(($r232), ($c133), (r638));
	 //  @line: 30
	r638 := $r232;
	 assert ($neref((r537), ($null))==1);
	 //  @line: 31
	 call r537 := LinkedList$LinkedList$getTail$2234((r537));
	 goto Block76;
	 //  @line: 27
Block59:
	 goto Block60, Block61;
	 //  @line: 27
Block57:
	 //  @line: 27
	$r131 := $newvariable((77));
	 assume ($neref(($newvariable((77))), ($null))==1);
	 goto Block78;
	 //  @line: 27
Block60:
	 //  @line: 27
	 assume ($eqint((c239), (43))==1);
	 goto Block57;
	 //  @line: 27
Block61:
	 //  @line: 27
	 assume ($neint((c239), (43))==1);
	 goto Block62;
	 //  @line: 27
Block78:
	 assert ($neref(($r131), ($null))==1);
	 //  @line: 27
	 call void$LinkedList$$la$init$ra$$2232(($r131), (c239), (r537));
	 //  @line: 27
	r537 := $r131;
	 goto Block76;
	 //  @line: 27
Block62:
	 goto Block63, Block65;
	 //  @line: 34
Block63:
	 //  @line: 34
	 assume ($eqint((c239), (44))==1);
	 goto Block64;
	 //  @line: 34
Block65:
	 //  @line: 34
	 assume ($neint((c239), (44))==1);
	 goto Block66;
	 //  @line: 34
Block64:
	 //  @line: 34
	$r335 := $newvariable((81));
	 assume ($neref(($newvariable((81))), ($null))==1);
	 goto Block82;
	 //  @line: 34
Block66:
	 goto Block68, Block67;
	 //  @line: 34
Block82:
	 assert ($neref(($r335), ($null))==1);
	 //  @line: 34
	 call void$LinkedList$$la$init$ra$$2232(($r335), (c239), (r638));
	 //  @line: 34
	r638 := $r335;
	 goto Block76;
	 //  @line: 27
Block68:
	 //  @line: 27
	 assume ($neint((c239), (45))==1);
	 goto Block69;
	 //  @line: 27
Block67:
	 //  @line: 27
	 assume ($eqint((c239), (45))==1);
	 goto Block57;
	 //  @line: 27
Block69:
	 goto Block70, Block71;
	 //  @line: 34
Block70:
	 //  @line: 34
	 assume ($eqint((c239), (46))==1);
	 goto Block64;
	 //  @line: 34
Block71:
	 //  @line: 34
	 assume ($neint((c239), (46))==1);
	 goto Block72;
	 //  @line: 34
Block72:
	 goto Block74, Block73;
	 //  @line: 27
Block74:
	 //  @line: 27
	 assume ($neint((c239), (47))==1);
	 goto Block75;
	 //  @line: 27
Block73:
	 //  @line: 27
	 assume ($eqint((c239), (47))==1);
	 goto Block57;
	 //  @line: 27
Block75:
	 goto Block64;
}


// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



	 //  @line: 14
// <LinkedList: LinkedList getTail()>
procedure LinkedList$LinkedList$getTail$2234(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r153 : ref;
var r052 : ref;
Block91:
	r052 := __this;
	 assert ($neref((r052), ($null))==1);
	 //  @line: 15
	$r153 := $HeapVar[r052, LinkedList$LinkedList$tail254];
	 //  @line: 15
	__ret := $r153;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 10
// <LinkedList: char getFirst()>
procedure char$LinkedList$getFirst$2233(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r050 : ref;
var $c051 : int;
Block90:
	r050 := __this;
	 assert ($neref((r050), ($null))==1);
	 //  @line: 11
	$c051 := $HeapVar[r050, char$LinkedList$head0];
	 //  @line: 11
	__ret := $c051;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


	 //  @line: 48
// <Infix2Postfix: void main(java.lang.String[])>
procedure void$Infix2Postfix$main$2231($param_0 : [int]ref) {
var $i042 : int;
var r041 : [int]ref;
var r144 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block88:
	r041 := $param_0;
	 //  @line: 49
	$i042 := $refArrSize[r041[$arrSizeIdx]];
	 //  @line: 49
	 call r144 := LinkedList$Infix2Postfix$buildExpression$2229(($i042));
	 //  @line: 51
	 call $freshlocal0 := LinkedList$Infix2Postfix$toPostfix$2230((r144));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 2
// <Infix2Postfix: LinkedList buildExpression(int)>
procedure LinkedList$Infix2Postfix$buildExpression$2229($param_0 : int) returns (__ret : ref) {
var r1119 : ref;
var $r410 : ref;
var $i16 : int;
var r1220 : ref;
var i421 : int;
var $i212 : int;
var r815 : ref;
var i04 : int;
var $r39 : ref;
var $r714 : ref;
var $r613 : ref;
var r1018 : ref;
var $r28 : ref;
var $r511 : ref;
var $r05 : ref;
var i316 : int;
var r917 : ref;
var $r17 : ref;
Block17:
	i04 := $param_0;
	 //  @line: 3
	r815 := $null;
	 //  @line: 4
	i316 := 1;
	 goto Block18;
	 //  @line: 4
Block18:
	 goto Block19, Block21;
	 //  @line: 4
Block19:
	 assume ($gtint((i316), (i04))==1);
	 goto Block20;
	 //  @line: 4
Block21:
	 //  @line: 4
	 assume ($negInt(($gtint((i316), (i04))))==1);
	 //  @line: 5
	$i16 := $subint((i04), (1));
	 goto Block22;
	 //  @line: 14
Block20:
	 //  @line: 14
	i421 := 1;
	 goto Block37;
	 //  @line: 5
Block22:
	 goto Block23, Block25;
	 //  @line: 14
Block37:
	 goto Block38, Block40;
	 //  @line: 5
Block23:
	 assume ($gtint((i316), ($i16))==1);
	 goto Block24;
	 //  @line: 5
Block25:
	 //  @line: 5
	 assume ($negInt(($gtint((i316), ($i16))))==1);
	 //  @line: 4
	$r714 := $newvariable((26));
	 assume ($neref(($newvariable((26))), ($null))==1);
	 assert ($neref(($r714), ($null))==1);
	 //  @line: 4
	 call void$LinkedList$$la$init$ra$$2232(($r714), (41), (r815));
	 //  @line: 4
	r815 := $r714;
	 goto Block24;
	 //  @line: 14
Block38:
	 assume ($geint((i421), (i04))==1);
	 goto Block39;
	 //  @line: 14
Block40:
	 //  @line: 14
	 assume ($negInt(($geint((i421), (i04))))==1);
	 //  @line: 15
	$r05 := $newvariable((41));
	 assume ($neref(($newvariable((41))), ($null))==1);
	 assert ($neref(($r05), ($null))==1);
	 //  @line: 15
	 call void$LinkedList$$la$init$ra$$2232(($r05), (40), (r815));
	 //  @line: 15
	r815 := $r05;
	 //  @line: 14
	i421 := $addint((i421), (1));
	 goto Block37;
	 //  @line: 6
Block24:
	 //  @line: 6
	$r17 := $newvariable((27));
	 assume ($neref(($newvariable((27))), ($null))==1);
	 assert ($neref(($r17), ($null))==1);
	 //  @line: 6
	 call void$LinkedList$$la$init$ra$$2232(($r17), (41), (r815));
	 //  @line: 6
	r917 := $r17;
	 //  @line: 7
	$r28 := $newvariable((28));
	 assume ($neref(($newvariable((28))), ($null))==1);
	 assert ($neref(($r28), ($null))==1);
	 //  @line: 7
	 call void$LinkedList$$la$init$ra$$2232(($r28), (98), (r917));
	 //  @line: 7
	r1018 := $r28;
	 //  @line: 8
	$r39 := $newvariable((29));
	 assume ($neref(($newvariable((29))), ($null))==1);
	 assert ($neref(($r39), ($null))==1);
	 //  @line: 8
	 call void$LinkedList$$la$init$ra$$2232(($r39), (43), (r1018));
	 //  @line: 8
	r1119 := $r39;
	 //  @line: 9
	$r410 := $newvariable((30));
	 assume ($neref(($newvariable((30))), ($null))==1);
	 assert ($neref(($r410), ($null))==1);
	 //  @line: 9
	 call void$LinkedList$$la$init$ra$$2232(($r410), (97), (r1119));
	 //  @line: 9
	r1220 := $r410;
	 //  @line: 10
	$r511 := $newvariable((31));
	 assume ($neref(($newvariable((31))), ($null))==1);
	 assert ($neref(($r511), ($null))==1);
	 //  @line: 10
	 call void$LinkedList$$la$init$ra$$2232(($r511), (40), (r1220));
	 //  @line: 10
	r815 := $r511;
	 //  @line: 11
	$i212 := $subint((i04), (1));
	 goto Block32;
	 //  @line: 17
Block39:
	 //  @line: 17
	__ret := r815;
	 return;
	 //  @line: 11
Block32:
	 goto Block33, Block35;
	 //  @line: 11
Block33:
	 assume ($gtint((i316), ($i212))==1);
	 goto Block34;
	 //  @line: 11
Block35:
	 //  @line: 11
	 assume ($negInt(($gtint((i316), ($i212))))==1);
	 //  @line: 4
	$r613 := $newvariable((36));
	 assume ($neref(($newvariable((36))), ($null))==1);
	 assert ($neref(($r613), ($null))==1);
	 //  @line: 4
	 call void$LinkedList$$la$init$ra$$2232(($r613), (42), (r815));
	 //  @line: 4
	r815 := $r613;
	 goto Block34;
	 //  @line: 4
Block34:
	 //  @line: 4
	i316 := $addint((i316), (1));
	 goto Block18;
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 4
// <LinkedList: void <init>(char,LinkedList)>
procedure void$LinkedList$$la$init$ra$$2232(__this : ref, $param_0 : int, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r047 : ref;
var c048 : int;
var r149 : ref;
Block89:
	r047 := __this;
	c048 := $param_0;
	r149 := $param_1;
	 assert ($neref((r047), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r047));
	 assert ($neref((r047), ($null))==1);
	 //  @line: 6
	$HeapVar[r047, char$LinkedList$head0] := c048;
	 assert ($neref((r047), ($null))==1);
	 //  @line: 7
	$HeapVar[r047, LinkedList$LinkedList$tail254] := r149;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


