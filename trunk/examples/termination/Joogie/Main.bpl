type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 
const unique OrderedCollection.IntValue : classConst ;



var java.lang.String$lp$$rp$$OrderedCollection.Random$args257 : [int]ref;
var int$OrderedCollection.Random$index0 : int;
var int$OrderedCollection.IntValue$intValue0 : Field int;
var OrderedCollection.Element$OrderedCollection.OrderedCollection$root255 : Field ref;
var OrderedCollection.ListElement$OrderedCollection.ListElement$next256 : Field ref;
var OrderedCollection.Node$OrderedCollection.Node$left299 : Field ref;
var OrderedCollection.Value$OrderedCollection.Element$value254 : Field ref;
var OrderedCollection.Node$OrderedCollection.Node$right300 : Field ref;


	 //  @line: 18
// <OrderedCollection.Main: OrderedCollection.OrderedCollection createCollection()>
procedure OrderedCollection.OrderedCollection$OrderedCollection.Main$createCollection$2245() returns (__ret : ref) {
var $r047 : ref;
var i050 : int;
var i356 : int;
var $r152 : ref;
var $r254 : ref;
var $i253 : int;
var $i146 : int;
var r355 : ref;
	 //  @line: 19
Block56:
	 //  @line: 19
	 call $i146 := int$OrderedCollection.Random$random$2247();
	 goto Block57;
	 //  @line: 19
Block57:
	 goto Block60, Block58;
	 //  @line: 19
Block60:
	 //  @line: 19
	 assume ($negInt(($leint(($i146), (0))))==1);
	 //  @line: 20
	$r254 := $newvariable((61));
	 assume ($neref(($newvariable((61))), ($null))==1);
	 assert ($neref(($r254), ($null))==1);
	 //  @line: 20
	 call void$OrderedCollection.List$$la$init$ra$$2233(($r254));
	 //  @line: 20
	r355 := $r254;
	 goto Block62;
	 //  @line: 19
Block58:
	 assume ($leint(($i146), (0))==1);
	 goto Block59;
	 //  @line: 24
Block62:
	 //  @line: 24
	 call i050 := int$OrderedCollection.Random$random$2247();
	 //  @line: 25
	i356 := 0;
	 goto Block65;
	 //  @line: 22
Block59:
	 //  @line: 22
	$r047 := $newvariable((63));
	 assume ($neref(($newvariable((63))), ($null))==1);
	 goto Block64;
	 //  @line: 25
Block65:
	 goto Block68, Block66;
	 //  @line: 22
Block64:
	 assert ($neref(($r047), ($null))==1);
	 //  @line: 22
	 call void$OrderedCollection.Tree$$la$init$ra$$2249(($r047));
	 //  @line: 22
	r355 := $r047;
	 goto Block62;
	 //  @line: 25
Block68:
	 //  @line: 25
	 assume ($negInt(($geint((i356), (i050))))==1);
	 //  @line: 26
	$r152 := $newvariable((69));
	 assume ($neref(($newvariable((69))), ($null))==1);
	 //  @line: 26
	 call $i253 := int$OrderedCollection.Random$random$2247();
	 assert ($neref(($r152), ($null))==1);
	 //  @line: 26
	 call void$OrderedCollection.IntValue$$la$init$ra$$2231(($r152), ($i253));
	 assert ($neref((r355), ($null))==1);
	 //  @line: 26
	 call void$OrderedCollection.OrderedCollection$insert$2239((r355), ($r152));
	 //  @line: 25
	i356 := $addint((i356), (1));
	 goto Block65;
	 //  @line: 25
Block66:
	 assume ($geint((i356), (i050))==1);
	 goto Block67;
	 //  @line: 28
Block67:
	 //  @line: 28
	__ret := r355;
	 return;
}


	 //  @line: 1
// <OrderedCollection.Random: void <init>()>
procedure void$OrderedCollection.Random$$la$init$ra$$2246(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r057 : ref;
Block70:
	r057 := __this;
	 assert ($neref((r057), ($null))==1);
	 //  @line: 2
	 call void$java.lang.Object$$la$init$ra$$28((r057));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 6
// <OrderedCollection.Random: int random()>
procedure int$OrderedCollection.Random$random$2247() returns (__ret : int)
  modifies $stringSize, int$OrderedCollection.Random$index0;
 {
var $i261 : int;
var r063 : ref;
var $r158 : [int]ref;
var $i364 : int;
var $r262 : [int]ref;
var $i059 : int;
var $i465 : int;
var $i566 : int;
var $i160 : int;
	 //  @line: 7
Block71:
	 //  @line: 7
	$r158 := java.lang.String$lp$$rp$$OrderedCollection.Random$args257;
	 //  @line: 7
	$i160 := $refArrSize[$r158[$arrSizeIdx]];
	 //  @line: 7
	$i059 := int$OrderedCollection.Random$index0;
	 goto Block72;
	 //  @line: 7
Block72:
	 goto Block75, Block73;
	 //  @line: 7
Block75:
	 //  @line: 7
	 assume ($negInt(($gtint(($i160), ($i059))))==1);
	 //  @line: 8
	__ret := 0;
	 return;
	 //  @line: 7
Block73:
	 assume ($gtint(($i160), ($i059))==1);
	 goto Block74;
	 //  @line: 10
Block74:
	 //  @line: 10
	$r262 := java.lang.String$lp$$rp$$OrderedCollection.Random$args257;
	 goto Block76;
	 //  @line: 10
Block76:
	 //  @line: 10
	$i261 := int$OrderedCollection.Random$index0;
	 assert ($geint(($i261), (0))==1);
	 assert ($ltint(($i261), ($refArrSize[$r262[$arrSizeIdx]]))==1);
	 //  @line: 10
	r063 := $r262[$i261];
	 //  @line: 11
	$i364 := int$OrderedCollection.Random$index0;
	 //  @line: 11
	$i465 := $addint(($i364), (1));
	 //  @line: 11
	int$OrderedCollection.Random$index0 := $i465;
	 goto Block77;
	 //  @line: 12
Block77:
	 goto Block78, Block80;
	 //  @line: 12
Block78:
	 assume ($neref((r063), ($null))==1);
	 goto Block79;
	 //  @line: 12
Block80:
	 //  @line: 12
	 assume ($negInt(($neref((r063), ($null))))==1);
	 //  @line: 13
	__ret := 0;
	 return;
	 //  @line: 15
Block79:
	$i566 := $stringSize[r063];
	 goto Block81;
	 //  @line: 15
Block81:
	 //  @line: 15
	__ret := $i566;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



	 //  @line: 14
// <OrderedCollection.Element: OrderedCollection.Value getValue()>
procedure OrderedCollection.Value$OrderedCollection.Element$getValue$2229(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r14 : ref;
var r03 : ref;
Block17:
	r03 := __this;
	 assert ($neref((r03), ($null))==1);
	 //  @line: 15
	$r14 := $HeapVar[r03, OrderedCollection.Value$OrderedCollection.Element$value254];
	 //  @line: 15
	__ret := $r14;
	 return;
}


	 //  @line: 11
// <OrderedCollection.Node: void <init>(OrderedCollection.Value,OrderedCollection.Node,OrderedCollection.Node)>
procedure void$OrderedCollection.Node$$la$init$ra$$2476(__this : ref, $param_0 : ref, $param_1 : ref, $param_2 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r193 : ref;
var r092 : ref;
var r294 : ref;
var r395 : ref;
Block109:
	r092 := __this;
	r193 := $param_0;
	r294 := $param_1;
	r395 := $param_2;
	 assert ($neref((r092), ($null))==1);
	 //  @line: 12
	 call void$OrderedCollection.Element$$la$init$ra$$2228((r092), (r193));
	 assert ($neref((r092), ($null))==1);
	 //  @line: 13
	$HeapVar[r092, OrderedCollection.Node$OrderedCollection.Node$left299] := r294;
	 assert ($neref((r092), ($null))==1);
	 //  @line: 14
	$HeapVar[r092, OrderedCollection.Node$OrderedCollection.Node$right300] := r395;
	 return;
}


	 //  @line: 28
// <OrderedCollection.Tree: OrderedCollection.Node insert(OrderedCollection.Node,OrderedCollection.Value)>
procedure OrderedCollection.Node$OrderedCollection.Tree$insert$2253($param_0 : ref, $param_1 : ref) returns (__ret : ref) {
var $r589 : ref;
var $r690 : ref;
var $r285 : ref;
var $z086 : int;
var $r488 : ref;
var r184 : ref;
var $r791 : ref;
var r083 : ref;
var $r387 : ref;
Block97:
	r083 := $param_0;
	r184 := $param_1;
	 goto Block98;
	 //  @line: 29
Block98:
	 goto Block101, Block99;
	 //  @line: 29
Block101:
	 //  @line: 29
	 assume ($negInt(($neref((r083), ($null))))==1);
	 //  @line: 30
	$r791 := $newvariable((102));
	 assume ($neref(($newvariable((102))), ($null))==1);
	 assert ($neref(($r791), ($null))==1);
	 //  @line: 30
	 call void$OrderedCollection.Node$$la$init$ra$$2476(($r791), (r184), ($null), ($null));
	 //  @line: 30
	__ret := $r791;
	 return;
	 //  @line: 29
Block99:
	 assume ($neref((r083), ($null))==1);
	 goto Block100;
	 //  @line: 32
Block100:
	 assert ($neref((r083), ($null))==1);
	 //  @line: 32
	 call $r285 := OrderedCollection.Value$OrderedCollection.Element$getValue$2229((r083));
	 goto Block103;
	 //  @line: 32
Block103:
	 assert ($neref((r184), ($null))==1);
	 //  @line: 32
	 call $z086 := boolean$OrderedCollection.Value$isSmaller$2230((r184), ($r285));
	 goto Block104;
	 //  @line: 32
Block104:
	 goto Block105, Block107;
	 //  @line: 32
Block105:
	 assume ($eqint(($z086), (0))==1);
	 goto Block106;
	 //  @line: 32
Block107:
	 //  @line: 32
	 assume ($negInt(($eqint(($z086), (0))))==1);
	 assert ($neref((r083), ($null))==1);
	 //  @line: 33
	 call $r589 := OrderedCollection.Node$OrderedCollection.Node$getLeft$2479((r083));
	 //  @line: 33
	 call $r690 := OrderedCollection.Node$OrderedCollection.Tree$insert$2253(($r589), (r184));
	 assert ($neref((r083), ($null))==1);
	 //  @line: 33
	 call void$OrderedCollection.Node$setLeft$2477((r083), ($r690));
	 //  @line: 34
	__ret := r083;
	 return;
	 //  @line: 36
Block106:
	 assert ($neref((r083), ($null))==1);
	 //  @line: 36
	 call $r387 := OrderedCollection.Node$OrderedCollection.Node$getRight$2480((r083));
	 goto Block108;
	 //  @line: 36
Block108:
	 //  @line: 36
	 call $r488 := OrderedCollection.Node$OrderedCollection.Tree$insert$2253(($r387), (r184));
	 assert ($neref((r083), ($null))==1);
	 //  @line: 36
	 call void$OrderedCollection.Node$setRight$2478((r083), ($r488));
	 //  @line: 37
	__ret := r083;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 6
// <OrderedCollection.Main: void <init>()>
procedure void$OrderedCollection.Main$$la$init$ra$$2243(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r041 : ref;
Block54:
	r041 := __this;
	 assert ($neref((r041), ($null))==1);
	 //  @line: 7
	 call void$java.lang.Object$$la$init$ra$$28((r041));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 15
// <OrderedCollection.IntValue: boolean isSmaller(OrderedCollection.Value)>
procedure boolean$OrderedCollection.IntValue$isSmaller$2232(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i011 : int;
var r09 : ref;
var r17 : ref;
var $r210 : ref;
var $i112 : int;
var $z114 : int;
var $z08 : int;
Block19:
	r09 := __this;
	r17 := $param_0;
	 //  @line: 16
	$z08 := $instanceof((r17), (OrderedCollection.IntValue));
	 goto Block20;
	 //  @line: 16
Block20:
	 goto Block21, Block23;
	 //  @line: 16
Block21:
	 assume ($eqint(($z08), (0))==1);
	 goto Block22;
	 //  @line: 16
Block23:
	 //  @line: 16
	 assume ($negInt(($eqint(($z08), (0))))==1);
	 assert ($neref((r09), ($null))==1);
	 //  @line: 17
	$i112 := $HeapVar[r09, int$OrderedCollection.IntValue$intValue0];
	 //  @line: 17
	$r210 := r17;
	 assert ($neref(($r210), ($null))==1);
	 //  @line: 17
	$i011 := $HeapVar[$r210, int$OrderedCollection.IntValue$intValue0];
	 goto Block24;
	 //  @line: 19
Block22:
	 //  @line: 19
	__ret := 0;
	 return;
	 //  @line: 17
Block24:
	 goto Block27, Block25;
	 //  @line: 17
Block27:
	 //  @line: 17
	 assume ($negInt(($geint(($i112), ($i011))))==1);
	 //  @line: 17
	$z114 := 1;
	 goto Block28;
	 //  @line: 17
Block25:
	 assume ($geint(($i112), ($i011))==1);
	 goto Block26;
	 //  @line: 17
Block28:
	 //  @line: 17
	__ret := $z114;
	 return;
	 //  @line: 17
Block26:
	 //  @line: 17
	$z114 := 0;
	 goto Block28;
}


// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



	 //  @line: 29
// <OrderedCollection.Node: OrderedCollection.Node getRight()>
procedure OrderedCollection.Node$OrderedCollection.Node$getRight$2480(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r1103 : ref;
var r0102 : ref;
Block113:
	r0102 := __this;
	 assert ($neref((r0102), ($null))==1);
	 //  @line: 30
	$r1103 := $HeapVar[r0102, OrderedCollection.Node$OrderedCollection.Node$right300];
	 //  @line: 30
	__ret := $r1103;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



	 //  @line: 9
// <OrderedCollection.IntValue: void <init>(int)>
procedure void$OrderedCollection.IntValue$$la$init$ra$$2231(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r05 : ref;
var i06 : int;
Block18:
	r05 := __this;
	i06 := $param_0;
	 assert ($neref((r05), ($null))==1);
	 //  @line: 10
	 call void$java.lang.Object$$la$init$ra$$28((r05));
	 assert ($neref((r05), ($null))==1);
	 //  @line: 11
	$HeapVar[r05, int$OrderedCollection.IntValue$intValue0] := i06;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <OrderedCollection.Value: boolean isSmaller(OrderedCollection.Value)>
procedure boolean$OrderedCollection.Value$isSmaller$2230(__this : ref, $param_0 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



	 //  @line: 21
// <OrderedCollection.Node: void setRight(OrderedCollection.Node)>
procedure void$OrderedCollection.Node$setRight$2478(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r098 : ref;
var r199 : ref;
Block111:
	r098 := __this;
	r199 := $param_0;
	 assert ($neref((r098), ($null))==1);
	 //  @line: 22
	$HeapVar[r098, OrderedCollection.Node$OrderedCollection.Node$right300] := r199;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 6
// <OrderedCollection.Tree: void <init>()>
procedure void$OrderedCollection.Tree$$la$init$ra$$2249(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r067 : ref;
Block83:
	r067 := __this;
	 assert ($neref((r067), ($null))==1);
	 //  @line: 7
	 call void$OrderedCollection.OrderedCollection$$la$init$ra$$2237((r067));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 25
// <OrderedCollection.Node: OrderedCollection.Node getLeft()>
procedure OrderedCollection.Node$OrderedCollection.Node$getLeft$2479(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r1101 : ref;
var r0100 : ref;
Block112:
	r0100 := __this;
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 26
	$r1101 := $HeapVar[r0100, OrderedCollection.Node$OrderedCollection.Node$left299];
	 //  @line: 26
	__ret := $r1101;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


	 //  @line: 6
// <OrderedCollection.OrderedCollection: void <init>()>
procedure void$OrderedCollection.OrderedCollection$$la$init$ra$$2237(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r033 : ref;
Block50:
	r033 := __this;
	 assert ($neref((r033), ($null))==1);
	 //  @line: 7
	 call void$java.lang.Object$$la$init$ra$$28((r033));
	 return;
}


	 //  @line: 24
// <OrderedCollection.Tree: void insert(OrderedCollection.Value)>
procedure void$OrderedCollection.Tree$insert$2252(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r078 : ref;
var $r482 : ref;
var $r381 : ref;
var r180 : ref;
var $r279 : ref;
Block96:
	r078 := __this;
	r180 := $param_0;
	 assert ($neref((r078), ($null))==1);
	 //  @line: 25
	$r279 := $HeapVar[r078, OrderedCollection.Element$OrderedCollection.OrderedCollection$root255];
	 //  @line: 25
	$r381 := $r279;
	 //  @line: 25
	 call $r482 := OrderedCollection.Node$OrderedCollection.Tree$insert$2253(($r381), (r180));
	 assert ($neref((r078), ($null))==1);
	 //  @line: 25
	$HeapVar[r078, OrderedCollection.Element$OrderedCollection.OrderedCollection$root255] := $r482;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 8
// <OrderedCollection.Main: void main(java.lang.String[])>
procedure void$OrderedCollection.Main$main$2244($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$OrderedCollection.Random$args257;
 {
var r042 : [int]ref;
var r144 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block55:
	r042 := $param_0;
	 //  @line: 9
	java.lang.String$lp$$rp$$OrderedCollection.Random$args257 := r042;
	 //  @line: 10
	 call r144 := OrderedCollection.OrderedCollection$OrderedCollection.Main$createCollection$2245();
	 assert ($neref((r144), ($null))==1);
	 //  @line: 11
	 call $freshlocal0 := OrderedCollection.Value$OrderedCollection.OrderedCollection$minimum$2238((r144));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// <OrderedCollection.OrderedCollection: OrderedCollection.Value minimum()>
procedure OrderedCollection.Value$OrderedCollection.OrderedCollection$minimum$2238(__this : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 16
// <OrderedCollection.List: void insert(OrderedCollection.Value)>
procedure void$OrderedCollection.List$insert$2235(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r122 : ref;
var r020 : ref;
var $r221 : ref;
var $r424 : ref;
var $r323 : ref;
Block36:
	r020 := __this;
	r122 := $param_0;
	 assert ($neref((r020), ($null))==1);
	 //  @line: 17
	$r221 := $HeapVar[r020, OrderedCollection.Element$OrderedCollection.OrderedCollection$root255];
	 //  @line: 17
	$r323 := $r221;
	 //  @line: 17
	 call $r424 := OrderedCollection.ListElement$OrderedCollection.List$insert$2236(($r323), (r122));
	 assert ($neref((r020), ($null))==1);
	 //  @line: 17
	$HeapVar[r020, OrderedCollection.Element$OrderedCollection.OrderedCollection$root255] := $r424;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 19
// <OrderedCollection.ListElement: OrderedCollection.ListElement getNext()>
procedure OrderedCollection.ListElement$OrderedCollection.ListElement$getNext$2242(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r039 : ref;
var $r140 : ref;
Block53:
	r039 := __this;
	 assert ($neref((r039), ($null))==1);
	 //  @line: 20
	$r140 := $HeapVar[r039, OrderedCollection.ListElement$OrderedCollection.ListElement$next256];
	 //  @line: 20
	__ret := $r140;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// <OrderedCollection.OrderedCollection: void insert(OrderedCollection.Value)>
procedure void$OrderedCollection.OrderedCollection$insert$2239(__this : ref, $param_0 : ref);



// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 9
// <OrderedCollection.Tree: OrderedCollection.Value minimum()>
procedure OrderedCollection.Value$OrderedCollection.Tree$minimum$2250(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r169 : ref;
var $r270 : ref;
var r068 : ref;
var $r472 : ref;
var $r371 : ref;
Block84:
	r068 := __this;
	 assert ($neref((r068), ($null))==1);
	 //  @line: 10
	$r169 := $HeapVar[r068, OrderedCollection.Element$OrderedCollection.OrderedCollection$root255];
	 goto Block85;
	 //  @line: 10
Block85:
	 goto Block88, Block86;
	 //  @line: 10
Block88:
	 //  @line: 10
	 assume ($negInt(($neref(($r169), ($null))))==1);
	 //  @line: 11
	__ret := $null;
	 return;
	 //  @line: 10
Block86:
	 assume ($neref(($r169), ($null))==1);
	 goto Block87;
	 //  @line: 13
Block87:
	 assert ($neref((r068), ($null))==1);
	 //  @line: 13
	$r270 := $HeapVar[r068, OrderedCollection.Element$OrderedCollection.OrderedCollection$root255];
	 goto Block89;
	 //  @line: 13
Block89:
	 //  @line: 13
	$r371 := $r270;
	 //  @line: 13
	 call $r472 := OrderedCollection.Value$OrderedCollection.Tree$minimum$2251(($r371));
	 //  @line: 13
	__ret := $r472;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



	 //  @line: 10
// <OrderedCollection.ListElement: void <init>(OrderedCollection.Value,OrderedCollection.ListElement)>
procedure void$OrderedCollection.ListElement$$la$init$ra$$2240(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r135 : ref;
var r236 : ref;
var r034 : ref;
Block51:
	r034 := __this;
	r135 := $param_0;
	r236 := $param_1;
	 assert ($neref((r034), ($null))==1);
	 //  @line: 11
	 call void$OrderedCollection.Element$$la$init$ra$$2228((r034), (r135));
	 assert ($neref((r034), ($null))==1);
	 //  @line: 12
	$HeapVar[r034, OrderedCollection.ListElement$OrderedCollection.ListElement$next256] := r236;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 17
// <OrderedCollection.Node: void setLeft(OrderedCollection.Node)>
procedure void$OrderedCollection.Node$setLeft$2477(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r096 : ref;
var r197 : ref;
Block110:
	r096 := __this;
	r197 := $param_0;
	 assert ($neref((r096), ($null))==1);
	 //  @line: 18
	$HeapVar[r096, OrderedCollection.Node$OrderedCollection.Node$left299] := r197;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 16
// <OrderedCollection.Tree: OrderedCollection.Value minimum(OrderedCollection.Node)>
procedure OrderedCollection.Value$OrderedCollection.Tree$minimum$2251($param_0 : ref) returns (__ret : ref) {
var $r275 : ref;
var r073 : ref;
var $r376 : ref;
var $r477 : ref;
var $r174 : ref;
Block90:
	r073 := $param_0;
	 assert ($neref((r073), ($null))==1);
	 //  @line: 17
	 call $r174 := OrderedCollection.Node$OrderedCollection.Node$getLeft$2479((r073));
	 goto Block91;
	 //  @line: 17
Block91:
	 goto Block92, Block94;
	 //  @line: 17
Block92:
	 assume ($neref(($r174), ($null))==1);
	 goto Block93;
	 //  @line: 17
Block94:
	 //  @line: 17
	 assume ($negInt(($neref(($r174), ($null))))==1);
	 assert ($neref((r073), ($null))==1);
	 //  @line: 18
	 call $r477 := OrderedCollection.Value$OrderedCollection.Element$getValue$2229((r073));
	 //  @line: 18
	__ret := $r477;
	 return;
	 //  @line: 20
Block93:
	 assert ($neref((r073), ($null))==1);
	 //  @line: 20
	 call $r275 := OrderedCollection.Node$OrderedCollection.Node$getLeft$2479((r073));
	 goto Block95;
	 //  @line: 20
Block95:
	 //  @line: 20
	 call $r376 := OrderedCollection.Value$OrderedCollection.Tree$minimum$2251(($r275));
	 //  @line: 20
	__ret := $r376;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 15
// <OrderedCollection.ListElement: void setNext(OrderedCollection.ListElement)>
procedure void$OrderedCollection.ListElement$setNext$2241(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r138 : ref;
var r037 : ref;
Block52:
	r037 := __this;
	r138 := $param_0;
	 assert ($neref((r037), ($null))==1);
	 //  @line: 16
	$HeapVar[r037, OrderedCollection.ListElement$OrderedCollection.ListElement$next256] := r138;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


	 //  @line: 9
// <OrderedCollection.Element: void <init>(OrderedCollection.Value)>
procedure void$OrderedCollection.Element$$la$init$ra$$2228(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
var r12 : ref;
Block16:
	r01 := __this;
	r12 := $param_0;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 10
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 assert ($neref((r01), ($null))==1);
	 //  @line: 11
	$HeapVar[r01, OrderedCollection.Value$OrderedCollection.Element$value254] := r12;
	 return;
}


	 //  @line: 5
// <OrderedCollection.List: void <init>()>
procedure void$OrderedCollection.List$$la$init$ra$$2233(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r015 : ref;
Block29:
	r015 := __this;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 6
	 call void$OrderedCollection.OrderedCollection$$la$init$ra$$2237((r015));
	 return;
}


	 //  @line: 8
// <OrderedCollection.List: OrderedCollection.Value minimum()>
procedure OrderedCollection.Value$OrderedCollection.List$minimum$2234(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r117 : ref;
var $r319 : ref;
var r016 : ref;
var $r218 : ref;
Block30:
	r016 := __this;
	 assert ($neref((r016), ($null))==1);
	 //  @line: 9
	$r117 := $HeapVar[r016, OrderedCollection.Element$OrderedCollection.OrderedCollection$root255];
	 goto Block31;
	 //  @line: 9
Block31:
	 goto Block32, Block34;
	 //  @line: 9
Block32:
	 assume ($neref(($r117), ($null))==1);
	 goto Block33;
	 //  @line: 9
Block34:
	 //  @line: 9
	 assume ($negInt(($neref(($r117), ($null))))==1);
	 //  @line: 10
	__ret := $null;
	 return;
	 //  @line: 12
Block33:
	 assert ($neref((r016), ($null))==1);
	 //  @line: 12
	$r218 := $HeapVar[r016, OrderedCollection.Element$OrderedCollection.OrderedCollection$root255];
	 goto Block35;
	 //  @line: 12
Block35:
	 assert ($neref(($r218), ($null))==1);
	 //  @line: 12
	 call $r319 := OrderedCollection.Value$OrderedCollection.Element$getValue$2229(($r218));
	 //  @line: 12
	__ret := $r319;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 20
// <OrderedCollection.List: OrderedCollection.ListElement insert(OrderedCollection.ListElement,OrderedCollection.Value)>
procedure OrderedCollection.ListElement$OrderedCollection.List$insert$2236($param_0 : ref, $param_1 : ref) returns (__ret : ref) {
var r025 : ref;
var $r632 : ref;
var $r227 : ref;
var r126 : ref;
var $r430 : ref;
var $z028 : int;
var $r531 : ref;
var $r329 : ref;
Block37:
	r025 := $param_0;
	r126 := $param_1;
	 goto Block38;
	 //  @line: 21
Block38:
	 goto Block39, Block41;
	 //  @line: 21
Block39:
	 assume ($neref((r025), ($null))==1);
	 goto Block40;
	 //  @line: 21
Block41:
	 //  @line: 21
	 assume ($negInt(($neref((r025), ($null))))==1);
	 //  @line: 22
	$r632 := $newvariable((42));
	 assume ($neref(($newvariable((42))), ($null))==1);
	 assert ($neref(($r632), ($null))==1);
	 //  @line: 22
	 call void$OrderedCollection.ListElement$$la$init$ra$$2240(($r632), (r126), ($null));
	 //  @line: 22
	__ret := $r632;
	 return;
	 //  @line: 24
Block40:
	 assert ($neref((r025), ($null))==1);
	 //  @line: 24
	 call $r227 := OrderedCollection.Value$OrderedCollection.Element$getValue$2229((r025));
	 goto Block43;
	 //  @line: 24
Block43:
	 assert ($neref((r126), ($null))==1);
	 //  @line: 24
	 call $z028 := boolean$OrderedCollection.Value$isSmaller$2230((r126), ($r227));
	 goto Block44;
	 //  @line: 24
Block44:
	 goto Block45, Block47;
	 //  @line: 24
Block45:
	 assume ($eqint(($z028), (0))==1);
	 goto Block46;
	 //  @line: 24
Block47:
	 //  @line: 24
	 assume ($negInt(($eqint(($z028), (0))))==1);
	 //  @line: 25
	$r531 := $newvariable((48));
	 assume ($neref(($newvariable((48))), ($null))==1);
	 assert ($neref(($r531), ($null))==1);
	 //  @line: 25
	 call void$OrderedCollection.ListElement$$la$init$ra$$2240(($r531), (r126), (r025));
	 //  @line: 25
	__ret := $r531;
	 return;
	 //  @line: 27
Block46:
	 assert ($neref((r025), ($null))==1);
	 //  @line: 27
	 call $r329 := OrderedCollection.ListElement$OrderedCollection.ListElement$getNext$2242((r025));
	 goto Block49;
	 //  @line: 27
Block49:
	 //  @line: 27
	 call $r430 := OrderedCollection.ListElement$OrderedCollection.List$insert$2236(($r329), (r126));
	 assert ($neref((r025), ($null))==1);
	 //  @line: 27
	 call void$OrderedCollection.ListElement$setNext$2241((r025), ($r430));
	 //  @line: 28
	__ret := r025;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 3
// <OrderedCollection.Random: void <clinit>()>
procedure void$OrderedCollection.Random$$la$clinit$ra$$2248()
  modifies int$OrderedCollection.Random$index0;
 {
	 //  @line: 4
Block82:
	 //  @line: 4
	int$OrderedCollection.Random$index0 := 0;
	 return;
}


