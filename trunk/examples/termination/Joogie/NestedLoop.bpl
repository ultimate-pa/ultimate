type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 





// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// <NestedLoop: void <init>()>
procedure void$NestedLoop$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 3
// <NestedLoop: void main(java.lang.String[])>
procedure void$NestedLoop$main$2229($param_0 : [int]ref)
  modifies $stringSize, $intArrSize;
 {
var i1017 : int;
var r02 : [int]ref;
var i012 : int;
var i1118 : int;
var r14 : [int]int;
var $i611 : int;
var $r214 : ref;
var $i815 : int;
var $i713 : int;
var $i48 : int;
var i13 : int;
var $i26 : int;
var $i37 : int;
var i916 : int;
var $i510 : int;
var i1219 : int;
Block17:
	r02 := $param_0;
	 //  @line: 4
	i13 := $refArrSize[r02[$arrSizeIdx]];
	 //  @line: 5
	r14 := $reftointarr(($newvariable((18))));
	$intArrSize[$reftointarr(($newvariable((18))))[$arrSizeIdx]] := i13;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((18))))), ($intArrNull))))==1);
	 //  @line: 6
	i916 := 0;
	 goto Block19;
	 //  @line: 6
Block19:
	 //  @line: 6
	$i26 := $subint((i13), (1));
	 goto Block20;
	 //  @line: 6
Block20:
	 goto Block21, Block23;
	 //  @line: 6
Block21:
	 assume ($geint((i916), ($i26))==1);
	 goto Block22;
	 //  @line: 6
Block23:
	 //  @line: 6
	 assume ($negInt(($geint((i916), ($i26))))==1);
	 assert ($geint((i916), (0))==1);
	 assert ($ltint((i916), ($refArrSize[r02[$arrSizeIdx]]))==1);
	 //  @line: 7
	$r214 := r02[i916];
	$i815 := $stringSize[$r214];
	 assert ($geint((i916), (0))==1);
	 assert ($ltint((i916), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 7
	r14[i916] := $i815;
	 //  @line: 6
	i916 := $addint((i916), (1));
	 goto Block19;
	 //  @line: 10
Block22:
	 //  @line: 10
	i1017 := 0;
	 goto Block24;
	 //  @line: 10
Block24:
	 //  @line: 10
	$i37 := $subint((i13), (1));
	 goto Block25;
	 //  @line: 10
Block25:
	 goto Block26, Block28;
	 //  @line: 10
Block26:
	 assume ($geint((i1017), ($i37))==1);
	 goto Block27;
	 //  @line: 10
Block28:
	 //  @line: 10
	 assume ($negInt(($geint((i1017), ($i37))))==1);
	 //  @line: 11
	i1118 := $addint((i1017), (1));
	 goto Block29;
	 //  @line: 17
Block27:
	 //  @line: 17
	i1219 := 0;
	 goto Block38;
	 //  @line: 11
Block29:
	 goto Block30, Block32;
	 //  @line: 17
Block38:
	 //  @line: 17
	$i48 := $subint((i13), (1));
	 goto Block39;
	 //  @line: 11
Block30:
	 assume ($geint((i1118), (i13))==1);
	 goto Block31;
	 //  @line: 11
Block32:
	 //  @line: 11
	 assume ($negInt(($geint((i1118), (i13))))==1);
	 assert ($geint((i1017), (0))==1);
	 assert ($ltint((i1017), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 12
	$i611 := r14[i1017];
	 assert ($geint((i1118), (0))==1);
	 assert ($ltint((i1118), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 12
	$i510 := r14[i1118];
	 goto Block33;
	 //  @line: 17
Block39:
	 goto Block40, Block42;
	 //  @line: 10
Block31:
	 //  @line: 10
	i1017 := $addint((i1017), (1));
	 goto Block37;
	 //  @line: 12
Block33:
	 goto Block34, Block36;
	 //  @line: 17
Block40:
	 assume ($geint((i1219), ($i48))==1);
	 goto Block41;
	 //  @line: 17
Block42:
	 //  @line: 17
	 assume ($negInt(($geint((i1219), ($i48))))==1);
	 //  @line: 19
	i1219 := $addint((i1219), (1));
	 goto Block38;
	 //  @line: 10
Block37:
	 goto Block24;
	 //  @line: 12
Block34:
	 assume ($geint(($i611), ($i510))==1);
	 goto Block35;
	 //  @line: 12
Block36:
	 //  @line: 12
	 assume ($negInt(($geint(($i611), ($i510))))==1);
	 assert ($geint((i1017), (0))==1);
	 assert ($ltint((i1017), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 13
	i012 := r14[i1017];
	 assert ($geint((i1118), (0))==1);
	 assert ($ltint((i1118), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 13
	$i713 := r14[i1118];
	 assert ($geint((i1017), (0))==1);
	 assert ($ltint((i1017), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 13
	r14[i1017] := $i713;
	 assert ($geint((i1118), (0))==1);
	 assert ($ltint((i1118), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 13
	r14[i1118] := i012;
	 goto Block35;
	 //  @line: 19
Block41:
	 return;
	 //  @line: 11
Block35:
	 //  @line: 11
	i1118 := $addint((i1118), (1));
	 goto Block29;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


