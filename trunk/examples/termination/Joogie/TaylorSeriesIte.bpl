type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 





// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



	 //  @line: 36
// <TaylorSeriesIte: void main(java.lang.String[])>
procedure void$TaylorSeriesIte$main$2234($param_0 : [int]ref) {
var $i453 : int;
var $i048 : int;
var $i149 : int;
var r047 : [int]ref;
var $i655 : int;
var $i857 : int;
var i1059 : int;
var i1160 : int;
var $i250 : int;
var $i351 : int;

 //temp local variables 
var $freshlocal0 : int;
var $freshlocal2 : int;
var $freshlocal1 : int;

Block42:
	r047 := $param_0;
	 //  @line: 37
	i1059 := 0;
	 goto Block43;
	 //  @line: 37
Block43:
	 //  @line: 37
	$i048 := $refArrSize[r047[$arrSizeIdx]];
	 goto Block44;
	 //  @line: 37
Block44:
	 goto Block47, Block45;
	 //  @line: 37
Block47:
	 //  @line: 37
	 assume ($negInt(($geint((i1059), ($i048))))==1);
	 //  @line: 38
	$i149 := $modint((i1059), (2));
	 goto Block48;
	 //  @line: 37
Block45:
	 assume ($geint((i1059), ($i048))==1);
	 goto Block46;
	 //  @line: 38
Block48:
	 goto Block49, Block51;
	 //  @line: 42
Block46:
	 return;
	 //  @line: 38
Block49:
	 assume ($neint(($i149), (0))==1);
	 goto Block50;
	 //  @line: 38
Block51:
	 //  @line: 38
	 assume ($negInt(($neint(($i149), (0))))==1);
	 //  @line: 37
	$i857 := $refArrSize[r047[$arrSizeIdx]];
	 //  @line: 37
	 call $freshlocal0 := int$TaylorSeriesIte$sin$2231(($i857), (i1059));
	 goto Block52;
	 //  @line: 39
Block50:
	 //  @line: 39
	$i250 := $modint((i1059), (3));
	 goto Block53;
	 //  @line: 37
Block52:
	 //  @line: 37
	i1059 := $addint((i1059), (1));
	 goto Block64;
	 //  @line: 39
Block53:
	 goto Block56, Block54;
	 //  @line: 37
Block64:
	 goto Block43;
	 //  @line: 39
Block56:
	 //  @line: 39
	 assume ($negInt(($neint(($i250), (0))))==1);
	 //  @line: 37
	$i655 := $refArrSize[r047[$arrSizeIdx]];
	 //  @line: 37
	 call $freshlocal1 := int$TaylorSeriesIte$cos$2232(($i655), (i1059));
	 goto Block52;
	 //  @line: 39
Block54:
	 assume ($neint(($i250), (0))==1);
	 goto Block55;
	 //  @line: 40
Block55:
	 //  @line: 40
	$i351 := $modint((i1059), (5));
	 goto Block57;
	 //  @line: 40
Block57:
	 goto Block60, Block58;
	 //  @line: 40
Block60:
	 //  @line: 40
	 assume ($negInt(($neint(($i351), (0))))==1);
	 //  @line: 37
	$i453 := $refArrSize[r047[$arrSizeIdx]];
	 //  @line: 37
	 call $freshlocal2 := int$TaylorSeriesIte$exp$2233(($i453), (i1059));
	 goto Block52;
	 //  @line: 40
Block58:
	 assume ($neint(($i351), (0))==1);
	 goto Block59;
	 //  @line: 41
Block59:
	 //  @line: 41
	i1160 := 0;
	 goto Block61;
	 //  @line: 41
Block61:
	 goto Block62, Block63;
	 //  @line: 41
Block62:
	 assume ($geint((i1160), (100))==1);
	 goto Block52;
	 //  @line: 41
Block63:
	 //  @line: 41
	 assume ($negInt(($geint((i1160), (100))))==1);
	 //  @line: 37
	i1160 := $addint((i1160), (1));
	 goto Block61;
}


// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// <TaylorSeriesIte: void <init>()>
procedure void$TaylorSeriesIte$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



	 //  @line: 22
// <TaylorSeriesIte: int cos(int,int)>
procedure int$TaylorSeriesIte$cos$2232($param_0 : int, $param_1 : int) returns (__ret : int) {
var i030 : int;
var i936 : int;
var $i431 : int;
var i127 : int;
var $i734 : int;
var i835 : int;
var $i329 : int;
var $i633 : int;
var $i228 : int;
var $i532 : int;
Block32:
	i030 := $param_0;
	i127 := $param_1;
	 //  @line: 23
	i835 := 1;
	 //  @line: 24
	i936 := 2;
	 goto Block33;
	 //  @line: 24
Block33:
	 goto Block34, Block36;
	 //  @line: 24
Block34:
	 assume ($gtint((i936), (i127))==1);
	 goto Block35;
	 //  @line: 24
Block36:
	 //  @line: 24
	 assume ($negInt(($gtint((i936), (i127))))==1);
	 assert ($neint((2), (0))==1);
	 //  @line: 25
	$i228 := $divint((i936), (2));
	 //  @line: 25
	 call $i329 := int$TaylorSeriesIte$power$2229((-1), ($i228));
	 //  @line: 25
	 call $i431 := int$TaylorSeriesIte$power$2229((i030), (i936));
	 //  @line: 25
	$i532 := $mulint(($i329), ($i431));
	 //  @line: 25
	 call $i633 := int$TaylorSeriesIte$fact$2230((i936));
	 assert ($neint(($i633), (0))==1);
	 //  @line: 25
	$i734 := $divint(($i532), ($i633));
	 //  @line: 25
	i835 := $addint((i835), ($i734));
	 //  @line: 24
	i936 := $addint((i936), (2));
	 goto Block33;
	 //  @line: 26
Block35:
	 //  @line: 26
	__ret := i835;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 3
// <TaylorSeriesIte: int power(int,int)>
procedure int$TaylorSeriesIte$power$2229($param_0 : int, $param_1 : int) returns (__ret : int) {
var i05 : int;
var i14 : int;
var i26 : int;
var i37 : int;
Block17:
	i05 := $param_0;
	i14 := $param_1;
	 //  @line: 4
	i26 := 1;
	 //  @line: 5
	i37 := 1;
	 goto Block18;
	 //  @line: 5
Block18:
	 goto Block21, Block19;
	 //  @line: 5
Block21:
	 //  @line: 5
	 assume ($negInt(($gtint((i37), (i14))))==1);
	 //  @line: 6
	i26 := $mulint((i26), (i05));
	 //  @line: 6
	i37 := $addint((i37), (1));
	 goto Block18;
	 //  @line: 5
Block19:
	 assume ($gtint((i37), (i14))==1);
	 goto Block20;
	 //  @line: 6
Block20:
	 //  @line: 6
	__ret := i26;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



	 //  @line: 29
// <TaylorSeriesIte: int exp(int,int)>
procedure int$TaylorSeriesIte$exp$2233($param_0 : int, $param_1 : int) returns (__ret : int) {
var i544 : int;
var $i443 : int;
var $i342 : int;
var i040 : int;
var i139 : int;
var $i241 : int;
var i645 : int;
Block37:
	i040 := $param_0;
	i139 := $param_1;
	 //  @line: 30
	i544 := 0;
	 //  @line: 31
	i645 := 0;
	 goto Block38;
	 //  @line: 31
Block38:
	 goto Block39, Block41;
	 //  @line: 31
Block39:
	 assume ($gtint((i645), (i139))==1);
	 goto Block40;
	 //  @line: 31
Block41:
	 //  @line: 31
	 assume ($negInt(($gtint((i645), (i139))))==1);
	 //  @line: 32
	 call $i241 := int$TaylorSeriesIte$power$2229((i040), (i645));
	 //  @line: 32
	 call $i342 := int$TaylorSeriesIte$fact$2230((i645));
	 assert ($neint(($i342), (0))==1);
	 //  @line: 32
	$i443 := $divint(($i241), ($i342));
	 //  @line: 32
	i544 := $addint((i544), ($i443));
	 //  @line: 31
	i645 := $addint((i645), (1));
	 goto Block38;
	 //  @line: 33
Block40:
	 //  @line: 33
	__ret := i544;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 15
// <TaylorSeriesIte: int sin(int,int)>
procedure int$TaylorSeriesIte$sin$2231($param_0 : int, $param_1 : int) returns (__ret : int) {
var $i520 : int;
var $i621 : int;
var i116 : int;
var i924 : int;
var $i318 : int;
var $i419 : int;
var i013 : int;
var $i217 : int;
var i823 : int;
var $i722 : int;
Block27:
	i013 := $param_0;
	i116 := $param_1;
	 //  @line: 16
	i823 := i013;
	 //  @line: 17
	i924 := 3;
	 goto Block28;
	 //  @line: 17
Block28:
	 goto Block31, Block29;
	 //  @line: 17
Block31:
	 //  @line: 17
	 assume ($negInt(($gtint((i924), (i116))))==1);
	 assert ($neint((2), (0))==1);
	 //  @line: 18
	$i217 := $divint((i924), (2));
	 //  @line: 18
	 call $i318 := int$TaylorSeriesIte$power$2229((-1), ($i217));
	 //  @line: 18
	 call $i419 := int$TaylorSeriesIte$power$2229((i013), (i924));
	 //  @line: 18
	$i520 := $mulint(($i318), ($i419));
	 //  @line: 18
	 call $i621 := int$TaylorSeriesIte$fact$2230((i924));
	 assert ($neint(($i621), (0))==1);
	 //  @line: 18
	$i722 := $divint(($i520), ($i621));
	 //  @line: 18
	i823 := $addint((i823), ($i722));
	 //  @line: 17
	i924 := $addint((i924), (2));
	 goto Block28;
	 //  @line: 17
Block29:
	 assume ($gtint((i924), (i116))==1);
	 goto Block30;
	 //  @line: 19
Block30:
	 //  @line: 19
	__ret := i823;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 9
// <TaylorSeriesIte: int fact(int)>
procedure int$TaylorSeriesIte$fact$2230($param_0 : int) returns (__ret : int) {
var i111 : int;
var i212 : int;
var i010 : int;
Block22:
	i010 := $param_0;
	 //  @line: 10
	i111 := 1;
	 //  @line: 11
	i212 := 1;
	 goto Block23;
	 //  @line: 11
Block23:
	 goto Block26, Block24;
	 //  @line: 11
Block26:
	 //  @line: 11
	 assume ($negInt(($gtint((i212), (i010))))==1);
	 //  @line: 12
	i111 := $mulint((i111), (i212));
	 //  @line: 12
	i212 := $addint((i212), (1));
	 goto Block23;
	 //  @line: 11
Block24:
	 assume ($gtint((i212), (i010))==1);
	 goto Block25;
	 //  @line: 12
Block25:
	 //  @line: 12
	__ret := i111;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


