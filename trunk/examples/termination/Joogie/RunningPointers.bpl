type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var int$Random$index0 : int;
var java.lang.String$lp$$rp$$Random$args256 : [int]ref;
var ObjectList$ObjectList$next255 : Field ref;
var java.lang.Object$ObjectList$value254 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 6
// <RunningPointers: boolean isCyclic(ObjectList)>
procedure boolean$RunningPointers$isCyclic$2456($param_0 : ref) returns (__ret : int) {
var r019 : ref;
var $z026 : int;
var r123 : ref;
var r224 : ref;
var r325 : ref;
Block28:
	r019 := $param_0;
	 goto Block29;
	 //  @line: 7
Block29:
	 goto Block30, Block32;
	 //  @line: 7
Block30:
	 assume ($neref((r019), ($null))==1);
	 goto Block31;
	 //  @line: 7
Block32:
	 //  @line: 7
	 assume ($negInt(($neref((r019), ($null))))==1);
	 //  @line: 8
	__ret := 0;
	 return;
	 //  @line: 11
Block31:
	 //  @line: 11
	r123 := r019;
	 goto Block33;
	 //  @line: 12
Block33:
	 assert ($neref((r019), ($null))==1);
	 //  @line: 12
	r224 := $HeapVar[r019, ObjectList$ObjectList$next255];
	 goto Block34;
	 //  @line: 13
Block34:
	 goto Block37, Block35;
	 //  @line: 13
Block37:
	 //  @line: 13
	 assume ($negInt(($eqref((r224), ($null))))==1);
	 goto Block38;
	 //  @line: 13
Block35:
	 assume ($eqref((r224), ($null))==1);
	 goto Block36;
	 //  @line: 26
Block38:
	 goto Block39, Block40;
	 //  @line: 26
Block36:
	 goto Block52, Block50;
	 //  @line: 26
Block39:
	 assume ($eqref((r123), (r224))==1);
	 goto Block36;
	 //  @line: 26
Block40:
	 //  @line: 26
	 assume ($negInt(($eqref((r123), (r224))))==1);
	 assert ($neref((r224), ($null))==1);
	 //  @line: 14
	r325 := $HeapVar[r224, ObjectList$ObjectList$next255];
	 goto Block41;
	 //  @line: 26
Block52:
	 //  @line: 26
	 assume ($negInt(($eqref((r224), ($null))))==1);
	 goto Block53;
	 //  @line: 26
Block50:
	 assume ($eqref((r224), ($null))==1);
	 goto Block51;
	 //  @line: 15
Block41:
	 goto Block42, Block44;
	 //  @line: 26
Block53:
	 //  @line: 26
	$z026 := 1;
	 goto Block54;
	 //  @line: 26
Block51:
	 //  @line: 26
	$z026 := 0;
	 goto Block54;
	 //  @line: 15
Block42:
	 assume ($neref((r325), ($null))==1);
	 goto Block43;
	 //  @line: 15
Block44:
	 //  @line: 15
	 assume ($negInt(($neref((r325), ($null))))==1);
	 //  @line: 16
	__ret := 0;
	 return;
	 //  @line: 26
Block54:
	 //  @line: 26
	__ret := $z026;
	 return;
	 //  @line: 18
Block43:
	 goto Block47, Block45;
	 //  @line: 18
Block47:
	 //  @line: 18
	 assume ($negInt(($neref((r325), (r123))))==1);
	 goto Block48;
	 //  @line: 18
Block45:
	 assume ($neref((r325), (r123))==1);
	 goto Block46;
	 //  @line: 19
Block48:
	 //  @line: 19
	__ret := 1;
	 return;
	 //  @line: 22
Block46:
	 assert ($neref((r325), ($null))==1);
	 //  @line: 22
	r224 := $HeapVar[r325, ObjectList$ObjectList$next255];
	 goto Block49;
	 //  @line: 24
Block49:
	 assert ($neref((r123), ($null))==1);
	 //  @line: 24
	r123 := $HeapVar[r123, ObjectList$ObjectList$next255];
	 goto Block34;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2232()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block26:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 3
// <RunningPointers: void <init>()>
procedure void$RunningPointers$$la$init$ra$$2455(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r018 : ref;
Block27:
	r018 := __this;
	 assert ($neref((r018), ($null))==1);
	 //  @line: 4
	 call void$java.lang.Object$$la$init$ra$$28((r018));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 29
// <RunningPointers: void main(java.lang.String[])>
procedure void$RunningPointers$main$2457($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$Random$args256, $stringSize;
 {
var r027 : [int]ref;
var r129 : ref;

 //temp local variables 
var $freshlocal0 : int;

Block55:
	r027 := $param_0;
	 //  @line: 30
	java.lang.String$lp$$rp$$Random$args256 := r027;
	 //  @line: 31
	 call r129 := ObjectList$ObjectList$createList$2229();
	 //  @line: 32
	 call $freshlocal0 := boolean$RunningPointers$isCyclic$2456((r129));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 4
// <ObjectList: void <init>(java.lang.Object,ObjectList)>
procedure void$ObjectList$$la$init$ra$$2228(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
var r23 : ref;
var r12 : ref;
Block16:
	r01 := __this;
	r12 := $param_0;
	r23 := $param_1;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 assert ($neref((r01), ($null))==1);
	 //  @line: 6
	$HeapVar[r01, java.lang.Object$ObjectList$value254] := r12;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 7
	$HeapVar[r01, ObjectList$ObjectList$next255] := r23;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



	 //  @line: 10
// <ObjectList: ObjectList createList()>
procedure ObjectList$ObjectList$createList$2229() returns (__ret : ref) {
var r29 : ref;
var $r07 : ref;
var $r18 : ref;
var i010 : int;
	 //  @line: 11
Block17:
	 //  @line: 11
	r29 := $null;
	 //  @line: 12
	 call i010 := int$Random$random$2231();
	 goto Block18;
	 //  @line: 13
Block18:
	 goto Block21, Block19;
	 //  @line: 13
Block21:
	 //  @line: 13
	 assume ($negInt(($leint((i010), (0))))==1);
	 //  @line: 14
	$r07 := $newvariable((22));
	 assume ($neref(($newvariable((22))), ($null))==1);
	 //  @line: 14
	$r18 := $newvariable((23));
	 assume ($neref(($newvariable((23))), ($null))==1);
	 assert ($neref(($r18), ($null))==1);
	 //  @line: 14
	 call void$java.lang.Object$$la$init$ra$$28(($r18));
	 assert ($neref(($r07), ($null))==1);
	 //  @line: 14
	 call void$ObjectList$$la$init$ra$$2228(($r07), ($r18), (r29));
	 //  @line: 14
	r29 := $r07;
	 //  @line: 15
	i010 := $addint((i010), (-1));
	 goto Block18;
	 //  @line: 13
Block19:
	 assume ($leint((i010), (0))==1);
	 goto Block20;
	 //  @line: 17
Block20:
	 //  @line: 17
	__ret := r29;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2230(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r011 : ref;
Block24:
	r011 := __this;
	 assert ($neref((r011), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r011));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2231() returns (__ret : int)
  modifies int$Random$index0, $stringSize;
 {
var $i012 : int;
var $i115 : int;
var r014 : ref;
var $r113 : [int]ref;
var $i317 : int;
var $i216 : int;
	 //  @line: 6
Block25:
	 //  @line: 6
	$r113 := java.lang.String$lp$$rp$$Random$args256;
	 //  @line: 6
	$i012 := int$Random$index0;
	 assert ($geint(($i012), (0))==1);
	 assert ($ltint(($i012), ($refArrSize[$r113[$arrSizeIdx]]))==1);
	 //  @line: 6
	r014 := $r113[$i012];
	 //  @line: 7
	$i115 := int$Random$index0;
	 //  @line: 7
	$i216 := $addint(($i115), (1));
	 //  @line: 7
	int$Random$index0 := $i216;
	$i317 := $stringSize[r014];
	 //  @line: 8
	__ret := $i317;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


