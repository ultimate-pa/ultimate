type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.Object$List$head254 : Field ref;
var List$List$tail255 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 57
// <List: List alternate(List)>
procedure List$List$alternate$2234(__this : ref, $param_0 : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r050 : ref;
var $r553 : ref;
var r148 : ref;
var $r351 : ref;
var $r249 : ref;
var $r452 : ref;
Block54:
	r050 := __this;
	r148 := $param_0;
	 goto Block55;
	 //  @line: 58
Block55:
	 goto Block58, Block56;
	 //  @line: 58
Block58:
	 //  @line: 58
	 assume ($negInt(($neref((r148), ($null))))==1);
	 //  @line: 59
	__ret := r050;
	 return;
	 //  @line: 58
Block56:
	 assume ($neref((r148), ($null))==1);
	 goto Block57;
	 //  @line: 59
Block57:
	 //  @line: 59
	$r249 := $newvariable((59));
	 assume ($neref(($newvariable((59))), ($null))==1);
	 goto Block60;
	 //  @line: 59
Block60:
	 assert ($neref((r050), ($null))==1);
	 //  @line: 59
	$r452 := $HeapVar[r050, java.lang.Object$List$head254];
	 assert ($neref((r050), ($null))==1);
	 //  @line: 59
	$r351 := $HeapVar[r050, List$List$tail255];
	 assert ($neref((r148), ($null))==1);
	 //  @line: 59
	 call $r553 := List$List$alternate$2234((r148), ($r351));
	 assert ($neref(($r249), ($null))==1);
	 //  @line: 59
	 call void$List$$la$init$ra$$2229(($r249), ($r452), ($r553));
	 //  @line: 59
	__ret := $r249;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 42
// <List: List append(List)>
procedure List$List$append$2231(__this : ref, $param_0 : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r126 : ref;
var $r427 : ref;
var $r629 : ref;
var $r325 : ref;
var $r224 : ref;
var $r730 : ref;
var $r528 : ref;
var $r831 : ref;
var r023 : ref;
Block31:
	r023 := __this;
	r126 := $param_0;
	 assert ($neref((r023), ($null))==1);
	 //  @line: 43
	$r224 := $HeapVar[r023, List$List$tail255];
	 goto Block32;
	 //  @line: 43
Block32:
	 goto Block35, Block33;
	 //  @line: 43
Block35:
	 //  @line: 43
	 assume ($negInt(($neref(($r224), ($null))))==1);
	 //  @line: 44
	$r730 := $newvariable((36));
	 assume ($neref(($newvariable((36))), ($null))==1);
	 assert ($neref((r023), ($null))==1);
	 //  @line: 44
	$r831 := $HeapVar[r023, java.lang.Object$List$head254];
	 assert ($neref(($r730), ($null))==1);
	 //  @line: 44
	 call void$List$$la$init$ra$$2229(($r730), ($r831), (r126));
	 //  @line: 44
	__ret := $r730;
	 return;
	 //  @line: 43
Block33:
	 assume ($neref(($r224), ($null))==1);
	 goto Block34;
	 //  @line: 44
Block34:
	 //  @line: 44
	$r325 := $newvariable((37));
	 assume ($neref(($newvariable((37))), ($null))==1);
	 goto Block38;
	 //  @line: 44
Block38:
	 assert ($neref((r023), ($null))==1);
	 //  @line: 44
	$r528 := $HeapVar[r023, java.lang.Object$List$head254];
	 assert ($neref((r023), ($null))==1);
	 //  @line: 44
	$r427 := $HeapVar[r023, List$List$tail255];
	 assert ($neref(($r427), ($null))==1);
	 //  @line: 44
	 call $r629 := List$List$append$2231(($r427), (r126));
	 assert ($neref(($r325), ($null))==1);
	 //  @line: 44
	 call void$List$$la$init$ra$$2229(($r325), ($r528), ($r629));
	 //  @line: 44
	__ret := $r325;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 32
// <List: void <init>(java.lang.Object,List)>
procedure void$List$$la$init$ra$$2229(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r017 : ref;
var r118 : ref;
var r219 : ref;
Block25:
	r017 := __this;
	r118 := $param_0;
	r219 := $param_1;
	 assert ($neref((r017), ($null))==1);
	 //  @line: 33
	 call void$java.lang.Object$$la$init$ra$$28((r017));
	 assert ($neref((r017), ($null))==1);
	 //  @line: 34
	$HeapVar[r017, java.lang.Object$List$head254] := r118;
	 assert ($neref((r017), ($null))==1);
	 //  @line: 35
	$HeapVar[r017, List$List$tail255] := r219;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


	 //  @line: 52
// <List: List reverse()>
procedure List$List$reverse$2233(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r041 : ref;
var $r647 : ref;
var $r142 : ref;
var $r546 : ref;
var $r243 : ref;
var $r445 : ref;
var $r344 : ref;
Block47:
	r041 := __this;
	 assert ($neref((r041), ($null))==1);
	 //  @line: 53
	$r142 := $HeapVar[r041, List$List$tail255];
	 goto Block48;
	 //  @line: 53
Block48:
	 goto Block49, Block51;
	 //  @line: 53
Block49:
	 assume ($neref(($r142), ($null))==1);
	 goto Block50;
	 //  @line: 53
Block51:
	 //  @line: 53
	 assume ($negInt(($neref(($r142), ($null))))==1);
	 //  @line: 54
	__ret := r041;
	 return;
	 //  @line: 54
Block50:
	 assert ($neref((r041), ($null))==1);
	 //  @line: 54
	$r243 := $HeapVar[r041, List$List$tail255];
	 goto Block52;
	 //  @line: 54
Block52:
	 assert ($neref(($r243), ($null))==1);
	 //  @line: 54
	 call $r344 := List$List$reverse$2233(($r243));
	 //  @line: 54
	$r445 := $newvariable((53));
	 assume ($neref(($newvariable((53))), ($null))==1);
	 assert ($neref((r041), ($null))==1);
	 //  @line: 54
	$r546 := $HeapVar[r041, java.lang.Object$List$head254];
	 assert ($neref(($r445), ($null))==1);
	 //  @line: 54
	 call void$List$$la$init$ra$$2229(($r445), ($r546), ($null));
	 assert ($neref(($r344), ($null))==1);
	 //  @line: 54
	 call $r647 := List$List$append$2231(($r344), ($r445));
	 //  @line: 54
	__ret := $r647;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 38
// <List: void iter()>
procedure void$List$iter$2230(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var $r121 : ref;
var $r222 : ref;
var r020 : ref;
Block26:
	r020 := __this;
	 assert ($neref((r020), ($null))==1);
	 //  @line: 39
	$r121 := $HeapVar[r020, List$List$tail255];
	 goto Block27;
	 //  @line: 39
Block27:
	 goto Block28, Block30;
	 //  @line: 39
Block28:
	 assume ($eqref(($r121), ($null))==1);
	 goto Block29;
	 //  @line: 39
Block30:
	 //  @line: 39
	 assume ($negInt(($eqref(($r121), ($null))))==1);
	 assert ($neref((r020), ($null))==1);
	 //  @line: 40
	$r222 := $HeapVar[r020, List$List$tail255];
	 assert ($neref(($r222), ($null))==1);
	 //  @line: 40
	 call void$List$iter$2230(($r222));
	 goto Block29;
	 //  @line: 40
Block29:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


	 //  @line: 21
// <List: void main(java.lang.String[])>
procedure void$List$main$2228($param_0 : [int]ref)
  modifies $HeapVar;
 {
var $r98 : ref;
var $r109 : ref;
var $r64 : ref;
var $r87 : ref;
var r15 : ref;
var r210 : ref;
var r016 : [int]ref;
var $r42 : ref;
var $r76 : ref;
var $r1212 : ref;
var $r53 : ref;
var $r31 : ref;

 //temp local variables 
var $freshlocal1 : ref;
var $freshlocal3 : ref;
var $freshlocal0 : ref;
var $freshlocal2 : ref;

Block16:
	r016 := $param_0;
	 //  @line: 22
	$r31 := $newvariable((17));
	 assume ($neref(($newvariable((17))), ($null))==1);
	 //  @line: 22
	$r42 := $newvariable((18));
	 assume ($neref(($newvariable((18))), ($null))==1);
	 assert ($neref(($r42), ($null))==1);
	 //  @line: 22
	 call void$java.lang.Object$$la$init$ra$$28(($r42));
	 //  @line: 22
	$r53 := $newvariable((19));
	 assume ($neref(($newvariable((19))), ($null))==1);
	 //  @line: 22
	$r64 := $newvariable((20));
	 assume ($neref(($newvariable((20))), ($null))==1);
	 assert ($neref(($r64), ($null))==1);
	 //  @line: 22
	 call void$java.lang.Object$$la$init$ra$$28(($r64));
	 assert ($neref(($r53), ($null))==1);
	 //  @line: 22
	 call void$List$$la$init$ra$$2229(($r53), ($r64), ($null));
	 assert ($neref(($r31), ($null))==1);
	 //  @line: 22
	 call void$List$$la$init$ra$$2229(($r31), ($r42), ($r53));
	 //  @line: 22
	r15 := $r31;
	 //  @line: 23
	$r76 := $newvariable((21));
	 assume ($neref(($newvariable((21))), ($null))==1);
	 //  @line: 23
	$r87 := $newvariable((22));
	 assume ($neref(($newvariable((22))), ($null))==1);
	 assert ($neref(($r87), ($null))==1);
	 //  @line: 23
	 call void$java.lang.Object$$la$init$ra$$28(($r87));
	 //  @line: 23
	$r98 := $newvariable((23));
	 assume ($neref(($newvariable((23))), ($null))==1);
	 //  @line: 23
	$r109 := $newvariable((24));
	 assume ($neref(($newvariable((24))), ($null))==1);
	 assert ($neref(($r109), ($null))==1);
	 //  @line: 23
	 call void$java.lang.Object$$la$init$ra$$28(($r109));
	 assert ($neref(($r98), ($null))==1);
	 //  @line: 23
	 call void$List$$la$init$ra$$2229(($r98), ($r109), ($null));
	 assert ($neref(($r76), ($null))==1);
	 //  @line: 23
	 call void$List$$la$init$ra$$2229(($r76), ($r87), ($r98));
	 //  @line: 23
	r210 := $r76;
	 assert ($neref((r15), ($null))==1);
	 //  @line: 24
	 call $freshlocal0 := List$List$alternate$2234((r15), (r210));
	 assert ($neref((r210), ($null))==1);
	 //  @line: 25
	$r1212 := $HeapVar[r210, List$List$tail255];
	 assert ($neref(($r1212), ($null))==1);
	 //  @line: 25
	$HeapVar[$r1212, List$List$tail255] := r210;
	 assert ($neref((r15), ($null))==1);
	 //  @line: 27
	 call $freshlocal1 := List$List$append$2231((r15), (r210));
	 assert ($neref((r15), ($null))==1);
	 //  @line: 28
	 call void$List$iter$2230((r15));
	 assert ($neref((r15), ($null))==1);
	 //  @line: 29
	 call $freshlocal2 := List$List$reverseAcc$2232((r15), ($null));
	 assert ($neref((r15), ($null))==1);
	 //  @line: 30
	 call $freshlocal3 := List$List$reverse$2233((r15));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


	 //  @line: 47
// <List: List reverseAcc(List)>
procedure List$List$reverseAcc$2232(__this : ref, $param_0 : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r739 : ref;
var $r334 : ref;
var r032 : ref;
var $r233 : ref;
var $r537 : ref;
var $r436 : ref;
var r135 : ref;
var $r840 : ref;
var $r638 : ref;
Block39:
	r032 := __this;
	r135 := $param_0;
	 assert ($neref((r032), ($null))==1);
	 //  @line: 48
	$r233 := $HeapVar[r032, List$List$tail255];
	 goto Block40;
	 //  @line: 48
Block40:
	 goto Block43, Block41;
	 //  @line: 48
Block43:
	 //  @line: 48
	 assume ($negInt(($neref(($r233), ($null))))==1);
	 //  @line: 49
	$r739 := $newvariable((44));
	 assume ($neref(($newvariable((44))), ($null))==1);
	 assert ($neref((r032), ($null))==1);
	 //  @line: 49
	$r840 := $HeapVar[r032, java.lang.Object$List$head254];
	 assert ($neref(($r739), ($null))==1);
	 //  @line: 49
	 call void$List$$la$init$ra$$2229(($r739), ($r840), (r135));
	 //  @line: 49
	__ret := $r739;
	 return;
	 //  @line: 48
Block41:
	 assume ($neref(($r233), ($null))==1);
	 goto Block42;
	 //  @line: 49
Block42:
	 assert ($neref((r032), ($null))==1);
	 //  @line: 49
	$r537 := $HeapVar[r032, List$List$tail255];
	 goto Block45;
	 //  @line: 49
Block45:
	 //  @line: 49
	$r334 := $newvariable((46));
	 assume ($neref(($newvariable((46))), ($null))==1);
	 assert ($neref((r032), ($null))==1);
	 //  @line: 49
	$r436 := $HeapVar[r032, java.lang.Object$List$head254];
	 assert ($neref(($r334), ($null))==1);
	 //  @line: 49
	 call void$List$$la$init$ra$$2229(($r334), ($r436), (r135));
	 assert ($neref(($r537), ($null))==1);
	 //  @line: 49
	 call $r638 := List$List$reverseAcc$2232(($r537), ($r334));
	 //  @line: 49
	__ret := $r638;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


