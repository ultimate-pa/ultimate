type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var int$ArrayPrimitives.Random$index0 : int;
var java.lang.String$lp$$rp$$ArrayPrimitives.Random$args254 : [int]ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



	 //  @line: 4
// <ArrayPrimitives.ArrayPrimitives: void main(java.lang.String[])>
procedure void$ArrayPrimitives.ArrayPrimitives$main$2229($param_0 : [int]ref)
  modifies $intArrSize, $stringSize, java.lang.String$lp$$rp$$ArrayPrimitives.Random$args254;
 {
var $i311 : int;
var i16 : int;
var r110 : [int]int;
var $i513 : int;
var i04 : int;
var r02 : [int]ref;
var $i412 : int;
var $r29 : [int]int;
var i28 : int;
Block17:
	r02 := $param_0;
	 //  @line: 5
	java.lang.String$lp$$rp$$ArrayPrimitives.Random$args254 := r02;
	 //  @line: 6
	 call i04 := int$ArrayPrimitives.Random$random$2231();
	 //  @line: 7
	 call i16 := int$ArrayPrimitives.Random$random$2231();
	 //  @line: 8
	 call i28 := int$ArrayPrimitives.Random$random$2231();
	 //  @line: 9
	$r29 := $reftointarr(($newvariable((18))));
	$intArrSize[$reftointarr(($newvariable((18))))[$arrSizeIdx]] := 3;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((18))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r29[$arrSizeIdx]]))==1);
	 //  @line: 9
	$r29[0] := i04;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r29[$arrSizeIdx]]))==1);
	 //  @line: 9
	$r29[1] := i16;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r29[$arrSizeIdx]]))==1);
	 //  @line: 9
	$r29[2] := i28;
	 //  @line: 9
	r110 := $r29;
	 goto Block19;
	 //  @line: 10
Block19:
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[r110[$arrSizeIdx]]))==1);
	 //  @line: 10
	$i311 := r110[0];
	 goto Block20;
	 //  @line: 10
Block20:
	 goto Block23, Block21;
	 //  @line: 10
Block23:
	 //  @line: 10
	 assume ($negInt(($eqint(($i311), (i04))))==1);
	 goto Block19;
	 //  @line: 10
Block21:
	 assume ($eqint(($i311), (i04))==1);
	 goto Block22;
	 //  @line: 11
Block22:
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[r110[$arrSizeIdx]]))==1);
	 //  @line: 11
	$i412 := r110[1];
	 goto Block24;
	 //  @line: 11
Block24:
	 goto Block27, Block25;
	 //  @line: 11
Block27:
	 //  @line: 11
	 assume ($negInt(($eqint(($i412), (i16))))==1);
	 goto Block22;
	 //  @line: 11
Block25:
	 assume ($eqint(($i412), (i16))==1);
	 goto Block26;
	 //  @line: 12
Block26:
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[r110[$arrSizeIdx]]))==1);
	 //  @line: 12
	$i513 := r110[2];
	 goto Block28;
	 //  @line: 12
Block28:
	 goto Block31, Block29;
	 //  @line: 12
Block31:
	 //  @line: 12
	 assume ($negInt(($eqint(($i513), (i28))))==1);
	 goto Block26;
	 //  @line: 12
Block29:
	 assume ($eqint(($i513), (i28))==1);
	 goto Block30;
	 //  @line: 13
Block30:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 7
// <ArrayPrimitives.Random: int random()>
procedure int$ArrayPrimitives.Random$random$2231() returns (__ret : int)
  modifies $stringSize, int$ArrayPrimitives.Random$index0;
 {
var $i320 : int;
var $i219 : int;
var $r116 : [int]ref;
var $i118 : int;
var r017 : ref;
var $i015 : int;
	 //  @line: 8
Block33:
	 //  @line: 8
	$r116 := java.lang.String$lp$$rp$$ArrayPrimitives.Random$args254;
	 //  @line: 8
	$i015 := int$ArrayPrimitives.Random$index0;
	 assert ($geint(($i015), (0))==1);
	 assert ($ltint(($i015), ($refArrSize[$r116[$arrSizeIdx]]))==1);
	 //  @line: 8
	r017 := $r116[$i015];
	 //  @line: 9
	$i118 := int$ArrayPrimitives.Random$index0;
	 //  @line: 9
	$i219 := $addint(($i118), (1));
	 //  @line: 9
	int$ArrayPrimitives.Random$index0 := $i219;
	$i320 := $stringSize[r017];
	 //  @line: 10
	__ret := $i320;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



	 //  @line: 2
// <ArrayPrimitives.ArrayPrimitives: void <init>()>
procedure void$ArrayPrimitives.ArrayPrimitives$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



	 //  @line: 4
// <ArrayPrimitives.Random: void <clinit>()>
procedure void$ArrayPrimitives.Random$$la$clinit$ra$$2232()
  modifies int$ArrayPrimitives.Random$index0;
 {
	 //  @line: 5
Block34:
	 //  @line: 5
	int$ArrayPrimitives.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 2
// <ArrayPrimitives.Random: void <init>()>
procedure void$ArrayPrimitives.Random$$la$init$ra$$2230(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r014 : ref;
Block32:
	r014 := __this;
	 assert ($neref((r014), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r014));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


