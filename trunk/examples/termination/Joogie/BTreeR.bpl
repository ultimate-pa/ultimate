type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var int$Random$index0 : int;
var BTreeR$BTreeR$right255 : Field ref;
var java.lang.String$lp$$rp$$Random$args256 : [int]ref;
var BTreeR$BTreeR$left254 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 17
// <BTreeR: void main(java.lang.String[])>
procedure void$BTreeR$main$2230($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$Random$args256;
 {
var r019 : [int]ref;
var r125 : ref;
var $i021 : int;
var $i223 : int;
var $i324 : int;
var $i122 : int;
var $r220 : ref;

 //temp local variables 
var $freshlocal0 : int;

Block36:
	r019 := $param_0;
	 //  @line: 18
	java.lang.String$lp$$rp$$Random$args256 := r019;
	 //  @line: 19
	$r220 := $newvariable((37));
	 assume ($neref(($newvariable((37))), ($null))==1);
	 //  @line: 19
	 call $i021 := int$Random$random$2232();
	 //  @line: 19
	 call $i122 := int$Random$random$2232();
	 //  @line: 19
	$i223 := $mulint(($i021), ($i122));
	 //  @line: 19
	$i324 := $addint(($i223), (10));
	 assert ($neref(($r220), ($null))==1);
	 //  @line: 19
	 call void$BTreeR$$la$init$ra$$2228(($r220), ($i324));
	 //  @line: 19
	r125 := $r220;
	 assert ($neref((r125), ($null))==1);
	 //  @line: 20
	 call $freshlocal0 := int$BTreeR$height$2229((r125));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2231(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r027 : ref;
Block38:
	r027 := __this;
	 assert ($neref((r027), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r027));
	 return;
}


	 //  @line: 3
// <BTreeR: void <init>(int)>
procedure void$BTreeR$$la$init$ra$$2228(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i02 : int;
var $i14 : int;
var $r13 : ref;
var $r25 : ref;
var r01 : ref;
var $i26 : int;
Block16:
	r01 := __this;
	i02 := $param_0;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 4
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 goto Block17;
	 //  @line: 5
Block17:
	 goto Block20, Block18;
	 //  @line: 5
Block20:
	 //  @line: 5
	 assume ($negInt(($leint((i02), (1))))==1);
	 //  @line: 6
	$r13 := $newvariable((21));
	 assume ($neref(($newvariable((21))), ($null))==1);
	 //  @line: 6
	$i14 := $subint((i02), (1));
	 assert ($neref(($r13), ($null))==1);
	 //  @line: 6
	 call void$BTreeR$$la$init$ra$$2228(($r13), ($i14));
	 assert ($neref((r01), ($null))==1);
	 //  @line: 6
	$HeapVar[r01, BTreeR$BTreeR$left254] := $r13;
	 //  @line: 7
	$r25 := $newvariable((22));
	 assume ($neref(($newvariable((22))), ($null))==1);
	 //  @line: 7
	$i26 := $subint((i02), (1));
	 assert ($neref(($r25), ($null))==1);
	 //  @line: 7
	 call void$BTreeR$$la$init$ra$$2228(($r25), ($i26));
	 assert ($neref((r01), ($null))==1);
	 //  @line: 7
	$HeapVar[r01, BTreeR$BTreeR$right255] := $r25;
	 goto Block19;
	 //  @line: 5
Block18:
	 assume ($leint((i02), (1))==1);
	 goto Block19;
	 //  @line: 9
Block19:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 11
// <BTreeR: int height()>
procedure int$BTreeR$height$2229(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $r310 : ref;
var $r18 : ref;
var $i216 : int;
var $r414 : ref;
var r07 : ref;
var $r29 : ref;
var $i012 : int;
var $i317 : int;
var $i113 : int;
var $r518 : ref;
Block23:
	r07 := __this;
	 assert ($neref((r07), ($null))==1);
	 //  @line: 12
	$r18 := $HeapVar[r07, BTreeR$BTreeR$left254];
	 goto Block24;
	 //  @line: 12
Block24:
	 goto Block25, Block27;
	 //  @line: 12
Block25:
	 assume ($neref(($r18), ($null))==1);
	 goto Block26;
	 //  @line: 12
Block27:
	 //  @line: 12
	 assume ($negInt(($neref(($r18), ($null))))==1);
	 assert ($neref((r07), ($null))==1);
	 //  @line: 14
	$r518 := $HeapVar[r07, BTreeR$BTreeR$right255];
	 goto Block28;
	 //  @line: 13
Block26:
	 assert ($neref((r07), ($null))==1);
	 //  @line: 13
	$r29 := $HeapVar[r07, BTreeR$BTreeR$left254];
	 goto Block31;
	 //  @line: 14
Block28:
	 goto Block30, Block29;
	 //  @line: 13
Block31:
	 goto Block32, Block34;
	 //  @line: 14
Block30:
	 //  @line: 14
	 assume ($negInt(($neref(($r518), ($null))))==1);
	 //  @line: 13
	__ret := 1;
	 return;
	 //  @line: 14
Block29:
	 assume ($neref(($r518), ($null))==1);
	 goto Block26;
	 //  @line: 13
Block32:
	 assume ($neref(($r29), ($null))==1);
	 goto Block33;
	 //  @line: 13
Block34:
	 //  @line: 13
	 assume ($negInt(($neref(($r29), ($null))))==1);
	 assert ($neref((r07), ($null))==1);
	 //  @line: 14
	$r414 := $HeapVar[r07, BTreeR$BTreeR$right255];
	 assert ($neref(($r414), ($null))==1);
	 //  @line: 14
	 call $i216 := int$BTreeR$height$2229(($r414));
	 //  @line: 14
	$i317 := $addint((1), ($i216));
	 //  @line: 14
	__ret := $i317;
	 return;
	 //  @line: 14
Block33:
	 assert ($neref((r07), ($null))==1);
	 //  @line: 14
	$r310 := $HeapVar[r07, BTreeR$BTreeR$left254];
	 goto Block35;
	 //  @line: 14
Block35:
	 assert ($neref(($r310), ($null))==1);
	 //  @line: 14
	 call $i012 := int$BTreeR$height$2229(($r310));
	 //  @line: 14
	$i113 := $addint((1), ($i012));
	 //  @line: 14
	__ret := $i113;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2233()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block45:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2232() returns (__ret : int)
  modifies $stringSize, int$Random$index0;
 {
var $i130 : int;
var $i029 : int;
var $i435 : int;
var $r128 : [int]ref;
var r033 : ref;
var $i334 : int;
var $i536 : int;
var $r232 : [int]ref;
var $i231 : int;
	 //  @line: 6
Block39:
	 //  @line: 6
	$i130 := int$Random$index0;
	 //  @line: 6
	$r128 := java.lang.String$lp$$rp$$Random$args256;
	 //  @line: 6
	$i029 := $refArrSize[$r128[$arrSizeIdx]];
	 goto Block40;
	 //  @line: 6
Block40:
	 goto Block41, Block43;
	 //  @line: 6
Block41:
	 assume ($ltint(($i130), ($i029))==1);
	 goto Block42;
	 //  @line: 6
Block43:
	 //  @line: 6
	 assume ($negInt(($ltint(($i130), ($i029))))==1);
	 //  @line: 7
	__ret := 0;
	 return;
	 //  @line: 9
Block42:
	 //  @line: 9
	$r232 := java.lang.String$lp$$rp$$Random$args256;
	 goto Block44;
	 //  @line: 9
Block44:
	 //  @line: 9
	$i231 := int$Random$index0;
	 assert ($geint(($i231), (0))==1);
	 assert ($ltint(($i231), ($refArrSize[$r232[$arrSizeIdx]]))==1);
	 //  @line: 9
	r033 := $r232[$i231];
	 //  @line: 10
	$i334 := int$Random$index0;
	 //  @line: 10
	$i435 := $addint(($i334), (1));
	 //  @line: 10
	int$Random$index0 := $i435;
	$i536 := $stringSize[r033];
	 //  @line: 11
	__ret := $i536;
	 return;
}


