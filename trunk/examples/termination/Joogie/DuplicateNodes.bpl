type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var List$List$next300 : Field ref;
var java.lang.String$lp$$rp$$Random$args257 : [int]ref;
var Tree$Tree$left254 : Field ref;
var int$Random$index0 : int;
var Tree$List$value299 : Field ref;
var Tree$Tree$right255 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 5
// <Tree: void <init>(Tree,Tree)>
procedure void$Tree$$la$init$ra$$2231(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r217 : ref;
var r015 : ref;
var r116 : ref;
Block30:
	r015 := __this;
	r116 := $param_0;
	r217 := $param_1;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 6
	 call void$java.lang.Object$$la$init$ra$$28((r015));
	 assert ($neref((r015), ($null))==1);
	 //  @line: 7
	$HeapVar[r015, Tree$Tree$left254] := r116;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 8
	$HeapVar[r015, Tree$Tree$right255] := r217;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <DuplicateNodes: void main(java.lang.String[])>
procedure void$DuplicateNodes$main$2229($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$Random$args257, $stringSize;
 {
var r02 : [int]ref;
var r14 : ref;
Block17:
	r02 := $param_0;
	 //  @line: 3
	java.lang.String$lp$$rp$$Random$args257 := r02;
	 //  @line: 4
	 call r14 := Tree$Tree$createTree$2234();
	 //  @line: 6
	 call void$DuplicateNodes$randomlyDuplicate$2230((r14));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2238()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block57:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 46
// <Tree: void main(java.lang.String[])>
procedure void$Tree$main$2235($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$Random$args257, $stringSize;
 {
var r038 : [int]ref;

 //temp local variables 
var $freshlocal0 : ref;

Block54:
	r038 := $param_0;
	 //  @line: 47
	java.lang.String$lp$$rp$$Random$args257 := r038;
	 //  @line: 48
	 call $freshlocal0 := Tree$Tree$createTree$2234();
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2236(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r040 : ref;
Block55:
	r040 := __this;
	 assert ($neref((r040), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r040));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



	 //  @line: 4
// <List: void <init>(Tree,List)>
procedure void$List$$la$init$ra$$2461(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r249 : ref;
var r148 : ref;
var r047 : ref;
Block58:
	r047 := __this;
	r148 := $param_0;
	r249 := $param_1;
	 assert ($neref((r047), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r047));
	 assert ($neref((r047), ($null))==1);
	 //  @line: 6
	$HeapVar[r047, Tree$List$value299] := r148;
	 assert ($neref((r047), ($null))==1);
	 //  @line: 7
	$HeapVar[r047, List$List$next300] := r249;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2237() returns (__ret : int)
  modifies int$Random$index0, $stringSize;
 {
var $i041 : int;
var $i144 : int;
var r043 : ref;
var $i346 : int;
var $r142 : [int]ref;
var $i245 : int;
	 //  @line: 6
Block56:
	 //  @line: 6
	$r142 := java.lang.String$lp$$rp$$Random$args257;
	 //  @line: 6
	$i041 := int$Random$index0;
	 assert ($geint(($i041), (0))==1);
	 assert ($ltint(($i041), ($refArrSize[$r142[$arrSizeIdx]]))==1);
	 //  @line: 6
	r043 := $r142[$i041];
	 //  @line: 7
	$i144 := int$Random$index0;
	 //  @line: 7
	$i245 := $addint(($i144), (1));
	 //  @line: 7
	int$Random$index0 := $i245;
	$i346 := $stringSize[r043];
	 //  @line: 8
	__ret := $i346;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 14
// <Tree: Tree createNode()>
procedure Tree$Tree$createNode$2233() returns (__ret : ref) {
var r021 : ref;
var $r120 : ref;
var $i019 : int;
	 //  @line: 15
Block32:
	 //  @line: 15
	 call $i019 := int$Random$random$2237();
	 goto Block33;
	 //  @line: 15
Block33:
	 goto Block34, Block36;
	 //  @line: 15
Block34:
	 assume ($neint(($i019), (0))==1);
	 goto Block35;
	 //  @line: 15
Block36:
	 //  @line: 15
	 assume ($negInt(($neint(($i019), (0))))==1);
	 //  @line: 16
	__ret := $null;
	 return;
	 //  @line: 18
Block35:
	 //  @line: 18
	$r120 := $newvariable((37));
	 assume ($neref(($newvariable((37))), ($null))==1);
	 goto Block38;
	 //  @line: 18
Block38:
	 assert ($neref(($r120), ($null))==1);
	 //  @line: 18
	 call void$Tree$$la$init$ra$$2232(($r120));
	 //  @line: 18
	r021 := $r120;
	 //  @line: 19
	__ret := r021;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// <DuplicateNodes: void <init>()>
procedure void$DuplicateNodes$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 10
// <Tree: void <init>()>
procedure void$Tree$$la$init$ra$$2232(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r018 : ref;
Block31:
	r018 := __this;
	 assert ($neref((r018), ($null))==1);
	 //  @line: 11
	 call void$java.lang.Object$$la$init$ra$$28((r018));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 9
// <DuplicateNodes: void randomlyDuplicate(Tree)>
procedure void$DuplicateNodes$randomlyDuplicate$2230($param_0 : ref)
  modifies $HeapVar;
 {
var $r512 : ref;
var $r411 : ref;
var $r310 : ref;
var $r613 : ref;
var r714 : ref;
var $i07 : int;
var $r18 : ref;
var $r29 : ref;
var r05 : ref;
Block18:
	r05 := $param_0;
	 //  @line: 10
	r714 := r05;
	 goto Block19;
	 //  @line: 12
Block19:
	 goto Block22, Block20;
	 //  @line: 12
Block22:
	 //  @line: 12
	 assume ($negInt(($eqref((r714), ($null))))==1);
	 //  @line: 13
	 call $i07 := int$Random$random$2237();
	 goto Block23;
	 //  @line: 12
Block20:
	 assume ($eqref((r714), ($null))==1);
	 goto Block21;
	 //  @line: 13
Block23:
	 goto Block26, Block24;
	 //  @line: 21
Block21:
	 return;
	 //  @line: 13
Block26:
	 //  @line: 13
	 assume ($negInt(($leint(($i07), (42))))==1);
	 //  @line: 14
	$r411 := $newvariable((27));
	 assume ($neref(($newvariable((27))), ($null))==1);
	 assert ($neref((r714), ($null))==1);
	 //  @line: 14
	$r613 := $HeapVar[r714, Tree$Tree$left254];
	 assert ($neref((r714), ($null))==1);
	 //  @line: 14
	$r512 := $HeapVar[r714, Tree$Tree$right255];
	 assert ($neref(($r411), ($null))==1);
	 //  @line: 14
	 call void$Tree$$la$init$ra$$2231(($r411), ($r613), ($r512));
	 assert ($neref((r714), ($null))==1);
	 //  @line: 14
	$HeapVar[r714, Tree$Tree$right255] := $r411;
	 assert ($neref((r714), ($null))==1);
	 //  @line: 15
	r714 := $HeapVar[r714, Tree$Tree$left254];
	 goto Block19;
	 //  @line: 13
Block24:
	 assume ($leint(($i07), (42))==1);
	 goto Block25;
	 //  @line: 17
Block25:
	 //  @line: 17
	$r18 := $newvariable((28));
	 assume ($neref(($newvariable((28))), ($null))==1);
	 goto Block29;
	 //  @line: 17
Block29:
	 assert ($neref((r714), ($null))==1);
	 //  @line: 17
	$r310 := $HeapVar[r714, Tree$Tree$left254];
	 assert ($neref((r714), ($null))==1);
	 //  @line: 17
	$r29 := $HeapVar[r714, Tree$Tree$right255];
	 assert ($neref(($r18), ($null))==1);
	 //  @line: 17
	 call void$Tree$$la$init$ra$$2231(($r18), ($r310), ($r29));
	 assert ($neref((r714), ($null))==1);
	 //  @line: 17
	$HeapVar[r714, Tree$Tree$left254] := $r18;
	 assert ($neref((r714), ($null))==1);
	 //  @line: 18
	r714 := $HeapVar[r714, Tree$Tree$right255];
	 goto Block19;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


	 //  @line: 22
// <Tree: Tree createTree()>
procedure Tree$Tree$createTree$2234() returns (__ret : ref)
  modifies $HeapVar;
 {
var r023 : ref;
var $r424 : ref;
var i036 : int;
var r128 : ref;
var r332 : ref;
var $r634 : ref;
var $r533 : ref;
var r837 : ref;
var r735 : ref;
var r230 : ref;
	 //  @line: 23
Block39:
	 //  @line: 23
	 call r023 := Tree$Tree$createNode$2233();
	 //  @line: 24
	$r424 := $newvariable((40));
	 assume ($neref(($newvariable((40))), ($null))==1);
	 assert ($neref(($r424), ($null))==1);
	 //  @line: 24
	 call void$List$$la$init$ra$$2461(($r424), (r023), ($null));
	 //  @line: 24
	r735 := $r424;
	 //  @line: 26
	 call i036 := int$Random$random$2237();
	 goto Block41;
	 //  @line: 27
Block41:
	 goto Block42, Block44;
	 //  @line: 27
Block42:
	 assume ($leint((i036), (0))==1);
	 goto Block43;
	 //  @line: 27
Block44:
	 //  @line: 27
	 assume ($negInt(($leint((i036), (0))))==1);
	 goto Block45;
	 //  @line: 43
Block43:
	 //  @line: 43
	__ret := r023;
	 return;
	 //  @line: 43
Block45:
	 goto Block46, Block47;
	 //  @line: 43
Block46:
	 assume ($eqref((r735), ($null))==1);
	 goto Block43;
	 //  @line: 43
Block47:
	 //  @line: 43
	 assume ($negInt(($eqref((r735), ($null))))==1);
	 assert ($neref((r735), ($null))==1);
	 //  @line: 28
	r128 := $HeapVar[r735, Tree$List$value299];
	 assert ($neref((r735), ($null))==1);
	 //  @line: 29
	r735 := $HeapVar[r735, List$List$next300];
	 goto Block48;
	 //  @line: 31
Block48:
	 goto Block51, Block49;
	 //  @line: 31
Block51:
	 //  @line: 31
	 assume ($negInt(($eqref((r128), ($null))))==1);
	 //  @line: 32
	 call r230 := Tree$Tree$createNode$2233();
	 //  @line: 33
	 call r332 := Tree$Tree$createNode$2233();
	 assert ($neref((r128), ($null))==1);
	 //  @line: 34
	$HeapVar[r128, Tree$Tree$left254] := r230;
	 assert ($neref((r128), ($null))==1);
	 //  @line: 35
	$HeapVar[r128, Tree$Tree$right255] := r332;
	 //  @line: 36
	$r533 := $newvariable((52));
	 assume ($neref(($newvariable((52))), ($null))==1);
	 assert ($neref(($r533), ($null))==1);
	 //  @line: 36
	 call void$List$$la$init$ra$$2461(($r533), (r230), (r735));
	 //  @line: 36
	r837 := $r533;
	 //  @line: 37
	$r634 := $newvariable((53));
	 assume ($neref(($newvariable((53))), ($null))==1);
	 assert ($neref(($r634), ($null))==1);
	 //  @line: 37
	 call void$List$$la$init$ra$$2461(($r634), (r332), (r837));
	 //  @line: 37
	r735 := $r634;
	 goto Block50;
	 //  @line: 31
Block49:
	 assume ($eqref((r128), ($null))==1);
	 goto Block50;
	 //  @line: 40
Block50:
	 //  @line: 40
	i036 := $addint((i036), (-1));
	 goto Block41;
}


