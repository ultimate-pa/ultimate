type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.Object$FlattenTreeListRec.Tree$value261 : Field ref;
var FlattenTreeListRec.ObjectList$FlattenTreeListRec.ObjectList$next255 : Field ref;
var int$FlattenTreeListRec.Random$index0 : int;
var FlattenTreeListRec.Tree$FlattenTreeListRec.TreeList$value256 : Field ref;
var FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$left259 : Field ref;
var FlattenTreeListRec.TreeList$FlattenTreeListRec.TreeList$next257 : Field ref;
var java.lang.Object$FlattenTreeListRec.ObjectList$value254 : Field ref;
var java.lang.String$lp$$rp$$FlattenTreeListRec.Random$args258 : [int]ref;
var FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$right260 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 2
// <FlattenTreeListRec.Random: void <init>()>
procedure void$FlattenTreeListRec.Random$$la$init$ra$$2234(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r041 : ref;
Block46:
	r041 := __this;
	 assert ($neref((r041), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r041));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 4
// <FlattenTreeListRec.FlattenTreeListRec: void main(java.lang.String[])>
procedure void$FlattenTreeListRec.FlattenTreeListRec$main$2229($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$FlattenTreeListRec.Random$args258;
 {
var r411 : ref;
var $r310 : ref;
var i04 : int;
var r02 : [int]ref;
var r19 : ref;
var i112 : int;

 //temp local variables 
var $freshlocal0 : ref;

Block17:
	r02 := $param_0;
	 //  @line: 5
	java.lang.String$lp$$rp$$FlattenTreeListRec.Random$args258 := r02;
	 //  @line: 6
	 call i04 := int$FlattenTreeListRec.Random$random$2235();
	 //  @line: 7
	r411 := $null;
	 //  @line: 8
	i112 := i04;
	 goto Block18;
	 //  @line: 8
Block18:
	 goto Block21, Block19;
	 //  @line: 8
Block21:
	 //  @line: 8
	 assume ($negInt(($leint((i112), (0))))==1);
	 //  @line: 9
	 call r19 := FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$createTree$2240();
	 //  @line: 10
	$r310 := $newvariable((22));
	 assume ($neref(($newvariable((22))), ($null))==1);
	 assert ($neref(($r310), ($null))==1);
	 //  @line: 10
	 call void$FlattenTreeListRec.TreeList$$la$init$ra$$2233(($r310), (r19), (r411));
	 //  @line: 10
	r411 := $r310;
	 //  @line: 8
	i112 := $addint((i112), (-1));
	 goto Block18;
	 //  @line: 8
Block19:
	 assume ($leint((i112), (0))==1);
	 goto Block20;
	 //  @line: 13
Block20:
	 //  @line: 13
	 call $freshlocal0 := FlattenTreeListRec.ObjectList$FlattenTreeListRec.FlattenTreeListRec$flatten$2230((r411));
	 goto Block23;
	 //  @line: 14
Block23:
	 return;
}


	 //  @line: 7
// <FlattenTreeListRec.Tree: void <init>(FlattenTreeListRec.Tree,FlattenTreeListRec.Tree)>
procedure void$FlattenTreeListRec.Tree$$la$init$ra$$2237(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r250 : ref;
var r048 : ref;
var r149 : ref;
Block49:
	r048 := __this;
	r149 := $param_0;
	r250 := $param_1;
	 assert ($neref((r048), ($null))==1);
	 //  @line: 8
	 call void$java.lang.Object$$la$init$ra$$28((r048));
	 assert ($neref((r048), ($null))==1);
	 //  @line: 9
	$HeapVar[r048, FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$left259] := r149;
	 assert ($neref((r048), ($null))==1);
	 //  @line: 10
	$HeapVar[r048, FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$right260] := r250;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 22
// <FlattenTreeListRec.Tree: FlattenTreeListRec.Tree createTree()>
procedure FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$createTree$2240() returns (__ret : ref)
  modifies $HeapVar;
 {
var i061 : int;
var $r465 : ref;
var r567 : ref;
var $r364 : ref;
var r058 : ref;
var $r162 : ref;
var $r263 : ref;
var i166 : int;
	 //  @line: 23
Block54:
	 //  @line: 23
	 call i166 := int$FlattenTreeListRec.Random$random$2235();
	 goto Block55;
	 //  @line: 24
Block55:
	 goto Block58, Block56;
	 //  @line: 24
Block58:
	 //  @line: 24
	 assume ($negInt(($neint((i166), (0))))==1);
	 //  @line: 25
	__ret := $null;
	 return;
	 //  @line: 24
Block56:
	 assume ($neint((i166), (0))==1);
	 goto Block57;
	 //  @line: 27
Block57:
	 //  @line: 27
	 call r058 := FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$createNode$2239();
	 goto Block59;
	 //  @line: 28
Block59:
	 //  @line: 28
	r567 := r058;
	 goto Block60;
	 //  @line: 30
Block60:
	 goto Block61, Block63;
	 //  @line: 30
Block61:
	 assume ($leint((i166), (0))==1);
	 goto Block62;
	 //  @line: 30
Block63:
	 //  @line: 30
	 assume ($negInt(($leint((i166), (0))))==1);
	 //  @line: 31
	 call i061 := int$FlattenTreeListRec.Random$random$2235();
	 goto Block64;
	 //  @line: 50
Block62:
	 //  @line: 50
	__ret := r058;
	 return;
	 //  @line: 32
Block64:
	 goto Block65, Block67;
	 //  @line: 32
Block65:
	 assume ($leint((i061), (0))==1);
	 goto Block66;
	 //  @line: 32
Block67:
	 //  @line: 32
	 assume ($negInt(($leint((i061), (0))))==1);
	 assert ($neref((r567), ($null))==1);
	 //  @line: 33
	$r364 := $HeapVar[r567, FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$left259];
	 goto Block68;
	 //  @line: 40
Block66:
	 assert ($neref((r567), ($null))==1);
	 //  @line: 40
	$r162 := $HeapVar[r567, FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$right260];
	 goto Block74;
	 //  @line: 33
Block68:
	 goto Block71, Block69;
	 //  @line: 40
Block74:
	 goto Block77, Block75;
	 //  @line: 33
Block71:
	 //  @line: 33
	 assume ($negInt(($neref(($r364), ($null))))==1);
	 //  @line: 34
	 call $r465 := FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$createNode$2239();
	 assert ($neref((r567), ($null))==1);
	 //  @line: 34
	$HeapVar[r567, FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$left259] := $r465;
	 //  @line: 35
	r567 := r058;
	 goto Block72;
	 //  @line: 33
Block69:
	 assume ($neref(($r364), ($null))==1);
	 goto Block70;
	 //  @line: 40
Block77:
	 //  @line: 40
	 assume ($negInt(($neref(($r162), ($null))))==1);
	 //  @line: 41
	 call $r263 := FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$createNode$2239();
	 assert ($neref((r567), ($null))==1);
	 //  @line: 41
	$HeapVar[r567, FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$right260] := $r263;
	 //  @line: 42
	r567 := r058;
	 goto Block72;
	 //  @line: 40
Block75:
	 assume ($neref(($r162), ($null))==1);
	 goto Block76;
	 //  @line: 47
Block72:
	 //  @line: 47
	i166 := $addint((i166), (-1));
	 goto Block78;
	 //  @line: 37
Block70:
	 assert ($neref((r567), ($null))==1);
	 //  @line: 37
	r567 := $HeapVar[r567, FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$left259];
	 goto Block73;
	 //  @line: 44
Block76:
	 assert ($neref((r567), ($null))==1);
	 //  @line: 44
	r567 := $HeapVar[r567, FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$right260];
	 goto Block72;
	 //  @line: 48
Block78:
	 goto Block60;
	 //  @line: 37
Block73:
	 goto Block72;
}


// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 12
// <FlattenTreeListRec.Tree: void <init>()>
procedure void$FlattenTreeListRec.Tree$$la$init$ra$$2238(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r051 : ref;
Block50:
	r051 := __this;
	 assert ($neref((r051), ($null))==1);
	 //  @line: 13
	 call void$java.lang.Object$$la$init$ra$$28((r051));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 7
// <FlattenTreeListRec.Random: int random()>
procedure int$FlattenTreeListRec.Random$random$2235() returns (__ret : int)
  modifies int$FlattenTreeListRec.Random$index0, $stringSize;
 {
var $i042 : int;
var $i347 : int;
var $r143 : [int]ref;
var $i246 : int;
var $i145 : int;
var r044 : ref;
	 //  @line: 8
Block47:
	 //  @line: 8
	$r143 := java.lang.String$lp$$rp$$FlattenTreeListRec.Random$args258;
	 //  @line: 8
	$i042 := int$FlattenTreeListRec.Random$index0;
	 assert ($geint(($i042), (0))==1);
	 assert ($ltint(($i042), ($refArrSize[$r143[$arrSizeIdx]]))==1);
	 //  @line: 8
	r044 := $r143[$i042];
	 //  @line: 9
	$i145 := int$FlattenTreeListRec.Random$index0;
	 //  @line: 9
	$i246 := $addint(($i145), (1));
	 //  @line: 9
	int$FlattenTreeListRec.Random$index0 := $i246;
	$i347 := $stringSize[r044];
	 //  @line: 10
	__ret := $i347;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 16
// <FlattenTreeListRec.FlattenTreeListRec: FlattenTreeListRec.ObjectList flatten(FlattenTreeListRec.TreeList)>
procedure FlattenTreeListRec.ObjectList$FlattenTreeListRec.FlattenTreeListRec$flatten$2230($param_0 : ref) returns (__ret : ref) {
var r117 : ref;
var r1125 : ref;
var $r418 : ref;
var $r620 : ref;
var r1327 : ref;
var $r721 : ref;
var r1024 : ref;
var r014 : ref;
var $r316 : ref;
var $r822 : ref;
var $r923 : ref;
var $r215 : ref;
var $r519 : ref;
var r1226 : ref;
Block24:
	r1024 := $param_0;
	 goto Block25;
	 //  @line: 17
Block25:
	 goto Block28, Block26;
	 //  @line: 17
Block28:
	 //  @line: 17
	 assume ($negInt(($neref((r1024), ($null))))==1);
	 //  @line: 18
	__ret := $null;
	 return;
	 //  @line: 17
Block26:
	 assume ($neref((r1024), ($null))==1);
	 goto Block27;
	 //  @line: 20
Block27:
	 assert ($neref((r1024), ($null))==1);
	 //  @line: 20
	r014 := $HeapVar[r1024, FlattenTreeListRec.Tree$FlattenTreeListRec.TreeList$value256];
	 goto Block29;
	 //  @line: 21
Block29:
	 goto Block32, Block30;
	 //  @line: 21
Block32:
	 //  @line: 21
	 assume ($negInt(($eqref((r014), ($null))))==1);
	 assert ($neref((r014), ($null))==1);
	 //  @line: 22
	r117 := $HeapVar[r014, java.lang.Object$FlattenTreeListRec.Tree$value261];
	 assert ($neref((r1024), ($null))==1);
	 //  @line: 23
	r1125 := $HeapVar[r1024, FlattenTreeListRec.TreeList$FlattenTreeListRec.TreeList$next257];
	 //  @line: 24
	$r418 := $newvariable((33));
	 assume ($neref(($newvariable((33))), ($null))==1);
	 assert ($neref((r014), ($null))==1);
	 //  @line: 24
	$r519 := $HeapVar[r014, FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$left259];
	 assert ($neref(($r418), ($null))==1);
	 //  @line: 24
	 call void$FlattenTreeListRec.TreeList$$la$init$ra$$2233(($r418), ($r519), (r1125));
	 //  @line: 24
	r1226 := $r418;
	 //  @line: 25
	$r620 := $newvariable((34));
	 assume ($neref(($newvariable((34))), ($null))==1);
	 assert ($neref((r014), ($null))==1);
	 //  @line: 25
	$r721 := $HeapVar[r014, FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$right260];
	 assert ($neref(($r620), ($null))==1);
	 //  @line: 25
	 call void$FlattenTreeListRec.TreeList$$la$init$ra$$2233(($r620), ($r721), (r1226));
	 //  @line: 25
	r1327 := $r620;
	 //  @line: 26
	$r822 := $newvariable((35));
	 assume ($neref(($newvariable((35))), ($null))==1);
	 //  @line: 26
	 call $r923 := FlattenTreeListRec.ObjectList$FlattenTreeListRec.FlattenTreeListRec$flatten$2230((r1327));
	 assert ($neref(($r822), ($null))==1);
	 //  @line: 26
	 call void$FlattenTreeListRec.ObjectList$$la$init$ra$$2231(($r822), (r117), ($r923));
	 //  @line: 26
	__ret := $r822;
	 return;
	 //  @line: 21
Block30:
	 assume ($eqref((r014), ($null))==1);
	 goto Block31;
	 //  @line: 28
Block31:
	 assert ($neref((r1024), ($null))==1);
	 //  @line: 28
	$r215 := $HeapVar[r1024, FlattenTreeListRec.TreeList$FlattenTreeListRec.TreeList$next257];
	 goto Block36;
	 //  @line: 28
Block36:
	 //  @line: 28
	 call $r316 := FlattenTreeListRec.ObjectList$FlattenTreeListRec.FlattenTreeListRec$flatten$2230(($r215));
	 //  @line: 28
	__ret := $r316;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


	 //  @line: 4
// <FlattenTreeListRec.Random: void <clinit>()>
procedure void$FlattenTreeListRec.Random$$la$clinit$ra$$2236()
  modifies int$FlattenTreeListRec.Random$index0;
 {
	 //  @line: 5
Block48:
	 //  @line: 5
	int$FlattenTreeListRec.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



	 //  @line: 6
// <FlattenTreeListRec.TreeList: void <init>(FlattenTreeListRec.Tree,FlattenTreeListRec.TreeList)>
procedure void$FlattenTreeListRec.TreeList$$la$init$ra$$2233(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r139 : ref;
var r038 : ref;
var r240 : ref;
Block45:
	r038 := __this;
	r139 := $param_0;
	r240 := $param_1;
	 assert ($neref((r038), ($null))==1);
	 //  @line: 7
	 call void$java.lang.Object$$la$init$ra$$28((r038));
	 assert ($neref((r038), ($null))==1);
	 //  @line: 8
	$HeapVar[r038, FlattenTreeListRec.Tree$FlattenTreeListRec.TreeList$value256] := r139;
	 assert ($neref((r038), ($null))==1);
	 //  @line: 9
	$HeapVar[r038, FlattenTreeListRec.TreeList$FlattenTreeListRec.TreeList$next257] := r240;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <FlattenTreeListRec.FlattenTreeListRec: void <init>()>
procedure void$FlattenTreeListRec.FlattenTreeListRec$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 6
// <FlattenTreeListRec.ObjectList: void <init>(java.lang.Object,FlattenTreeListRec.ObjectList)>
procedure void$FlattenTreeListRec.ObjectList$$la$init$ra$$2231(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r230 : ref;
var r129 : ref;
var r028 : ref;
Block37:
	r028 := __this;
	r129 := $param_0;
	r230 := $param_1;
	 assert ($neref((r028), ($null))==1);
	 //  @line: 7
	 call void$java.lang.Object$$la$init$ra$$28((r028));
	 assert ($neref((r028), ($null))==1);
	 //  @line: 8
	$HeapVar[r028, java.lang.Object$FlattenTreeListRec.ObjectList$value254] := r129;
	 assert ($neref((r028), ($null))==1);
	 //  @line: 9
	$HeapVar[r028, FlattenTreeListRec.ObjectList$FlattenTreeListRec.ObjectList$next255] := r230;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 12
// <FlattenTreeListRec.ObjectList: FlattenTreeListRec.ObjectList createList()>
procedure FlattenTreeListRec.ObjectList$FlattenTreeListRec.ObjectList$createList$2232() returns (__ret : ref) {
var i037 : int;
var r236 : ref;
var $r135 : ref;
var $r034 : ref;
	 //  @line: 13
Block38:
	 //  @line: 13
	r236 := $null;
	 //  @line: 14
	 call i037 := int$FlattenTreeListRec.Random$random$2235();
	 goto Block39;
	 //  @line: 15
Block39:
	 goto Block42, Block40;
	 //  @line: 15
Block42:
	 //  @line: 15
	 assume ($negInt(($leint((i037), (0))))==1);
	 //  @line: 16
	$r034 := $newvariable((43));
	 assume ($neref(($newvariable((43))), ($null))==1);
	 //  @line: 16
	$r135 := $newvariable((44));
	 assume ($neref(($newvariable((44))), ($null))==1);
	 assert ($neref(($r135), ($null))==1);
	 //  @line: 16
	 call void$java.lang.Object$$la$init$ra$$28(($r135));
	 assert ($neref(($r034), ($null))==1);
	 //  @line: 16
	 call void$FlattenTreeListRec.ObjectList$$la$init$ra$$2231(($r034), ($r135), (r236));
	 //  @line: 16
	r236 := $r034;
	 //  @line: 17
	i037 := $addint((i037), (-1));
	 goto Block39;
	 //  @line: 15
Block40:
	 assume ($leint((i037), (0))==1);
	 goto Block41;
	 //  @line: 19
Block41:
	 //  @line: 19
	__ret := r236;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 16
// <FlattenTreeListRec.Tree: FlattenTreeListRec.Tree createNode()>
procedure FlattenTreeListRec.Tree$FlattenTreeListRec.Tree$createNode$2239() returns (__ret : ref)
  modifies $HeapVar;
 {
var r053 : ref;
var $r254 : ref;
var $r152 : ref;
	 //  @line: 17
Block51:
	 //  @line: 17
	$r152 := $newvariable((52));
	 assume ($neref(($newvariable((52))), ($null))==1);
	 assert ($neref(($r152), ($null))==1);
	 //  @line: 17
	 call void$FlattenTreeListRec.Tree$$la$init$ra$$2238(($r152));
	 //  @line: 17
	r053 := $r152;
	 //  @line: 18
	$r254 := $newvariable((53));
	 assume ($neref(($newvariable((53))), ($null))==1);
	 assert ($neref(($r254), ($null))==1);
	 //  @line: 18
	 call void$java.lang.Object$$la$init$ra$$28(($r254));
	 assert ($neref((r053), ($null))==1);
	 //  @line: 18
	$HeapVar[r053, java.lang.Object$FlattenTreeListRec.Tree$value261] := $r254;
	 //  @line: 19
	__ret := r053;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


