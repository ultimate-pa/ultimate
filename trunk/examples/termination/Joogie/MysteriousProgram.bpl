type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 





// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 26
// <MysteriousProgram: void mysteriousRecursive(int[],int)>
procedure void$MysteriousProgram$mysteriousRecursive$2233($param_0 : [int]int, $param_1 : int) {
var $i226 : int;
var r024 : [int]int;
var $i328 : int;
var $i429 : int;
var i023 : int;
var $i125 : int;
var i530 : int;
Block31:
	r024 := $param_0;
	i023 := $param_1;
	 //  @line: 27
	$i125 := $intArrSize[r024[$arrSizeIdx]];
	 //  @line: 27
	$i226 := $subint(($i125), (1));
	 goto Block32;
	 //  @line: 27
Block32:
	 goto Block35, Block33;
	 //  @line: 27
Block35:
	 //  @line: 27
	 assume ($negInt(($neint((i023), ($i226))))==1);
	 //  @line: 28
	 call void$MysteriousProgram$display$2229((r024));
	 goto Block34;
	 //  @line: 27
Block33:
	 assume ($neint((i023), ($i226))==1);
	 goto Block34;
	 //  @line: 29
Block34:
	 //  @line: 29
	i530 := i023;
	 goto Block36;
	 //  @line: 29
Block36:
	 //  @line: 29
	$i328 := $intArrSize[r024[$arrSizeIdx]];
	 goto Block37;
	 //  @line: 29
Block37:
	 goto Block40, Block38;
	 //  @line: 29
Block40:
	 //  @line: 29
	 assume ($negInt(($geint((i530), ($i328))))==1);
	 //  @line: 30
	 call void$MysteriousProgram$swap3$2231((r024), (i023), (i530));
	 //  @line: 31
	$i429 := $addint((i023), (1));
	 //  @line: 31
	 call void$MysteriousProgram$mysteriousRecursive$2233((r024), ($i429));
	 //  @line: 32
	 call void$MysteriousProgram$swap3$2231((r024), (i023), (i530));
	 //  @line: 29
	i530 := $addint((i530), (1));
	 goto Block36;
	 //  @line: 29
Block38:
	 assume ($geint((i530), ($i328))==1);
	 goto Block39;
	 //  @line: 34
Block39:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <MysteriousProgram: void display(int[])>
procedure void$MysteriousProgram$display$2229($param_0 : [int]int) {
var $i04 : int;
var r03 : [int]int;
var i15 : int;
Block17:
	r03 := $param_0;
	 //  @line: 3
	i15 := 0;
	 goto Block18;
	 //  @line: 3
Block18:
	 //  @line: 3
	$i04 := $intArrSize[r03[$arrSizeIdx]];
	 goto Block19;
	 //  @line: 3
Block19:
	 goto Block20, Block22;
	 //  @line: 3
Block20:
	 assume ($geint((i15), ($i04))==1);
	 goto Block21;
	 //  @line: 3
Block22:
	 //  @line: 3
	 assume ($negInt(($geint((i15), ($i04))))==1);
	 //  @line: 6
	i15 := $addint((i15), (1));
	 goto Block18;
	 //  @line: 6
Block21:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 18
// <MysteriousProgram: void mysterious(int[],int)>
procedure void$MysteriousProgram$mysterious$2232($param_0 : [int]int, $param_1 : int) {
var r020 : [int]int;
var i222 : int;
var $i121 : int;
var i018 : int;
Block25:
	r020 := $param_0;
	i018 := $param_1;
	 //  @line: 19
	i222 := i018;
	 goto Block26;
	 //  @line: 19
Block26:
	 //  @line: 19
	$i121 := $intArrSize[r020[$arrSizeIdx]];
	 goto Block27;
	 //  @line: 19
Block27:
	 goto Block30, Block28;
	 //  @line: 19
Block30:
	 //  @line: 19
	 assume ($negInt(($geint((i222), ($i121))))==1);
	 //  @line: 20
	 call void$MysteriousProgram$swap3$2231((r020), (i018), (i222));
	 //  @line: 21
	 call void$MysteriousProgram$display$2229((r020));
	 //  @line: 22
	 call void$MysteriousProgram$swap3$2231((r020), (i018), (i222));
	 //  @line: 19
	i222 := $addint((i222), (1));
	 goto Block26;
	 //  @line: 19
Block28:
	 assume ($geint((i222), ($i121))==1);
	 goto Block29;
	 //  @line: 24
Block29:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <MysteriousProgram: void <init>()>
procedure void$MysteriousProgram$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 7
// <MysteriousProgram: void swap2(int,int)>
procedure void$MysteriousProgram$swap2$2230($param_0 : int, $param_1 : int) {
var i210 : int;
var i19 : int;
Block23:
	i19 := $param_0;
	i210 := $param_1;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 36
// <MysteriousProgram: void init(int[])>
procedure void$MysteriousProgram$init$2234($param_0 : [int]int) {
var i235 : int;
var $i134 : int;
var r032 : [int]int;
var $i033 : int;
Block41:
	r032 := $param_0;
	 //  @line: 37
	i235 := 0;
	 goto Block42;
	 //  @line: 37
Block42:
	 //  @line: 37
	$i033 := $intArrSize[r032[$arrSizeIdx]];
	 goto Block43;
	 //  @line: 37
Block43:
	 goto Block46, Block44;
	 //  @line: 37
Block46:
	 //  @line: 37
	 assume ($negInt(($geint((i235), ($i033))))==1);
	 //  @line: 38
	$i134 := $addint((i235), (1));
	 assert ($geint((i235), (0))==1);
	 assert ($ltint((i235), ($intArrSize[r032[$arrSizeIdx]]))==1);
	 //  @line: 38
	r032[i235] := $i134;
	 //  @line: 37
	i235 := $addint((i235), (1));
	 goto Block42;
	 //  @line: 37
Block44:
	 assume ($geint((i235), ($i033))==1);
	 goto Block45;
	 //  @line: 39
Block45:
	 return;
}


	 //  @line: 41
// <MysteriousProgram: void main(java.lang.String[])>
procedure void$MysteriousProgram$main$2235($param_0 : [int]ref)
  modifies $intArrSize;
 {
var r038 : [int]ref;
var $i241 : int;
var $i342 : int;
var $i140 : int;
var $i039 : int;
var i443 : int;
var r145 : [int]int;
var i544 : int;
Block47:
	r038 := $param_0;
	 //  @line: 42
	i443 := 2;
	 //  @line: 43
	i544 := 0;
	 goto Block48;
	 //  @line: 43
Block48:
	 //  @line: 43
	$i039 := $refArrSize[r038[$arrSizeIdx]];
	 goto Block49;
	 //  @line: 43
Block49:
	 goto Block50, Block52;
	 //  @line: 43
Block50:
	 assume ($geint((i544), ($i039))==1);
	 goto Block51;
	 //  @line: 43
Block52:
	 //  @line: 43
	 assume ($negInt(($geint((i544), ($i039))))==1);
	 //  @line: 44
	i443 := $mulint((i443), (2));
	 //  @line: 43
	i544 := $addint((i544), (1));
	 goto Block48;
	 //  @line: 45
Block51:
	 //  @line: 45
	r145 := $reftointarr(($newvariable((53))));
	$intArrSize[$reftointarr(($newvariable((53))))[$arrSizeIdx]] := i443;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((53))))), ($intArrNull))))==1);
	 goto Block54;
	 //  @line: 46
Block54:
	 //  @line: 46
	 call void$MysteriousProgram$init$2234((r145));
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[r145[$arrSizeIdx]]))==1);
	 //  @line: 47
	$i342 := r145[0];
	 //  @line: 47
	$i140 := $subint((i443), (1));
	 assert ($geint(($i140), (0))==1);
	 assert ($ltint(($i140), ($intArrSize[r145[$arrSizeIdx]]))==1);
	 //  @line: 47
	$i241 := r145[$i140];
	 //  @line: 47
	 call void$MysteriousProgram$swap2$2230(($i342), ($i241));
	 //  @line: 48
	 call void$MysteriousProgram$mysterious$2232((r145), (0));
	 //  @line: 49
	 call void$MysteriousProgram$mysteriousRecursive$2233((r145), (0));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 12
// <MysteriousProgram: void swap3(int[],int,int)>
procedure void$MysteriousProgram$swap3$2231($param_0 : [int]int, $param_1 : int, $param_2 : int) {
var i215 : int;
var r013 : [int]int;
var i014 : int;
var $i317 : int;
var i116 : int;
Block24:
	r013 := $param_0;
	i014 := $param_1;
	i116 := $param_2;
	 assert ($geint((i014), (0))==1);
	 assert ($ltint((i014), ($intArrSize[r013[$arrSizeIdx]]))==1);
	 //  @line: 13
	i215 := r013[i014];
	 assert ($geint((i116), (0))==1);
	 assert ($ltint((i116), ($intArrSize[r013[$arrSizeIdx]]))==1);
	 //  @line: 14
	$i317 := r013[i116];
	 assert ($geint((i014), (0))==1);
	 assert ($ltint((i014), ($intArrSize[r013[$arrSizeIdx]]))==1);
	 //  @line: 14
	r013[i014] := $i317;
	 assert ($geint((i116), (0))==1);
	 assert ($ltint((i116), ($intArrSize[r013[$arrSizeIdx]]))==1);
	 //  @line: 15
	r013[i116] := i215;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


