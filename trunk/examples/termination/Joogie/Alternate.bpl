type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var Alternate.Tree$Alternate.Tree$right255 : Field ref;
var Alternate.Tree$Alternate.Tree$left254 : Field ref;
var int$Alternate.Random$index0 : int;
var java.lang.String$lp$$rp$$Alternate.Random$args256 : [int]ref;
var int$Alternate.Tree$value0 : Field int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 17
// <Alternate.Tree: Alternate.Tree createNode()>
procedure Alternate.Tree$Alternate.Tree$createNode$2233() returns (__ret : ref)
  modifies $HeapVar;
 {
var $r120 : ref;
var r021 : ref;
var $i022 : int;
	 //  @line: 18
Block27:
	 //  @line: 18
	$r120 := $newvariable((28));
	 assume ($neref(($newvariable((28))), ($null))==1);
	 assert ($neref(($r120), ($null))==1);
	 //  @line: 18
	 call void$Alternate.Tree$$la$init$ra$$2232(($r120));
	 //  @line: 18
	r021 := $r120;
	 //  @line: 19
	 call $i022 := int$Alternate.Random$random$2238();
	 assert ($neref((r021), ($null))==1);
	 //  @line: 19
	$HeapVar[r021, int$Alternate.Tree$value0] := $i022;
	 //  @line: 20
	__ret := r021;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 6
// <Alternate.Random: int random()>
procedure int$Alternate.Random$random$2238() returns (__ret : int)
  modifies $stringSize, int$Alternate.Random$index0;
 {
var $r146 : [int]ref;
var $i453 : int;
var $i148 : int;
var $i352 : int;
var $r250 : [int]ref;
var $i554 : int;
var $i249 : int;
var $i047 : int;
var r051 : ref;
	 //  @line: 7
Block63:
	 //  @line: 7
	$r146 := java.lang.String$lp$$rp$$Alternate.Random$args256;
	 //  @line: 7
	$i148 := $refArrSize[$r146[$arrSizeIdx]];
	 //  @line: 7
	$i047 := int$Alternate.Random$index0;
	 goto Block64;
	 //  @line: 7
Block64:
	 goto Block65, Block67;
	 //  @line: 7
Block65:
	 assume ($gtint(($i148), ($i047))==1);
	 goto Block66;
	 //  @line: 7
Block67:
	 //  @line: 7
	 assume ($negInt(($gtint(($i148), ($i047))))==1);
	 //  @line: 8
	__ret := 0;
	 return;
	 //  @line: 10
Block66:
	 //  @line: 10
	$r250 := java.lang.String$lp$$rp$$Alternate.Random$args256;
	 goto Block68;
	 //  @line: 10
Block68:
	 //  @line: 10
	$i249 := int$Alternate.Random$index0;
	 assert ($geint(($i249), (0))==1);
	 assert ($ltint(($i249), ($refArrSize[$r250[$arrSizeIdx]]))==1);
	 //  @line: 10
	r051 := $r250[$i249];
	 //  @line: 11
	$i352 := int$Alternate.Random$index0;
	 //  @line: 11
	$i453 := $addint(($i352), (1));
	 //  @line: 11
	int$Alternate.Random$index0 := $i453;
	 goto Block69;
	 //  @line: 12
Block69:
	 goto Block72, Block70;
	 //  @line: 12
Block72:
	 //  @line: 12
	 assume ($negInt(($neref((r051), ($null))))==1);
	 //  @line: 13
	__ret := 0;
	 return;
	 //  @line: 12
Block70:
	 assume ($neref((r051), ($null))==1);
	 goto Block71;
	 //  @line: 15
Block71:
	$i554 := $stringSize[r051];
	 goto Block73;
	 //  @line: 15
Block73:
	 //  @line: 15
	__ret := $i554;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 23
// <Alternate.Tree: Alternate.Tree createTree()>
procedure Alternate.Tree$Alternate.Tree$createTree$2234() returns (__ret : ref)
  modifies $HeapVar;
 {
var $r130 : ref;
var r026 : ref;
var i134 : int;
var $r433 : ref;
var i029 : int;
var $r231 : ref;
var r535 : ref;
var $r332 : ref;
	 //  @line: 24
Block29:
	 //  @line: 24
	 call i134 := int$Alternate.Random$random$2238();
	 goto Block30;
	 //  @line: 25
Block30:
	 goto Block33, Block31;
	 //  @line: 25
Block33:
	 //  @line: 25
	 assume ($negInt(($neint((i134), (0))))==1);
	 //  @line: 26
	__ret := $null;
	 return;
	 //  @line: 25
Block31:
	 assume ($neint((i134), (0))==1);
	 goto Block32;
	 //  @line: 28
Block32:
	 //  @line: 28
	 call r026 := Alternate.Tree$Alternate.Tree$createNode$2233();
	 goto Block34;
	 //  @line: 29
Block34:
	 //  @line: 29
	r535 := r026;
	 goto Block35;
	 //  @line: 31
Block35:
	 goto Block38, Block36;
	 //  @line: 31
Block38:
	 //  @line: 31
	 assume ($negInt(($leint((i134), (0))))==1);
	 //  @line: 32
	 call i029 := int$Alternate.Random$random$2238();
	 goto Block39;
	 //  @line: 31
Block36:
	 assume ($leint((i134), (0))==1);
	 goto Block37;
	 //  @line: 33
Block39:
	 goto Block42, Block40;
	 //  @line: 51
Block37:
	 //  @line: 51
	__ret := r026;
	 return;
	 //  @line: 33
Block42:
	 //  @line: 33
	 assume ($negInt(($leint((i029), (0))))==1);
	 assert ($neref((r535), ($null))==1);
	 //  @line: 34
	$r332 := $HeapVar[r535, Alternate.Tree$Alternate.Tree$left254];
	 goto Block43;
	 //  @line: 33
Block40:
	 assume ($leint((i029), (0))==1);
	 goto Block41;
	 //  @line: 34
Block43:
	 goto Block46, Block44;
	 //  @line: 41
Block41:
	 assert ($neref((r535), ($null))==1);
	 //  @line: 41
	$r130 := $HeapVar[r535, Alternate.Tree$Alternate.Tree$right255];
	 goto Block49;
	 //  @line: 34
Block46:
	 //  @line: 34
	 assume ($negInt(($neref(($r332), ($null))))==1);
	 //  @line: 35
	 call $r433 := Alternate.Tree$Alternate.Tree$createNode$2233();
	 assert ($neref((r535), ($null))==1);
	 //  @line: 35
	$HeapVar[r535, Alternate.Tree$Alternate.Tree$left254] := $r433;
	 //  @line: 36
	r535 := r026;
	 goto Block47;
	 //  @line: 34
Block44:
	 assume ($neref(($r332), ($null))==1);
	 goto Block45;
	 //  @line: 41
Block49:
	 goto Block50, Block52;
	 //  @line: 48
Block47:
	 //  @line: 48
	i134 := $addint((i134), (-1));
	 goto Block53;
	 //  @line: 38
Block45:
	 assert ($neref((r535), ($null))==1);
	 //  @line: 38
	r535 := $HeapVar[r535, Alternate.Tree$Alternate.Tree$left254];
	 goto Block48;
	 //  @line: 41
Block50:
	 assume ($neref(($r130), ($null))==1);
	 goto Block51;
	 //  @line: 41
Block52:
	 //  @line: 41
	 assume ($negInt(($neref(($r130), ($null))))==1);
	 //  @line: 42
	 call $r231 := Alternate.Tree$Alternate.Tree$createNode$2233();
	 assert ($neref((r535), ($null))==1);
	 //  @line: 42
	$HeapVar[r535, Alternate.Tree$Alternate.Tree$right255] := $r231;
	 //  @line: 43
	r535 := r026;
	 goto Block47;
	 //  @line: 49
Block53:
	 goto Block35;
	 //  @line: 38
Block48:
	 goto Block47;
	 //  @line: 45
Block51:
	 assert ($neref((r535), ($null))==1);
	 //  @line: 45
	r535 := $HeapVar[r535, Alternate.Tree$Alternate.Tree$right255];
	 goto Block47;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


	 //  @line: 8
// <Alternate.Tree: void <init>(Alternate.Tree,Alternate.Tree)>
procedure void$Alternate.Tree$$la$init$ra$$2231(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r117 : ref;
var r016 : ref;
var r218 : ref;
Block25:
	r016 := __this;
	r117 := $param_0;
	r218 := $param_1;
	 assert ($neref((r016), ($null))==1);
	 //  @line: 9
	 call void$java.lang.Object$$la$init$ra$$28((r016));
	 assert ($neref((r016), ($null))==1);
	 //  @line: 10
	$HeapVar[r016, Alternate.Tree$Alternate.Tree$left254] := r117;
	 assert ($neref((r016), ($null))==1);
	 //  @line: 11
	$HeapVar[r016, Alternate.Tree$Alternate.Tree$right255] := r218;
	 return;
}


	 //  @line: 1
// <Alternate.Random: void <init>()>
procedure void$Alternate.Random$$la$init$ra$$2237(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r045 : ref;
Block62:
	r045 := __this;
	 assert ($neref((r045), ($null))==1);
	 //  @line: 2
	 call void$java.lang.Object$$la$init$ra$$28((r045));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 3
// <Alternate.Random: void <clinit>()>
procedure void$Alternate.Random$$la$clinit$ra$$2239()
  modifies int$Alternate.Random$index0;
 {
	 //  @line: 4
Block74:
	 //  @line: 4
	int$Alternate.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 13
// <Alternate.Tree: void <init>()>
procedure void$Alternate.Tree$$la$init$ra$$2232(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r019 : ref;
Block26:
	r019 := __this;
	 assert ($neref((r019), ($null))==1);
	 //  @line: 14
	 call void$java.lang.Object$$la$init$ra$$28((r019));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 7
// <Alternate.Alternate: Alternate.Tree alternate(Alternate.Tree,Alternate.Tree)>
procedure Alternate.Tree$Alternate.Alternate$alternate$2229($param_0 : ref, $param_1 : ref) returns (__ret : ref) {
var $r34 : ref;
var r16 : ref;
var $r68 : ref;
var r02 : ref;
var $r79 : ref;
var $r57 : ref;
var $r23 : ref;
var $r45 : ref;
Block17:
	r02 := $param_0;
	r16 := $param_1;
	 goto Block18;
	 //  @line: 8
Block18:
	 goto Block21, Block19;
	 //  @line: 8
Block21:
	 //  @line: 8
	 assume ($negInt(($neref((r02), ($null))))==1);
	 //  @line: 9
	 call $r79 := Alternate.Tree$Alternate.Tree$copy$2236((r16));
	 //  @line: 9
	__ret := $r79;
	 return;
	 //  @line: 8
Block19:
	 assume ($neref((r02), ($null))==1);
	 goto Block20;
	 //  @line: 11
Block20:
	 //  @line: 11
	$r23 := $newvariable((22));
	 assume ($neref(($newvariable((22))), ($null))==1);
	 goto Block23;
	 //  @line: 11
Block23:
	 assert ($neref((r02), ($null))==1);
	 //  @line: 11
	$r34 := $HeapVar[r02, Alternate.Tree$Alternate.Tree$left254];
	 //  @line: 11
	 call $r45 := Alternate.Tree$Alternate.Tree$copy$2236(($r34));
	 assert ($neref((r02), ($null))==1);
	 //  @line: 11
	$r57 := $HeapVar[r02, Alternate.Tree$Alternate.Tree$right255];
	 //  @line: 11
	 call $r68 := Alternate.Tree$Alternate.Alternate$alternate$2229((r16), ($r57));
	 assert ($neref(($r23), ($null))==1);
	 //  @line: 11
	 call void$Alternate.Tree$$la$init$ra$$2231(($r23), ($r45), ($r68));
	 //  @line: 11
	__ret := $r23;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 54
// <Alternate.Tree: void main(java.lang.String[])>
procedure void$Alternate.Tree$main$2235($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$Alternate.Random$args256;
 {
var r036 : [int]ref;

 //temp local variables 
var $freshlocal0 : ref;

Block54:
	r036 := $param_0;
	 //  @line: 55
	java.lang.String$lp$$rp$$Alternate.Random$args256 := r036;
	 //  @line: 56
	 call $freshlocal0 := Alternate.Tree$Alternate.Tree$createTree$2234();
	 return;
}


	 //  @line: 59
// <Alternate.Tree: Alternate.Tree copy(Alternate.Tree)>
procedure Alternate.Tree$Alternate.Tree$copy$2236($param_0 : ref) returns (__ret : ref)
  modifies $HeapVar;
 {
var r140 : ref;
var $r543 : ref;
var $r239 : ref;
var r038 : ref;
var $r644 : ref;
var $r341 : ref;
var $r442 : ref;
Block55:
	r038 := $param_0;
	 goto Block56;
	 //  @line: 60
Block56:
	 goto Block57, Block59;
	 //  @line: 60
Block57:
	 assume ($neref((r038), ($null))==1);
	 goto Block58;
	 //  @line: 60
Block59:
	 //  @line: 60
	 assume ($negInt(($neref((r038), ($null))))==1);
	 //  @line: 61
	__ret := $null;
	 return;
	 //  @line: 63
Block58:
	 //  @line: 63
	$r239 := $newvariable((60));
	 assume ($neref(($newvariable((60))), ($null))==1);
	 goto Block61;
	 //  @line: 63
Block61:
	 assert ($neref(($r239), ($null))==1);
	 //  @line: 63
	 call void$Alternate.Tree$$la$init$ra$$2232(($r239));
	 //  @line: 63
	r140 := $r239;
	 assert ($neref((r038), ($null))==1);
	 //  @line: 64
	$r341 := $HeapVar[r038, Alternate.Tree$Alternate.Tree$left254];
	 //  @line: 64
	 call $r442 := Alternate.Tree$Alternate.Tree$copy$2236(($r341));
	 assert ($neref((r140), ($null))==1);
	 //  @line: 64
	$HeapVar[r140, Alternate.Tree$Alternate.Tree$left254] := $r442;
	 assert ($neref((r038), ($null))==1);
	 //  @line: 65
	$r543 := $HeapVar[r038, Alternate.Tree$Alternate.Tree$right255];
	 //  @line: 65
	 call $r644 := Alternate.Tree$Alternate.Tree$copy$2236(($r543));
	 assert ($neref((r140), ($null))==1);
	 //  @line: 65
	$HeapVar[r140, Alternate.Tree$Alternate.Tree$right255] := $r644;
	 //  @line: 66
	__ret := r140;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 2
// <Alternate.Alternate: void <init>()>
procedure void$Alternate.Alternate$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


	 //  @line: 16
// <Alternate.Alternate: void main(java.lang.String[])>
procedure void$Alternate.Alternate$main$2230($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$Alternate.Random$args256;
 {
var r010 : [int]ref;
var r112 : ref;
var r214 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block24:
	r010 := $param_0;
	 //  @line: 17
	java.lang.String$lp$$rp$$Alternate.Random$args256 := r010;
	 //  @line: 18
	 call r112 := Alternate.Tree$Alternate.Tree$createTree$2234();
	 //  @line: 19
	 call r214 := Alternate.Tree$Alternate.Tree$createTree$2234();
	 //  @line: 21
	 call $freshlocal0 := Alternate.Tree$Alternate.Alternate$alternate$2229((r112), (r214));
	 return;
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



