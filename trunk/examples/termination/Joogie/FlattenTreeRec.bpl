type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.String$lp$$rp$$Random$args257 : [int]ref;
var Tree$Tree$left254 : Field ref;
var Tree$Tree$right255 : Field ref;
var int$Random$index0 : int;
var java.lang.Object$Tree$value256 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 8
// <FlattenTreeRec: Tree flatten(Tree)>
procedure Tree$FlattenTreeRec$flatten$2230($param_0 : ref) returns (__ret : ref) {
var $r1117 : ref;
var r06 : ref;
var $r47 : ref;
var $r814 : ref;
var $r610 : ref;
var $r1420 : ref;
var $r1319 : ref;
var $r915 : ref;
var r19 : ref;
var $r1623 : ref;
var r312 : ref;
var $r58 : ref;
var $r1218 : ref;
var $r1016 : ref;
var $r713 : ref;
var r211 : ref;
var $r1521 : ref;
Block18:
	r06 := $param_0;
	 goto Block19;
	 //  @line: 9
Block19:
	 goto Block22, Block20;
	 //  @line: 9
Block22:
	 //  @line: 9
	 assume ($negInt(($eqref((r06), ($null))))==1);
	 assert ($neref((r06), ($null))==1);
	 //  @line: 10
	$r47 := $HeapVar[r06, Tree$Tree$left254];
	 goto Block23;
	 //  @line: 9
Block20:
	 assume ($eqref((r06), ($null))==1);
	 goto Block21;
	 //  @line: 10
Block23:
	 goto Block24, Block26;
	 //  @line: 19
Block21:
	 //  @line: 19
	__ret := $null;
	 return;
	 //  @line: 10
Block24:
	 assume ($neref(($r47), ($null))==1);
	 goto Block25;
	 //  @line: 10
Block26:
	 //  @line: 10
	 assume ($negInt(($neref(($r47), ($null))))==1);
	 //  @line: 11
	$r1319 := $newvariable((27));
	 assume ($neref(($newvariable((27))), ($null))==1);
	 assert ($neref((r06), ($null))==1);
	 //  @line: 11
	$r1521 := $HeapVar[r06, java.lang.Object$Tree$value256];
	 assert ($neref((r06), ($null))==1);
	 //  @line: 11
	$r1420 := $HeapVar[r06, Tree$Tree$right255];
	 //  @line: 11
	 call $r1623 := Tree$FlattenTreeRec$flatten$2230(($r1420));
	 assert ($neref(($r1319), ($null))==1);
	 //  @line: 11
	 call void$Tree$$la$init$ra$$2231(($r1319), ($r1521), ($null), ($r1623));
	 //  @line: 11
	__ret := $r1319;
	 return;
	 //  @line: 13
Block25:
	 assert ($neref((r06), ($null))==1);
	 //  @line: 13
	$r58 := $HeapVar[r06, Tree$Tree$left254];
	 goto Block28;
	 //  @line: 13
Block28:
	 assert ($neref(($r58), ($null))==1);
	 //  @line: 13
	r19 := $HeapVar[$r58, Tree$Tree$left254];
	 assert ($neref((r06), ($null))==1);
	 //  @line: 14
	$r610 := $HeapVar[r06, Tree$Tree$left254];
	 assert ($neref(($r610), ($null))==1);
	 //  @line: 14
	r211 := $HeapVar[$r610, Tree$Tree$right255];
	 assert ($neref((r06), ($null))==1);
	 //  @line: 15
	r312 := $HeapVar[r06, Tree$Tree$right255];
	 //  @line: 16
	$r713 := $newvariable((29));
	 assume ($neref(($newvariable((29))), ($null))==1);
	 assert ($neref((r06), ($null))==1);
	 //  @line: 16
	$r1117 := $HeapVar[r06, java.lang.Object$Tree$value256];
	 //  @line: 16
	$r814 := $newvariable((30));
	 assume ($neref(($newvariable((30))), ($null))==1);
	 assert ($neref((r06), ($null))==1);
	 //  @line: 16
	$r915 := $HeapVar[r06, Tree$Tree$left254];
	 assert ($neref(($r915), ($null))==1);
	 //  @line: 16
	$r1016 := $HeapVar[$r915, java.lang.Object$Tree$value256];
	 assert ($neref(($r814), ($null))==1);
	 //  @line: 16
	 call void$Tree$$la$init$ra$$2231(($r814), ($r1016), (r211), (r312));
	 assert ($neref(($r713), ($null))==1);
	 //  @line: 16
	 call void$Tree$$la$init$ra$$2231(($r713), ($r1117), (r19), ($r814));
	 //  @line: 16
	 call $r1218 := Tree$FlattenTreeRec$flatten$2230(($r713));
	 //  @line: 16
	__ret := $r1218;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



	 //  @line: 15
// <Tree: Tree createNode()>
procedure Tree$Tree$createNode$2233() returns (__ret : ref)
  modifies $HeapVar;
 {
var r030 : ref;
var $r231 : ref;
var $r129 : ref;
	 //  @line: 16
Block33:
	 //  @line: 16
	$r129 := $newvariable((34));
	 assume ($neref(($newvariable((34))), ($null))==1);
	 assert ($neref(($r129), ($null))==1);
	 //  @line: 16
	 call void$Tree$$la$init$ra$$2232(($r129));
	 //  @line: 16
	r030 := $r129;
	 //  @line: 17
	$r231 := $newvariable((35));
	 assume ($neref(($newvariable((35))), ($null))==1);
	 assert ($neref(($r231), ($null))==1);
	 //  @line: 17
	 call void$java.lang.Object$$la$init$ra$$28(($r231));
	 assert ($neref((r030), ($null))==1);
	 //  @line: 17
	$HeapVar[r030, java.lang.Object$Tree$value256] := $r231;
	 //  @line: 18
	__ret := r030;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 5
// <Tree: void <init>(java.lang.Object,Tree,Tree)>
procedure void$Tree$$la$init$ra$$2231(__this : ref, $param_0 : ref, $param_1 : ref, $param_2 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r125 : ref;
var r226 : ref;
var r327 : ref;
var r024 : ref;
Block31:
	r024 := __this;
	r125 := $param_0;
	r226 := $param_1;
	r327 := $param_2;
	 assert ($neref((r024), ($null))==1);
	 //  @line: 6
	 call void$java.lang.Object$$la$init$ra$$28((r024));
	 assert ($neref((r024), ($null))==1);
	 //  @line: 7
	$HeapVar[r024, java.lang.Object$Tree$value256] := r125;
	 assert ($neref((r024), ($null))==1);
	 //  @line: 8
	$HeapVar[r024, Tree$Tree$left254] := r226;
	 assert ($neref((r024), ($null))==1);
	 //  @line: 9
	$HeapVar[r024, Tree$Tree$right255] := r327;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2237()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block63:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 11
// <Tree: void <init>()>
procedure void$Tree$$la$init$ra$$2232(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r028 : ref;
Block32:
	r028 := __this;
	 assert ($neref((r028), ($null))==1);
	 //  @line: 12
	 call void$java.lang.Object$$la$init$ra$$28((r028));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 2
// <FlattenTreeRec: void main(java.lang.String[])>
procedure void$FlattenTreeRec$main$2229($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$Random$args257, $stringSize;
 {
var r14 : ref;
var r02 : [int]ref;

 //temp local variables 
var $freshlocal0 : ref;

Block17:
	r02 := $param_0;
	 //  @line: 3
	java.lang.String$lp$$rp$$Random$args257 := r02;
	 //  @line: 4
	 call r14 := Tree$Tree$createTree$2234();
	 //  @line: 5
	 call $freshlocal0 := Tree$FlattenTreeRec$flatten$2230((r14));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// <FlattenTreeRec: void <init>()>
procedure void$FlattenTreeRec$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 21
// <Tree: Tree createTree()>
procedure Tree$Tree$createTree$2234() returns (__ret : ref)
  modifies $HeapVar;
 {
var i143 : int;
var r544 : ref;
var $r240 : ref;
var $r442 : ref;
var r035 : ref;
var $r341 : ref;
var $r139 : ref;
var i038 : int;
	 //  @line: 22
Block36:
	 //  @line: 22
	 call i143 := int$Random$random$2236();
	 goto Block37;
	 //  @line: 23
Block37:
	 goto Block38, Block40;
	 //  @line: 23
Block38:
	 assume ($neint((i143), (0))==1);
	 goto Block39;
	 //  @line: 23
Block40:
	 //  @line: 23
	 assume ($negInt(($neint((i143), (0))))==1);
	 //  @line: 24
	__ret := $null;
	 return;
	 //  @line: 26
Block39:
	 //  @line: 26
	 call r035 := Tree$Tree$createNode$2233();
	 goto Block41;
	 //  @line: 27
Block41:
	 //  @line: 27
	r544 := r035;
	 goto Block42;
	 //  @line: 29
Block42:
	 goto Block43, Block45;
	 //  @line: 29
Block43:
	 assume ($leint((i143), (0))==1);
	 goto Block44;
	 //  @line: 29
Block45:
	 //  @line: 29
	 assume ($negInt(($leint((i143), (0))))==1);
	 //  @line: 30
	 call i038 := int$Random$random$2236();
	 goto Block46;
	 //  @line: 49
Block44:
	 //  @line: 49
	__ret := r035;
	 return;
	 //  @line: 31
Block46:
	 goto Block47, Block49;
	 //  @line: 31
Block47:
	 assume ($leint((i038), (0))==1);
	 goto Block48;
	 //  @line: 31
Block49:
	 //  @line: 31
	 assume ($negInt(($leint((i038), (0))))==1);
	 assert ($neref((r544), ($null))==1);
	 //  @line: 32
	$r341 := $HeapVar[r544, Tree$Tree$left254];
	 goto Block50;
	 //  @line: 39
Block48:
	 assert ($neref((r544), ($null))==1);
	 //  @line: 39
	$r139 := $HeapVar[r544, Tree$Tree$right255];
	 goto Block56;
	 //  @line: 32
Block50:
	 goto Block53, Block51;
	 //  @line: 39
Block56:
	 goto Block57, Block59;
	 //  @line: 32
Block53:
	 //  @line: 32
	 assume ($negInt(($neref(($r341), ($null))))==1);
	 //  @line: 33
	 call $r442 := Tree$Tree$createNode$2233();
	 assert ($neref((r544), ($null))==1);
	 //  @line: 33
	$HeapVar[r544, Tree$Tree$left254] := $r442;
	 //  @line: 34
	r544 := r035;
	 goto Block54;
	 //  @line: 32
Block51:
	 assume ($neref(($r341), ($null))==1);
	 goto Block52;
	 //  @line: 39
Block57:
	 assume ($neref(($r139), ($null))==1);
	 goto Block58;
	 //  @line: 39
Block59:
	 //  @line: 39
	 assume ($negInt(($neref(($r139), ($null))))==1);
	 //  @line: 40
	 call $r240 := Tree$Tree$createNode$2233();
	 assert ($neref((r544), ($null))==1);
	 //  @line: 40
	$HeapVar[r544, Tree$Tree$right255] := $r240;
	 //  @line: 41
	r544 := r035;
	 goto Block54;
	 //  @line: 46
Block54:
	 //  @line: 46
	i143 := $addint((i143), (-1));
	 goto Block60;
	 //  @line: 36
Block52:
	 assert ($neref((r544), ($null))==1);
	 //  @line: 36
	r544 := $HeapVar[r544, Tree$Tree$left254];
	 goto Block55;
	 //  @line: 43
Block58:
	 assert ($neref((r544), ($null))==1);
	 //  @line: 43
	r544 := $HeapVar[r544, Tree$Tree$right255];
	 goto Block54;
	 //  @line: 47
Block60:
	 goto Block42;
	 //  @line: 36
Block55:
	 goto Block54;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2236() returns (__ret : int)
  modifies $stringSize, int$Random$index0;
 {
var r048 : ref;
var $i351 : int;
var $i046 : int;
var $i149 : int;
var $r147 : [int]ref;
var $i250 : int;
	 //  @line: 6
Block62:
	 //  @line: 6
	$r147 := java.lang.String$lp$$rp$$Random$args257;
	 //  @line: 6
	$i046 := int$Random$index0;
	 assert ($geint(($i046), (0))==1);
	 assert ($ltint(($i046), ($refArrSize[$r147[$arrSizeIdx]]))==1);
	 //  @line: 6
	r048 := $r147[$i046];
	 //  @line: 7
	$i149 := int$Random$index0;
	 //  @line: 7
	$i250 := $addint(($i149), (1));
	 //  @line: 7
	int$Random$index0 := $i250;
	$i351 := $stringSize[r048];
	 //  @line: 8
	__ret := $i351;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2235(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r045 : ref;
Block61:
	r045 := __this;
	 assert ($neref((r045), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r045));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


