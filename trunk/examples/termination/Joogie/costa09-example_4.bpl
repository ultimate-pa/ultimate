type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var int$example_4.Examples$f0 : Field int;
var example_4.Examples$example_4.ExamplesCont$e254 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 12
// <example_4.Examples: void setF(int)>
procedure void$example_4.Examples$setF$2230(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i05 : int;
var r04 : ref;
Block18:
	r04 := __this;
	i05 := $param_0;
	 assert ($neref((r04), ($null))==1);
	 //  @line: 13
	$HeapVar[r04, int$example_4.Examples$f0] := i05;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


	 //  @line: 2
// <example_4.Examples: void <init>()>
procedure void$example_4.Examples$$la$init$ra$$2228(__this : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 assert ($neref((r01), ($null))==1);
	 //  @line: 5
	$HeapVar[r01, int$example_4.Examples$f0] := 10;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



	 //  @line: 8
// <example_4.Test: void exampleMethods(example_4.ExamplesCont,example_4.Examples)>
procedure void$example_4.Test$exampleMethods$2233(__this : ref, $param_0 : ref, $param_1 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r311 : ref;
var r110 : ref;
var $i012 : int;
var $r415 : ref;
var $i318 : int;
var $r516 : ref;
var $i217 : int;
var r019 : ref;
var r213 : ref;

 //temp local variables 
var $freshlocal0 : int;

Block22:
	r019 := __this;
	r110 := $param_0;
	r213 := $param_1;
	 goto Block23;
	 //  @line: 11
Block23:
	 assert ($neref((r110), ($null))==1);
	 //  @line: 11
	$r311 := $HeapVar[r110, example_4.Examples$example_4.ExamplesCont$e254];
	 assert ($neref(($r311), ($null))==1);
	 //  @line: 11
	 call $i012 := int$example_4.Examples$getF$2229(($r311));
	 goto Block24;
	 //  @line: 11
Block24:
	 goto Block25, Block27;
	 //  @line: 11
Block25:
	 assume ($leint(($i012), (0))==1);
	 goto Block26;
	 //  @line: 11
Block27:
	 //  @line: 11
	 assume ($negInt(($leint(($i012), (0))))==1);
	 assert ($neref((r213), ($null))==1);
	 //  @line: 12
	 call $freshlocal0 := int$example_4.Examples$getF$2229((r213));
	 assert ($neref((r110), ($null))==1);
	 //  @line: 13
	$r516 := $HeapVar[r110, example_4.Examples$example_4.ExamplesCont$e254];
	 assert ($neref((r110), ($null))==1);
	 //  @line: 13
	$r415 := $HeapVar[r110, example_4.Examples$example_4.ExamplesCont$e254];
	 assert ($neref(($r415), ($null))==1);
	 //  @line: 13
	 call $i217 := int$example_4.Examples$getF$2229(($r415));
	 //  @line: 13
	$i318 := $subint(($i217), (1));
	 assert ($neref(($r516), ($null))==1);
	 //  @line: 13
	 call void$example_4.Examples$setF$2230(($r516), ($i318));
	 goto Block23;
	 //  @line: 15
Block26:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 17
// <example_4.Test: void main(java.lang.String[])>
procedure void$example_4.Test$main$2234($param_0 : [int]ref) {
var r326 : ref;
var $r625 : ref;
var $r421 : ref;
var $r523 : ref;
var r027 : [int]ref;
var r224 : ref;
var r122 : ref;
Block28:
	r027 := $param_0;
	 //  @line: 18
	$r421 := $newvariable((29));
	 assume ($neref(($newvariable((29))), ($null))==1);
	 assert ($neref(($r421), ($null))==1);
	 //  @line: 18
	 call void$example_4.Test$$la$init$ra$$2232(($r421));
	 //  @line: 18
	r122 := $r421;
	 //  @line: 19
	$r523 := $newvariable((30));
	 assume ($neref(($newvariable((30))), ($null))==1);
	 assert ($neref(($r523), ($null))==1);
	 //  @line: 19
	 call void$example_4.ExamplesCont$$la$init$ra$$2231(($r523));
	 //  @line: 19
	r224 := $r523;
	 //  @line: 20
	$r625 := $newvariable((31));
	 assume ($neref(($newvariable((31))), ($null))==1);
	 assert ($neref(($r625), ($null))==1);
	 //  @line: 20
	 call void$example_4.Examples$$la$init$ra$$2228(($r625));
	 //  @line: 20
	r326 := $r625;
	 assert ($neref((r122), ($null))==1);
	 //  @line: 21
	 call void$example_4.Test$exampleMethods$2233((r122), (r224), (r326));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


	 //  @line: 10
// <example_4.ExamplesCont: void <init>()>
procedure void$example_4.ExamplesCont$$la$init$ra$$2231(__this : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r17 : ref;
var r06 : ref;
Block19:
	r06 := __this;
	 assert ($neref((r06), ($null))==1);
	 //  @line: 11
	 call void$java.lang.Object$$la$init$ra$$28((r06));
	 //  @line: 12
	$r17 := $newvariable((20));
	 assume ($neref(($newvariable((20))), ($null))==1);
	 assert ($neref(($r17), ($null))==1);
	 //  @line: 12
	 call void$example_4.Examples$$la$init$ra$$2228(($r17));
	 assert ($neref((r06), ($null))==1);
	 //  @line: 12
	$HeapVar[r06, example_4.Examples$example_4.ExamplesCont$e254] := $r17;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 8
// <example_4.Examples: int getF()>
procedure int$example_4.Examples$getF$2229(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i03 : int;
var r02 : ref;
Block17:
	r02 := __this;
	 assert ($neref((r02), ($null))==1);
	 //  @line: 9
	$i03 := $HeapVar[r02, int$example_4.Examples$f0];
	 //  @line: 9
	__ret := $i03;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


	 //  @line: 6
// <example_4.Test: void <init>()>
procedure void$example_4.Test$$la$init$ra$$2232(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r08 : ref;
Block21:
	r08 := __this;
	 assert ($neref((r08), ($null))==1);
	 //  @line: 7
	 call void$java.lang.Object$$la$init$ra$$28((r08));
	 return;
}


