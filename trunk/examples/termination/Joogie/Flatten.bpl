type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var Tree$TreeList$value256 : Field ref;
var Tree$Tree$left259 : Field ref;
var ObjectList$ObjectList$next255 : Field ref;
var Tree$Tree$right260 : Field ref;
var int$Random$index0 : int;
var java.lang.Object$ObjectList$value254 : Field ref;
var TreeList$TreeList$next257 : Field ref;
var java.lang.String$lp$$rp$$Random$args258 : [int]ref;
var java.lang.Object$Tree$value261 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



	 //  @line: 10
// <Tree: void <init>()>
procedure void$Tree$$la$init$ra$$2238(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r049 : ref;
Block50:
	r049 := __this;
	 assert ($neref((r049), ($null))==1);
	 //  @line: 11
	 call void$java.lang.Object$$la$init$ra$$28((r049));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2234(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r039 : ref;
Block46:
	r039 := __this;
	 assert ($neref((r039), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r039));
	 return;
}


	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2235() returns (__ret : int)
  modifies int$Random$index0, $stringSize;
 {
var $i244 : int;
var $i345 : int;
var $i143 : int;
var r042 : ref;
var $r141 : [int]ref;
var $i040 : int;
	 //  @line: 6
Block47:
	 //  @line: 6
	$r141 := java.lang.String$lp$$rp$$Random$args258;
	 //  @line: 6
	$i040 := int$Random$index0;
	 assert ($geint(($i040), (0))==1);
	 assert ($ltint(($i040), ($refArrSize[$r141[$arrSizeIdx]]))==1);
	 //  @line: 6
	r042 := $r141[$i040];
	 //  @line: 7
	$i143 := int$Random$index0;
	 //  @line: 7
	$i244 := $addint(($i143), (1));
	 //  @line: 7
	int$Random$index0 := $i244;
	$i345 := $stringSize[r042];
	 //  @line: 8
	__ret := $i345;
	 return;
}


	 //  @line: 4
// <ObjectList: void <init>(java.lang.Object,ObjectList)>
procedure void$ObjectList$$la$init$ra$$2231(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r127 : ref;
var r228 : ref;
var r026 : ref;
Block37:
	r026 := __this;
	r127 := $param_0;
	r228 := $param_1;
	 assert ($neref((r026), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r026));
	 assert ($neref((r026), ($null))==1);
	 //  @line: 6
	$HeapVar[r026, java.lang.Object$ObjectList$value254] := r127;
	 assert ($neref((r026), ($null))==1);
	 //  @line: 7
	$HeapVar[r026, ObjectList$ObjectList$next255] := r228;
	 return;
}


	 //  @line: 50
// <Tree: void main(java.lang.String[])>
procedure void$Tree$main$2241($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$Random$args258;
 {
var r066 : [int]ref;

 //temp local variables 
var $freshlocal0 : ref;

Block79:
	r066 := $param_0;
	 //  @line: 51
	java.lang.String$lp$$rp$$Random$args258 := r066;
	 //  @line: 52
	 call $freshlocal0 := Tree$Tree$createTree$2240();
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


	 //  @line: 20
// <Tree: Tree createTree()>
procedure Tree$Tree$createTree$2240() returns (__ret : ref)
  modifies $HeapVar;
 {
var $r463 : ref;
var $r261 : ref;
var r056 : ref;
var i059 : int;
var $r362 : ref;
var $r160 : ref;
var r565 : ref;
var i164 : int;
	 //  @line: 21
Block54:
	 //  @line: 21
	 call i164 := int$Random$random$2235();
	 goto Block55;
	 //  @line: 22
Block55:
	 goto Block56, Block58;
	 //  @line: 22
Block56:
	 assume ($neint((i164), (0))==1);
	 goto Block57;
	 //  @line: 22
Block58:
	 //  @line: 22
	 assume ($negInt(($neint((i164), (0))))==1);
	 //  @line: 23
	__ret := $null;
	 return;
	 //  @line: 25
Block57:
	 //  @line: 25
	 call r056 := Tree$Tree$createNode$2239();
	 goto Block59;
	 //  @line: 26
Block59:
	 //  @line: 26
	r565 := r056;
	 goto Block60;
	 //  @line: 28
Block60:
	 goto Block63, Block61;
	 //  @line: 28
Block63:
	 //  @line: 28
	 assume ($negInt(($leint((i164), (0))))==1);
	 //  @line: 29
	 call i059 := int$Random$random$2235();
	 goto Block64;
	 //  @line: 28
Block61:
	 assume ($leint((i164), (0))==1);
	 goto Block62;
	 //  @line: 30
Block64:
	 goto Block67, Block65;
	 //  @line: 48
Block62:
	 //  @line: 48
	__ret := r056;
	 return;
	 //  @line: 30
Block67:
	 //  @line: 30
	 assume ($negInt(($leint((i059), (0))))==1);
	 assert ($neref((r565), ($null))==1);
	 //  @line: 31
	$r362 := $HeapVar[r565, Tree$Tree$left259];
	 goto Block68;
	 //  @line: 30
Block65:
	 assume ($leint((i059), (0))==1);
	 goto Block66;
	 //  @line: 31
Block68:
	 goto Block69, Block71;
	 //  @line: 38
Block66:
	 assert ($neref((r565), ($null))==1);
	 //  @line: 38
	$r160 := $HeapVar[r565, Tree$Tree$right260];
	 goto Block74;
	 //  @line: 31
Block69:
	 assume ($neref(($r362), ($null))==1);
	 goto Block70;
	 //  @line: 31
Block71:
	 //  @line: 31
	 assume ($negInt(($neref(($r362), ($null))))==1);
	 //  @line: 32
	 call $r463 := Tree$Tree$createNode$2239();
	 assert ($neref((r565), ($null))==1);
	 //  @line: 32
	$HeapVar[r565, Tree$Tree$left259] := $r463;
	 //  @line: 33
	r565 := r056;
	 goto Block72;
	 //  @line: 38
Block74:
	 goto Block75, Block77;
	 //  @line: 35
Block70:
	 assert ($neref((r565), ($null))==1);
	 //  @line: 35
	r565 := $HeapVar[r565, Tree$Tree$left259];
	 goto Block73;
	 //  @line: 45
Block72:
	 //  @line: 45
	i164 := $addint((i164), (-1));
	 goto Block78;
	 //  @line: 38
Block75:
	 assume ($neref(($r160), ($null))==1);
	 goto Block76;
	 //  @line: 38
Block77:
	 //  @line: 38
	 assume ($negInt(($neref(($r160), ($null))))==1);
	 //  @line: 39
	 call $r261 := Tree$Tree$createNode$2239();
	 assert ($neref((r565), ($null))==1);
	 //  @line: 39
	$HeapVar[r565, Tree$Tree$right260] := $r261;
	 //  @line: 40
	r565 := r056;
	 goto Block72;
	 //  @line: 35
Block73:
	 goto Block72;
	 //  @line: 46
Block78:
	 goto Block60;
	 //  @line: 42
Block76:
	 assert ($neref((r565), ($null))==1);
	 //  @line: 42
	r565 := $HeapVar[r565, Tree$Tree$right260];
	 goto Block72;
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



	 //  @line: 14
// <Flatten: ObjectList flatten(TreeList)>
procedure ObjectList$Flatten$flatten$2230($param_0 : ref) returns (__ret : ref) {
var r015 : ref;
var r924 : ref;
var r823 : ref;
var $r520 : ref;
var r722 : ref;
var $r318 : ref;
var $r621 : ref;
var $r116 : ref;
var $r217 : ref;
var r1025 : ref;
var $r419 : ref;
Block24:
	r722 := $param_0;
	 //  @line: 15
	r823 := $null;
	 goto Block25;
	 //  @line: 16
Block25:
	 goto Block28, Block26;
	 //  @line: 16
Block28:
	 //  @line: 16
	 assume ($negInt(($eqref((r722), ($null))))==1);
	 assert ($neref((r722), ($null))==1);
	 //  @line: 17
	r015 := $HeapVar[r722, Tree$TreeList$value256];
	 goto Block29;
	 //  @line: 16
Block26:
	 assume ($eqref((r722), ($null))==1);
	 goto Block27;
	 //  @line: 18
Block29:
	 goto Block30, Block32;
	 //  @line: 27
Block27:
	 //  @line: 27
	__ret := r823;
	 return;
	 //  @line: 18
Block30:
	 assume ($eqref((r015), ($null))==1);
	 goto Block31;
	 //  @line: 18
Block32:
	 //  @line: 18
	 assume ($negInt(($eqref((r015), ($null))))==1);
	 //  @line: 19
	$r116 := $newvariable((33));
	 assume ($neref(($newvariable((33))), ($null))==1);
	 assert ($neref((r015), ($null))==1);
	 //  @line: 19
	$r217 := $HeapVar[r015, java.lang.Object$Tree$value261];
	 assert ($neref(($r116), ($null))==1);
	 //  @line: 19
	 call void$ObjectList$$la$init$ra$$2231(($r116), ($r217), (r823));
	 //  @line: 19
	r823 := $r116;
	 assert ($neref((r722), ($null))==1);
	 //  @line: 20
	r924 := $HeapVar[r722, TreeList$TreeList$next257];
	 //  @line: 21
	$r318 := $newvariable((34));
	 assume ($neref(($newvariable((34))), ($null))==1);
	 assert ($neref((r015), ($null))==1);
	 //  @line: 21
	$r419 := $HeapVar[r015, Tree$Tree$left259];
	 assert ($neref(($r318), ($null))==1);
	 //  @line: 21
	 call void$TreeList$$la$init$ra$$2233(($r318), ($r419), (r924));
	 //  @line: 21
	r1025 := $r318;
	 //  @line: 22
	$r520 := $newvariable((35));
	 assume ($neref(($newvariable((35))), ($null))==1);
	 assert ($neref((r015), ($null))==1);
	 //  @line: 22
	$r621 := $HeapVar[r015, Tree$Tree$right260];
	 assert ($neref(($r520), ($null))==1);
	 //  @line: 22
	 call void$TreeList$$la$init$ra$$2233(($r520), ($r621), (r1025));
	 //  @line: 22
	r722 := $r520;
	 goto Block36;
	 //  @line: 24
Block31:
	 assert ($neref((r722), ($null))==1);
	 //  @line: 24
	r722 := $HeapVar[r722, TreeList$TreeList$next257];
	 goto Block36;
	 //  @line: 26
Block36:
	 goto Block25;
}


// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



	 //  @line: 14
// <Tree: Tree createNode()>
procedure Tree$Tree$createNode$2239() returns (__ret : ref)
  modifies $HeapVar;
 {
var r051 : ref;
var $r150 : ref;
var $r252 : ref;
	 //  @line: 15
Block51:
	 //  @line: 15
	$r150 := $newvariable((52));
	 assume ($neref(($newvariable((52))), ($null))==1);
	 assert ($neref(($r150), ($null))==1);
	 //  @line: 15
	 call void$Tree$$la$init$ra$$2238(($r150));
	 //  @line: 15
	r051 := $r150;
	 //  @line: 16
	$r252 := $newvariable((53));
	 assume ($neref(($newvariable((53))), ($null))==1);
	 assert ($neref(($r252), ($null))==1);
	 //  @line: 16
	 call void$java.lang.Object$$la$init$ra$$28(($r252));
	 assert ($neref((r051), ($null))==1);
	 //  @line: 16
	$HeapVar[r051, java.lang.Object$Tree$value261] := $r252;
	 //  @line: 17
	__ret := r051;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 5
// <Tree: void <init>(Tree,Tree)>
procedure void$Tree$$la$init$ra$$2237(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r046 : ref;
var r147 : ref;
var r248 : ref;
Block49:
	r046 := __this;
	r147 := $param_0;
	r248 := $param_1;
	 assert ($neref((r046), ($null))==1);
	 //  @line: 6
	 call void$java.lang.Object$$la$init$ra$$28((r046));
	 assert ($neref((r046), ($null))==1);
	 //  @line: 7
	$HeapVar[r046, Tree$Tree$left259] := r147;
	 assert ($neref((r046), ($null))==1);
	 //  @line: 8
	$HeapVar[r046, Tree$Tree$right260] := r248;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2236()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block48:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 10
// <ObjectList: ObjectList createList()>
procedure ObjectList$ObjectList$createList$2232() returns (__ret : ref) {
var $r133 : ref;
var i035 : int;
var $r032 : ref;
var r234 : ref;
	 //  @line: 11
Block38:
	 //  @line: 11
	r234 := $null;
	 //  @line: 12
	 call i035 := int$Random$random$2235();
	 goto Block39;
	 //  @line: 13
Block39:
	 goto Block40, Block42;
	 //  @line: 13
Block40:
	 assume ($leint((i035), (0))==1);
	 goto Block41;
	 //  @line: 13
Block42:
	 //  @line: 13
	 assume ($negInt(($leint((i035), (0))))==1);
	 //  @line: 14
	$r032 := $newvariable((43));
	 assume ($neref(($newvariable((43))), ($null))==1);
	 //  @line: 14
	$r133 := $newvariable((44));
	 assume ($neref(($newvariable((44))), ($null))==1);
	 assert ($neref(($r133), ($null))==1);
	 //  @line: 14
	 call void$java.lang.Object$$la$init$ra$$28(($r133));
	 assert ($neref(($r032), ($null))==1);
	 //  @line: 14
	 call void$ObjectList$$la$init$ra$$2231(($r032), ($r133), (r234));
	 //  @line: 14
	r234 := $r032;
	 //  @line: 15
	i035 := $addint((i035), (-1));
	 goto Block39;
	 //  @line: 17
Block41:
	 //  @line: 17
	__ret := r234;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 2
// <Flatten: void main(java.lang.String[])>
procedure void$Flatten$main$2229($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$Random$args258;
 {
var r411 : ref;
var i112 : int;
var i04 : int;
var r02 : [int]ref;
var r19 : ref;
var $r310 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block17:
	r02 := $param_0;
	 //  @line: 3
	java.lang.String$lp$$rp$$Random$args258 := r02;
	 //  @line: 4
	 call i04 := int$Random$random$2235();
	 //  @line: 5
	r411 := $null;
	 //  @line: 6
	i112 := i04;
	 goto Block18;
	 //  @line: 6
Block18:
	 goto Block19, Block21;
	 //  @line: 6
Block19:
	 assume ($leint((i112), (0))==1);
	 goto Block20;
	 //  @line: 6
Block21:
	 //  @line: 6
	 assume ($negInt(($leint((i112), (0))))==1);
	 //  @line: 7
	 call r19 := Tree$Tree$createTree$2240();
	 //  @line: 8
	$r310 := $newvariable((22));
	 assume ($neref(($newvariable((22))), ($null))==1);
	 assert ($neref(($r310), ($null))==1);
	 //  @line: 8
	 call void$TreeList$$la$init$ra$$2233(($r310), (r19), (r411));
	 //  @line: 8
	r411 := $r310;
	 //  @line: 6
	i112 := $addint((i112), (-1));
	 goto Block18;
	 //  @line: 11
Block20:
	 //  @line: 11
	 call $freshlocal0 := ObjectList$Flatten$flatten$2230((r411));
	 goto Block23;
	 //  @line: 12
Block23:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 4
// <TreeList: void <init>(Tree,TreeList)>
procedure void$TreeList$$la$init$ra$$2233(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r036 : ref;
var r238 : ref;
var r137 : ref;
Block45:
	r036 := __this;
	r137 := $param_0;
	r238 := $param_1;
	 assert ($neref((r036), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r036));
	 assert ($neref((r036), ($null))==1);
	 //  @line: 6
	$HeapVar[r036, Tree$TreeList$value256] := r137;
	 assert ($neref((r036), ($null))==1);
	 //  @line: 7
	$HeapVar[r036, TreeList$TreeList$next257] := r238;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// <Flatten: void <init>()>
procedure void$Flatten$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


