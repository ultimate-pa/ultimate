type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var $fresh8 : int;
var $fresh10 : int;
var int$KnapsackDP$nbObjects0 : int;
var int$lp$$rp$$lp$$rp$$KnapsackDP$array256 : [int][int]int;
var $fresh1 : [int][int]int;
var $fresh1 : int;
var $fresh9 : int;
var int$lp$$rp$$KnapsackDP$weight254 : [int]int;
var $fresh5 : int;
var $fresh2 : int;
var $fresh7 : int;
var $fresh2 : int;
var int$lp$$rp$$KnapsackDP$utility255 : [int]int;
var $fresh6 : int;
var $fresh3 : int;
var int$KnapsackDP$weightmax0 : int;
var $fresh4 : [int]int;
var $fresh11 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 26
// <KnapsackDP: void Display()>
procedure void$KnapsackDP$Display$2230() {
var $i111 : int;
var $i09 : int;
var $i212 : int;
var i414 : int;
var i313 : int;
	 //  @line: 27
Block29:
	 //  @line: 27
	i313 := 0;
	 goto Block30;
	 //  @line: 27
Block30:
	 //  @line: 27
	$i09 := int$KnapsackDP$nbObjects0;
	 goto Block31;
	 //  @line: 27
Block31:
	 goto Block32, Block34;
	 //  @line: 27
Block32:
	 assume ($geint((i313), ($i09))==1);
	 goto Block33;
	 //  @line: 27
Block34:
	 //  @line: 27
	 assume ($negInt(($geint((i313), ($i09))))==1);
	 //  @line: 29
	i414 := 0;
	 goto Block35;
	 //  @line: 36
Block33:
	 return;
	 //  @line: 29
Block35:
	 //  @line: 29
	$i111 := int$KnapsackDP$weightmax0;
	 goto Block36;
	 //  @line: 29
Block36:
	 goto Block37, Block39;
	 //  @line: 29
Block37:
	 assume ($gtint((i414), ($i111))==1);
	 goto Block38;
	 //  @line: 29
Block39:
	 //  @line: 29
	 assume ($negInt(($gtint((i414), ($i111))))==1);
	 //  @line: 31
	$i212 := int$KnapsackDP$weightmax0;
	 goto Block40;
	 //  @line: 27
Block38:
	 //  @line: 27
	i313 := $addint((i313), (1));
	 goto Block44;
	 //  @line: 31
Block40:
	 goto Block41, Block43;
	 //  @line: 27
Block44:
	 goto Block30;
	 //  @line: 31
Block41:
	 assume ($eqint((i414), ($i212))==1);
	 goto Block42;
	 //  @line: 31
Block43:
	 //  @line: 31
	 assume ($negInt(($eqint((i414), ($i212))))==1);
	 goto Block42;
	 //  @line: 29
Block42:
	 //  @line: 29
	i414 := $addint((i414), (1));
	 goto Block35;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 3
// <KnapsackDP: void <clinit>()>
procedure void$KnapsackDP$$la$clinit$ra$$2235()
  modifies $intArrSize, int$lp$$rp$$KnapsackDP$utility255, int$KnapsackDP$weightmax0, int$lp$$rp$$KnapsackDP$weight254;
 {
var $r094 : [int]int;
var $r195 : [int]int;
	 //  @line: 4
Block96:
	 //  @line: 4
	$r094 := $reftointarr(($newvariable((97))));
	$intArrSize[$reftointarr(($newvariable((97))))[$arrSizeIdx]] := 8;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((97))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r094[$arrSizeIdx]]))==1);
	 //  @line: 4
	$r094[0] := 2;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r094[$arrSizeIdx]]))==1);
	 //  @line: 4
	$r094[1] := 3;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r094[$arrSizeIdx]]))==1);
	 //  @line: 4
	$r094[2] := 5;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r094[$arrSizeIdx]]))==1);
	 //  @line: 4
	$r094[3] := 2;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r094[$arrSizeIdx]]))==1);
	 //  @line: 4
	$r094[4] := 4;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r094[$arrSizeIdx]]))==1);
	 //  @line: 4
	$r094[5] := 6;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r094[$arrSizeIdx]]))==1);
	 //  @line: 4
	$r094[6] := 3;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r094[$arrSizeIdx]]))==1);
	 //  @line: 4
	$r094[7] := 1;
	 //  @line: 4
	int$lp$$rp$$KnapsackDP$weight254 := $r094;
	 //  @line: 5
	$r195 := $reftointarr(($newvariable((98))));
	$intArrSize[$reftointarr(($newvariable((98))))[$arrSizeIdx]] := 8;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((98))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r195[$arrSizeIdx]]))==1);
	 //  @line: 5
	$r195[0] := 5;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r195[$arrSizeIdx]]))==1);
	 //  @line: 5
	$r195[1] := 8;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r195[$arrSizeIdx]]))==1);
	 //  @line: 5
	$r195[2] := 14;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r195[$arrSizeIdx]]))==1);
	 //  @line: 5
	$r195[3] := 6;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r195[$arrSizeIdx]]))==1);
	 //  @line: 5
	$r195[4] := 13;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r195[$arrSizeIdx]]))==1);
	 //  @line: 5
	$r195[5] := 17;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r195[$arrSizeIdx]]))==1);
	 //  @line: 5
	$r195[6] := 10;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r195[$arrSizeIdx]]))==1);
	 //  @line: 5
	$r195[7] := 4;
	 //  @line: 5
	int$lp$$rp$$KnapsackDP$utility255 := $r195;
	 //  @line: 6
	int$KnapsackDP$weightmax0 := 12;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 73
// <KnapsackDP: void SolveDP()>
procedure void$KnapsackDP$SolveDP$2233()
  modifies int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
 {
var $i351 : int;
var $r155 : [int]int;
var $r049 : [int][int]int;
var $i453 : int;
var $i1776 : int;
var $i962 : int;
var $r868 : [int]int;
var i2189 : int;
var $i1471 : int;
var $r1684 : [int]int;
var $i656 : int;
var $r973 : [int]int;
var $r1481 : [int]int;
var i2391 : int;
var $r1583 : [int][int]int;
var $i147 : int;
var $r1786 : [int]int;
var $r258 : [int][int]int;
var $i1269 : int;
var $i1166 : int;
var $i1370 : int;
var $i1572 : int;
var i2290 : int;
var $i046 : int;
var $r1278 : [int]int;
var $r664 : [int]int;
var $i1674 : int;
var $i554 : int;
var $i1879 : int;
var $r360 : [int][int]int;
var $i1982 : int;
var $i1065 : int;
var $r1177 : [int][int]int;
var $i859 : int;
var $r1075 : [int][int]int;
var $i248 : int;
var $r1988 : [int]int;
var $r1380 : [int]int;
var $i2085 : int;
var $i757 : int;
var $r1887 : [int][int]int;
var $r767 : [int]int;
var $r461 : [int]int;
var $r563 : [int][int]int;
	 //  @line: 74
Block65:
	 //  @line: 74
	$i248 := int$KnapsackDP$nbObjects0;
	 //  @line: 74
	$i046 := int$KnapsackDP$weightmax0;
	 //  @line: 74
	$i147 := $addint(($i046), (1));
	 //  @line: 74
	$r049 := $fresh1;
	 assume ($negInt(($fresh2))==1);
	 //  @line: 74
	int$lp$$rp$$lp$$rp$$KnapsackDP$array256 := $r049;
	 //  @line: 77
	i2189 := 0;
	 goto Block67;
	 //  @line: 77
Block67:
	 //  @line: 77
	$i351 := int$KnapsackDP$weightmax0;
	 goto Block68;
	 //  @line: 77
Block68:
	 goto Block69, Block71;
	 //  @line: 77
Block69:
	 assume ($gtint((i2189), ($i351))==1);
	 goto Block70;
	 //  @line: 77
Block71:
	 //  @line: 77
	 assume ($negInt(($gtint((i2189), ($i351))))==1);
	 //  @line: 78
	$r1481 := int$lp$$rp$$KnapsackDP$weight254;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r1481[$arrSizeIdx]]))==1);
	 //  @line: 78
	$i1982 := $r1481[0];
	 goto Block72;
	 //  @line: 81
Block70:
	 //  @line: 81
	i2290 := 1;
	 goto Block78;
	 //  @line: 78
Block72:
	 goto Block73, Block75;
	 //  @line: 81
Block78:
	 //  @line: 81
	$i453 := int$KnapsackDP$nbObjects0;
	 goto Block79;
	 //  @line: 78
Block73:
	 assume ($geint((i2189), ($i1982))==1);
	 goto Block74;
	 //  @line: 78
Block75:
	 //  @line: 78
	 assume ($negInt(($geint((i2189), ($i1982))))==1);
	 //  @line: 77
	$r1887 := int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($fresh5))==1);
	 //  @line: 77
	$r1988 := $r1887[0];
	 assert ($geint((i2189), (0))==1);
	 assert ($ltint((i2189), ($intArrSize[$r1988[$arrSizeIdx]]))==1);
	 //  @line: 77
	$r1988[i2189] := 0;
	 goto Block76;
	 //  @line: 81
Block79:
	 goto Block82, Block80;
	 //  @line: 79
Block74:
	 //  @line: 79
	$r1583 := int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
	 goto Block77;
	 //  @line: 77
Block76:
	 //  @line: 77
	i2189 := $addint((i2189), (1));
	 goto Block67;
	 //  @line: 81
Block82:
	 //  @line: 81
	 assume ($negInt(($geint((i2290), ($i453))))==1);
	 //  @line: 83
	i2391 := 0;
	 goto Block83;
	 //  @line: 81
Block80:
	 assume ($geint((i2290), ($i453))==1);
	 goto Block81;
	 //  @line: 79
Block77:
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($fresh6))==1);
	 //  @line: 79
	$r1786 := $r1583[0];
	 //  @line: 79
	$r1684 := int$lp$$rp$$KnapsackDP$utility255;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r1684[$arrSizeIdx]]))==1);
	 //  @line: 79
	$i2085 := $r1684[0];
	 assert ($geint((i2189), (0))==1);
	 assert ($ltint((i2189), ($intArrSize[$r1786[$arrSizeIdx]]))==1);
	 //  @line: 79
	$r1786[i2189] := $i2085;
	 goto Block76;
	 //  @line: 83
Block83:
	 //  @line: 83
	$i554 := int$KnapsackDP$weightmax0;
	 goto Block84;
	 //  @line: 89
Block81:
	 return;
	 //  @line: 83
Block84:
	 goto Block85, Block87;
	 //  @line: 83
Block85:
	 assume ($gtint((i2391), ($i554))==1);
	 goto Block86;
	 //  @line: 83
Block87:
	 //  @line: 83
	 assume ($negInt(($gtint((i2391), ($i554))))==1);
	 //  @line: 84
	$r155 := int$lp$$rp$$KnapsackDP$weight254;
	 assert ($geint((i2290), (0))==1);
	 assert ($ltint((i2290), ($intArrSize[$r155[$arrSizeIdx]]))==1);
	 //  @line: 84
	$i656 := $r155[i2290];
	 //  @line: 84
	$i757 := $subint((i2391), ($i656));
	 goto Block88;
	 //  @line: 81
Block86:
	 //  @line: 81
	i2290 := $addint((i2290), (1));
	 goto Block94;
	 //  @line: 84
Block88:
	 goto Block89, Block91;
	 //  @line: 81
Block94:
	 goto Block78;
	 //  @line: 84
Block89:
	 assume ($geint(($i757), (0))==1);
	 goto Block90;
	 //  @line: 84
Block91:
	 //  @line: 84
	 assume ($negInt(($geint(($i757), (0))))==1);
	 //  @line: 83
	$r1075 := int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
	 assert ($geint((i2290), (0))==1);
	 assert ($ltint((i2290), ($fresh7))==1);
	 //  @line: 83
	$r1380 := $r1075[i2290];
	 //  @line: 83
	$r1177 := int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
	 //  @line: 83
	$i1776 := $subint((i2290), (1));
	 assert ($geint(($i1776), (0))==1);
	 assert ($ltint(($i1776), ($fresh8))==1);
	 //  @line: 83
	$r1278 := $r1177[$i1776];
	 assert ($geint((i2391), (0))==1);
	 assert ($ltint((i2391), ($intArrSize[$r1278[$arrSizeIdx]]))==1);
	 //  @line: 83
	$i1879 := $r1278[i2391];
	 assert ($geint((i2391), (0))==1);
	 assert ($ltint((i2391), ($intArrSize[$r1380[$arrSizeIdx]]))==1);
	 //  @line: 83
	$r1380[i2391] := $i1879;
	 goto Block92;
	 //  @line: 86
Block90:
	 //  @line: 86
	$r258 := int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
	 goto Block93;
	 //  @line: 83
Block92:
	 //  @line: 83
	i2391 := $addint((i2391), (1));
	 goto Block83;
	 //  @line: 86
Block93:
	 assert ($geint((i2290), (0))==1);
	 assert ($ltint((i2290), ($fresh9))==1);
	 //  @line: 86
	$r973 := $r258[i2290];
	 //  @line: 86
	$r360 := int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
	 //  @line: 86
	$i859 := $subint((i2290), (1));
	 assert ($geint(($i859), (0))==1);
	 assert ($ltint(($i859), ($fresh10))==1);
	 //  @line: 86
	$r461 := $r360[$i859];
	 assert ($geint((i2391), (0))==1);
	 assert ($ltint((i2391), ($intArrSize[$r461[$arrSizeIdx]]))==1);
	 //  @line: 86
	$i1572 := $r461[i2391];
	 //  @line: 86
	$r563 := int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
	 //  @line: 86
	$i962 := $subint((i2290), (1));
	 assert ($geint(($i962), (0))==1);
	 assert ($ltint(($i962), ($fresh11))==1);
	 //  @line: 86
	$r767 := $r563[$i962];
	 //  @line: 86
	$r664 := int$lp$$rp$$KnapsackDP$weight254;
	 assert ($geint((i2290), (0))==1);
	 assert ($ltint((i2290), ($intArrSize[$r664[$arrSizeIdx]]))==1);
	 //  @line: 86
	$i1065 := $r664[i2290];
	 //  @line: 86
	$i1166 := $subint((i2391), ($i1065));
	 assert ($geint(($i1166), (0))==1);
	 assert ($ltint(($i1166), ($intArrSize[$r767[$arrSizeIdx]]))==1);
	 //  @line: 86
	$i1370 := $r767[$i1166];
	 //  @line: 86
	$r868 := int$lp$$rp$$KnapsackDP$utility255;
	 assert ($geint((i2290), (0))==1);
	 assert ($ltint((i2290), ($intArrSize[$r868[$arrSizeIdx]]))==1);
	 //  @line: 86
	$i1269 := $r868[i2290];
	 //  @line: 86
	$i1471 := $addint(($i1370), ($i1269));
	 //  @line: 86
	 call $i1674 := int$KnapsackDP$max$2232(($i1572), ($i1471));
	 assert ($geint((i2391), (0))==1);
	 assert ($ltint((i2391), ($intArrSize[$r973[$arrSizeIdx]]))==1);
	 //  @line: 86
	$r973[i2391] := $i1674;
	 goto Block92;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


	 //  @line: 12
// <KnapsackDP: void consoleDisplay()>
procedure void$KnapsackDP$consoleDisplay$2229() {
var $i03 : int;
var i37 : int;
var $i15 : int;
var i26 : int;
	 //  @line: 13
Block17:
	 //  @line: 13
	i26 := 0;
	 goto Block18;
	 //  @line: 13
Block18:
	 //  @line: 13
	$i03 := int$KnapsackDP$nbObjects0;
	 goto Block19;
	 //  @line: 13
Block19:
	 goto Block20, Block22;
	 //  @line: 13
Block20:
	 assume ($geint((i26), ($i03))==1);
	 goto Block21;
	 //  @line: 13
Block22:
	 //  @line: 13
	 assume ($negInt(($geint((i26), ($i03))))==1);
	 //  @line: 15
	i37 := 0;
	 goto Block23;
	 //  @line: 21
Block21:
	 return;
	 //  @line: 15
Block23:
	 //  @line: 15
	$i15 := int$KnapsackDP$weightmax0;
	 goto Block24;
	 //  @line: 15
Block24:
	 goto Block27, Block25;
	 //  @line: 15
Block27:
	 //  @line: 15
	 assume ($negInt(($gtint((i37), ($i15))))==1);
	 //  @line: 13
	i37 := $addint((i37), (1));
	 goto Block23;
	 //  @line: 15
Block25:
	 assume ($gtint((i37), ($i15))==1);
	 goto Block26;
	 //  @line: 13
Block26:
	 //  @line: 13
	i26 := $addint((i26), (1));
	 goto Block28;
	 //  @line: 13
Block28:
	 goto Block18;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// <KnapsackDP: void <init>()>
procedure void$KnapsackDP$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



	 //  @line: 93
// <KnapsackDP: void main(java.lang.String[])>
procedure void$KnapsackDP$main$2234($param_0 : [int]ref)
  modifies int$KnapsackDP$nbObjects0;
 {
var $i093 : int;
var r092 : [int]ref;
Block95:
	r092 := $param_0;
	 //  @line: 94
	$i093 := $refArrSize[r092[$arrSizeIdx]];
	 //  @line: 94
	int$KnapsackDP$nbObjects0 := $i093;
	 //  @line: 95
	 call void$KnapsackDP$SolveDP$2233();
	 //  @line: 96
	 call void$KnapsackDP$Display$2230();
	 //  @line: 98
	 call void$KnapsackDP$InterpretArray$2231();
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 67
// <KnapsackDP: int max(int,int)>
procedure int$KnapsackDP$max$2232($param_0 : int, $param_1 : int) returns (__ret : int) {
var i143 : int;
var $i245 : int;
var i042 : int;
Block59:
	i042 := $param_0;
	i143 := $param_1;
	 goto Block60;
	 //  @line: 68
Block60:
	 goto Block61, Block63;
	 //  @line: 68
Block61:
	 assume ($leint((i042), (i143))==1);
	 goto Block62;
	 //  @line: 68
Block63:
	 //  @line: 68
	 assume ($negInt(($leint((i042), (i143))))==1);
	 //  @line: 68
	$i245 := i042;
	 goto Block64;
	 //  @line: 68
Block62:
	 //  @line: 68
	$i245 := i143;
	 goto Block64;
	 //  @line: 68
Block64:
	 //  @line: 68
	__ret := $i245;
	 return;
}


	 //  @line: 41
// <KnapsackDP: void InterpretArray()>
procedure void$KnapsackDP$InterpretArray$2231() {
var $i734 : int;
var $i121 : int;
var $i223 : int;
var i1038 : int;
var $i531 : int;
var $r935 : [int]int;
var $i325 : int;
var $r426 : [int][int]int;
var $r629 : [int][int]int;
var $i632 : int;
var $r527 : [int]int;
var $i836 : int;
var $r833 : [int]int;
var $r222 : [int]int;
var i1139 : int;
var $r324 : [int]int;
var $i428 : int;
var $r120 : [int]int;
var $i017 : int;
var $r019 : [int][int]int;
var $r730 : [int]int;
	 //  @line: 43
Block45:
	 //  @line: 43
	i1038 := int$KnapsackDP$weightmax0;
	 //  @line: 45
	$i017 := int$KnapsackDP$nbObjects0;
	 //  @line: 45
	i1139 := $subint(($i017), (1));
	 goto Block46;
	 //  @line: 45
Block46:
	 goto Block47, Block49;
	 //  @line: 45
Block47:
	 assume ($ltint((i1139), (1))==1);
	 goto Block48;
	 //  @line: 45
Block49:
	 //  @line: 45
	 assume ($negInt(($ltint((i1139), (1))))==1);
	 //  @line: 47
	$r426 := int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
	 assert ($geint((i1139), (0))==1);
	 assert ($ltint((i1139), ($fresh1))==1);
	 //  @line: 47
	$r527 := $r426[i1139];
	 assert ($geint((i1038), (0))==1);
	 assert ($ltint((i1038), ($intArrSize[$r527[$arrSizeIdx]]))==1);
	 //  @line: 47
	$i632 := $r527[i1038];
	 //  @line: 47
	$r629 := int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
	 //  @line: 47
	$i428 := $subint((i1139), (1));
	 assert ($geint(($i428), (0))==1);
	 assert ($ltint(($i428), ($fresh2))==1);
	 //  @line: 47
	$r730 := $r629[$i428];
	 assert ($geint((i1038), (0))==1);
	 assert ($ltint((i1038), ($intArrSize[$r730[$arrSizeIdx]]))==1);
	 //  @line: 47
	$i531 := $r730[i1038];
	 goto Block50;
	 //  @line: 55
Block48:
	 //  @line: 55
	$r019 := int$lp$$rp$$lp$$rp$$KnapsackDP$array256;
	 goto Block54;
	 //  @line: 47
Block50:
	 goto Block51, Block53;
	 //  @line: 55
Block54:
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($fresh3))==1);
	 //  @line: 55
	$r120 := $r019[0];
	 assert ($geint((i1038), (0))==1);
	 assert ($ltint((i1038), ($intArrSize[$r120[$arrSizeIdx]]))==1);
	 //  @line: 55
	$i121 := $r120[i1038];
	 goto Block55;
	 //  @line: 47
Block51:
	 assume ($eqint(($i632), ($i531))==1);
	 goto Block52;
	 //  @line: 47
Block53:
	 //  @line: 47
	 assume ($negInt(($eqint(($i632), ($i531))))==1);
	 //  @line: 50
	$r833 := int$lp$$rp$$KnapsackDP$weight254;
	 assert ($geint((i1139), (0))==1);
	 assert ($ltint((i1139), ($intArrSize[$r833[$arrSizeIdx]]))==1);
	 //  @line: 50
	$i734 := $r833[i1139];
	 //  @line: 50
	i1038 := $subint((i1038), ($i734));
	 //  @line: 51
	$r935 := int$lp$$rp$$KnapsackDP$utility255;
	 assert ($geint((i1139), (0))==1);
	 assert ($ltint((i1139), ($intArrSize[$r935[$arrSizeIdx]]))==1);
	 //  @line: 51
	$i836 := $r935[i1139];
	 goto Block52;
	 //  @line: 55
Block55:
	 goto Block56, Block58;
	 //  @line: 45
Block52:
	 //  @line: 45
	i1139 := $addint((i1139), (-1));
	 goto Block46;
	 //  @line: 55
Block56:
	 assume ($eqint(($i121), (0))==1);
	 goto Block57;
	 //  @line: 55
Block58:
	 //  @line: 55
	 assume ($negInt(($eqint(($i121), (0))))==1);
	 goto Block57;
	 //  @line: 58
Block57:
	 //  @line: 58
	$r222 := int$lp$$rp$$KnapsackDP$weight254;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r222[$arrSizeIdx]]))==1);
	 //  @line: 58
	$i223 := $r222[0];
	 //  @line: 59
	$r324 := int$lp$$rp$$KnapsackDP$utility255;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r324[$arrSizeIdx]]))==1);
	 //  @line: 59
	$i325 := $r324[0];
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


