type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var int$Gopher.Tree$value0 : Field int;
var java.lang.String$lp$$rp$$Gopher.Random$args256 : [int]ref;
var Gopher.Tree$Gopher.Tree$left254 : Field ref;
var int$Gopher.Random$index0 : int;
var Gopher.Tree$Gopher.Tree$right255 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 1
// <Gopher.Gopher: void <init>()>
procedure void$Gopher.Gopher$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 2
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 27
// <Gopher.Tree: void insert(int)>
procedure void$Gopher.Tree$insert$2234(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r335 : ref;
var $r133 : ref;
var i030 : int;
var $i132 : int;
var $r537 : ref;
var r031 : ref;
var $r436 : ref;
var $r638 : ref;
var $r234 : ref;
Block38:
	r031 := __this;
	i030 := $param_0;
	 assert ($neref((r031), ($null))==1);
	 //  @line: 28
	$i132 := $HeapVar[r031, int$Gopher.Tree$value0];
	 goto Block39;
	 //  @line: 28
Block39:
	 goto Block42, Block40;
	 //  @line: 28
Block42:
	 //  @line: 28
	 assume ($negInt(($gtint((i030), ($i132))))==1);
	 assert ($neref((r031), ($null))==1);
	 //  @line: 29
	$r436 := $HeapVar[r031, Gopher.Tree$Gopher.Tree$left254];
	 goto Block43;
	 //  @line: 28
Block40:
	 assume ($gtint((i030), ($i132))==1);
	 goto Block41;
	 //  @line: 29
Block43:
	 goto Block44, Block46;
	 //  @line: 35
Block41:
	 assert ($neref((r031), ($null))==1);
	 //  @line: 35
	$r133 := $HeapVar[r031, Gopher.Tree$Gopher.Tree$right255];
	 goto Block50;
	 //  @line: 29
Block44:
	 assume ($neref(($r436), ($null))==1);
	 goto Block45;
	 //  @line: 29
Block46:
	 //  @line: 29
	 assume ($negInt(($neref(($r436), ($null))))==1);
	 //  @line: 30
	$r638 := $newvariable((47));
	 assume ($neref(($newvariable((47))), ($null))==1);
	 assert ($neref(($r638), ($null))==1);
	 //  @line: 30
	 call void$Gopher.Tree$$la$init$ra$$2233(($r638), (i030));
	 assert ($neref((r031), ($null))==1);
	 //  @line: 30
	$HeapVar[r031, Gopher.Tree$Gopher.Tree$left254] := $r638;
	 goto Block48;
	 //  @line: 35
Block50:
	 goto Block51, Block53;
	 //  @line: 32
Block45:
	 assert ($neref((r031), ($null))==1);
	 //  @line: 32
	$r537 := $HeapVar[r031, Gopher.Tree$Gopher.Tree$left254];
	 goto Block49;
	 //  @line: 41
Block48:
	 return;
	 //  @line: 35
Block51:
	 assume ($neref(($r133), ($null))==1);
	 goto Block52;
	 //  @line: 35
Block53:
	 //  @line: 35
	 assume ($negInt(($neref(($r133), ($null))))==1);
	 //  @line: 36
	$r335 := $newvariable((54));
	 assume ($neref(($newvariable((54))), ($null))==1);
	 assert ($neref(($r335), ($null))==1);
	 //  @line: 36
	 call void$Gopher.Tree$$la$init$ra$$2233(($r335), (i030));
	 assert ($neref((r031), ($null))==1);
	 //  @line: 36
	$HeapVar[r031, Gopher.Tree$Gopher.Tree$right255] := $r335;
	 goto Block48;
	 //  @line: 32
Block49:
	 assert ($neref(($r537), ($null))==1);
	 //  @line: 32
	 call void$Gopher.Tree$insert$2234(($r537), (i030));
	 goto Block48;
	 //  @line: 38
Block52:
	 assert ($neref((r031), ($null))==1);
	 //  @line: 38
	$r234 := $HeapVar[r031, Gopher.Tree$Gopher.Tree$right255];
	 goto Block55;
	 //  @line: 38
Block55:
	 assert ($neref(($r234), ($null))==1);
	 //  @line: 38
	 call void$Gopher.Tree$insert$2234(($r234), (i030));
	 goto Block48;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 17
// <Gopher.Tree: void <init>(Gopher.Tree,Gopher.Tree)>
procedure void$Gopher.Tree$$la$init$ra$$2232(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r227 : ref;
var r126 : ref;
var r025 : ref;
Block36:
	r025 := __this;
	r126 := $param_0;
	r227 := $param_1;
	 assert ($neref((r025), ($null))==1);
	 //  @line: 18
	 call void$java.lang.Object$$la$init$ra$$28((r025));
	 assert ($neref((r025), ($null))==1);
	 //  @line: 19
	$HeapVar[r025, Gopher.Tree$Gopher.Tree$left254] := r126;
	 assert ($neref((r025), ($null))==1);
	 //  @line: 20
	$HeapVar[r025, Gopher.Tree$Gopher.Tree$right255] := r227;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 8
// <Gopher.Tree: Gopher.Tree createTree(int)>
procedure Gopher.Tree$Gopher.Tree$createTree$2231($param_0 : int) returns (__ret : ref) {
var r020 : ref;
var i022 : int;
var i324 : int;
var $i223 : int;
var $r118 : ref;
var $i119 : int;
Block30:
	i022 := $param_0;
	 //  @line: 9
	$r118 := $newvariable((31));
	 assume ($neref(($newvariable((31))), ($null))==1);
	 //  @line: 9
	 call $i119 := int$Gopher.Random$random$2236();
	 assert ($neref(($r118), ($null))==1);
	 //  @line: 9
	 call void$Gopher.Tree$$la$init$ra$$2233(($r118), ($i119));
	 //  @line: 9
	r020 := $r118;
	 //  @line: 11
	i324 := 0;
	 goto Block32;
	 //  @line: 11
Block32:
	 goto Block35, Block33;
	 //  @line: 11
Block35:
	 //  @line: 11
	 assume ($negInt(($geint((i324), (i022))))==1);
	 //  @line: 12
	 call $i223 := int$Gopher.Random$random$2236();
	 assert ($neref((r020), ($null))==1);
	 //  @line: 12
	 call void$Gopher.Tree$insert$2234((r020), ($i223));
	 //  @line: 11
	i324 := $addint((i324), (1));
	 goto Block32;
	 //  @line: 11
Block33:
	 assume ($geint((i324), (i022))==1);
	 goto Block34;
	 //  @line: 15
Block34:
	 //  @line: 15
	__ret := r020;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 11
// <Gopher.Gopher: void main(java.lang.String[])>
procedure void$Gopher.Gopher$main$2230($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$Gopher.Random$args256, $stringSize;
 {
var r115 : ref;
var r012 : [int]ref;
var $i013 : int;

 //temp local variables 
var $freshlocal0 : ref;

Block29:
	r012 := $param_0;
	 //  @line: 12
	java.lang.String$lp$$rp$$Gopher.Random$args256 := r012;
	 //  @line: 13
	 call $i013 := int$Gopher.Random$random$2236();
	 //  @line: 13
	 call r115 := Gopher.Tree$Gopher.Tree$createTree$2231(($i013));
	 //  @line: 14
	 call $freshlocal0 := Gopher.Tree$Gopher.Gopher$gopher$2229((r115));
	 return;
}


	 //  @line: 22
// <Gopher.Tree: void <init>(int)>
procedure void$Gopher.Tree$$la$init$ra$$2233(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i029 : int;
var r028 : ref;
Block37:
	r028 := __this;
	i029 := $param_0;
	 assert ($neref((r028), ($null))==1);
	 //  @line: 23
	 call void$java.lang.Object$$la$init$ra$$28((r028));
	 assert ($neref((r028), ($null))==1);
	 //  @line: 24
	$HeapVar[r028, int$Gopher.Tree$value0] := i029;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 5
// <Gopher.Gopher: Gopher.Tree gopher(Gopher.Tree)>
procedure Gopher.Tree$Gopher.Gopher$gopher$2229($param_0 : ref) returns (__ret : ref) {
var $r810 : ref;
var $r46 : ref;
var $r35 : ref;
var $r24 : ref;
var $r57 : ref;
var $r79 : ref;
var r02 : ref;
var $r13 : ref;
var $r911 : ref;
var $r68 : ref;
Block17:
	r02 := $param_0;
	 goto Block18;
	 //  @line: 6
Block18:
	 goto Block19, Block21;
	 //  @line: 6
Block19:
	 assume ($neref((r02), ($null))==1);
	 goto Block20;
	 //  @line: 6
Block21:
	 //  @line: 6
	 assume ($negInt(($neref((r02), ($null))))==1);
	 //  @line: 8
	__ret := $null;
	 return;
	 //  @line: 7
Block20:
	 assert ($neref((r02), ($null))==1);
	 //  @line: 7
	$r13 := $HeapVar[r02, Gopher.Tree$Gopher.Tree$left254];
	 goto Block22;
	 //  @line: 7
Block22:
	 goto Block25, Block23;
	 //  @line: 7
Block25:
	 //  @line: 7
	 assume ($negInt(($neref(($r13), ($null))))==1);
	 //  @line: 8
	__ret := r02;
	 return;
	 //  @line: 7
Block23:
	 assume ($neref(($r13), ($null))==1);
	 goto Block24;
	 //  @line: 8
Block24:
	 //  @line: 8
	$r24 := $newvariable((26));
	 assume ($neref(($newvariable((26))), ($null))==1);
	 goto Block27;
	 //  @line: 8
Block27:
	 assert ($neref((r02), ($null))==1);
	 //  @line: 8
	$r35 := $HeapVar[r02, Gopher.Tree$Gopher.Tree$left254];
	 assert ($neref(($r35), ($null))==1);
	 //  @line: 8
	$r810 := $HeapVar[$r35, Gopher.Tree$Gopher.Tree$left254];
	 //  @line: 8
	$r46 := $newvariable((28));
	 assume ($neref(($newvariable((28))), ($null))==1);
	 assert ($neref((r02), ($null))==1);
	 //  @line: 8
	$r57 := $HeapVar[r02, Gopher.Tree$Gopher.Tree$left254];
	 assert ($neref(($r57), ($null))==1);
	 //  @line: 8
	$r79 := $HeapVar[$r57, Gopher.Tree$Gopher.Tree$right255];
	 assert ($neref((r02), ($null))==1);
	 //  @line: 8
	$r68 := $HeapVar[r02, Gopher.Tree$Gopher.Tree$right255];
	 assert ($neref(($r46), ($null))==1);
	 //  @line: 8
	 call void$Gopher.Tree$$la$init$ra$$2232(($r46), ($r79), ($r68));
	 assert ($neref(($r24), ($null))==1);
	 //  @line: 8
	 call void$Gopher.Tree$$la$init$ra$$2232(($r24), ($r810), ($r46));
	 //  @line: 8
	 call $r911 := Gopher.Tree$Gopher.Gopher$gopher$2229(($r24));
	 //  @line: 8
	__ret := $r911;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 7
// <Gopher.Random: int random()>
procedure int$Gopher.Random$random$2236() returns (__ret : int)
  modifies int$Gopher.Random$index0, $stringSize;
 {
var $i244 : int;
var $i040 : int;
var $r141 : [int]ref;
var r042 : ref;
var $i143 : int;
var $i345 : int;
	 //  @line: 8
Block57:
	 //  @line: 8
	$r141 := java.lang.String$lp$$rp$$Gopher.Random$args256;
	 //  @line: 8
	$i040 := int$Gopher.Random$index0;
	 assert ($geint(($i040), (0))==1);
	 assert ($ltint(($i040), ($refArrSize[$r141[$arrSizeIdx]]))==1);
	 //  @line: 8
	r042 := $r141[$i040];
	 //  @line: 9
	$i143 := int$Gopher.Random$index0;
	 //  @line: 9
	$i244 := $addint(($i143), (1));
	 //  @line: 9
	int$Gopher.Random$index0 := $i244;
	$i345 := $stringSize[r042];
	 //  @line: 10
	__ret := $i345;
	 return;
}


	 //  @line: 4
// <Gopher.Random: void <clinit>()>
procedure void$Gopher.Random$$la$clinit$ra$$2237()
  modifies int$Gopher.Random$index0;
 {
	 //  @line: 5
Block58:
	 //  @line: 5
	int$Gopher.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



	 //  @line: 2
// <Gopher.Random: void <init>()>
procedure void$Gopher.Random$$la$init$ra$$2235(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r039 : ref;
Block56:
	r039 := __this;
	 assert ($neref((r039), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r039));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


