type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var int$Point$x0 : Field int;
var int$Point$y0 : Field int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 5
// <Point: void <init>(int,int)>
procedure void$Point$$la$init$ra$$2231(__this : ref, $param_0 : int, $param_1 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i131 : int;
var i030 : int;
var r029 : ref;
Block26:
	r029 := __this;
	i030 := $param_0;
	i131 := $param_1;
	 assert ($neref((r029), ($null))==1);
	 //  @line: 6
	 call void$java.lang.Object$$la$init$ra$$28((r029));
	 assert ($neref((r029), ($null))==1);
	 //  @line: 7
	$HeapVar[r029, int$Point$x0] := i030;
	 assert ($neref((r029), ($null))==1);
	 //  @line: 8
	$HeapVar[r029, int$Point$y0] := i131;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 2
// <Fractale1: void fractale(int,Point,Point)>
procedure void$Fractale1$fractale$2229($param_0 : int, $param_1 : ref, $param_2 : ref) {
var r16 : ref;
var $i1417 : int;
var $i1619 : int;
var $i57 : int;
var $i45 : int;
var $i34 : int;
var $i1215 : int;
var i112 : int;
var $i1824 : int;
var $i1316 : int;
var r03 : ref;
var $i1114 : int;
var $i1518 : int;
var i220 : int;
var $i810 : int;
var $i911 : int;
var i02 : int;
var $i79 : int;
var $r321 : ref;
var r222 : ref;
var $i68 : int;
var $i1723 : int;
var $i1013 : int;
Block17:
	i02 := $param_0;
	r03 := $param_1;
	r16 := $param_2;
	 goto Block18;
	 //  @line: 3
Block18:
	 goto Block21, Block19;
	 //  @line: 3
Block21:
	 //  @line: 3
	 assume ($negInt(($leint((i02), (0))))==1);
	 assert ($neref((r03), ($null))==1);
	 //  @line: 4
	$i45 := $HeapVar[r03, int$Point$x0];
	 assert ($neref((r03), ($null))==1);
	 //  @line: 4
	$i34 := $HeapVar[r03, int$Point$y0];
	 //  @line: 4
	$i68 := $addint(($i45), ($i34));
	 assert ($neref((r16), ($null))==1);
	 //  @line: 4
	$i57 := $HeapVar[r16, int$Point$x0];
	 //  @line: 4
	$i810 := $addint(($i68), ($i57));
	 assert ($neref((r16), ($null))==1);
	 //  @line: 4
	$i79 := $HeapVar[r16, int$Point$y0];
	 //  @line: 4
	$i911 := $subint(($i810), ($i79));
	 assert ($neint((2), (0))==1);
	 //  @line: 4
	i112 := $divint(($i911), (2));
	 assert ($neref((r16), ($null))==1);
	 //  @line: 5
	$i1114 := $HeapVar[r16, int$Point$x0];
	 assert ($neref((r16), ($null))==1);
	 //  @line: 5
	$i1013 := $HeapVar[r16, int$Point$y0];
	 //  @line: 5
	$i1316 := $addint(($i1114), ($i1013));
	 assert ($neref((r03), ($null))==1);
	 //  @line: 5
	$i1215 := $HeapVar[r03, int$Point$y0];
	 //  @line: 5
	$i1518 := $addint(($i1316), ($i1215));
	 assert ($neref((r03), ($null))==1);
	 //  @line: 5
	$i1417 := $HeapVar[r03, int$Point$x0];
	 //  @line: 5
	$i1619 := $subint(($i1518), ($i1417));
	 assert ($neint((2), (0))==1);
	 //  @line: 5
	i220 := $divint(($i1619), (2));
	 //  @line: 6
	$r321 := $newvariable((22));
	 assume ($neref(($newvariable((22))), ($null))==1);
	 assert ($neref(($r321), ($null))==1);
	 //  @line: 6
	 call void$Point$$la$init$ra$$2231(($r321), (i112), (i220));
	 //  @line: 6
	r222 := $r321;
	 //  @line: 7
	$i1723 := $subint((i02), (1));
	 //  @line: 7
	 call void$Fractale1$fractale$2229(($i1723), (r03), (r222));
	 //  @line: 8
	$i1824 := $subint((i02), (1));
	 //  @line: 8
	 call void$Fractale1$fractale$2229(($i1824), (r222), (r16));
	 goto Block20;
	 //  @line: 3
Block19:
	 assume ($leint((i02), (0))==1);
	 goto Block20;
	 //  @line: 10
Block20:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// <Fractale1: void <init>()>
procedure void$Fractale1$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 12
// <Fractale1: void main(java.lang.String[])>
procedure void$Fractale1$main$2230($param_0 : [int]ref) {
var $r126 : ref;
var $i027 : int;
var $r228 : ref;
var r025 : [int]ref;
Block23:
	r025 := $param_0;
	 //  @line: 13
	$i027 := $refArrSize[r025[$arrSizeIdx]];
	 //  @line: 13
	$r126 := $newvariable((24));
	 assume ($neref(($newvariable((24))), ($null))==1);
	 assert ($neref(($r126), ($null))==1);
	 //  @line: 13
	 call void$Point$$la$init$ra$$2231(($r126), (0), (0));
	 //  @line: 13
	$r228 := $newvariable((25));
	 assume ($neref(($newvariable((25))), ($null))==1);
	 assert ($neref(($r228), ($null))==1);
	 //  @line: 13
	 call void$Point$$la$init$ra$$2231(($r228), (200), (200));
	 //  @line: 13
	 call void$Fractale1$fractale$2229(($i027), ($r126), ($r228));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


