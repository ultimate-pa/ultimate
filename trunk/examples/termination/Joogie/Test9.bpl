type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 





// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 2
// <Test9: void main(java.lang.String[])>
procedure void$Test9$main$2229($param_0 : [int]ref) {
var $i03 : int;
var l27 : int;
var i38 : int;
var r02 : [int]ref;
var $b15 : int;
Block17:
	r02 := $param_0;
	 //  @line: 3
	$i03 := $refArrSize[r02[$arrSizeIdx]];
	 //  @line: 3
	l27 := $i03;
	 goto Block18;
	 //  @line: 5
Block18:
	 //  @line: 5
	$b15 := $cmpint((l27), (0));
	 goto Block19;
	 //  @line: 5
Block19:
	 goto Block20, Block22;
	 //  @line: 5
Block20:
	 assume ($leint(($b15), (0))==1);
	 goto Block21;
	 //  @line: 5
Block22:
	 //  @line: 5
	 assume ($negInt(($leint(($b15), (0))))==1);
	 //  @line: 6
	i38 := l27;
	 goto Block23;
	 //  @line: 10
Block21:
	 return;
	 //  @line: 6
Block23:
	 goto Block24, Block26;
	 //  @line: 6
Block24:
	 assume ($geint((i38), (100))==1);
	 goto Block25;
	 //  @line: 6
Block26:
	 //  @line: 6
	 assume ($negInt(($geint((i38), (100))))==1);
	 //  @line: 7
	 call void$Test9$test$2230((i38));
	 //  @line: 6
	i38 := $addint((i38), (1));
	 goto Block23;
	 //  @line: 8
Block25:
	 //  @line: 8
	l27 := $subint((l27), (1));
	 goto Block27;
	 //  @line: 8
Block27:
	 goto Block18;
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 14
// <Test9: void test(int)>
procedure void$Test9$test$2230($param_0 : int) {
var i720 : int;
var i1225 : int;
var i619 : int;
var i1124 : int;
var i417 : int;
var i215 : int;
var i316 : int;
var i09 : int;
var i922 : int;
var i821 : int;
var i114 : int;
var i518 : int;
var i1023 : int;
Block28:
	i09 := $param_0;
	 //  @line: 15
	i114 := i09;
	 goto Block29;
	 //  @line: 15
Block29:
	 goto Block30, Block32;
	 //  @line: 15
Block30:
	 assume ($leint((i114), (0))==1);
	 goto Block31;
	 //  @line: 15
Block32:
	 //  @line: 15
	 assume ($negInt(($leint((i114), (0))))==1);
	 //  @line: 27
	i114 := $addint((i114), (-1));
	 goto Block29;
	 //  @line: 16
Block31:
	 //  @line: 16
	i215 := i09;
	 goto Block33;
	 //  @line: 16
Block33:
	 goto Block36, Block34;
	 //  @line: 16
Block36:
	 //  @line: 16
	 assume ($negInt(($leint((i215), (0))))==1);
	 //  @line: 27
	i215 := $addint((i215), (-1));
	 goto Block33;
	 //  @line: 16
Block34:
	 assume ($leint((i215), (0))==1);
	 goto Block35;
	 //  @line: 17
Block35:
	 //  @line: 17
	i316 := i09;
	 goto Block37;
	 //  @line: 17
Block37:
	 goto Block38, Block40;
	 //  @line: 17
Block38:
	 assume ($leint((i316), (0))==1);
	 goto Block39;
	 //  @line: 17
Block40:
	 //  @line: 17
	 assume ($negInt(($leint((i316), (0))))==1);
	 //  @line: 27
	i316 := $addint((i316), (-1));
	 goto Block37;
	 //  @line: 18
Block39:
	 //  @line: 18
	i417 := i09;
	 goto Block41;
	 //  @line: 18
Block41:
	 goto Block42, Block44;
	 //  @line: 18
Block42:
	 assume ($leint((i417), (0))==1);
	 goto Block43;
	 //  @line: 18
Block44:
	 //  @line: 18
	 assume ($negInt(($leint((i417), (0))))==1);
	 //  @line: 27
	i417 := $addint((i417), (-1));
	 goto Block41;
	 //  @line: 19
Block43:
	 //  @line: 19
	i518 := i09;
	 goto Block45;
	 //  @line: 19
Block45:
	 goto Block48, Block46;
	 //  @line: 19
Block48:
	 //  @line: 19
	 assume ($negInt(($leint((i518), (0))))==1);
	 //  @line: 27
	i518 := $addint((i518), (-1));
	 goto Block45;
	 //  @line: 19
Block46:
	 assume ($leint((i518), (0))==1);
	 goto Block47;
	 //  @line: 20
Block47:
	 //  @line: 20
	i619 := i09;
	 goto Block49;
	 //  @line: 20
Block49:
	 goto Block52, Block50;
	 //  @line: 20
Block52:
	 //  @line: 20
	 assume ($negInt(($leint((i619), (0))))==1);
	 //  @line: 27
	i619 := $addint((i619), (-1));
	 goto Block49;
	 //  @line: 20
Block50:
	 assume ($leint((i619), (0))==1);
	 goto Block51;
	 //  @line: 21
Block51:
	 //  @line: 21
	i720 := i09;
	 goto Block53;
	 //  @line: 21
Block53:
	 goto Block54, Block56;
	 //  @line: 21
Block54:
	 assume ($leint((i720), (0))==1);
	 goto Block55;
	 //  @line: 21
Block56:
	 //  @line: 21
	 assume ($negInt(($leint((i720), (0))))==1);
	 //  @line: 27
	i720 := $addint((i720), (-1));
	 goto Block53;
	 //  @line: 22
Block55:
	 //  @line: 22
	i821 := i09;
	 goto Block57;
	 //  @line: 22
Block57:
	 goto Block60, Block58;
	 //  @line: 22
Block60:
	 //  @line: 22
	 assume ($negInt(($leint((i821), (0))))==1);
	 //  @line: 27
	i821 := $addint((i821), (-1));
	 goto Block57;
	 //  @line: 22
Block58:
	 assume ($leint((i821), (0))==1);
	 goto Block59;
	 //  @line: 23
Block59:
	 //  @line: 23
	i922 := i09;
	 goto Block61;
	 //  @line: 23
Block61:
	 goto Block62, Block64;
	 //  @line: 23
Block62:
	 assume ($leint((i922), (0))==1);
	 goto Block63;
	 //  @line: 23
Block64:
	 //  @line: 23
	 assume ($negInt(($leint((i922), (0))))==1);
	 //  @line: 27
	i922 := $addint((i922), (-1));
	 goto Block61;
	 //  @line: 24
Block63:
	 //  @line: 24
	i1023 := i09;
	 goto Block65;
	 //  @line: 24
Block65:
	 goto Block66, Block68;
	 //  @line: 24
Block66:
	 assume ($leint((i1023), (0))==1);
	 goto Block67;
	 //  @line: 24
Block68:
	 //  @line: 24
	 assume ($negInt(($leint((i1023), (0))))==1);
	 //  @line: 27
	i1023 := $addint((i1023), (-1));
	 goto Block65;
	 //  @line: 25
Block67:
	 //  @line: 25
	i1124 := i09;
	 goto Block69;
	 //  @line: 25
Block69:
	 goto Block72, Block70;
	 //  @line: 25
Block72:
	 //  @line: 25
	 assume ($negInt(($leint((i1124), (0))))==1);
	 //  @line: 27
	i1124 := $addint((i1124), (-1));
	 goto Block69;
	 //  @line: 25
Block70:
	 assume ($leint((i1124), (0))==1);
	 goto Block71;
	 //  @line: 26
Block71:
	 //  @line: 26
	i1225 := i09;
	 goto Block73;
	 //  @line: 26
Block73:
	 goto Block76, Block74;
	 //  @line: 26
Block76:
	 //  @line: 26
	 assume ($negInt(($leint((i1225), (0))))==1);
	 //  @line: 27
	i1225 := $addint((i1225), (-1));
	 goto Block73;
	 //  @line: 26
Block74:
	 assume ($leint((i1225), (0))==1);
	 goto Block75;
	 //  @line: 27
Block75:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// <Test9: void <init>()>
procedure void$Test9$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


