type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var BinTreeChanger.Tree$BinTreeChanger.Tree$right255 : Field ref;
var java.lang.String$lp$$rp$$BinTreeChanger.Random$args256 : [int]ref;
var BinTreeChanger.Tree$BinTreeChanger.Tree$left254 : Field ref;
var int$BinTreeChanger.Random$index0 : int;
var int$BinTreeChanger.Tree$value0 : Field int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 14
// <BinTreeChanger.AnswerAdder: void change(BinTreeChanger.Tree)>
procedure void$BinTreeChanger.AnswerAdder$change$2229(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r67 : ref;
var $r42 : ref;
var $r54 : ref;
var r23 : ref;
var r16 : ref;
var r09 : ref;
var r35 : ref;
var $r78 : ref;
Block17:
	r09 := __this;
	r16 := $param_0;
	 //  @line: 15
	$r42 := $newvariable((18));
	 assume ($neref(($newvariable((18))), ($null))==1);
	 assert ($neref(($r42), ($null))==1);
	 //  @line: 15
	 call void$BinTreeChanger.Tree$$la$init$ra$$2232(($r42), (42));
	 //  @line: 15
	r23 := $r42;
	 //  @line: 16
	$r54 := $newvariable((19));
	 assume ($neref(($newvariable((19))), ($null))==1);
	 assert ($neref(($r54), ($null))==1);
	 //  @line: 16
	 call void$BinTreeChanger.Tree$$la$init$ra$$2232(($r54), (42));
	 //  @line: 16
	r35 := $r54;
	 assert ($neref((r16), ($null))==1);
	 //  @line: 17
	$r67 := $HeapVar[r16, BinTreeChanger.Tree$BinTreeChanger.Tree$left254];
	 assert ($neref((r23), ($null))==1);
	 //  @line: 17
	$HeapVar[r23, BinTreeChanger.Tree$BinTreeChanger.Tree$left254] := $r67;
	 assert ($neref((r16), ($null))==1);
	 //  @line: 18
	$r78 := $HeapVar[r16, BinTreeChanger.Tree$BinTreeChanger.Tree$right255];
	 assert ($neref((r35), ($null))==1);
	 //  @line: 18
	$HeapVar[r35, BinTreeChanger.Tree$BinTreeChanger.Tree$right255] := $r78;
	 assert ($neref((r16), ($null))==1);
	 //  @line: 19
	$HeapVar[r16, BinTreeChanger.Tree$BinTreeChanger.Tree$left254] := r23;
	 assert ($neref((r16), ($null))==1);
	 //  @line: 20
	$HeapVar[r16, BinTreeChanger.Tree$BinTreeChanger.Tree$right255] := r35;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 8
// <BinTreeChanger.Tree: BinTreeChanger.Tree createTree(int)>
procedure BinTreeChanger.Tree$BinTreeChanger.Tree$createTree$2231($param_0 : int) returns (__ret : ref) {
var i014 : int;
var i316 : int;
var r012 : ref;
var $i111 : int;
var $r110 : ref;
var $i215 : int;
Block20:
	i014 := $param_0;
	 //  @line: 9
	$r110 := $newvariable((21));
	 assume ($neref(($newvariable((21))), ($null))==1);
	 //  @line: 9
	 call $i111 := int$BinTreeChanger.Random$random$2238();
	 assert ($neref(($r110), ($null))==1);
	 //  @line: 9
	 call void$BinTreeChanger.Tree$$la$init$ra$$2232(($r110), ($i111));
	 //  @line: 9
	r012 := $r110;
	 //  @line: 11
	i316 := 0;
	 goto Block22;
	 //  @line: 11
Block22:
	 goto Block23, Block25;
	 //  @line: 11
Block23:
	 assume ($geint((i316), (i014))==1);
	 goto Block24;
	 //  @line: 11
Block25:
	 //  @line: 11
	 assume ($negInt(($geint((i316), (i014))))==1);
	 //  @line: 12
	 call $i215 := int$BinTreeChanger.Random$random$2238();
	 assert ($neref((r012), ($null))==1);
	 //  @line: 12
	 call void$BinTreeChanger.Tree$insert$2233((r012), ($i215));
	 //  @line: 11
	i316 := $addint((i316), (1));
	 goto Block22;
	 //  @line: 15
Block24:
	 //  @line: 15
	__ret := r012;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 17
// <BinTreeChanger.Tree: void <init>(int)>
procedure void$BinTreeChanger.Tree$$la$init$ra$$2232(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r017 : ref;
var i018 : int;
Block26:
	r017 := __this;
	i018 := $param_0;
	 assert ($neref((r017), ($null))==1);
	 //  @line: 18
	 call void$java.lang.Object$$la$init$ra$$28((r017));
	 assert ($neref((r017), ($null))==1);
	 //  @line: 19
	$HeapVar[r017, int$BinTreeChanger.Tree$value0] := i018;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


	 //  @line: 4
// <BinTreeChanger.BinTreeChanger: void main(java.lang.String[])>
procedure void$BinTreeChanger.BinTreeChanger$main$2236($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$BinTreeChanger.Random$args256, $stringSize;
 {
var r033 : [int]ref;
var $i034 : int;
var $r237 : ref;
var r136 : ref;
Block54:
	r033 := $param_0;
	 //  @line: 5
	java.lang.String$lp$$rp$$BinTreeChanger.Random$args256 := r033;
	 //  @line: 7
	 call $i034 := int$BinTreeChanger.Random$random$2238();
	 //  @line: 7
	 call r136 := BinTreeChanger.Tree$BinTreeChanger.Tree$createTree$2231(($i034));
	 //  @line: 9
	$r237 := $newvariable((55));
	 assume ($neref(($newvariable((55))), ($null))==1);
	 assert ($neref(($r237), ($null))==1);
	 //  @line: 9
	 call void$BinTreeChanger.AnswerAdder$$la$init$ra$$2228(($r237));
	 assert ($neref((r136), ($null))==1);
	 //  @line: 9
	 call void$BinTreeChanger.Tree$applyTreeChanger$2234((r136), ($r237));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 7
// <BinTreeChanger.Random: int random()>
procedure int$BinTreeChanger.Random$random$2238() returns (__ret : int)
  modifies $stringSize, int$BinTreeChanger.Random$index0;
 {
var $i039 : int;
var r041 : ref;
var $i142 : int;
var $i344 : int;
var $r140 : [int]ref;
var $i243 : int;
	 //  @line: 8
Block57:
	 //  @line: 8
	$r140 := java.lang.String$lp$$rp$$BinTreeChanger.Random$args256;
	 //  @line: 8
	$i039 := int$BinTreeChanger.Random$index0;
	 assert ($geint(($i039), (0))==1);
	 assert ($ltint(($i039), ($refArrSize[$r140[$arrSizeIdx]]))==1);
	 //  @line: 8
	r041 := $r140[$i039];
	 //  @line: 9
	$i142 := int$BinTreeChanger.Random$index0;
	 //  @line: 9
	$i243 := $addint(($i142), (1));
	 //  @line: 9
	int$BinTreeChanger.Random$index0 := $i243;
	$i344 := $stringSize[r041];
	 //  @line: 10
	__ret := $i344;
	 return;
}


	 //  @line: 38
// <BinTreeChanger.Tree: void applyTreeChanger(BinTreeChanger.TreeChanger)>
procedure void$BinTreeChanger.Tree$applyTreeChanger$2234(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r330 : ref;
var r131 : ref;
var r229 : ref;
var r028 : ref;
Block45:
	r028 := __this;
	r131 := $param_0;
	 assert ($neref((r028), ($null))==1);
	 //  @line: 39
	r229 := $HeapVar[r028, BinTreeChanger.Tree$BinTreeChanger.Tree$left254];
	 assert ($neref((r028), ($null))==1);
	 //  @line: 40
	r330 := $HeapVar[r028, BinTreeChanger.Tree$BinTreeChanger.Tree$right255];
	 assert ($neref((r131), ($null))==1);
	 //  @line: 41
	 call void$BinTreeChanger.TreeChanger$change$2230((r131), (r028));
	 goto Block46;
	 //  @line: 42
Block46:
	 goto Block47, Block49;
	 //  @line: 42
Block47:
	 assume ($eqref((r229), ($null))==1);
	 goto Block48;
	 //  @line: 42
Block49:
	 //  @line: 42
	 assume ($negInt(($eqref((r229), ($null))))==1);
	 assert ($neref((r229), ($null))==1);
	 //  @line: 43
	 call void$BinTreeChanger.Tree$applyTreeChanger$2234((r229), (r131));
	 goto Block48;
	 //  @line: 45
Block48:
	 goto Block52, Block50;
	 //  @line: 45
Block52:
	 //  @line: 45
	 assume ($negInt(($eqref((r330), ($null))))==1);
	 assert ($neref((r330), ($null))==1);
	 //  @line: 46
	 call void$BinTreeChanger.Tree$applyTreeChanger$2234((r330), (r131));
	 goto Block51;
	 //  @line: 45
Block50:
	 assume ($eqref((r330), ($null))==1);
	 goto Block51;
	 //  @line: 48
Block51:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <BinTreeChanger.BinTreeChanger: void <init>()>
procedure void$BinTreeChanger.BinTreeChanger$$la$init$ra$$2235(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r032 : ref;
Block53:
	r032 := __this;
	 assert ($neref((r032), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r032));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 4
// <BinTreeChanger.Random: void <clinit>()>
procedure void$BinTreeChanger.Random$$la$clinit$ra$$2239()
  modifies int$BinTreeChanger.Random$index0;
 {
	 //  @line: 5
Block58:
	 //  @line: 5
	int$BinTreeChanger.Random$index0 := 0;
	 return;
}


// <BinTreeChanger.TreeChanger: void change(BinTreeChanger.Tree)>
procedure void$BinTreeChanger.TreeChanger$change$2230(__this : ref, $param_0 : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 12
// <BinTreeChanger.AnswerAdder: void <init>()>
procedure void$BinTreeChanger.AnswerAdder$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 13
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



	 //  @line: 22
// <BinTreeChanger.Tree: void insert(int)>
procedure void$BinTreeChanger.Tree$insert$2233(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r526 : ref;
var $r122 : ref;
var $r627 : ref;
var $i121 : int;
var i019 : int;
var $r324 : ref;
var $r425 : ref;
var r020 : ref;
var $r223 : ref;
Block27:
	r020 := __this;
	i019 := $param_0;
	 assert ($neref((r020), ($null))==1);
	 //  @line: 23
	$i121 := $HeapVar[r020, int$BinTreeChanger.Tree$value0];
	 goto Block28;
	 //  @line: 23
Block28:
	 goto Block29, Block31;
	 //  @line: 23
Block29:
	 assume ($gtint((i019), ($i121))==1);
	 goto Block30;
	 //  @line: 23
Block31:
	 //  @line: 23
	 assume ($negInt(($gtint((i019), ($i121))))==1);
	 assert ($neref((r020), ($null))==1);
	 //  @line: 24
	$r425 := $HeapVar[r020, BinTreeChanger.Tree$BinTreeChanger.Tree$left254];
	 goto Block32;
	 //  @line: 30
Block30:
	 assert ($neref((r020), ($null))==1);
	 //  @line: 30
	$r122 := $HeapVar[r020, BinTreeChanger.Tree$BinTreeChanger.Tree$right255];
	 goto Block39;
	 //  @line: 24
Block32:
	 goto Block33, Block35;
	 //  @line: 30
Block39:
	 goto Block42, Block40;
	 //  @line: 24
Block33:
	 assume ($neref(($r425), ($null))==1);
	 goto Block34;
	 //  @line: 24
Block35:
	 //  @line: 24
	 assume ($negInt(($neref(($r425), ($null))))==1);
	 //  @line: 25
	$r627 := $newvariable((36));
	 assume ($neref(($newvariable((36))), ($null))==1);
	 assert ($neref(($r627), ($null))==1);
	 //  @line: 25
	 call void$BinTreeChanger.Tree$$la$init$ra$$2232(($r627), (i019));
	 assert ($neref((r020), ($null))==1);
	 //  @line: 25
	$HeapVar[r020, BinTreeChanger.Tree$BinTreeChanger.Tree$left254] := $r627;
	 goto Block37;
	 //  @line: 30
Block42:
	 //  @line: 30
	 assume ($negInt(($neref(($r122), ($null))))==1);
	 //  @line: 31
	$r324 := $newvariable((43));
	 assume ($neref(($newvariable((43))), ($null))==1);
	 assert ($neref(($r324), ($null))==1);
	 //  @line: 31
	 call void$BinTreeChanger.Tree$$la$init$ra$$2232(($r324), (i019));
	 assert ($neref((r020), ($null))==1);
	 //  @line: 31
	$HeapVar[r020, BinTreeChanger.Tree$BinTreeChanger.Tree$right255] := $r324;
	 goto Block37;
	 //  @line: 30
Block40:
	 assume ($neref(($r122), ($null))==1);
	 goto Block41;
	 //  @line: 27
Block34:
	 assert ($neref((r020), ($null))==1);
	 //  @line: 27
	$r526 := $HeapVar[r020, BinTreeChanger.Tree$BinTreeChanger.Tree$left254];
	 goto Block38;
	 //  @line: 36
Block37:
	 return;
	 //  @line: 33
Block41:
	 assert ($neref((r020), ($null))==1);
	 //  @line: 33
	$r223 := $HeapVar[r020, BinTreeChanger.Tree$BinTreeChanger.Tree$right255];
	 goto Block44;
	 //  @line: 27
Block38:
	 assert ($neref(($r526), ($null))==1);
	 //  @line: 27
	 call void$BinTreeChanger.Tree$insert$2233(($r526), (i019));
	 goto Block37;
	 //  @line: 33
Block44:
	 assert ($neref(($r223), ($null))==1);
	 //  @line: 33
	 call void$BinTreeChanger.Tree$insert$2233(($r223), (i019));
	 goto Block37;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 2
// <BinTreeChanger.Random: void <init>()>
procedure void$BinTreeChanger.Random$$la$init$ra$$2237(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r038 : ref;
Block56:
	r038 := __this;
	 assert ($neref((r038), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r038));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


