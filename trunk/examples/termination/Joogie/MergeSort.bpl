type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 





// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



	 //  @line: 15
// <MergeSort: void sort(int,int,int[])>
procedure void$MergeSort$sort$2230($param_0 : int, $param_1 : int, $param_2 : [int]int) {
var i126 : int;
var $i327 : int;
var $i429 : int;
var i228 : int;
var i025 : int;
var $i631 : int;
var r034 : [int]int;
var $i530 : int;
var $i732 : int;
var $i833 : int;
var $i935 : int;
Block38:
	i025 := $param_0;
	i126 := $param_1;
	r034 := $param_2;
	 goto Block39;
	 //  @line: 16
Block39:
	 goto Block40, Block42;
	 //  @line: 16
Block40:
	 assume ($geint((i025), (i126))==1);
	 goto Block41;
	 //  @line: 16
Block42:
	 //  @line: 16
	 assume ($negInt(($geint((i025), (i126))))==1);
	 //  @line: 17
	$i327 := $addint((i025), (i126));
	 assert ($neint((2), (0))==1);
	 //  @line: 17
	i228 := $divint(($i327), (2));
	 //  @line: 18
	$i530 := $subint((i228), (i025));
	 //  @line: 18
	$i429 := $subint((i126), (i025));
	 goto Block43;
	 //  @line: 22
Block41:
	 return;
	 //  @line: 18
Block43:
	 goto Block44, Block46;
	 //  @line: 18
Block44:
	 assume ($geint(($i530), ($i429))==1);
	 goto Block45;
	 //  @line: 18
Block46:
	 //  @line: 18
	 assume ($negInt(($geint(($i530), ($i429))))==1);
	 //  @line: 22
	 call void$MergeSort$sort$2230((i025), (i228), (r034));
	 goto Block45;
	 //  @line: 19
Block45:
	 //  @line: 19
	$i631 := $addint((i228), (1));
	 //  @line: 19
	$i833 := $subint((i126), ($i631));
	 //  @line: 19
	$i732 := $subint((i126), (i025));
	 goto Block47;
	 //  @line: 19
Block47:
	 goto Block50, Block48;
	 //  @line: 19
Block50:
	 //  @line: 19
	 assume ($negInt(($geint(($i833), ($i732))))==1);
	 //  @line: 22
	$i935 := $addint((i228), (1));
	 //  @line: 22
	 call void$MergeSort$sort$2230(($i935), (i126), (r034));
	 goto Block49;
	 //  @line: 19
Block48:
	 assume ($geint(($i833), ($i732))==1);
	 goto Block49;
	 //  @line: 20
Block49:
	 //  @line: 20
	 call void$MergeSort$merge$2229((i025), (i126), (i228), (r034));
	 goto Block41;
}


// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 24
// <MergeSort: void main(java.lang.String[])>
procedure void$MergeSort$main$2231($param_0 : [int]ref)
  modifies $stringSize, $intArrSize;
 {
var i037 : int;
var r036 : [int]ref;
var $r241 : ref;
var r138 : [int]int;
var $i242 : int;
var $i140 : int;
var i343 : int;
Block51:
	r036 := $param_0;
	 //  @line: 25
	i037 := $refArrSize[r036[$arrSizeIdx]];
	 //  @line: 27
	r138 := $reftointarr(($newvariable((52))));
	$intArrSize[$reftointarr(($newvariable((52))))[$arrSizeIdx]] := i037;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((52))))), ($intArrNull))))==1);
	 //  @line: 28
	i343 := 0;
	 goto Block53;
	 //  @line: 28
Block53:
	 goto Block56, Block54;
	 //  @line: 28
Block56:
	 //  @line: 28
	 assume ($negInt(($geint((i343), (i037))))==1);
	 assert ($geint((i343), (0))==1);
	 assert ($ltint((i343), ($refArrSize[r036[$arrSizeIdx]]))==1);
	 //  @line: 29
	$r241 := r036[i343];
	$i242 := $stringSize[$r241];
	 assert ($geint((i343), (0))==1);
	 assert ($ltint((i343), ($intArrSize[r138[$arrSizeIdx]]))==1);
	 //  @line: 29
	r138[i343] := $i242;
	 //  @line: 28
	i343 := $addint((i343), (1));
	 goto Block53;
	 //  @line: 28
Block54:
	 assume ($geint((i343), (i037))==1);
	 goto Block55;
	 //  @line: 37
Block55:
	 //  @line: 37
	$i140 := $subint((i037), (1));
	 goto Block57;
	 //  @line: 37
Block57:
	 //  @line: 37
	 call void$MergeSort$sort$2230((0), ($i140), (r138));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



	 //  @line: 3
// <MergeSort: void merge(int,int,int,int[])>
procedure void$MergeSort$merge$2229($param_0 : int, $param_1 : int, $param_2 : int, $param_3 : [int]int)
  modifies $intArrSize;
 {
var i1623 : int;
var $i1017 : int;
var i1522 : int;
var $i714 : int;
var i27 : int;
var r02 : [int]int;
var $i613 : int;
var $i33 : int;
var $i1219 : int;
var $i916 : int;
var i1320 : int;
var $i411 : int;
var i1724 : int;
var i18 : int;
var $i815 : int;
var $i512 : int;
var i05 : int;
var r14 : [int]int;
var i1421 : int;
var $i1118 : int;
Block17:
	i05 := $param_0;
	i18 := $param_1;
	i27 := $param_2;
	r02 := $param_3;
	 //  @line: 4
	$i33 := $intArrSize[r02[$arrSizeIdx]];
	 //  @line: 4
	r14 := $reftointarr(($newvariable((18))));
	$intArrSize[$reftointarr(($newvariable((18))))[$arrSizeIdx]] := $i33;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((18))))), ($intArrNull))))==1);
	 //  @line: 6
	i1320 := i05;
	 goto Block19;
	 //  @line: 6
Block19:
	 goto Block22, Block20;
	 //  @line: 6
Block22:
	 //  @line: 6
	 assume ($negInt(($gtint((i1320), (i27))))==1);
	 assert ($geint((i1320), (0))==1);
	 assert ($ltint((i1320), ($intArrSize[r02[$arrSizeIdx]]))==1);
	 //  @line: 9
	$i1219 := r02[i1320];
	 assert ($geint((i1320), (0))==1);
	 assert ($ltint((i1320), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 9
	r14[i1320] := $i1219;
	 //  @line: 9
	i1320 := $addint((i1320), (1));
	 goto Block19;
	 //  @line: 6
Block20:
	 assume ($gtint((i1320), (i27))==1);
	 goto Block21;
	 //  @line: 7
Block21:
	 //  @line: 7
	i1421 := $addint((i27), (1));
	 goto Block23;
	 //  @line: 7
Block23:
	 goto Block24, Block26;
	 //  @line: 7
Block24:
	 assume ($gtint((i1421), (i18))==1);
	 goto Block25;
	 //  @line: 7
Block26:
	 //  @line: 7
	 assume ($negInt(($gtint((i1421), (i18))))==1);
	 //  @line: 9
	$i815 := $addint((i18), (i27));
	 //  @line: 9
	$i916 := $addint(($i815), (1));
	 //  @line: 9
	$i1118 := $subint(($i916), (i1421));
	 assert ($geint((i1421), (0))==1);
	 assert ($ltint((i1421), ($intArrSize[r02[$arrSizeIdx]]))==1);
	 //  @line: 9
	$i1017 := r02[i1421];
	 assert ($geint(($i1118), (0))==1);
	 assert ($ltint(($i1118), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 9
	r14[$i1118] := $i1017;
	 //  @line: 9
	i1421 := $addint((i1421), (1));
	 goto Block23;
	 //  @line: 8
Block25:
	 //  @line: 8
	i1522 := i05;
	 goto Block27;
	 //  @line: 8
Block27:
	 //  @line: 8
	i1623 := i18;
	 //  @line: 9
	i1724 := i05;
	 goto Block28;
	 //  @line: 9
Block28:
	 goto Block29, Block31;
	 //  @line: 9
Block29:
	 assume ($gtint((i1724), (i18))==1);
	 goto Block30;
	 //  @line: 9
Block31:
	 //  @line: 9
	 assume ($negInt(($gtint((i1724), (i18))))==1);
	 assert ($geint((i1522), (0))==1);
	 assert ($ltint((i1522), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 10
	$i512 := r14[i1522];
	 assert ($geint((i1623), (0))==1);
	 assert ($ltint((i1623), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 10
	$i411 := r14[i1623];
	 goto Block32;
	 //  @line: 12
Block30:
	 return;
	 //  @line: 10
Block32:
	 goto Block33, Block35;
	 //  @line: 10
Block33:
	 assume ($geint(($i512), ($i411))==1);
	 goto Block34;
	 //  @line: 10
Block35:
	 //  @line: 10
	 assume ($negInt(($geint(($i512), ($i411))))==1);
	 assert ($geint((i1522), (0))==1);
	 assert ($ltint((i1522), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 9
	$i714 := r14[i1522];
	 assert ($geint((i1724), (0))==1);
	 assert ($ltint((i1724), ($intArrSize[r02[$arrSizeIdx]]))==1);
	 //  @line: 9
	r02[i1724] := $i714;
	 //  @line: 9
	i1522 := $addint((i1522), (1));
	 goto Block36;
	 //  @line: 11
Block34:
	 assert ($geint((i1623), (0))==1);
	 assert ($ltint((i1623), ($intArrSize[r14[$arrSizeIdx]]))==1);
	 //  @line: 11
	$i613 := r14[i1623];
	 goto Block37;
	 //  @line: 9
Block36:
	 //  @line: 9
	i1724 := $addint((i1724), (1));
	 goto Block28;
	 //  @line: 11
Block37:
	 assert ($geint((i1724), (0))==1);
	 assert ($ltint((i1724), ($intArrSize[r02[$arrSizeIdx]]))==1);
	 //  @line: 11
	r02[i1724] := $i613;
	 //  @line: 11
	i1623 := $addint((i1623), (-1));
	 goto Block36;
}


// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <MergeSort: void <init>()>
procedure void$MergeSort$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


