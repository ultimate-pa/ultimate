type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var ConvertRec.List$ConvertRec.List$next254 : Field ref;
var java.lang.String$lp$$rp$$ConvertRec.Random$args255 : [int]ref;
var int$ConvertRec.Random$index0 : int;
var int$ConvertRec.List$value0 : Field int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 9
// <ConvertRec.List: void <init>(int,ConvertRec.List)>
procedure void$ConvertRec.List$$la$init$ra$$2233(__this : ref, $param_0 : int, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r129 : ref;
var r027 : ref;
var i028 : int;
Block37:
	r027 := __this;
	i028 := $param_0;
	r129 := $param_1;
	 assert ($neref((r027), ($null))==1);
	 //  @line: 10
	 call void$java.lang.Object$$la$init$ra$$28((r027));
	 assert ($neref((r027), ($null))==1);
	 //  @line: 11
	$HeapVar[r027, int$ConvertRec.List$value0] := i028;
	 assert ($neref((r027), ($null))==1);
	 //  @line: 12
	$HeapVar[r027, ConvertRec.List$ConvertRec.List$next254] := r129;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 7
// <ConvertRec.Random: int random()>
procedure int$ConvertRec.Random$random$2236() returns (__ret : int)
  modifies $stringSize, int$ConvertRec.Random$index0;
 {
var $i443 : int;
var $i037 : int;
var $r240 : [int]ref;
var $i138 : int;
var $i239 : int;
var $r136 : [int]ref;
var $i544 : int;
var r041 : ref;
var $i342 : int;
	 //  @line: 8
Block46:
	 //  @line: 8
	$r136 := java.lang.String$lp$$rp$$ConvertRec.Random$args255;
	 //  @line: 8
	$i138 := $refArrSize[$r136[$arrSizeIdx]];
	 //  @line: 8
	$i037 := int$ConvertRec.Random$index0;
	 goto Block47;
	 //  @line: 8
Block47:
	 goto Block48, Block50;
	 //  @line: 8
Block48:
	 assume ($gtint(($i138), ($i037))==1);
	 goto Block49;
	 //  @line: 8
Block50:
	 //  @line: 8
	 assume ($negInt(($gtint(($i138), ($i037))))==1);
	 //  @line: 9
	__ret := 0;
	 return;
	 //  @line: 11
Block49:
	 //  @line: 11
	$r240 := java.lang.String$lp$$rp$$ConvertRec.Random$args255;
	 goto Block51;
	 //  @line: 11
Block51:
	 //  @line: 11
	$i239 := int$ConvertRec.Random$index0;
	 assert ($geint(($i239), (0))==1);
	 assert ($ltint(($i239), ($refArrSize[$r240[$arrSizeIdx]]))==1);
	 //  @line: 11
	r041 := $r240[$i239];
	 //  @line: 12
	$i342 := int$ConvertRec.Random$index0;
	 //  @line: 12
	$i443 := $addint(($i342), (1));
	 //  @line: 12
	int$ConvertRec.Random$index0 := $i443;
	 goto Block52;
	 //  @line: 13
Block52:
	 goto Block55, Block53;
	 //  @line: 13
Block55:
	 //  @line: 13
	 assume ($negInt(($neref((r041), ($null))))==1);
	 //  @line: 14
	__ret := 0;
	 return;
	 //  @line: 13
Block53:
	 assume ($neref((r041), ($null))==1);
	 goto Block54;
	 //  @line: 16
Block54:
	$i544 := $stringSize[r041];
	 goto Block56;
	 //  @line: 16
Block56:
	 //  @line: 16
	__ret := $i544;
	 return;
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 19
// <ConvertRec.ConvertRec: ConvertRec.List createList(int)>
procedure ConvertRec.List$ConvertRec.ConvertRec$createList$2231($param_0 : int) returns (__ret : ref) {
var $r022 : ref;
var $r125 : ref;
var $i224 : int;
var i021 : int;
var $i123 : int;
Block29:
	i021 := $param_0;
	 goto Block30;
	 //  @line: 20
Block30:
	 goto Block31, Block33;
	 //  @line: 20
Block31:
	 assume ($gtint((i021), (0))==1);
	 goto Block32;
	 //  @line: 20
Block33:
	 //  @line: 20
	 assume ($negInt(($gtint((i021), (0))))==1);
	 //  @line: 21
	__ret := $null;
	 return;
	 //  @line: 23
Block32:
	 //  @line: 23
	$r022 := $newvariable((34));
	 assume ($neref(($newvariable((34))), ($null))==1);
	 goto Block35;
	 //  @line: 23
Block35:
	 //  @line: 23
	 call $i123 := int$ConvertRec.Random$random$2236();
	 //  @line: 23
	$i224 := $subint((i021), (1));
	 //  @line: 23
	 call $r125 := ConvertRec.List$ConvertRec.ConvertRec$createList$2231(($i224));
	 assert ($neref(($r022), ($null))==1);
	 //  @line: 23
	 call void$ConvertRec.List$$la$init$ra$$2233(($r022), ($i123), ($r125));
	 //  @line: 23
	__ret := $r022;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 11
// <ConvertRec.ConvertRec: void main(java.lang.String[])>
procedure void$ConvertRec.ConvertRec$main$2230($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$ConvertRec.Random$args255;
 {
var r015 : [int]ref;
var $i016 : int;
var r118 : ref;
var $i119 : int;

 //temp local variables 
var $freshlocal0 : int;

Block28:
	r015 := $param_0;
	 //  @line: 12
	java.lang.String$lp$$rp$$ConvertRec.Random$args255 := r015;
	 //  @line: 14
	 call $i016 := int$ConvertRec.Random$random$2236();
	 //  @line: 14
	 call r118 := ConvertRec.List$ConvertRec.ConvertRec$createList$2231(($i016));
	 //  @line: 16
	 call $i119 := int$ConvertRec.Random$random$2236();
	 //  @line: 16
	 call $freshlocal0 := int$ConvertRec.ConvertRec$convert$2229((r118), ($i119));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


	 //  @line: 5
// <ConvertRec.ConvertRec: int convert(ConvertRec.List,int)>
procedure int$ConvertRec.ConvertRec$convert$2229($param_0 : ref, $param_1 : int) returns (__ret : int) {
var r02 : ref;
var $i613 : int;
var $r312 : ref;
var $i714 : int;
var $i511 : int;
var $i25 : int;
var $i37 : int;
var $i13 : int;
var $i410 : int;
var $r26 : ref;
var i09 : int;
var $r14 : ref;
Block17:
	r02 := $param_0;
	i09 := $param_1;
	 goto Block18;
	 //  @line: 6
Block18:
	 goto Block21, Block19;
	 //  @line: 6
Block21:
	 //  @line: 6
	 assume ($negInt(($neref((r02), ($null))))==1);
	 //  @line: 8
	__ret := 0;
	 return;
	 //  @line: 6
Block19:
	 assume ($neref((r02), ($null))==1);
	 goto Block20;
	 //  @line: 7
Block20:
	 assert ($neref((r02), ($null))==1);
	 //  @line: 7
	$i13 := $HeapVar[r02, int$ConvertRec.List$value0];
	 goto Block22;
	 //  @line: 7
Block22:
	 goto Block23, Block25;
	 //  @line: 7
Block23:
	 assume ($gtint(($i13), (0))==1);
	 goto Block24;
	 //  @line: 7
Block25:
	 //  @line: 7
	 assume ($negInt(($gtint(($i13), (0))))==1);
	 assert ($neref((r02), ($null))==1);
	 //  @line: 8
	$r312 := $HeapVar[r02, ConvertRec.List$ConvertRec.List$next254];
	 //  @line: 8
	 call $i613 := int$ConvertRec.ConvertRec$convert$2229(($r312), (i09));
	 //  @line: 8
	$i714 := $mulint((i09), ($i613));
	 //  @line: 8
	__ret := $i714;
	 return;
	 //  @line: 8
Block24:
	 //  @line: 8
	$r14 := $newvariable((26));
	 assume ($neref(($newvariable((26))), ($null))==1);
	 goto Block27;
	 //  @line: 8
Block27:
	 assert ($neref((r02), ($null))==1);
	 //  @line: 8
	$i25 := $HeapVar[r02, int$ConvertRec.List$value0];
	 //  @line: 8
	$i37 := $subint(($i25), (1));
	 assert ($neref((r02), ($null))==1);
	 //  @line: 8
	$r26 := $HeapVar[r02, ConvertRec.List$ConvertRec.List$next254];
	 assert ($neref(($r14), ($null))==1);
	 //  @line: 8
	 call void$ConvertRec.List$$la$init$ra$$2233(($r14), ($i37), ($r26));
	 //  @line: 8
	 call $i410 := int$ConvertRec.ConvertRec$convert$2229(($r14), (i09));
	 //  @line: 8
	$i511 := $addint((1), ($i410));
	 //  @line: 8
	__ret := $i511;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 15
// <ConvertRec.List: ConvertRec.List copy(ConvertRec.List)>
procedure ConvertRec.List$ConvertRec.List$copy$2234($param_0 : ref) returns (__ret : ref) {
var $i033 : int;
var $r334 : ref;
var r030 : ref;
var $r131 : ref;
var $r232 : ref;
Block38:
	r030 := $param_0;
	 goto Block39;
	 //  @line: 16
Block39:
	 goto Block42, Block40;
	 //  @line: 16
Block42:
	 //  @line: 16
	 assume ($negInt(($neref((r030), ($null))))==1);
	 //  @line: 17
	__ret := $null;
	 return;
	 //  @line: 16
Block40:
	 assume ($neref((r030), ($null))==1);
	 goto Block41;
	 //  @line: 17
Block41:
	 //  @line: 17
	$r131 := $newvariable((43));
	 assume ($neref(($newvariable((43))), ($null))==1);
	 goto Block44;
	 //  @line: 17
Block44:
	 assert ($neref((r030), ($null))==1);
	 //  @line: 17
	$i033 := $HeapVar[r030, int$ConvertRec.List$value0];
	 assert ($neref((r030), ($null))==1);
	 //  @line: 17
	$r232 := $HeapVar[r030, ConvertRec.List$ConvertRec.List$next254];
	 //  @line: 17
	 call $r334 := ConvertRec.List$ConvertRec.List$copy$2234(($r232));
	 assert ($neref(($r131), ($null))==1);
	 //  @line: 17
	 call void$ConvertRec.List$$la$init$ra$$2233(($r131), ($i033), ($r334));
	 //  @line: 17
	__ret := $r131;
	 return;
}


	 //  @line: 2
// <ConvertRec.Random: void <init>()>
procedure void$ConvertRec.Random$$la$init$ra$$2235(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r035 : ref;
Block45:
	r035 := __this;
	 assert ($neref((r035), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r035));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 4
// <ConvertRec.Random: void <clinit>()>
procedure void$ConvertRec.Random$$la$clinit$ra$$2237()
  modifies int$ConvertRec.Random$index0;
 {
	 //  @line: 5
Block57:
	 //  @line: 5
	int$ConvertRec.Random$index0 := 0;
	 return;
}


	 //  @line: 7
// <ConvertRec.List: void <init>()>
procedure void$ConvertRec.List$$la$init$ra$$2232(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r026 : ref;
Block36:
	r026 := __this;
	 assert ($neref((r026), ($null))==1);
	 //  @line: 8
	 call void$java.lang.Object$$la$init$ra$$28((r026));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 2
// <ConvertRec.ConvertRec: void <init>()>
procedure void$ConvertRec.ConvertRec$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


