type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var int$IntList$value0 : Field int;
var IntList$IntList$next255 : Field ref;
var java.lang.String$lp$$rp$$Random$args254 : [int]ref;
var int$Random$index0 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 30
// <IntList: void <init>(int,IntList)>
procedure void$IntList$$la$init$ra$$2233(__this : ref, $param_0 : int, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r020 : ref;
var i021 : int;
var r122 : ref;
Block33:
	r020 := __this;
	i021 := $param_0;
	r122 := $param_1;
	 assert ($neref((r020), ($null))==1);
	 //  @line: 31
	 call void$java.lang.Object$$la$init$ra$$28((r020));
	 assert ($neref((r020), ($null))==1);
	 //  @line: 32
	$HeapVar[r020, int$IntList$value0] := i021;
	 assert ($neref((r020), ($null))==1);
	 //  @line: 33
	$HeapVar[r020, IntList$IntList$next255] := r122;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2232()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block32:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2231() returns (__ret : int)
  modifies $stringSize, int$Random$index0;
 {
var $i014 : int;
var $r115 : [int]ref;
var $i117 : int;
var $i319 : int;
var $i218 : int;
var r016 : ref;
	 //  @line: 6
Block31:
	 //  @line: 6
	$r115 := java.lang.String$lp$$rp$$Random$args254;
	 //  @line: 6
	$i014 := int$Random$index0;
	 assert ($geint(($i014), (0))==1);
	 assert ($ltint(($i014), ($refArrSize[$r115[$arrSizeIdx]]))==1);
	 //  @line: 6
	r016 := $r115[$i014];
	 //  @line: 7
	$i117 := int$Random$index0;
	 //  @line: 7
	$i218 := $addint(($i117), (1));
	 //  @line: 7
	int$Random$index0 := $i218;
	$i319 := $stringSize[r016];
	 //  @line: 8
	__ret := $i319;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// <Convert: void <init>()>
procedure void$Convert$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



	 //  @line: 6
// <Convert: void main(java.lang.String[])>
procedure void$Convert$main$2229($param_0 : [int]ref)
  modifies $stringSize, $HeapVar, java.lang.String$lp$$rp$$Random$args254;
 {
var r111 : ref;
var $i29 : int;
var r02 : [int]ref;
var $i18 : int;
var $i310 : int;

 //temp local variables 
var $freshlocal0 : int;

Block17:
	r02 := $param_0;
	 //  @line: 7
	java.lang.String$lp$$rp$$Random$args254 := r02;
	 //  @line: 8
	 call r111 := IntList$IntList$createIntList$2234();
	 //  @line: 10
	 call $freshlocal0 := int$Random$random$2231();
	 goto Block18;
	 //  @line: 13
Block18:
	 goto Block19, Block21;
	 //  @line: 13
Block19:
	 assume ($eqref((r111), ($null))==1);
	 goto Block20;
	 //  @line: 13
Block21:
	 //  @line: 13
	 assume ($negInt(($eqref((r111), ($null))))==1);
	 assert ($neref((r111), ($null))==1);
	 //  @line: 15
	$i18 := $HeapVar[r111, int$IntList$value0];
	 goto Block22;
	 //  @line: 24
Block20:
	 return;
	 //  @line: 15
Block22:
	 goto Block23, Block25;
	 //  @line: 15
Block23:
	 assume ($gtint(($i18), (0))==1);
	 goto Block24;
	 //  @line: 15
Block25:
	 //  @line: 15
	 assume ($negInt(($gtint(($i18), (0))))==1);
	 assert ($neref((r111), ($null))==1);
	 //  @line: 16
	r111 := $HeapVar[r111, IntList$IntList$next255];
	 goto Block26;
	 //  @line: 20
Block24:
	 assert ($neref((r111), ($null))==1);
	 //  @line: 20
	$i29 := $HeapVar[r111, int$IntList$value0];
	 goto Block29;
	 //  @line: 17
Block26:
	 goto Block28, Block27;
	 //  @line: 20
Block29:
	 //  @line: 20
	$i310 := $subint(($i29), (1));
	 assert ($neref((r111), ($null))==1);
	 //  @line: 20
	$HeapVar[r111, int$IntList$value0] := $i310;
	 goto Block18;
	 //  @line: 17
Block28:
	 //  @line: 17
	 assume ($negInt(($eqref((r111), ($null))))==1);
	 goto Block18;
	 //  @line: 17
Block27:
	 assume ($eqref((r111), ($null))==1);
	 goto Block18;
}


// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 37
// <IntList: IntList createIntList()>
procedure IntList$IntList$createIntList$2234() returns (__ret : ref) {
var r129 : ref;
var $r026 : ref;
var i128 : int;
var $i027 : int;
	 //  @line: 38
Block34:
	 //  @line: 38
	 call i128 := int$Random$random$2231();
	 //  @line: 39
	r129 := $null;
	 goto Block35;
	 //  @line: 41
Block35:
	 goto Block36, Block38;
	 //  @line: 41
Block36:
	 assume ($leint((i128), (0))==1);
	 goto Block37;
	 //  @line: 41
Block38:
	 //  @line: 41
	 assume ($negInt(($leint((i128), (0))))==1);
	 //  @line: 42
	$r026 := $newvariable((39));
	 assume ($neref(($newvariable((39))), ($null))==1);
	 //  @line: 42
	 call $i027 := int$Random$random$2231();
	 assert ($neref(($r026), ($null))==1);
	 //  @line: 42
	 call void$IntList$$la$init$ra$$2233(($r026), ($i027), (r129));
	 //  @line: 42
	r129 := $r026;
	 //  @line: 43
	i128 := $addint((i128), (-1));
	 goto Block35;
	 //  @line: 46
Block37:
	 //  @line: 46
	__ret := r129;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2230(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r013 : ref;
Block30:
	r013 := __this;
	 assert ($neref((r013), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r013));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


