type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.Object$List$head254 : Field ref;
var List$List$tail255 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


	 //  @line: 4
// <List: void <init>(java.lang.Object,List)>
procedure void$List$$la$init$ra$$2231(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r042 : ref;
var r143 : ref;
var r244 : ref;
Block51:
	r042 := __this;
	r143 := $param_0;
	r244 := $param_1;
	 assert ($neref((r042), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r042));
	 assert ($neref((r042), ($null))==1);
	 //  @line: 6
	$HeapVar[r042, java.lang.Object$List$head254] := r143;
	 assert ($neref((r042), ($null))==1);
	 //  @line: 7
	$HeapVar[r042, List$List$tail255] := r244;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <Test3: void <init>()>
procedure void$Test3$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 14
// <List: List mk(int)>
procedure List$List$mk$2233($param_0 : int) returns (__ret : ref) {
var $i049 : int;
var $r050 : ref;
var r253 : ref;
var $r151 : ref;
var i152 : int;
Block53:
	i152 := $param_0;
	 //  @line: 15
	r253 := $null;
	 goto Block54;
	 //  @line: 17
Block54:
	 //  @line: 17
	$i049 := i152;
	 //  @line: 17
	i152 := $addint((i152), (-1));
	 goto Block55;
	 //  @line: 17
Block55:
	 goto Block56, Block58;
	 //  @line: 17
Block56:
	 assume ($leint(($i049), (0))==1);
	 goto Block57;
	 //  @line: 17
Block58:
	 //  @line: 17
	 assume ($negInt(($leint(($i049), (0))))==1);
	 //  @line: 18
	$r050 := $newvariable((59));
	 assume ($neref(($newvariable((59))), ($null))==1);
	 //  @line: 18
	$r151 := $newvariable((60));
	 assume ($neref(($newvariable((60))), ($null))==1);
	 assert ($neref(($r151), ($null))==1);
	 //  @line: 18
	 call void$java.lang.Object$$la$init$ra$$28(($r151));
	 assert ($neref(($r050), ($null))==1);
	 //  @line: 18
	 call void$List$$la$init$ra$$2231(($r050), ($r151), (r253));
	 //  @line: 18
	r253 := $r050;
	 goto Block54;
	 //  @line: 20
Block57:
	 //  @line: 20
	__ret := r253;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 22
// <Test3: int length(List)>
procedure int$Test3$length$2230($param_0 : ref) returns (__ret : int) {
var r040 : ref;
var i041 : int;
Block46:
	r040 := $param_0;
	 //  @line: 23
	i041 := 0;
	 goto Block47;
	 //  @line: 25
Block47:
	 goto Block50, Block48;
	 //  @line: 25
Block50:
	 //  @line: 25
	 assume ($negInt(($eqref((r040), ($null))))==1);
	 assert ($neref((r040), ($null))==1);
	 //  @line: 26
	 call r040 := List$List$getTail$2232((r040));
	 //  @line: 27
	i041 := $addint((i041), (1));
	 goto Block47;
	 //  @line: 25
Block48:
	 assume ($eqref((r040), ($null))==1);
	 goto Block49;
	 //  @line: 30
Block49:
	 //  @line: 30
	__ret := i041;
	 return;
}


	 //  @line: 2
// <Test3: void main(java.lang.String[])>
procedure void$Test3$main$2229($param_0 : [int]ref) {
var $i16 : int;
var r02 : [int]ref;
var $r122 : ref;
var $i1119 : int;
var $i1429 : int;
var $i917 : int;
var $i310 : int;
var $i29 : int;
var $r324 : ref;
var $i816 : int;
var $i614 : int;
var $i1530 : int;
var $i715 : int;
var $i03 : int;
var $i412 : int;
var $i1220 : int;
var $r735 : ref;
var $i1321 : int;
var $r223 : ref;
var $i513 : int;
var $r425 : ref;
var r634 : ref;
var r836 : ref;
var r533 : ref;
var $i1018 : int;
var $i1631 : int;
Block17:
	r02 := $param_0;
	 //  @line: 3
	$i03 := $refArrSize[r02[$arrSizeIdx]];
	 //  @line: 3
	 call r533 := List$List$mk$2233(($i03));
	 //  @line: 4
	$i16 := $refArrSize[r02[$arrSizeIdx]];
	 //  @line: 4
	 call r634 := List$List$mk$2233(($i16));
	 //  @line: 5
	$i29 := $refArrSize[r02[$arrSizeIdx]];
	 //  @line: 5
	$i310 := $modint(($i29), (2));
	 goto Block18;
	 //  @line: 5
Block18:
	 goto Block19, Block21;
	 //  @line: 5
Block19:
	 assume ($neint(($i310), (0))==1);
	 goto Block20;
	 //  @line: 5
Block21:
	 //  @line: 5
	 assume ($negInt(($neint(($i310), (0))))==1);
	 //  @line: 8
	$i1530 := $refArrSize[r02[$arrSizeIdx]];
	 //  @line: 8
	$i1429 := $refArrSize[r02[$arrSizeIdx]];
	 //  @line: 8
	$i1631 := $mulint(($i1530), ($i1429));
	 //  @line: 8
	 call $r735 := List$List$mk$2233(($i1631));
	 goto Block22;
	 //  @line: 8
Block20:
	 //  @line: 8
	$r735 := r634;
	 goto Block22;
	 //  @line: 5
Block22:
	 //  @line: 5
	r836 := $r735;
	 goto Block23;
	 //  @line: 8
Block23:
	 //  @line: 8
	 call $i412 := int$Test3$length$2230((r533));
	 //  @line: 8
	 call $i513 := int$Test3$length$2230((r634));
	 //  @line: 8
	$i614 := $addint(($i412), ($i513));
	 //  @line: 8
	 call $i715 := int$Test3$length$2230((r836));
	 //  @line: 8
	$i816 := $mulint(($i715), (5));
	 //  @line: 8
	$i917 := $addint(($i614), ($i816));
	 goto Block24;
	 //  @line: 8
Block24:
	 goto Block27, Block25;
	 //  @line: 8
Block27:
	 //  @line: 8
	 assume ($negInt(($leint(($i917), (0))))==1);
	 //  @line: 9
	 call $i1018 := int$Test3$length$2230((r533));
	 //  @line: 9
	$i1119 := $modint(($i1018), (2));
	 goto Block28;
	 //  @line: 8
Block25:
	 assume ($leint(($i917), (0))==1);
	 goto Block26;
	 //  @line: 9
Block28:
	 goto Block29, Block31;
	 //  @line: 20
Block26:
	 return;
	 //  @line: 9
Block29:
	 assume ($neint(($i1119), (1))==1);
	 goto Block30;
	 //  @line: 9
Block31:
	 //  @line: 9
	 assume ($negInt(($neint(($i1119), (1))))==1);
	 assert ($neref((r533), ($null))==1);
	 //  @line: 10
	 call r533 := List$List$getTail$2232((r533));
	 goto Block23;
	 //  @line: 11
Block30:
	 //  @line: 11
	 call $i1220 := int$Test3$length$2230((r634));
	 goto Block32;
	 //  @line: 11
Block32:
	 //  @line: 11
	 call $i1321 := int$Test3$length$2230((r836));
	 goto Block33;
	 //  @line: 11
Block33:
	 goto Block36, Block34;
	 //  @line: 11
Block36:
	 //  @line: 11
	 assume ($negInt(($leint(($i1220), ($i1321))))==1);
	 assert ($neref((r634), ($null))==1);
	 //  @line: 12
	 call r634 := List$List$getTail$2232((r634));
	 goto Block23;
	 //  @line: 11
Block34:
	 assume ($leint(($i1220), ($i1321))==1);
	 goto Block35;
	 //  @line: 13
Block35:
	 goto Block39, Block37;
	 //  @line: 13
Block39:
	 //  @line: 13
	 assume ($negInt(($neref((r836), ($null))))==1);
	 goto Block40;
	 //  @line: 13
Block37:
	 assume ($neref((r836), ($null))==1);
	 goto Block38;
	 //  @line: 14
Block40:
	 goto Block26;
	 //  @line: 16
Block38:
	 //  @line: 16
	$r122 := $newvariable((41));
	 assume ($neref(($newvariable((41))), ($null))==1);
	 goto Block42;
	 //  @line: 16
Block42:
	 //  @line: 16
	$r223 := $newvariable((43));
	 assume ($neref(($newvariable((43))), ($null))==1);
	 assert ($neref(($r223), ($null))==1);
	 //  @line: 16
	 call void$java.lang.Object$$la$init$ra$$28(($r223));
	 assert ($neref(($r122), ($null))==1);
	 //  @line: 16
	 call void$List$$la$init$ra$$2231(($r122), ($r223), (r533));
	 //  @line: 16
	r533 := $r122;
	 //  @line: 17
	$r324 := $newvariable((44));
	 assume ($neref(($newvariable((44))), ($null))==1);
	 //  @line: 17
	$r425 := $newvariable((45));
	 assume ($neref(($newvariable((45))), ($null))==1);
	 assert ($neref(($r425), ($null))==1);
	 //  @line: 17
	 call void$java.lang.Object$$la$init$ra$$28(($r425));
	 assert ($neref(($r324), ($null))==1);
	 //  @line: 17
	 call void$List$$la$init$ra$$2231(($r324), ($r425), (r634));
	 //  @line: 17
	r634 := $r324;
	 assert ($neref((r836), ($null))==1);
	 //  @line: 18
	 call r836 := List$List$getTail$2232((r836));
	 goto Block23;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 10
// <List: List getTail()>
procedure List$List$getTail$2232(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r045 : ref;
var $r146 : ref;
Block52:
	r045 := __this;
	 assert ($neref((r045), ($null))==1);
	 //  @line: 11
	$r146 := $HeapVar[r045, List$List$tail255];
	 //  @line: 11
	__ret := $r146;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


