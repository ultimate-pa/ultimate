type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var $fresh10 : int;
var $fresh24 : int;
var $fresh13 : int;
var $fresh3 : int;
var Weight$lp$$rp$$Graph$d256 : Field [int]ref;
var $fresh7 : int;
var $fresh15 : int;
var $fresh2 : int;
var int$lp$$rp$$Graph$pi255 : Field [int]int;
var $fresh4 : int;
var $fresh22 : int;
var $fresh17 : int;
var $fresh2 : int;
var $fresh9 : int;
var $fresh25 : int;
var double$Weight$w0 : Field realVar;
var $fresh14 : int;
var $fresh1 : [int][int]ref;
var $fresh18 : int;
var $fresh3 : realVar;
var $fresh19 : int;
var $fresh1 : [int]ref;
var $fresh12 : int;
var $fresh21 : int;
var $fresh16 : int;
var Weight$lp$$rp$$lp$$rp$$Graph$adjMat254 : Field [int][int]ref;
var $fresh11 : int;
var $fresh8 : int;
var $fresh6 : int;
var $fresh5 : int;
var $fresh23 : int;
var $fresh20 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 116
// <Graph: Graph example(java.lang.String[])>
procedure Graph$Graph$example$2234($param_0 : [int]ref) returns (__ret : ref)
  modifies $stringSize;
 {
var $d1169 : realVar;
var $i7164 : int;
var $i13174 : int;
var $d3177 : realVar;
var i2160 : int;
var $d2176 : realVar;
var i0150 : int;
var $i3153 : int;
var $i6163 : int;
var $i10170 : int;
var $d0168 : realVar;
var $i12172 : int;
var $i5162 : int;
var $r6173 : ref;
var $i15178 : int;
var $r5165 : ref;
var $i9167 : int;
var $r3154 : ref;
var i16179 : int;
var $i8166 : int;
var $i11171 : int;
var i1156 : int;
var $i14175 : int;
var r0149 : [int]ref;
var $r4158 : ref;
var $i4157 : int;
var $r2151 : ref;
var r1152 : ref;
Block191:
	r0149 := $param_0;
	 //  @line: 117
	i0150 := $refArrSize[r0149[$arrSizeIdx]];
	 //  @line: 118
	$r2151 := $newvariable((192));
	 assume ($neref(($newvariable((192))), ($null))==1);
	 assert ($neref(($r2151), ($null))==1);
	 //  @line: 118
	 call void$Graph$$la$init$ra$$2228(($r2151), (i0150));
	 //  @line: 118
	r1152 := $r2151;
	 goto Block193;
	 //  @line: 120
Block193:
	 goto Block196, Block194;
	 //  @line: 120
Block196:
	 //  @line: 120
	 assume ($negInt(($ltint((i0150), (2))))==1);
	 //  @line: 121
	$i3153 := $subint((i0150), (2));
	 assert ($geint(($i3153), (0))==1);
	 assert ($ltint(($i3153), ($refArrSize[r0149[$arrSizeIdx]]))==1);
	 //  @line: 121
	$r3154 := r0149[$i3153];
	i1156 := $stringSize[$r3154];
	 //  @line: 122
	$i4157 := $subint((i0150), (1));
	 assert ($geint(($i4157), (0))==1);
	 assert ($ltint(($i4157), ($refArrSize[r0149[$arrSizeIdx]]))==1);
	 //  @line: 122
	$r4158 := r0149[$i4157];
	i2160 := $stringSize[$r4158];
	 //  @line: 124
	i16179 := 0;
	 goto Block197;
	 //  @line: 120
Block194:
	 assume ($ltint((i0150), (2))==1);
	 goto Block195;
	 //  @line: 124
Block197:
	 goto Block198, Block199;
	 //  @line: 135
Block195:
	 //  @line: 135
	__ret := r1152;
	 return;
	 //  @line: 124
Block198:
	 assume ($geint((i16179), (i0150))==1);
	 goto Block195;
	 //  @line: 124
Block199:
	 //  @line: 124
	 assume ($negInt(($geint((i16179), (i0150))))==1);
	 //  @line: 125
	$i5162 := $modint((i16179), (2));
	 goto Block200;
	 //  @line: 125
Block200:
	 goto Block203, Block201;
	 //  @line: 125
Block203:
	 //  @line: 125
	 assume ($negInt(($neint(($i5162), (0))))==1);
	 //  @line: 126
	$i11171 := $addint((i16179), (1));
	 goto Block204;
	 //  @line: 125
Block201:
	 assume ($neint(($i5162), (0))==1);
	 goto Block202;
	 //  @line: 126
Block204:
	 goto Block205, Block207;
	 //  @line: 130
Block202:
	 //  @line: 130
	$i6163 := $addint((i16179), (1));
	 goto Block211;
	 //  @line: 126
Block205:
	 assume ($geint(($i11171), (i0150))==1);
	 goto Block206;
	 //  @line: 126
Block207:
	 //  @line: 126
	 assume ($negInt(($geint(($i11171), (i0150))))==1);
	 //  @line: 124
	$i15178 := $addint((i16179), (1));
	 //  @line: 124
	$d3177 := $inttoreal((i1156));
	 assert ($neref((r1152), ($null))==1);
	 //  @line: 124
	 call void$Graph$addEdge$2230((r1152), (i16179), ($i15178), ($d3177));
	 goto Block206;
	 //  @line: 130
Block211:
	 goto Block212, Block214;
	 //  @line: 127
Block206:
	 goto Block208, Block210;
	 //  @line: 130
Block212:
	 assume ($geint(($i6163), (i0150))==1);
	 goto Block213;
	 //  @line: 130
Block214:
	 //  @line: 130
	 assume ($negInt(($geint(($i6163), (i0150))))==1);
	 //  @line: 124
	$i10170 := $addint((i16179), (1));
	 //  @line: 124
	$d1169 := $inttoreal((i2160));
	 assert ($neref((r1152), ($null))==1);
	 //  @line: 124
	 call void$Graph$addEdge$2230((r1152), (i16179), ($i10170), ($d1169));
	 goto Block213;
	 //  @line: 127
Block208:
	 assume ($ltint((i16179), (2))==1);
	 goto Block209;
	 //  @line: 127
Block210:
	 //  @line: 127
	 assume ($negInt(($ltint((i16179), (2))))==1);
	 //  @line: 124
	$i13174 := $subint((i16179), (2));
	 //  @line: 124
	$i12172 := $subint((i16179), (2));
	 assert ($geint(($i12172), (0))==1);
	 assert ($ltint(($i12172), ($refArrSize[r0149[$arrSizeIdx]]))==1);
	 //  @line: 124
	$r6173 := r0149[$i12172];
	$i14175 := $stringSize[$r6173];
	 //  @line: 124
	$d2176 := $inttoreal(($i14175));
	 assert ($neref((r1152), ($null))==1);
	 //  @line: 124
	 call void$Graph$addEdge$2230((r1152), (i16179), ($i13174), ($d2176));
	 goto Block209;
	 //  @line: 131
Block213:
	 //  @line: 131
	$i7164 := $addint((i16179), (2));
	 goto Block215;
	 //  @line: 124
Block209:
	 //  @line: 124
	i16179 := $addint((i16179), (1));
	 goto Block197;
	 //  @line: 131
Block215:
	 goto Block217, Block216;
	 //  @line: 131
Block217:
	 //  @line: 131
	 assume ($negInt(($geint(($i7164), (i0150))))==1);
	 //  @line: 124
	$i8166 := $addint((i16179), (2));
	 assert ($geint((i16179), (0))==1);
	 assert ($ltint((i16179), ($refArrSize[r0149[$arrSizeIdx]]))==1);
	 //  @line: 124
	$r5165 := r0149[i16179];
	$i9167 := $stringSize[$r5165];
	 //  @line: 124
	$d0168 := $inttoreal(($i9167));
	 assert ($neref((r1152), ($null))==1);
	 //  @line: 124
	 call void$Graph$addEdge$2230((r1152), (i16179), ($i8166), ($d0168));
	 goto Block209;
	 //  @line: 131
Block216:
	 assume ($geint(($i7164), (i0150))==1);
	 goto Block209;
}


// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 18
// <Graph: void init()>
procedure void$Graph$init$2229(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r017 : ref;
var $r321 : [int]ref;
var $r118 : [int][int]ref;
var i122 : int;
var $i019 : int;
var $r220 : [int]int;
Block32:
	r017 := __this;
	 //  @line: 19
	i122 := 0;
	 goto Block33;
	 //  @line: 19
Block33:
	 assert ($neref((r017), ($null))==1);
	 //  @line: 19
	$r118 := $HeapVar[r017, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 19
	$i019 := $fresh5;
	 goto Block34;
	 //  @line: 19
Block34:
	 goto Block35, Block37;
	 //  @line: 19
Block35:
	 assume ($geint((i122), ($i019))==1);
	 goto Block36;
	 //  @line: 19
Block37:
	 //  @line: 19
	 assume ($negInt(($geint((i122), ($i019))))==1);
	 assert ($neref((r017), ($null))==1);
	 //  @line: 20
	$r220 := $HeapVar[r017, int$lp$$rp$$Graph$pi255];
	 assert ($geint((i122), (0))==1);
	 assert ($ltint((i122), ($intArrSize[$r220[$arrSizeIdx]]))==1);
	 //  @line: 20
	$r220[i122] := -1;
	 assert ($neref((r017), ($null))==1);
	 //  @line: 21
	$r321 := $HeapVar[r017, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i122), (0))==1);
	 assert ($ltint((i122), ($refArrSize[$r321[$arrSizeIdx]]))==1);
	 //  @line: 21
	$r321[i122] := $null;
	 //  @line: 19
	i122 := $addint((i122), (1));
	 goto Block33;
	 //  @line: 23
Block36:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 67
// <Graph: boolean bellmanFord(int)>
procedure boolean$Graph$bellmanFord$2233(__this : ref, $param_0 : int) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $r16122 : [int]ref;
var $d1130 : realVar;
var $r11117 : ref;
var $d2131 : realVar;
var $r29143 : ref;
var $r12118 : [int]ref;
var i9145 : int;
var $r22128 : ref;
var $d3132 : realVar;
var i8144 : int;
var $r6111 : [int][int]ref;
var $i1102 : int;
var $r18124 : [int]ref;
var $r3104 : [int]ref;
var $i4112 : int;
var $i3109 : int;
var $r17123 : ref;
var $b5133 : int;
var $r4106 : [int][int]ref;
var $d0129 : realVar;
var i11147 : int;
var $r2103 : ref;
var $r23134 : [int]ref;
var $r25136 : [int][int]ref;
var $i2107 : int;
var $r13119 : ref;
var $r10116 : [int]ref;
var $r14120 : [int]ref;
var r0100 : ref;
var i10146 : int;
var $r1101 : [int][int]ref;
var $r27141 : [int][int]ref;
var $r26139 : [int][int]ref;
var $r24135 : ref;
var $r20126 : [int][int]ref;
var $i7140 : int;
var $r21127 : [int]ref;
var $i6137 : int;
var $r8114 : [int]ref;
var $r15121 : ref;
var $r5108 : [int][int]ref;
var $r7113 : [int][int]ref;
var $r9115 : ref;
var $r19125 : ref;
var i12148 : int;
var $r28142 : [int]ref;
var i099 : int;
Block128:
	r0100 := __this;
	i099 := $param_0;
	 goto Block129;
	 //  @line: 68
Block129:
	 goto Block130, Block132;
	 //  @line: 68
Block130:
	 assume ($gtint((0), (i099))==1);
	 goto Block131;
	 //  @line: 68
Block132:
	 //  @line: 68
	 assume ($negInt(($gtint((0), (i099))))==1);
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 85
	$r1101 := $HeapVar[r0100, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 85
	$i1102 := $fresh15;
	 goto Block133;
	 //  @line: 85
Block131:
	 //  @line: 85
	__ret := 0;
	 return;
	 //  @line: 85
Block133:
	 goto Block134, Block135;
	 //  @line: 85
Block134:
	 assume ($geint((i099), ($i1102))==1);
	 goto Block131;
	 //  @line: 85
Block135:
	 //  @line: 85
	 assume ($negInt(($geint((i099), ($i1102))))==1);
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 69
	 call void$Graph$init$2229((r0100));
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 70
	$r3104 := $HeapVar[r0100, Weight$lp$$rp$$Graph$d256];
	 //  @line: 70
	$r2103 := $newvariable((136));
	 assume ($neref(($newvariable((136))), ($null))==1);
	 assert ($neref(($r2103), ($null))==1);
	 //  @line: 70
	 call void$Weight$$la$init$ra$$2236(($r2103), ($fresh3));
	 assert ($geint((i099), (0))==1);
	 assert ($ltint((i099), ($refArrSize[$r3104[$arrSizeIdx]]))==1);
	 //  @line: 70
	$r3104[i099] := $r2103;
	 //  @line: 71
	i8144 := 1;
	 goto Block137;
	 //  @line: 71
Block137:
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 71
	$r4106 := $HeapVar[r0100, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 71
	$i2107 := $fresh16;
	 goto Block138;
	 //  @line: 71
Block138:
	 goto Block139, Block141;
	 //  @line: 71
Block139:
	 assume ($geint((i8144), ($i2107))==1);
	 goto Block140;
	 //  @line: 71
Block141:
	 //  @line: 71
	 assume ($negInt(($geint((i8144), ($i2107))))==1);
	 //  @line: 72
	i9145 := 0;
	 goto Block142;
	 //  @line: 76
Block140:
	 //  @line: 76
	i11147 := 0;
	 goto Block158;
	 //  @line: 72
Block142:
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 72
	$r25136 := $HeapVar[r0100, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 72
	$i6137 := $fresh17;
	 goto Block143;
	 //  @line: 76
Block158:
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 76
	$r5108 := $HeapVar[r0100, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 76
	$i3109 := $fresh20;
	 goto Block159;
	 //  @line: 72
Block143:
	 goto Block144, Block146;
	 //  @line: 76
Block159:
	 goto Block162, Block160;
	 //  @line: 72
Block144:
	 assume ($geint((i9145), ($i6137))==1);
	 goto Block145;
	 //  @line: 72
Block146:
	 //  @line: 72
	 assume ($negInt(($geint((i9145), ($i6137))))==1);
	 //  @line: 73
	i10146 := 0;
	 goto Block147;
	 //  @line: 76
Block162:
	 //  @line: 76
	 assume ($negInt(($geint((i11147), ($i3109))))==1);
	 //  @line: 77
	i12148 := 0;
	 goto Block163;
	 //  @line: 76
Block160:
	 assume ($geint((i11147), ($i3109))==1);
	 goto Block161;
	 //  @line: 71
Block145:
	 //  @line: 71
	i8144 := $addint((i8144), (1));
	 goto Block157;
	 //  @line: 73
Block147:
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 73
	$r26139 := $HeapVar[r0100, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 73
	$i7140 := $fresh18;
	 goto Block148;
	 //  @line: 77
Block163:
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 77
	$r6111 := $HeapVar[r0100, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 77
	$i4112 := $fresh21;
	 goto Block164;
	 //  @line: 83
Block161:
	 //  @line: 83
	__ret := 1;
	 return;
	 //  @line: 71
Block157:
	 goto Block137;
	 //  @line: 73
Block148:
	 goto Block151, Block149;
	 //  @line: 77
Block164:
	 goto Block165, Block167;
	 //  @line: 73
Block151:
	 //  @line: 73
	 assume ($negInt(($geint((i10146), ($i7140))))==1);
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 74
	$r27141 := $HeapVar[r0100, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 assert ($geint((i9145), (0))==1);
	 assert ($ltint((i9145), ($fresh19))==1);
	 //  @line: 74
	$r28142 := $r27141[i9145];
	 assert ($geint((i10146), (0))==1);
	 assert ($ltint((i10146), ($refArrSize[$r28142[$arrSizeIdx]]))==1);
	 //  @line: 74
	$r29143 := $r28142[i10146];
	 goto Block152;
	 //  @line: 73
Block149:
	 assume ($geint((i10146), ($i7140))==1);
	 goto Block150;
	 //  @line: 77
Block165:
	 assume ($geint((i12148), ($i4112))==1);
	 goto Block166;
	 //  @line: 77
Block167:
	 //  @line: 77
	 assume ($negInt(($geint((i12148), ($i4112))))==1);
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 78
	$r7113 := $HeapVar[r0100, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 assert ($geint((i11147), (0))==1);
	 assert ($ltint((i11147), ($fresh22))==1);
	 //  @line: 78
	$r8114 := $r7113[i11147];
	 assert ($geint((i12148), (0))==1);
	 assert ($ltint((i12148), ($refArrSize[$r8114[$arrSizeIdx]]))==1);
	 //  @line: 78
	$r9115 := $r8114[i12148];
	 goto Block168;
	 //  @line: 74
Block152:
	 goto Block155, Block153;
	 //  @line: 72
Block150:
	 //  @line: 72
	i9145 := $addint((i9145), (1));
	 goto Block156;
	 //  @line: 76
Block166:
	 //  @line: 76
	i11147 := $addint((i11147), (1));
	 goto Block190;
	 //  @line: 78
Block168:
	 goto Block169, Block171;
	 //  @line: 74
Block155:
	 //  @line: 74
	 assume ($negInt(($eqref(($r29143), ($null))))==1);
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 75
	 call void$Graph$relax$2231((r0100), (i9145), (i10146));
	 goto Block154;
	 //  @line: 74
Block153:
	 assume ($eqref(($r29143), ($null))==1);
	 goto Block154;
	 //  @line: 72
Block156:
	 goto Block142;
	 //  @line: 76
Block190:
	 goto Block158;
	 //  @line: 78
Block169:
	 assume ($eqref(($r9115), ($null))==1);
	 goto Block170;
	 //  @line: 78
Block171:
	 //  @line: 78
	 assume ($negInt(($eqref(($r9115), ($null))))==1);
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 79
	$r10116 := $HeapVar[r0100, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i12148), (0))==1);
	 assert ($ltint((i12148), ($refArrSize[$r10116[$arrSizeIdx]]))==1);
	 //  @line: 79
	$r11117 := $r10116[i12148];
	 goto Block172;
	 //  @line: 73
Block154:
	 //  @line: 73
	i10146 := $addint((i10146), (1));
	 goto Block147;
	 //  @line: 77
Block170:
	 //  @line: 77
	i12148 := $addint((i12148), (1));
	 goto Block189;
	 //  @line: 79
Block172:
	 goto Block175, Block173;
	 //  @line: 77
Block189:
	 goto Block163;
	 //  @line: 79
Block175:
	 //  @line: 79
	 assume ($negInt(($neref(($r11117), ($null))))==1);
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 82
	$r23134 := $HeapVar[r0100, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i11147), (0))==1);
	 assert ($ltint((i11147), ($refArrSize[$r23134[$arrSizeIdx]]))==1);
	 //  @line: 82
	$r24135 := $r23134[i11147];
	 goto Block176;
	 //  @line: 79
Block173:
	 assume ($neref(($r11117), ($null))==1);
	 goto Block174;
	 //  @line: 82
Block176:
	 goto Block177, Block179;
	 //  @line: 79
Block174:
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 79
	$r12118 := $HeapVar[r0100, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i12148), (0))==1);
	 assert ($ltint((i12148), ($refArrSize[$r12118[$arrSizeIdx]]))==1);
	 //  @line: 79
	$r13119 := $r12118[i12148];
	 goto Block180;
	 //  @line: 82
Block177:
	 assume ($neref(($r24135), ($null))==1);
	 goto Block178;
	 //  @line: 82
Block179:
	 //  @line: 82
	 assume ($negInt(($neref(($r24135), ($null))))==1);
	 goto Block174;
	 //  @line: 79
Block180:
	 goto Block181, Block182;
	 //  @line: 82
Block178:
	 //  @line: 82
	__ret := 0;
	 return;
	 //  @line: 79
Block181:
	 assume ($eqref(($r13119), ($null))==1);
	 goto Block170;
	 //  @line: 79
Block182:
	 //  @line: 79
	 assume ($negInt(($eqref(($r13119), ($null))))==1);
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 77
	$r14120 := $HeapVar[r0100, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i11147), (0))==1);
	 assert ($ltint((i11147), ($refArrSize[$r14120[$arrSizeIdx]]))==1);
	 //  @line: 77
	$r15121 := $r14120[i11147];
	 goto Block183;
	 //  @line: 77
Block183:
	 goto Block184, Block185;
	 //  @line: 77
Block184:
	 assume ($eqref(($r15121), ($null))==1);
	 goto Block170;
	 //  @line: 77
Block185:
	 //  @line: 77
	 assume ($negInt(($eqref(($r15121), ($null))))==1);
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 77
	$r16122 := $HeapVar[r0100, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i12148), (0))==1);
	 assert ($ltint((i12148), ($refArrSize[$r16122[$arrSizeIdx]]))==1);
	 //  @line: 77
	$r17123 := $r16122[i12148];
	 assert ($neref(($r17123), ($null))==1);
	 //  @line: 77
	$d3132 := $HeapVar[$r17123, double$Weight$w0];
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 77
	$r18124 := $HeapVar[r0100, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i11147), (0))==1);
	 assert ($ltint((i11147), ($refArrSize[$r18124[$arrSizeIdx]]))==1);
	 //  @line: 77
	$r19125 := $r18124[i11147];
	 assert ($neref(($r19125), ($null))==1);
	 //  @line: 77
	$d1130 := $HeapVar[$r19125, double$Weight$w0];
	 assert ($neref((r0100), ($null))==1);
	 //  @line: 77
	$r20126 := $HeapVar[r0100, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 assert ($geint((i11147), (0))==1);
	 assert ($ltint((i11147), ($fresh23))==1);
	 //  @line: 77
	$r21127 := $r20126[i11147];
	 assert ($geint((i12148), (0))==1);
	 assert ($ltint((i12148), ($refArrSize[$r21127[$arrSizeIdx]]))==1);
	 //  @line: 77
	$r22128 := $r21127[i12148];
	 assert ($neref(($r22128), ($null))==1);
	 //  @line: 77
	$d0129 := $HeapVar[$r22128, double$Weight$w0];
	 //  @line: 77
	$d2131 := $addreal(($d1130), ($d0129));
	 //  @line: 77
	$b5133 := $cmpreal(($d3132), ($d2131));
	 goto Block186;
	 //  @line: 77
Block186:
	 goto Block188, Block187;
	 //  @line: 77
Block188:
	 //  @line: 77
	 assume ($negInt(($leint(($b5133), (0))))==1);
	 goto Block178;
	 //  @line: 77
Block187:
	 assume ($leint(($b5133), (0))==1);
	 goto Block170;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 138
// <Graph: void main(java.lang.String[])>
procedure void$Graph$main$2235($param_0 : [int]ref) {
var i3190 : int;
var r1182 : ref;
var $i1187 : int;
var i2189 : int;
var $i0185 : int;
var r0180 : [int]ref;
var $r2184 : [int][int]ref;
var $r3186 : [int][int]ref;

 //temp local variables 
var $freshlocal0 : int;

Block218:
	r0180 := $param_0;
	 //  @line: 139
	 call r1182 := Graph$Graph$example$2234((r0180));
	 //  @line: 158
	i2189 := 0;
	 goto Block219;
	 //  @line: 158
Block219:
	 assert ($neref((r1182), ($null))==1);
	 //  @line: 158
	$r2184 := $HeapVar[r1182, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 158
	$i0185 := $fresh24;
	 goto Block220;
	 //  @line: 158
Block220:
	 goto Block221, Block223;
	 //  @line: 158
Block221:
	 assume ($geint((i2189), ($i0185))==1);
	 goto Block222;
	 //  @line: 158
Block223:
	 //  @line: 158
	 assume ($negInt(($geint((i2189), ($i0185))))==1);
	 assert ($neref((r1182), ($null))==1);
	 //  @line: 159
	 call void$Graph$dijkstra$2232((r1182), (i2189));
	 //  @line: 158
	i2189 := $addint((i2189), (1));
	 goto Block219;
	 //  @line: 169
Block222:
	 //  @line: 169
	i3190 := 0;
	 goto Block224;
	 //  @line: 169
Block224:
	 assert ($neref((r1182), ($null))==1);
	 //  @line: 169
	$r3186 := $HeapVar[r1182, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 169
	$i1187 := $fresh25;
	 goto Block225;
	 //  @line: 169
Block225:
	 goto Block228, Block226;
	 //  @line: 169
Block228:
	 //  @line: 169
	 assume ($negInt(($geint((i3190), ($i1187))))==1);
	 assert ($neref((r1182), ($null))==1);
	 //  @line: 170
	 call $freshlocal0 := boolean$Graph$bellmanFord$2233((r1182), (i3190));
	 //  @line: 169
	i3190 := $addint((i3190), (1));
	 goto Block224;
	 //  @line: 169
Block226:
	 assume ($geint((i3190), ($i1187))==1);
	 goto Block227;
	 //  @line: 178
Block227:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 3
// <Weight: void <init>(double)>
procedure void$Weight$$la$init$ra$$2236(__this : ref, $param_0 : realVar)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0191 : ref;
var d0192 : realVar;
Block229:
	r0191 := __this;
	d0192 := $param_0;
	 assert ($neref((r0191), ($null))==1);
	 //  @line: 4
	 call void$java.lang.Object$$la$init$ra$$28((r0191));
	 assert ($neref((r0191), ($null))==1);
	 //  @line: 5
	$HeapVar[r0191, double$Weight$w0] := d0192;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 42
// <Graph: void dijkstra(int)>
procedure void$Graph$dijkstra$2232(__this : ref, $param_0 : int)
  modifies $intArrSize;
  requires ($neref((__this), ($null))==1);
 {
var $r1485 : ref;
var $r979 : [int]ref;
var $r464 : [int]ref;
var $r261 : [int][int]ref;
var $r878 : [int][int]ref;
var r060 : ref;
var i994 : int;
var $i777 : int;
var i059 : int;
var $r776 : [int][int]ref;
var $r670 : [int][int]ref;
var $r1182 : [int]ref;
var $d090 : realVar;
var $i369 : int;
var r167 : [int]int;
var $i573 : int;
var i1398 : int;
var $i162 : int;
var i1297 : int;
var $r1788 : [int]ref;
var $i266 : int;
var i1196 : int;
var $r1687 : ref;
var $r1080 : ref;
var $r363 : ref;
var $z193 : int;
var $i471 : int;
var $i675 : int;
var $r1283 : ref;
var $r1384 : [int]ref;
var $r1889 : ref;
var $b892 : int;
var i1095 : int;
var $r565 : [int][int]ref;
var $z081 : int;
var $r1586 : [int]ref;
var $d191 : realVar;
Block69:
	r060 := __this;
	i059 := $param_0;
	 goto Block70;
	 //  @line: 43
Block70:
	 goto Block71, Block73;
	 //  @line: 43
Block71:
	 assume ($gtint((0), (i059))==1);
	 goto Block72;
	 //  @line: 43
Block73:
	 //  @line: 43
	 assume ($negInt(($gtint((0), (i059))))==1);
	 assert ($neref((r060), ($null))==1);
	 //  @line: 65
	$r261 := $HeapVar[r060, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 65
	$i162 := $fresh10;
	 goto Block74;
	 //  @line: 65
Block72:
	 return;
	 //  @line: 65
Block74:
	 goto Block75, Block76;
	 //  @line: 65
Block75:
	 assume ($geint((i059), ($i162))==1);
	 goto Block72;
	 //  @line: 65
Block76:
	 //  @line: 65
	 assume ($negInt(($geint((i059), ($i162))))==1);
	 assert ($neref((r060), ($null))==1);
	 //  @line: 44
	 call void$Graph$init$2229((r060));
	 assert ($neref((r060), ($null))==1);
	 //  @line: 45
	$r464 := $HeapVar[r060, Weight$lp$$rp$$Graph$d256];
	 //  @line: 45
	$r363 := $newvariable((77));
	 assume ($neref(($newvariable((77))), ($null))==1);
	 assert ($neref(($r363), ($null))==1);
	 //  @line: 45
	 call void$Weight$$la$init$ra$$2236(($r363), ($fresh3));
	 assert ($geint((i059), (0))==1);
	 assert ($ltint((i059), ($refArrSize[$r464[$arrSizeIdx]]))==1);
	 //  @line: 45
	$r464[i059] := $r363;
	 assert ($neref((r060), ($null))==1);
	 //  @line: 47
	$r565 := $HeapVar[r060, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 47
	$i266 := $fresh11;
	 //  @line: 47
	r167 := $reftointarr(($newvariable((78))));
	$intArrSize[$reftointarr(($newvariable((78))))[$arrSizeIdx]] := $i266;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((78))))), ($intArrNull))))==1);
	 //  @line: 48
	i994 := 0;
	 goto Block79;
	 //  @line: 48
Block79:
	 //  @line: 48
	$i369 := $intArrSize[r167[$arrSizeIdx]];
	 goto Block80;
	 //  @line: 48
Block80:
	 goto Block81, Block83;
	 //  @line: 48
Block81:
	 assume ($geint((i994), ($i369))==1);
	 goto Block82;
	 //  @line: 48
Block83:
	 //  @line: 48
	 assume ($negInt(($geint((i994), ($i369))))==1);
	 assert ($geint((i994), (0))==1);
	 assert ($ltint((i994), ($intArrSize[r167[$arrSizeIdx]]))==1);
	 //  @line: 55
	r167[i994] := 1;
	 //  @line: 55
	i994 := $addint((i994), (1));
	 goto Block79;
	 //  @line: 50
Block82:
	 //  @line: 50
	i1095 := 0;
	 goto Block84;
	 //  @line: 50
Block84:
	 assert ($neref((r060), ($null))==1);
	 //  @line: 50
	$r670 := $HeapVar[r060, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 50
	$i471 := $fresh12;
	 goto Block85;
	 //  @line: 50
Block85:
	 goto Block86, Block87;
	 //  @line: 50
Block86:
	 assume ($geint((i1095), ($i471))==1);
	 goto Block72;
	 //  @line: 50
Block87:
	 //  @line: 50
	 assume ($negInt(($geint((i1095), ($i471))))==1);
	 //  @line: 53
	i1196 := 0;
	 goto Block88;
	 //  @line: 53
Block88:
	 //  @line: 53
	$i573 := $intArrSize[r167[$arrSizeIdx]];
	 goto Block89;
	 //  @line: 53
Block89:
	 goto Block90, Block92;
	 //  @line: 53
Block90:
	 assume ($geint((i1196), ($i573))==1);
	 goto Block91;
	 //  @line: 53
Block92:
	 //  @line: 53
	 assume ($negInt(($geint((i1196), ($i573))))==1);
	 assert ($geint((i1196), (0))==1);
	 assert ($ltint((i1196), ($intArrSize[r167[$arrSizeIdx]]))==1);
	 //  @line: 54
	$z193 := r167[i1196];
	 goto Block93;
	 //  @line: 55
Block91:
	 //  @line: 55
	i1297 := $addint((i1196), (1));
	 goto Block98;
	 //  @line: 54
Block93:
	 goto Block94, Block96;
	 //  @line: 55
Block98:
	 //  @line: 55
	$i675 := $intArrSize[r167[$arrSizeIdx]];
	 goto Block99;
	 //  @line: 54
Block94:
	 assume ($eqint(($z193), (0))==1);
	 goto Block95;
	 //  @line: 54
Block96:
	 //  @line: 54
	 assume ($negInt(($eqint(($z193), (0))))==1);
	 goto Block91;
	 //  @line: 55
Block99:
	 goto Block102, Block100;
	 //  @line: 53
Block95:
	 //  @line: 53
	i1196 := $addint((i1196), (1));
	 goto Block97;
	 //  @line: 55
Block102:
	 //  @line: 55
	 assume ($negInt(($geint((i1297), ($i675))))==1);
	 assert ($geint((i1297), (0))==1);
	 assert ($ltint((i1297), ($intArrSize[r167[$arrSizeIdx]]))==1);
	 //  @line: 56
	$z081 := r167[i1297];
	 goto Block103;
	 //  @line: 55
Block100:
	 assume ($geint((i1297), ($i675))==1);
	 goto Block101;
	 //  @line: 53
Block97:
	 goto Block88;
	 //  @line: 56
Block103:
	 goto Block104, Block106;
	 //  @line: 58
Block101:
	 assert ($geint((i1196), (0))==1);
	 assert ($ltint((i1196), ($intArrSize[r167[$arrSizeIdx]]))==1);
	 //  @line: 58
	r167[i1196] := 0;
	 goto Block117;
	 //  @line: 56
Block104:
	 assume ($eqint(($z081), (0))==1);
	 goto Block105;
	 //  @line: 56
Block106:
	 //  @line: 56
	 assume ($negInt(($eqint(($z081), (0))))==1);
	 assert ($neref((r060), ($null))==1);
	 //  @line: 55
	$r1182 := $HeapVar[r060, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i1297), (0))==1);
	 assert ($ltint((i1297), ($refArrSize[$r1182[$arrSizeIdx]]))==1);
	 //  @line: 55
	$r1283 := $r1182[i1297];
	 goto Block107;
	 //  @line: 60
Block117:
	 //  @line: 60
	i1398 := 0;
	 goto Block118;
	 //  @line: 55
Block105:
	 //  @line: 55
	i1297 := $addint((i1297), (1));
	 goto Block98;
	 //  @line: 55
Block107:
	 goto Block109, Block108;
	 //  @line: 60
Block118:
	 assert ($neref((r060), ($null))==1);
	 //  @line: 60
	$r776 := $HeapVar[r060, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 60
	$i777 := $fresh13;
	 goto Block119;
	 //  @line: 55
Block109:
	 //  @line: 55
	 assume ($negInt(($eqref(($r1283), ($null))))==1);
	 assert ($neref((r060), ($null))==1);
	 //  @line: 55
	$r1384 := $HeapVar[r060, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i1196), (0))==1);
	 assert ($ltint((i1196), ($refArrSize[$r1384[$arrSizeIdx]]))==1);
	 //  @line: 55
	$r1485 := $r1384[i1196];
	 goto Block110;
	 //  @line: 55
Block108:
	 assume ($eqref(($r1283), ($null))==1);
	 goto Block105;
	 //  @line: 60
Block119:
	 goto Block120, Block122;
	 //  @line: 55
Block110:
	 goto Block113, Block111;
	 //  @line: 60
Block120:
	 assume ($geint((i1398), ($i777))==1);
	 goto Block121;
	 //  @line: 60
Block122:
	 //  @line: 60
	 assume ($negInt(($geint((i1398), ($i777))))==1);
	 assert ($neref((r060), ($null))==1);
	 //  @line: 61
	$r878 := $HeapVar[r060, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 assert ($geint((i1196), (0))==1);
	 assert ($ltint((i1196), ($fresh14))==1);
	 //  @line: 61
	$r979 := $r878[i1196];
	 assert ($geint((i1398), (0))==1);
	 assert ($ltint((i1398), ($refArrSize[$r979[$arrSizeIdx]]))==1);
	 //  @line: 61
	$r1080 := $r979[i1398];
	 goto Block123;
	 //  @line: 55
Block113:
	 //  @line: 55
	 assume ($negInt(($eqref(($r1485), ($null))))==1);
	 assert ($neref((r060), ($null))==1);
	 //  @line: 55
	$r1586 := $HeapVar[r060, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i1297), (0))==1);
	 assert ($ltint((i1297), ($refArrSize[$r1586[$arrSizeIdx]]))==1);
	 //  @line: 55
	$r1687 := $r1586[i1297];
	 assert ($neref(($r1687), ($null))==1);
	 //  @line: 55
	$d191 := $HeapVar[$r1687, double$Weight$w0];
	 assert ($neref((r060), ($null))==1);
	 //  @line: 55
	$r1788 := $HeapVar[r060, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i1196), (0))==1);
	 assert ($ltint((i1196), ($refArrSize[$r1788[$arrSizeIdx]]))==1);
	 //  @line: 55
	$r1889 := $r1788[i1196];
	 assert ($neref(($r1889), ($null))==1);
	 //  @line: 55
	$d090 := $HeapVar[$r1889, double$Weight$w0];
	 //  @line: 55
	$b892 := $cmpreal(($d191), ($d090));
	 goto Block114;
	 //  @line: 55
Block111:
	 assume ($eqref(($r1485), ($null))==1);
	 goto Block112;
	 //  @line: 50
Block121:
	 //  @line: 50
	i1095 := $addint((i1095), (1));
	 goto Block127;
	 //  @line: 61
Block123:
	 goto Block124, Block126;
	 //  @line: 55
Block114:
	 goto Block116, Block115;
	 //  @line: 57
Block112:
	 //  @line: 57
	i1196 := i1297;
	 goto Block105;
	 //  @line: 50
Block127:
	 goto Block84;
	 //  @line: 61
Block124:
	 assume ($eqref(($r1080), ($null))==1);
	 goto Block125;
	 //  @line: 61
Block126:
	 //  @line: 61
	 assume ($negInt(($eqref(($r1080), ($null))))==1);
	 assert ($neref((r060), ($null))==1);
	 //  @line: 62
	 call void$Graph$relax$2231((r060), (i1196), (i1398));
	 goto Block125;
	 //  @line: 55
Block116:
	 //  @line: 55
	 assume ($negInt(($geint(($b892), (0))))==1);
	 goto Block112;
	 //  @line: 55
Block115:
	 assume ($geint(($b892), (0))==1);
	 goto Block105;
	 //  @line: 60
Block125:
	 //  @line: 60
	i1398 := $addint((i1398), (1));
	 goto Block118;
}


	 //  @line: 5
// <Graph: void <init>(int)>
procedure void$Graph$$la$init$ra$$2228(__this : ref, $param_0 : int)
  modifies $HeapVar, $intArrSize, $refArrSize;
  requires ($neref((__this), ($null))==1);
 {
var i02 : int;
var i314 : int;
var $r713 : [int]ref;
var $r47 : [int][int]ref;
var $r510 : [int][int]ref;
var $i211 : int;
var $i18 : int;
var $r24 : [int]int;
var $r612 : [int][int]ref;
var $r13 : [int][int]ref;
var i415 : int;
var $r35 : [int]ref;
var r01 : ref;
Block16:
	r01 := __this;
	i02 := $param_0;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 6
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 //  @line: 7
	$r13 := $fresh1;
	 assume ($negInt(($fresh2))==1);
	 assert ($neref((r01), ($null))==1);
	 //  @line: 7
	$HeapVar[r01, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254] := $r13;
	 //  @line: 8
	$r24 := $reftointarr(($newvariable((18))));
	$intArrSize[$reftointarr(($newvariable((18))))[$arrSizeIdx]] := i02;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((18))))), ($intArrNull))))==1);
	 assert ($neref((r01), ($null))==1);
	 //  @line: 8
	$HeapVar[r01, int$lp$$rp$$Graph$pi255] := $r24;
	 //  @line: 9
	$r35 := $reftorefarr(($newvariable((19))));
	$refArrSize[$reftorefarr(($newvariable((19))))[$arrSizeIdx]] := i02;
	 assume ($negInt(($eqrefarray(($reftorefarr(($newvariable((19))))), ($refArrNull))))==1);
	 assert ($neref((r01), ($null))==1);
	 //  @line: 9
	$HeapVar[r01, Weight$lp$$rp$$Graph$d256] := $r35;
	 //  @line: 11
	i314 := 0;
	 goto Block20;
	 //  @line: 11
Block20:
	 assert ($neref((r01), ($null))==1);
	 //  @line: 11
	$r47 := $HeapVar[r01, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 11
	$i18 := $fresh2;
	 goto Block21;
	 //  @line: 11
Block21:
	 goto Block24, Block22;
	 //  @line: 11
Block24:
	 //  @line: 11
	 assume ($negInt(($geint((i314), ($i18))))==1);
	 //  @line: 12
	i415 := 0;
	 goto Block25;
	 //  @line: 11
Block22:
	 assume ($geint((i314), ($i18))==1);
	 goto Block23;
	 //  @line: 12
Block25:
	 assert ($neref((r01), ($null))==1);
	 //  @line: 12
	$r510 := $HeapVar[r01, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 12
	$i211 := $fresh3;
	 goto Block26;
	 //  @line: 15
Block23:
	 assert ($neref((r01), ($null))==1);
	 //  @line: 15
	 call void$Graph$init$2229((r01));
	 goto Block31;
	 //  @line: 12
Block26:
	 goto Block27, Block29;
	 //  @line: 16
Block31:
	 return;
	 //  @line: 12
Block27:
	 assume ($geint((i415), ($i211))==1);
	 goto Block28;
	 //  @line: 12
Block29:
	 //  @line: 12
	 assume ($negInt(($geint((i415), ($i211))))==1);
	 assert ($neref((r01), ($null))==1);
	 //  @line: 13
	$r612 := $HeapVar[r01, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 assert ($geint((i314), (0))==1);
	 assert ($ltint((i314), ($fresh4))==1);
	 //  @line: 13
	$r713 := $r612[i314];
	 assert ($geint((i415), (0))==1);
	 assert ($ltint((i415), ($refArrSize[$r713[$arrSizeIdx]]))==1);
	 //  @line: 13
	$r713[i415] := $null;
	 //  @line: 12
	i415 := $addint((i415), (1));
	 goto Block25;
	 //  @line: 11
Block28:
	 //  @line: 11
	i314 := $addint((i314), (1));
	 goto Block30;
	 //  @line: 11
Block30:
	 goto Block20;
}


// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 25
// <Graph: void addEdge(int,int,double)>
procedure void$Graph$addEdge$2230(__this : ref, $param_0 : int, $param_1 : int, $param_2 : realVar)  requires ($neref((__this), ($null))==1);
 {
var i127 : int;
var i023 : int;
var $r533 : [int]ref;
var $i226 : int;
var $r228 : [int][int]ref;
var $r125 : [int][int]ref;
var $i329 : int;
var $r330 : [int][int]ref;
var d032 : realVar;
var $r431 : ref;
var r024 : ref;
Block38:
	r024 := __this;
	i023 := $param_0;
	i127 := $param_1;
	d032 := $param_2;
	 goto Block39;
	 //  @line: 26
Block39:
	 goto Block42, Block40;
	 //  @line: 26
Block42:
	 //  @line: 26
	 assume ($negInt(($gtint((0), (i023))))==1);
	 assert ($neref((r024), ($null))==1);
	 //  @line: 28
	$r125 := $HeapVar[r024, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 28
	$i226 := $fresh6;
	 goto Block43;
	 //  @line: 26
Block40:
	 assume ($gtint((0), (i023))==1);
	 goto Block41;
	 //  @line: 28
Block43:
	 goto Block44, Block45;
	 //  @line: 28
Block41:
	 return;
	 //  @line: 28
Block44:
	 assume ($geint((i023), ($i226))==1);
	 goto Block41;
	 //  @line: 28
Block45:
	 //  @line: 28
	 assume ($negInt(($geint((i023), ($i226))))==1);
	 goto Block46;
	 //  @line: 28
Block46:
	 goto Block47, Block48;
	 //  @line: 28
Block47:
	 assume ($gtint((0), (i127))==1);
	 goto Block41;
	 //  @line: 28
Block48:
	 //  @line: 28
	 assume ($negInt(($gtint((0), (i127))))==1);
	 assert ($neref((r024), ($null))==1);
	 //  @line: 28
	$r228 := $HeapVar[r024, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 //  @line: 28
	$i329 := $fresh7;
	 goto Block49;
	 //  @line: 28
Block49:
	 goto Block50, Block51;
	 //  @line: 28
Block50:
	 assume ($geint((i127), ($i329))==1);
	 goto Block41;
	 //  @line: 28
Block51:
	 //  @line: 28
	 assume ($negInt(($geint((i127), ($i329))))==1);
	 assert ($neref((r024), ($null))==1);
	 //  @line: 27
	$r330 := $HeapVar[r024, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 assert ($geint((i023), (0))==1);
	 assert ($ltint((i023), ($fresh8))==1);
	 //  @line: 27
	$r533 := $r330[i023];
	 //  @line: 27
	$r431 := $newvariable((52));
	 assume ($neref(($newvariable((52))), ($null))==1);
	 assert ($neref(($r431), ($null))==1);
	 //  @line: 27
	 call void$Weight$$la$init$ra$$2236(($r431), (d032));
	 assert ($geint((i127), (0))==1);
	 assert ($ltint((i127), ($refArrSize[$r533[$arrSizeIdx]]))==1);
	 //  @line: 27
	$r533[i127] := $r431;
	 goto Block41;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 31
// <Graph: void relax(int,int)>
procedure void$Graph$relax$2231(__this : ref, $param_0 : int, $param_1 : int)  requires ($neref((__this), ($null))==1);
 {
var i139 : int;
var $r744 : [int]ref;
var i036 : int;
var $r643 : [int]int;
var $r542 : [int]ref;
var $r238 : ref;
var $d356 : realVar;
var r035 : ref;
var $r340 : [int]ref;
var $r137 : [int]ref;
var $r1050 : [int]ref;
var $r845 : ref;
var $r949 : ref;
var $d046 : realVar;
var $d457 : realVar;
var $d147 : realVar;
var r1558 : ref;
var $b248 : int;
var $r441 : ref;
var $r1353 : [int]ref;
var $r1151 : ref;
var $d255 : realVar;
var $r1252 : [int][int]ref;
var $r1454 : ref;
Block53:
	r035 := __this;
	i036 := $param_0;
	i139 := $param_1;
	 //  @line: 32
	r1558 := $null;
	 assert ($neref((r035), ($null))==1);
	 //  @line: 33
	$r137 := $HeapVar[r035, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i036), (0))==1);
	 assert ($ltint((i036), ($refArrSize[$r137[$arrSizeIdx]]))==1);
	 //  @line: 33
	$r238 := $r137[i036];
	 goto Block54;
	 //  @line: 33
Block54:
	 goto Block55, Block57;
	 //  @line: 33
Block55:
	 assume ($eqref(($r238), ($null))==1);
	 goto Block56;
	 //  @line: 33
Block57:
	 //  @line: 33
	 assume ($negInt(($eqref(($r238), ($null))))==1);
	 //  @line: 40
	$r949 := $newvariable((58));
	 assume ($neref(($newvariable((58))), ($null))==1);
	 assert ($neref((r035), ($null))==1);
	 //  @line: 40
	$r1050 := $HeapVar[r035, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i036), (0))==1);
	 assert ($ltint((i036), ($refArrSize[$r1050[$arrSizeIdx]]))==1);
	 //  @line: 40
	$r1151 := $r1050[i036];
	 assert ($neref(($r1151), ($null))==1);
	 //  @line: 40
	$d356 := $HeapVar[$r1151, double$Weight$w0];
	 assert ($neref((r035), ($null))==1);
	 //  @line: 40
	$r1252 := $HeapVar[r035, Weight$lp$$rp$$lp$$rp$$Graph$adjMat254];
	 assert ($geint((i036), (0))==1);
	 assert ($ltint((i036), ($fresh9))==1);
	 //  @line: 40
	$r1353 := $r1252[i036];
	 assert ($geint((i139), (0))==1);
	 assert ($ltint((i139), ($refArrSize[$r1353[$arrSizeIdx]]))==1);
	 //  @line: 40
	$r1454 := $r1353[i139];
	 assert ($neref(($r1454), ($null))==1);
	 //  @line: 40
	$d255 := $HeapVar[$r1454, double$Weight$w0];
	 //  @line: 40
	$d457 := $addreal(($d356), ($d255));
	 assert ($neref(($r949), ($null))==1);
	 //  @line: 40
	 call void$Weight$$la$init$ra$$2236(($r949), ($d457));
	 //  @line: 40
	r1558 := $r949;
	 goto Block56;
	 //  @line: 35
Block56:
	 goto Block61, Block59;
	 //  @line: 35
Block61:
	 //  @line: 35
	 assume ($negInt(($eqref((r1558), ($null))))==1);
	 assert ($neref((r035), ($null))==1);
	 //  @line: 36
	$r340 := $HeapVar[r035, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i139), (0))==1);
	 assert ($ltint((i139), ($refArrSize[$r340[$arrSizeIdx]]))==1);
	 //  @line: 36
	$r441 := $r340[i139];
	 goto Block62;
	 //  @line: 35
Block59:
	 assume ($eqref((r1558), ($null))==1);
	 goto Block60;
	 //  @line: 36
Block62:
	 goto Block63, Block65;
	 //  @line: 40
Block60:
	 return;
	 //  @line: 36
Block63:
	 assume ($eqref(($r441), ($null))==1);
	 goto Block64;
	 //  @line: 36
Block65:
	 //  @line: 36
	 assume ($negInt(($eqref(($r441), ($null))))==1);
	 assert ($neref((r035), ($null))==1);
	 //  @line: 40
	$r744 := $HeapVar[r035, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i139), (0))==1);
	 assert ($ltint((i139), ($refArrSize[$r744[$arrSizeIdx]]))==1);
	 //  @line: 40
	$r845 := $r744[i139];
	 assert ($neref(($r845), ($null))==1);
	 //  @line: 40
	$d147 := $HeapVar[$r845, double$Weight$w0];
	 assert ($neref((r1558), ($null))==1);
	 //  @line: 40
	$d046 := $HeapVar[r1558, double$Weight$w0];
	 //  @line: 40
	$b248 := $cmpreal(($d147), ($d046));
	 goto Block66;
	 //  @line: 37
Block64:
	 assert ($neref((r035), ($null))==1);
	 //  @line: 37
	$r542 := $HeapVar[r035, Weight$lp$$rp$$Graph$d256];
	 assert ($geint((i139), (0))==1);
	 assert ($ltint((i139), ($refArrSize[$r542[$arrSizeIdx]]))==1);
	 //  @line: 37
	$r542[i139] := r1558;
	 assert ($neref((r035), ($null))==1);
	 //  @line: 38
	$r643 := $HeapVar[r035, int$lp$$rp$$Graph$pi255];
	 assert ($geint((i139), (0))==1);
	 assert ($ltint((i139), ($intArrSize[$r643[$arrSizeIdx]]))==1);
	 //  @line: 38
	$r643[i139] := i036;
	 goto Block60;
	 //  @line: 40
Block66:
	 goto Block67, Block68;
	 //  @line: 40
Block67:
	 assume ($leint(($b248), (0))==1);
	 goto Block60;
	 //  @line: 40
Block68:
	 //  @line: 40
	 assume ($negInt(($leint(($b248), (0))))==1);
	 goto Block64;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


