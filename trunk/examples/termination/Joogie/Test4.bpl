type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var List$List$tail255 : Field ref;
var java.lang.Object$List$head254 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// <Test4: void <init>()>
procedure void$Test4$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 4
// <List: void <init>(java.lang.Object,List)>
procedure void$List$$la$init$ra$$2232(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r062 : ref;
var r264 : ref;
var r163 : ref;
Block78:
	r062 := __this;
	r163 := $param_0;
	r264 := $param_1;
	 assert ($neref((r062), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r062));
	 assert ($neref((r062), ($null))==1);
	 //  @line: 6
	$HeapVar[r062, java.lang.Object$List$head254] := r163;
	 assert ($neref((r062), ($null))==1);
	 //  @line: 7
	$HeapVar[r062, List$List$tail255] := r264;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 22
// <Test4: void rec(List,List,List)>
procedure void$Test4$rec$2230($param_0 : ref, $param_1 : ref, $param_2 : ref) {
var $i747 : int;
var $i848 : int;
var r139 : ref;
var $r451 : ref;
var $i343 : int;
var $r855 : ref;
var $i545 : int;
var $i140 : int;
var $i038 : int;
var $i949 : int;
var $i444 : int;
var $r956 : ref;
var $i242 : int;
var r037 : ref;
var r241 : ref;
var $r350 : ref;
var $i646 : int;
var $r552 : ref;
var $r754 : ref;
var $r653 : ref;
Block49:
	r037 := $param_0;
	r139 := $param_1;
	r241 := $param_2;
	 //  @line: 23
	 call $i038 := int$Test4$length$2231((r037));
	 //  @line: 23
	 call $i140 := int$Test4$length$2231((r139));
	 //  @line: 23
	$i242 := $addint(($i038), ($i140));
	 //  @line: 23
	 call $i343 := int$Test4$length$2231((r241));
	 //  @line: 23
	$i444 := $mulint(($i343), (5));
	 //  @line: 23
	$i545 := $addint(($i242), ($i444));
	 goto Block50;
	 //  @line: 23
Block50:
	 goto Block51, Block53;
	 //  @line: 23
Block51:
	 assume ($leint(($i545), (0))==1);
	 goto Block52;
	 //  @line: 23
Block53:
	 //  @line: 23
	 assume ($negInt(($leint(($i545), (0))))==1);
	 //  @line: 24
	 call $i646 := int$Test4$length$2231((r037));
	 //  @line: 24
	$i747 := $modint(($i646), (2));
	 goto Block54;
	 //  @line: 32
Block52:
	 return;
	 //  @line: 24
Block54:
	 goto Block55, Block57;
	 //  @line: 24
Block55:
	 assume ($neint(($i747), (1))==1);
	 goto Block56;
	 //  @line: 24
Block57:
	 //  @line: 24
	 assume ($negInt(($neint(($i747), (1))))==1);
	 assert ($neref((r037), ($null))==1);
	 //  @line: 25
	 call $r956 := List$List$getTail$2233((r037));
	 //  @line: 25
	 call void$Test4$rec$2230(($r956), (r139), (r241));
	 goto Block52;
	 //  @line: 26
Block56:
	 //  @line: 26
	 call $i848 := int$Test4$length$2231((r139));
	 goto Block58;
	 //  @line: 26
Block58:
	 //  @line: 26
	 call $i949 := int$Test4$length$2231((r241));
	 goto Block59;
	 //  @line: 26
Block59:
	 goto Block60, Block62;
	 //  @line: 26
Block60:
	 assume ($leint(($i848), ($i949))==1);
	 goto Block61;
	 //  @line: 26
Block62:
	 //  @line: 26
	 assume ($negInt(($leint(($i848), ($i949))))==1);
	 assert ($neref((r139), ($null))==1);
	 //  @line: 27
	 call $r855 := List$List$getTail$2233((r139));
	 //  @line: 27
	 call void$Test4$rec$2230((r037), ($r855), (r241));
	 goto Block52;
	 //  @line: 28
Block61:
	 goto Block65, Block63;
	 //  @line: 28
Block65:
	 //  @line: 28
	 assume ($negInt(($neref((r241), ($null))))==1);
	 goto Block66;
	 //  @line: 28
Block63:
	 assume ($neref((r241), ($null))==1);
	 goto Block64;
	 //  @line: 29
Block66:
	 return;
	 //  @line: 31
Block64:
	 //  @line: 31
	$r350 := $newvariable((67));
	 assume ($neref(($newvariable((67))), ($null))==1);
	 goto Block68;
	 //  @line: 31
Block68:
	 //  @line: 31
	$r451 := $newvariable((69));
	 assume ($neref(($newvariable((69))), ($null))==1);
	 assert ($neref(($r451), ($null))==1);
	 //  @line: 31
	 call void$java.lang.Object$$la$init$ra$$28(($r451));
	 assert ($neref(($r350), ($null))==1);
	 //  @line: 31
	 call void$List$$la$init$ra$$2232(($r350), ($r451), (r037));
	 //  @line: 31
	$r552 := $newvariable((70));
	 assume ($neref(($newvariable((70))), ($null))==1);
	 //  @line: 31
	$r653 := $newvariable((71));
	 assume ($neref(($newvariable((71))), ($null))==1);
	 assert ($neref(($r653), ($null))==1);
	 //  @line: 31
	 call void$java.lang.Object$$la$init$ra$$28(($r653));
	 assert ($neref(($r552), ($null))==1);
	 //  @line: 31
	 call void$List$$la$init$ra$$2232(($r552), ($r653), (r139));
	 assert ($neref((r241), ($null))==1);
	 //  @line: 31
	 call $r754 := List$List$getTail$2233((r241));
	 //  @line: 31
	 call void$Test4$rec$2230(($r350), ($r552), ($r754));
	 goto Block52;
}


// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



	 //  @line: 2
// <Test4: void main(java.lang.String[])>
procedure void$Test4$main$2229($param_0 : [int]ref) {
var $r524 : ref;
var $i513 : int;
var $r26 : ref;
var $i1220 : int;
var r834 : ref;
var $i04 : int;
var $r322 : ref;
var $i310 : int;
var $r935 : ref;
var $i715 : int;
var r733 : ref;
var $r625 : ref;
var $i816 : int;
var $i1430 : int;
var $i1632 : int;
var $i1018 : int;
var r1036 : ref;
var $i614 : int;
var $i17 : int;
var $i1119 : int;
var $i1321 : int;
var $i917 : int;
var $r12 : ref;
var r03 : [int]ref;
var $i29 : int;
var $i412 : int;
var $i1531 : int;
var $r423 : ref;
Block17:
	r03 := $param_0;
	 //  @line: 3
	$r12 := $newvariable((18));
	 assume ($neref(($newvariable((18))), ($null))==1);
	 //  @line: 3
	$i04 := $refArrSize[r03[$arrSizeIdx]];
	 assert ($neref(($r12), ($null))==1);
	 //  @line: 3
	 call void$List$$la$init$ra$$2234(($r12), ($i04));
	 //  @line: 3
	r733 := $r12;
	 //  @line: 4
	$r26 := $newvariable((19));
	 assume ($neref(($newvariable((19))), ($null))==1);
	 //  @line: 4
	$i17 := $refArrSize[r03[$arrSizeIdx]];
	 assert ($neref(($r26), ($null))==1);
	 //  @line: 4
	 call void$List$$la$init$ra$$2234(($r26), ($i17));
	 //  @line: 4
	r834 := $r26;
	 //  @line: 5
	$i29 := $refArrSize[r03[$arrSizeIdx]];
	 //  @line: 5
	$i310 := $modint(($i29), (2));
	 goto Block20;
	 //  @line: 5
Block20:
	 goto Block21, Block23;
	 //  @line: 5
Block21:
	 assume ($neint(($i310), (0))==1);
	 goto Block22;
	 //  @line: 5
Block23:
	 //  @line: 5
	 assume ($negInt(($neint(($i310), (0))))==1);
	 //  @line: 8
	$r935 := $newvariable((24));
	 assume ($neref(($newvariable((24))), ($null))==1);
	 //  @line: 8
	$i1531 := $refArrSize[r03[$arrSizeIdx]];
	 //  @line: 8
	$i1430 := $refArrSize[r03[$arrSizeIdx]];
	 //  @line: 8
	$i1632 := $mulint(($i1531), ($i1430));
	 assert ($neref(($r935), ($null))==1);
	 //  @line: 8
	 call void$List$$la$init$ra$$2234(($r935), ($i1632));
	 goto Block25;
	 //  @line: 8
Block22:
	 //  @line: 8
	$r935 := r834;
	 goto Block25;
	 //  @line: 5
Block25:
	 //  @line: 5
	r1036 := $r935;
	 goto Block26;
	 //  @line: 8
Block26:
	 //  @line: 8
	 call $i412 := int$Test4$length$2231((r733));
	 //  @line: 8
	 call $i513 := int$Test4$length$2231((r834));
	 //  @line: 8
	$i614 := $addint(($i412), ($i513));
	 //  @line: 8
	 call $i715 := int$Test4$length$2231((r1036));
	 //  @line: 8
	$i816 := $mulint(($i715), (5));
	 //  @line: 8
	$i917 := $addint(($i614), ($i816));
	 goto Block27;
	 //  @line: 8
Block27:
	 goto Block30, Block28;
	 //  @line: 8
Block30:
	 //  @line: 8
	 assume ($negInt(($leint(($i917), (0))))==1);
	 //  @line: 9
	 call $i1018 := int$Test4$length$2231((r733));
	 //  @line: 9
	$i1119 := $modint(($i1018), (2));
	 goto Block31;
	 //  @line: 8
Block28:
	 assume ($leint(($i917), (0))==1);
	 goto Block29;
	 //  @line: 9
Block31:
	 goto Block34, Block32;
	 //  @line: 20
Block29:
	 return;
	 //  @line: 9
Block34:
	 //  @line: 9
	 assume ($negInt(($neint(($i1119), (1))))==1);
	 assert ($neref((r733), ($null))==1);
	 //  @line: 10
	 call r733 := List$List$getTail$2233((r733));
	 goto Block26;
	 //  @line: 9
Block32:
	 assume ($neint(($i1119), (1))==1);
	 goto Block33;
	 //  @line: 11
Block33:
	 //  @line: 11
	 call $i1220 := int$Test4$length$2231((r834));
	 goto Block35;
	 //  @line: 11
Block35:
	 //  @line: 11
	 call $i1321 := int$Test4$length$2231((r1036));
	 goto Block36;
	 //  @line: 11
Block36:
	 goto Block39, Block37;
	 //  @line: 11
Block39:
	 //  @line: 11
	 assume ($negInt(($leint(($i1220), ($i1321))))==1);
	 assert ($neref((r834), ($null))==1);
	 //  @line: 12
	 call r834 := List$List$getTail$2233((r834));
	 goto Block26;
	 //  @line: 11
Block37:
	 assume ($leint(($i1220), ($i1321))==1);
	 goto Block38;
	 //  @line: 13
Block38:
	 goto Block40, Block42;
	 //  @line: 13
Block40:
	 assume ($neref((r1036), ($null))==1);
	 goto Block41;
	 //  @line: 13
Block42:
	 //  @line: 13
	 assume ($negInt(($neref((r1036), ($null))))==1);
	 goto Block43;
	 //  @line: 16
Block41:
	 //  @line: 16
	$r322 := $newvariable((44));
	 assume ($neref(($newvariable((44))), ($null))==1);
	 goto Block45;
	 //  @line: 14
Block43:
	 goto Block29;
	 //  @line: 16
Block45:
	 //  @line: 16
	$r423 := $newvariable((46));
	 assume ($neref(($newvariable((46))), ($null))==1);
	 assert ($neref(($r423), ($null))==1);
	 //  @line: 16
	 call void$java.lang.Object$$la$init$ra$$28(($r423));
	 assert ($neref(($r322), ($null))==1);
	 //  @line: 16
	 call void$List$$la$init$ra$$2232(($r322), ($r423), (r733));
	 //  @line: 16
	r733 := $r322;
	 //  @line: 17
	$r524 := $newvariable((47));
	 assume ($neref(($newvariable((47))), ($null))==1);
	 //  @line: 17
	$r625 := $newvariable((48));
	 assume ($neref(($newvariable((48))), ($null))==1);
	 assert ($neref(($r625), ($null))==1);
	 //  @line: 17
	 call void$java.lang.Object$$la$init$ra$$28(($r625));
	 assert ($neref(($r524), ($null))==1);
	 //  @line: 17
	 call void$List$$la$init$ra$$2232(($r524), ($r625), (r834));
	 //  @line: 17
	r834 := $r524;
	 assert ($neref((r1036), ($null))==1);
	 //  @line: 18
	 call r1036 := List$List$getTail$2233((r1036));
	 goto Block26;
}


// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 10
// <List: List getTail()>
procedure List$List$getTail$2233(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r065 : ref;
var $r166 : ref;
Block79:
	r065 := __this;
	 assert ($neref((r065), ($null))==1);
	 //  @line: 11
	$r166 := $HeapVar[r065, List$List$tail255];
	 //  @line: 11
	__ret := $r166;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 34
// <Test4: int length(List)>
procedure int$Test4$length$2231($param_0 : ref) returns (__ret : int) {
var $i060 : int;
var $r159 : ref;
var r057 : ref;
var $i161 : int;
Block72:
	r057 := $param_0;
	 goto Block73;
	 //  @line: 35
Block73:
	 goto Block74, Block76;
	 //  @line: 35
Block74:
	 assume ($neref((r057), ($null))==1);
	 goto Block75;
	 //  @line: 35
Block76:
	 //  @line: 35
	 assume ($negInt(($neref((r057), ($null))))==1);
	 //  @line: 36
	__ret := 0;
	 return;
	 //  @line: 38
Block75:
	 assert ($neref((r057), ($null))==1);
	 //  @line: 38
	 call $r159 := List$List$getTail$2233((r057));
	 goto Block77;
	 //  @line: 38
Block77:
	 //  @line: 38
	 call $i060 := int$Test4$length$2231(($r159));
	 //  @line: 38
	$i161 := $addint((1), ($i060));
	 //  @line: 38
	__ret := $i161;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 13
// <List: void <init>(int)>
procedure void$List$$la$init$ra$$2234(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r169 : ref;
var r067 : ref;
var i068 : int;
var $i170 : int;
Block80:
	r067 := __this;
	i068 := $param_0;
	 assert ($neref((r067), ($null))==1);
	 //  @line: 14
	 call void$java.lang.Object$$la$init$ra$$28((r067));
	 goto Block81;
	 //  @line: 15
Block81:
	 goto Block84, Block82;
	 //  @line: 15
Block84:
	 //  @line: 15
	 assume ($negInt(($leint((i068), (0))))==1);
	 //  @line: 16
	$r169 := $newvariable((85));
	 assume ($neref(($newvariable((85))), ($null))==1);
	 //  @line: 16
	$i170 := $subint((i068), (1));
	 assert ($neref(($r169), ($null))==1);
	 //  @line: 16
	 call void$List$$la$init$ra$$2234(($r169), ($i170));
	 assert ($neref((r067), ($null))==1);
	 //  @line: 16
	$HeapVar[r067, List$List$tail255] := $r169;
	 goto Block83;
	 //  @line: 15
Block82:
	 assume ($leint((i068), (0))==1);
	 goto Block83;
	 //  @line: 17
Block83:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


