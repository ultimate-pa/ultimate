type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var List$List$next254 : Field ref;
var int$List$val0 : Field int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <AProVERec01: void main(java.lang.String[])>
procedure void$AProVERec01$main$2229($param_0 : [int]ref)
  modifies $stringSize;
 {
var $i05 : int;
var $r22 : ref;
var $r34 : ref;
var $i18 : int;
var r03 : [int]ref;
var r16 : ref;
var $r47 : ref;
Block17:
	r03 := $param_0;
	 //  @line: 3
	$r22 := $newvariable((18));
	 assume ($neref(($newvariable((18))), ($null))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($refArrSize[r03[$arrSizeIdx]]))==1);
	 //  @line: 3
	$r34 := r03[0];
	$i05 := $stringSize[$r34];
	 assert ($neref(($r22), ($null))==1);
	 //  @line: 3
	 call void$List$$la$init$ra$$2231(($r22), ($i05), ($null));
	 //  @line: 3
	r16 := $r22;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($refArrSize[r03[$arrSizeIdx]]))==1);
	 //  @line: 4
	$r47 := r03[1];
	$i18 := $stringSize[$r47];
	 //  @line: 4
	 call void$AProVERec01$rec$2230(($i18), (r16));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 20
// <List: void <init>(int,List)>
procedure void$List$$la$init$ra$$2231(__this : ref, $param_0 : int, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r015 : ref;
var r117 : ref;
var i016 : int;
Block24:
	r015 := __this;
	i016 := $param_0;
	r117 := $param_1;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 21
	 call void$java.lang.Object$$la$init$ra$$28((r015));
	 assert ($neref((r015), ($null))==1);
	 //  @line: 18
	$HeapVar[r015, int$List$val0] := 0;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 19
	$HeapVar[r015, List$List$next254] := $null;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 22
	$HeapVar[r015, int$List$val0] := i016;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 23
	$HeapVar[r015, List$List$next254] := r117;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// <AProVERec01: void <init>()>
procedure void$AProVERec01$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 26
// <List: void add(int)>
procedure void$List$add$2232(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r119 : ref;
var r018 : ref;
var $r322 : ref;
var i020 : int;
var $r221 : ref;
Block25:
	r018 := __this;
	i020 := $param_0;
	 assert ($neref((r018), ($null))==1);
	 //  @line: 27
	$r119 := $HeapVar[r018, List$List$next254];
	 goto Block26;
	 //  @line: 27
Block26:
	 goto Block29, Block27;
	 //  @line: 27
Block29:
	 //  @line: 27
	 assume ($negInt(($neref(($r119), ($null))))==1);
	 //  @line: 28
	$r322 := $newvariable((30));
	 assume ($neref(($newvariable((30))), ($null))==1);
	 assert ($neref(($r322), ($null))==1);
	 //  @line: 28
	 call void$List$$la$init$ra$$2231(($r322), (i020), ($null));
	 assert ($neref((r018), ($null))==1);
	 //  @line: 28
	$HeapVar[r018, List$List$next254] := $r322;
	 goto Block31;
	 //  @line: 27
Block27:
	 assume ($neref(($r119), ($null))==1);
	 goto Block28;
	 //  @line: 32
Block31:
	 return;
	 //  @line: 30
Block28:
	 assert ($neref((r018), ($null))==1);
	 //  @line: 30
	$r221 := $HeapVar[r018, List$List$next254];
	 goto Block32;
	 //  @line: 30
Block32:
	 assert ($neref(($r221), ($null))==1);
	 //  @line: 30
	 call void$List$add$2232(($r221), (i020));
	 goto Block31;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


	 //  @line: 7
// <AProVERec01: void rec(int,List)>
procedure void$AProVERec01$rec$2230($param_0 : int, $param_1 : ref) {
var i314 : int;
var i09 : int;
var i213 : int;
var $i112 : int;
var r011 : ref;
Block19:
	i09 := $param_0;
	r011 := $param_1;
	 //  @line: 8
	i213 := $mulint((3), (i09));
	 goto Block20;
	 //  @line: 9
Block20:
	 goto Block21, Block23;
	 //  @line: 9
Block21:
	 assume ($geint((i213), (100000))==1);
	 goto Block22;
	 //  @line: 9
Block23:
	 //  @line: 9
	 assume ($negInt(($geint((i213), (100000))))==1);
	 //  @line: 10
	$i112 := $addint((i213), (1));
	 //  @line: 10
	 call void$AProVERec01$rec$2230(($i112), (r011));
	 goto Block22;
	 //  @line: 12
Block22:
	 //  @line: 12
	i314 := $mulint((i213), (2));
	 assert ($neref((r011), ($null))==1);
	 //  @line: 13
	 call void$List$add$2232((r011), (i314));
	 return;
}


