type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.String$lp$$rp$$MirrorMultiTreeRec.Random$args256 : [int]ref;
var MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.TreeList$next255 : Field ref;
var MirrorMultiTreeRec.Tree$MirrorMultiTreeRec.TreeList$value254 : Field ref;
var int$MirrorMultiTreeRec.Random$index0 : int;
var MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.Tree$children257 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 3
// <MirrorMultiTreeRec.Random: void <clinit>()>
procedure void$MirrorMultiTreeRec.Random$$la$clinit$ra$$2234()
  modifies int$MirrorMultiTreeRec.Random$index0;
 {
	 //  @line: 4
Block31:
	 //  @line: 4
	int$MirrorMultiTreeRec.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 5
// <MirrorMultiTreeRec.TreeList: void <init>(MirrorMultiTreeRec.Tree,MirrorMultiTreeRec.TreeList)>
procedure void$MirrorMultiTreeRec.TreeList$$la$init$ra$$2231(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r117 : ref;
var r218 : ref;
var r016 : ref;
Block28:
	r016 := __this;
	r117 := $param_0;
	r218 := $param_1;
	 assert ($neref((r016), ($null))==1);
	 //  @line: 6
	 call void$java.lang.Object$$la$init$ra$$28((r016));
	 assert ($neref((r016), ($null))==1);
	 //  @line: 7
	$HeapVar[r016, MirrorMultiTreeRec.Tree$MirrorMultiTreeRec.TreeList$value254] := r117;
	 assert ($neref((r016), ($null))==1);
	 //  @line: 8
	$HeapVar[r016, MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.TreeList$next255] := r218;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 6
// <MirrorMultiTreeRec.Random: int random()>
procedure int$MirrorMultiTreeRec.Random$random$2233() returns (__ret : int)
  modifies $stringSize, int$MirrorMultiTreeRec.Random$index0;
 {
var $i224 : int;
var $i123 : int;
var $r121 : [int]ref;
var $i020 : int;
var r022 : ref;
var $i325 : int;
	 //  @line: 7
Block30:
	 //  @line: 7
	$r121 := java.lang.String$lp$$rp$$MirrorMultiTreeRec.Random$args256;
	 //  @line: 7
	$i020 := int$MirrorMultiTreeRec.Random$index0;
	 assert ($geint(($i020), (0))==1);
	 assert ($ltint(($i020), ($refArrSize[$r121[$arrSizeIdx]]))==1);
	 //  @line: 7
	r022 := $r121[$i020];
	 //  @line: 8
	$i123 := int$MirrorMultiTreeRec.Random$index0;
	 //  @line: 8
	$i224 := $addint(($i123), (1));
	 //  @line: 8
	int$MirrorMultiTreeRec.Random$index0 := $i224;
	$i325 := $stringSize[r022];
	 //  @line: 9
	__ret := $i325;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



	 //  @line: 11
// <MirrorMultiTreeRec.MirrorMultiTreeRec: MirrorMultiTreeRec.TreeList mirror(MirrorMultiTreeRec.TreeList)>
procedure MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.MirrorMultiTreeRec$mirror$2230($param_0 : ref) returns (__ret : ref)
  modifies $HeapVar;
 {
var r212 : ref;
var r110 : ref;
var $r39 : ref;
var r08 : ref;
var $r514 : ref;
var $r413 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block18:
	r08 := $param_0;
	 goto Block19;
	 //  @line: 12
Block19:
	 goto Block22, Block20;
	 //  @line: 12
Block22:
	 //  @line: 12
	 assume ($negInt(($eqref((r08), ($null))))==1);
	 assert ($neref((r08), ($null))==1);
	 //  @line: 12
	$r39 := $HeapVar[r08, MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.TreeList$next255];
	 goto Block23;
	 //  @line: 12
Block20:
	 assume ($eqref((r08), ($null))==1);
	 goto Block21;
	 //  @line: 12
Block23:
	 goto Block24, Block26;
	 //  @line: 12
Block21:
	 //  @line: 12
	__ret := r08;
	 return;
	 //  @line: 12
Block24:
	 assume ($neref(($r39), ($null))==1);
	 goto Block25;
	 //  @line: 12
Block26:
	 //  @line: 12
	 assume ($negInt(($neref(($r39), ($null))))==1);
	 goto Block21;
	 //  @line: 13
Block25:
	 assert ($neref((r08), ($null))==1);
	 //  @line: 13
	r110 := $HeapVar[r08, MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.TreeList$next255];
	 goto Block27;
	 //  @line: 14
Block27:
	 //  @line: 14
	 call r212 := MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.MirrorMultiTreeRec$mirror$2230((r110));
	 assert ($neref((r08), ($null))==1);
	 //  @line: 15
	$HeapVar[r08, MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.TreeList$next255] := $null;
	 assert ($neref((r08), ($null))==1);
	 //  @line: 16
	$r413 := $HeapVar[r08, MirrorMultiTreeRec.Tree$MirrorMultiTreeRec.TreeList$value254];
	 assert ($neref(($r413), ($null))==1);
	 //  @line: 16
	$r514 := $HeapVar[$r413, MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.Tree$children257];
	 //  @line: 16
	 call $freshlocal0 := MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.MirrorMultiTreeRec$mirror$2230(($r514));
	 assert ($neref((r110), ($null))==1);
	 //  @line: 17
	$HeapVar[r110, MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.TreeList$next255] := r08;
	 //  @line: 18
	__ret := r212;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 1
// <MirrorMultiTreeRec.Random: void <init>()>
procedure void$MirrorMultiTreeRec.Random$$la$init$ra$$2232(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r019 : ref;
Block29:
	r019 := __this;
	 assert ($neref((r019), ($null))==1);
	 //  @line: 2
	 call void$java.lang.Object$$la$init$ra$$28((r019));
	 return;
}


	 //  @line: 13
// <MirrorMultiTreeRec.Tree: MirrorMultiTreeRec.Tree createNode()>
procedure MirrorMultiTreeRec.Tree$MirrorMultiTreeRec.Tree$createNode$2237() returns (__ret : ref) {
var $r131 : ref;
var r032 : ref;
	 //  @line: 14
Block35:
	 //  @line: 14
	$r131 := $newvariable((36));
	 assume ($neref(($newvariable((36))), ($null))==1);
	 assert ($neref(($r131), ($null))==1);
	 //  @line: 14
	 call void$MirrorMultiTreeRec.Tree$$la$init$ra$$2235(($r131));
	 //  @line: 14
	r032 := $r131;
	 //  @line: 15
	__ret := r032;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


	 //  @line: 2
// <MirrorMultiTreeRec.MirrorMultiTreeRec: void <init>()>
procedure void$MirrorMultiTreeRec.MirrorMultiTreeRec$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


	 //  @line: 9
// <MirrorMultiTreeRec.Tree: void addChild(MirrorMultiTreeRec.Tree)>
procedure void$MirrorMultiTreeRec.Tree$addChild$2236(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r129 : ref;
var $r330 : ref;
var $r228 : ref;
var r027 : ref;
Block33:
	r027 := __this;
	r129 := $param_0;
	 //  @line: 10
	$r228 := $newvariable((34));
	 assume ($neref(($newvariable((34))), ($null))==1);
	 assert ($neref((r027), ($null))==1);
	 //  @line: 10
	$r330 := $HeapVar[r027, MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.Tree$children257];
	 assert ($neref(($r228), ($null))==1);
	 //  @line: 10
	 call void$MirrorMultiTreeRec.TreeList$$la$init$ra$$2231(($r228), (r129), ($r330));
	 assert ($neref((r027), ($null))==1);
	 //  @line: 10
	$HeapVar[r027, MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.Tree$children257] := $r228;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 18
// <MirrorMultiTreeRec.Tree: MirrorMultiTreeRec.Tree createTree(int)>
procedure MirrorMultiTreeRec.Tree$MirrorMultiTreeRec.Tree$createTree$2238($param_0 : int) returns (__ret : ref) {
var $r134 : ref;
var i037 : int;
var $r240 : ref;
var i443 : int;
var $i139 : int;
var r035 : ref;
var i342 : int;
var i241 : int;
Block37:
	i241 := $param_0;
	 goto Block38;
	 //  @line: 19
Block38:
	 goto Block41, Block39;
	 //  @line: 19
Block41:
	 //  @line: 19
	 assume ($negInt(($gtint((i241), (0))))==1);
	 //  @line: 20
	__ret := $null;
	 return;
	 //  @line: 19
Block39:
	 assume ($gtint((i241), (0))==1);
	 goto Block40;
	 //  @line: 22
Block40:
	 //  @line: 22
	i342 := $subint((i241), (1));
	 goto Block42;
	 //  @line: 24
Block42:
	 //  @line: 24
	$r134 := $newvariable((43));
	 assume ($neref(($newvariable((43))), ($null))==1);
	 assert ($neref(($r134), ($null))==1);
	 //  @line: 24
	 call void$MirrorMultiTreeRec.Tree$$la$init$ra$$2235(($r134));
	 //  @line: 24
	r035 := $r134;
	 //  @line: 25
	 call i037 := int$MirrorMultiTreeRec.Random$random$2233();
	 //  @line: 27
	i443 := 0;
	 goto Block44;
	 //  @line: 27
Block44:
	 goto Block47, Block45;
	 //  @line: 27
Block47:
	 //  @line: 27
	 assume ($negInt(($geint((i443), (i037))))==1);
	 //  @line: 28
	$i139 := $subint((i342), (1));
	 //  @line: 28
	 call $r240 := MirrorMultiTreeRec.Tree$MirrorMultiTreeRec.Tree$createTree$2238(($i139));
	 assert ($neref((r035), ($null))==1);
	 //  @line: 28
	 call void$MirrorMultiTreeRec.Tree$addChild$2236((r035), ($r240));
	 //  @line: 27
	i443 := $addint((i443), (1));
	 goto Block44;
	 //  @line: 27
Block45:
	 assume ($geint((i443), (i037))==1);
	 goto Block46;
	 //  @line: 31
Block46:
	 //  @line: 31
	__ret := r035;
	 return;
}


	 //  @line: 4
// <MirrorMultiTreeRec.MirrorMultiTreeRec: void main(java.lang.String[])>
procedure void$MirrorMultiTreeRec.MirrorMultiTreeRec$main$2229($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$MirrorMultiTreeRec.Random$args256;
 {
var r15 : ref;
var $i03 : int;
var r02 : [int]ref;
var $r26 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block17:
	r02 := $param_0;
	 //  @line: 5
	java.lang.String$lp$$rp$$MirrorMultiTreeRec.Random$args256 := r02;
	 //  @line: 7
	 call $i03 := int$MirrorMultiTreeRec.Random$random$2233();
	 //  @line: 7
	 call r15 := MirrorMultiTreeRec.Tree$MirrorMultiTreeRec.Tree$createTree$2238(($i03));
	 assert ($neref((r15), ($null))==1);
	 //  @line: 8
	$r26 := $HeapVar[r15, MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.Tree$children257];
	 //  @line: 8
	 call $freshlocal0 := MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.MirrorMultiTreeRec$mirror$2230(($r26));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 4
// <MirrorMultiTreeRec.Tree: void <init>()>
procedure void$MirrorMultiTreeRec.Tree$$la$init$ra$$2235(__this : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r026 : ref;
Block32:
	r026 := __this;
	 assert ($neref((r026), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r026));
	 assert ($neref((r026), ($null))==1);
	 //  @line: 6
	$HeapVar[r026, MirrorMultiTreeRec.TreeList$MirrorMultiTreeRec.Tree$children257] := $null;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


