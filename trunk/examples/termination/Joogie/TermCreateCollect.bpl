type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 
const unique Terms.Variable : classConst ;
const unique Terms.FunctionSymbol : classConst ;
const unique Terms.FunctionApplication : classConst ;



var Terms.FunctionSymbol$Terms.FunctionApplication$fs254 : Field ref;
var java.lang.Object$Terms.List$value256 : Field ref;
var Terms.List$Terms.List$next257 : Field ref;
var int$Terms.Random$index0 : int;
var java.lang.Object$Terms.Map$key258 : Field ref;
var Terms.List$Terms.FunctionApplication$args255 : Field ref;
var java.lang.Object$Terms.Map$value259 : Field ref;
var int$Terms.Variable$number0 : Field int;
var java.lang.String$lp$$rp$$Terms.Random$args261 : [int]ref;
var int$Terms.FunctionSymbol$number0 : Field int;
var Terms.Map$Terms.Map$next260 : Field ref;


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 7
// <Terms.Random: int random()>
procedure int$Terms.Random$random$2257() returns (__ret : int)
  modifies $stringSize, int$Terms.Random$index0;
 {
var $r1142 : [int]ref;
var $i0141 : int;
var r0143 : ref;
var $i1144 : int;
var $i3146 : int;
var $i2145 : int;
	 //  @line: 8
Block144:
	 //  @line: 8
	$r1142 := java.lang.String$lp$$rp$$Terms.Random$args261;
	 //  @line: 8
	$i0141 := int$Terms.Random$index0;
	 assert ($geint(($i0141), (0))==1);
	 assert ($ltint(($i0141), ($refArrSize[$r1142[$arrSizeIdx]]))==1);
	 //  @line: 8
	r0143 := $r1142[$i0141];
	 //  @line: 9
	$i1144 := int$Terms.Random$index0;
	 //  @line: 9
	$i2145 := $addint(($i1144), (1));
	 //  @line: 9
	int$Terms.Random$index0 := $i2145;
	$i3146 := $stringSize[r0143];
	 //  @line: 10
	__ret := $i3146;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 21
// <Terms.FunctionSymbol: int hashCode()>
procedure int$Terms.FunctionSymbol$hashCode$2244(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i094 : int;
var r093 : ref;
Block104:
	r093 := __this;
	 assert ($neref((r093), ($null))==1);
	 //  @line: 22
	$i094 := $HeapVar[r093, int$Terms.FunctionSymbol$number0];
	 //  @line: 22
	__ret := $i094;
	 return;
}


	 //  @line: 31
// <Terms.Term: Terms.List getVariables()>
procedure Terms.List$Terms.Term$getVariables$2239(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r278 : ref;
var r080 : ref;
var r179 : ref;
Block90:
	r080 := __this;
	 //  @line: 32
	$r278 := $newvariable((91));
	 assume ($neref(($newvariable((91))), ($null))==1);
	 assert ($neref(($r278), ($null))==1);
	 //  @line: 32
	 call void$Terms.List$$la$init$ra$$2245(($r278));
	 //  @line: 32
	r179 := $r278;
	 assert ($neref((r080), ($null))==1);
	 //  @line: 33
	 call void$Terms.Term$collectVariables$2238((r080), (r179));
	 //  @line: 34
	__ret := r179;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 6
// <Terms.FunctionApplication: void <init>(Terms.FunctionSymbol,Terms.List)>
procedure void$Terms.FunctionApplication$$la$init$ra$$2228(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r23 : ref;
var r12 : ref;
var r01 : ref;
Block16:
	r01 := __this;
	r12 := $param_0;
	r23 := $param_1;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 7
	 call void$Terms.Term$$la$init$ra$$2234((r01));
	 assert ($neref((r01), ($null))==1);
	 //  @line: 8
	$HeapVar[r01, Terms.FunctionSymbol$Terms.FunctionApplication$fs254] := r12;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 9
	$HeapVar[r01, Terms.List$Terms.FunctionApplication$args255] := r23;
	 return;
}


	 //  @line: 2
// <Terms.List: void <init>()>
procedure void$Terms.List$$la$init$ra$$2245(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r095 : ref;
Block105:
	r095 := __this;
	 assert ($neref((r095), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r095));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 12
// <Terms.FunctionApplication: void collectVariables(Terms.List)>
procedure void$Terms.FunctionApplication$collectVariables$2229(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r38 : ref;
var r17 : ref;
var r49 : ref;
var r04 : ref;
var $r26 : ref;
Block17:
	r04 := __this;
	r17 := $param_0;
	 assert ($neref((r04), ($null))==1);
	 //  @line: 13
	r49 := $HeapVar[r04, Terms.List$Terms.FunctionApplication$args255];
	 goto Block18;
	 //  @line: 14
Block18:
	 goto Block19, Block21;
	 //  @line: 14
Block19:
	 assume ($eqref((r49), ($null))==1);
	 goto Block20;
	 //  @line: 14
Block21:
	 //  @line: 14
	 assume ($negInt(($eqref((r49), ($null))))==1);
	 assert ($neref((r49), ($null))==1);
	 //  @line: 15
	$r26 := $HeapVar[r49, java.lang.Object$Terms.List$value256];
	 //  @line: 15
	$r38 := $r26;
	 assert ($neref(($r38), ($null))==1);
	 //  @line: 15
	 call void$Terms.Term$collectVariables$2238(($r38), (r17));
	 assert ($neref((r49), ($null))==1);
	 //  @line: 16
	r49 := $HeapVar[r49, Terms.List$Terms.List$next257];
	 goto Block18;
	 //  @line: 18
Block20:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <Terms.Term: void <init>()>
procedure void$Terms.Term$$la$init$ra$$2234(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r055 : ref;
Block67:
	r055 := __this;
	 assert ($neref((r055), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r055));
	 return;
}


	 //  @line: 2
// <Terms.Map: void <init>()>
procedure void$Terms.Map$$la$init$ra$$2247(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0102 : ref;
Block108:
	r0102 := __this;
	 assert ($neref((r0102), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r0102));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 62
// <Terms.FunctionApplication: int hashCode()>
procedure int$Terms.FunctionApplication$hashCode$2233(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i153 : int;
var r049 : ref;
var $r150 : ref;
var $r252 : ref;
var $i254 : int;
var $i051 : int;
Block66:
	r049 := __this;
	 assert ($neref((r049), ($null))==1);
	 //  @line: 63
	$r150 := $HeapVar[r049, Terms.List$Terms.FunctionApplication$args255];
	 assert ($neref(($r150), ($null))==1);
	 //  @line: 63
	 call $i051 := int$java.lang.Object$hashCode$31(($r150));
	 assert ($neref((r049), ($null))==1);
	 //  @line: 63
	$r252 := $HeapVar[r049, Terms.FunctionSymbol$Terms.FunctionApplication$fs254];
	 assert ($neref(($r252), ($null))==1);
	 //  @line: 63
	 call $i153 := int$Terms.FunctionSymbol$hashCode$2244(($r252));
	 //  @line: 63
	$i254 := $mulint(($i051), ($i153));
	 //  @line: 63
	__ret := $i254;
	 return;
}


	 //  @line: 11
// <Terms.Variable: void collectVariables(Terms.List)>
procedure void$Terms.Variable$collectVariables$2251(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1121 : ref;
var r0122 : ref;
Block121:
	r0122 := __this;
	r1121 := $param_0;
	 assert ($neref((r1121), ($null))==1);
	 //  @line: 12
	 call void$Terms.List$add$2246((r1121), (r0122));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



	 //  @line: 20
// <Terms.FunctionApplication: Terms.Map extendMatchingSubstitution(Terms.Map,Terms.Term)>
procedure Terms.Map$Terms.FunctionApplication$extendMatchingSubstitution$2230(__this : ref, $param_0 : ref, $param_1 : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r823 : ref;
var r212 : ref;
var r013 : ref;
var $z011 : int;
var r1026 : ref;
var r1127 : ref;
var r925 : ref;
var $r415 : ref;
var r110 : ref;
var $z116 : int;
var $r520 : ref;
var $r621 : ref;
var $r314 : ref;
var $r722 : ref;
Block22:
	r013 := __this;
	r925 := $param_0;
	r110 := $param_1;
	 //  @line: 21
	$z011 := $instanceof((r110), (Terms.Variable));
	 goto Block23;
	 //  @line: 21
Block23:
	 goto Block26, Block24;
	 //  @line: 21
Block26:
	 //  @line: 21
	 assume ($negInt(($eqint(($z011), (0))))==1);
	 //  @line: 22
	__ret := $null;
	 return;
	 //  @line: 21
Block24:
	 assume ($eqint(($z011), (0))==1);
	 goto Block25;
	 //  @line: 24
Block25:
	 //  @line: 24
	r212 := r110;
	 goto Block27;
	 //  @line: 25
Block27:
	 assert ($neref((r013), ($null))==1);
	 //  @line: 25
	$r415 := $HeapVar[r013, Terms.FunctionSymbol$Terms.FunctionApplication$fs254];
	 assert ($neref((r212), ($null))==1);
	 //  @line: 25
	$r314 := $HeapVar[r212, Terms.FunctionSymbol$Terms.FunctionApplication$fs254];
	 assert ($neref(($r415), ($null))==1);
	 //  @line: 25
	 call $z116 := boolean$Terms.FunctionSymbol$equals$2243(($r415), ($r314));
	 goto Block28;
	 //  @line: 25
Block28:
	 goto Block29, Block31;
	 //  @line: 25
Block29:
	 assume ($eqint(($z116), (0))==1);
	 goto Block30;
	 //  @line: 25
Block31:
	 //  @line: 25
	 assume ($negInt(($eqint(($z116), (0))))==1);
	 assert ($neref((r013), ($null))==1);
	 //  @line: 26
	r1026 := $HeapVar[r013, Terms.List$Terms.FunctionApplication$args255];
	 assert ($neref((r212), ($null))==1);
	 //  @line: 27
	r1127 := $HeapVar[r212, Terms.List$Terms.FunctionApplication$args255];
	 goto Block32;
	 //  @line: 38
Block30:
	 //  @line: 38
	__ret := $null;
	 return;
	 //  @line: 28
Block32:
	 goto Block35, Block33;
	 //  @line: 28
Block35:
	 //  @line: 28
	 assume ($negInt(($eqref((r1026), ($null))))==1);
	 goto Block36;
	 //  @line: 28
Block33:
	 assume ($eqref((r1026), ($null))==1);
	 goto Block34;
	 //  @line: 36
Block36:
	 goto Block38, Block37;
	 //  @line: 36
Block34:
	 //  @line: 36
	__ret := r925;
	 return;
	 //  @line: 36
Block38:
	 //  @line: 36
	 assume ($negInt(($eqref((r1127), ($null))))==1);
	 assert ($neref((r1026), ($null))==1);
	 //  @line: 29
	$r520 := $HeapVar[r1026, java.lang.Object$Terms.List$value256];
	 //  @line: 29
	$r823 := $r520;
	 assert ($neref((r1127), ($null))==1);
	 //  @line: 29
	$r621 := $HeapVar[r1127, java.lang.Object$Terms.List$value256];
	 //  @line: 29
	$r722 := $r621;
	 assert ($neref(($r823), ($null))==1);
	 //  @line: 29
	 call r925 := Terms.Map$Terms.Term$extendMatchingSubstitution$2237(($r823), (r925), ($r722));
	 goto Block39;
	 //  @line: 36
Block37:
	 assume ($eqref((r1127), ($null))==1);
	 goto Block34;
	 //  @line: 30
Block39:
	 goto Block40, Block42;
	 //  @line: 30
Block40:
	 assume ($neref((r925), ($null))==1);
	 goto Block41;
	 //  @line: 30
Block42:
	 //  @line: 30
	 assume ($negInt(($neref((r925), ($null))))==1);
	 //  @line: 31
	__ret := $null;
	 return;
	 //  @line: 33
Block41:
	 assert ($neref((r1026), ($null))==1);
	 //  @line: 33
	r1026 := $HeapVar[r1026, Terms.List$Terms.List$next257];
	 goto Block43;
	 //  @line: 34
Block43:
	 assert ($neref((r1127), ($null))==1);
	 //  @line: 34
	r1127 := $HeapVar[r1127, Terms.List$Terms.List$next257];
	 goto Block32;
}


// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 4
// <Terms.Random: void <clinit>()>
procedure void$Terms.Random$$la$clinit$ra$$2258()
  modifies int$Terms.Random$index0;
 {
	 //  @line: 5
Block145:
	 //  @line: 5
	int$Terms.Random$index0 := 0;
	 return;
}


	 //  @line: 5
// <Terms.FunctionSymbol: void <init>(int)>
procedure void$Terms.FunctionSymbol$$la$init$ra$$2241(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r081 : ref;
var i082 : int;
Block92:
	r081 := __this;
	i082 := $param_0;
	 assert ($neref((r081), ($null))==1);
	 //  @line: 6
	 call void$java.lang.Object$$la$init$ra$$28((r081));
	 assert ($neref((r081), ($null))==1);
	 //  @line: 7
	$HeapVar[r081, int$Terms.FunctionSymbol$number0] := i082;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


	 //  @line: 30
// <Terms.Variable: int getDepth()>
procedure int$Terms.Variable$getDepth$2253(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r0129 : ref;
Block131:
	r0129 := __this;
	 //  @line: 31
	__ret := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 2
// <Terms.Random: void <init>()>
procedure void$Terms.Random$$la$init$ra$$2256(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0140 : ref;
Block143:
	r0140 := __this;
	 assert ($neref((r0140), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r0140));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



	 //  @line: 8
// <Terms.Map: void put(java.lang.Object,java.lang.Object)>
procedure void$Terms.Map$put$2248(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r7108 : ref;
var $r4103 : ref;
var r2110 : ref;
var $r5106 : ref;
var r1109 : ref;
var r0105 : ref;
var r3104 : ref;
var $r6107 : ref;
Block109:
	r0105 := __this;
	r1109 := $param_0;
	r2110 := $param_1;
	 //  @line: 9
	$r4103 := $newvariable((110));
	 assume ($neref(($newvariable((110))), ($null))==1);
	 assert ($neref(($r4103), ($null))==1);
	 //  @line: 9
	 call void$Terms.Map$$la$init$ra$$2247(($r4103));
	 //  @line: 9
	r3104 := $r4103;
	 assert ($neref((r0105), ($null))==1);
	 //  @line: 10
	$r5106 := $HeapVar[r0105, java.lang.Object$Terms.Map$key258];
	 assert ($neref((r3104), ($null))==1);
	 //  @line: 10
	$HeapVar[r3104, java.lang.Object$Terms.Map$key258] := $r5106;
	 assert ($neref((r0105), ($null))==1);
	 //  @line: 11
	$r6107 := $HeapVar[r0105, java.lang.Object$Terms.Map$value259];
	 assert ($neref((r3104), ($null))==1);
	 //  @line: 11
	$HeapVar[r3104, java.lang.Object$Terms.Map$value259] := $r6107;
	 assert ($neref((r0105), ($null))==1);
	 //  @line: 12
	$r7108 := $HeapVar[r0105, Terms.Map$Terms.Map$next260];
	 assert ($neref((r3104), ($null))==1);
	 //  @line: 12
	$HeapVar[r3104, Terms.Map$Terms.Map$next260] := $r7108;
	 assert ($neref((r0105), ($null))==1);
	 //  @line: 13
	$HeapVar[r0105, Terms.Map$Terms.Map$next260] := r3104;
	 assert ($neref((r0105), ($null))==1);
	 //  @line: 14
	$HeapVar[r0105, java.lang.Object$Terms.Map$key258] := r1109;
	 assert ($neref((r0105), ($null))==1);
	 //  @line: 15
	$HeapVar[r0105, java.lang.Object$Terms.Map$value259] := r2110;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



	 //  @line: 8
// <Terms.Term: Terms.Term create(int)>
procedure Terms.Term$Terms.Term$create$2235($param_0 : int) returns (__ret : ref) {
var i056 : int;
var i158 : int;
var $r566 : ref;
var $i367 : int;
var $r159 : ref;
var i468 : int;
var $r262 : ref;
var $r363 : ref;
var $i264 : int;
var r060 : ref;
var $r465 : ref;
Block68:
	i056 := $param_0;
	 goto Block69;
	 //  @line: 9
Block69:
	 goto Block72, Block70;
	 //  @line: 9
Block72:
	 //  @line: 9
	 assume ($negInt(($gtint((i056), (1))))==1);
	 //  @line: 10
	$r566 := $newvariable((73));
	 assume ($neref(($newvariable((73))), ($null))==1);
	 //  @line: 10
	 call $i367 := int$Terms.Random$random$2257();
	 assert ($neref(($r566), ($null))==1);
	 //  @line: 10
	 call void$Terms.Variable$$la$init$ra$$2250(($r566), ($i367));
	 //  @line: 10
	__ret := $r566;
	 return;
	 //  @line: 9
Block70:
	 assume ($gtint((i056), (1))==1);
	 goto Block71;
	 //  @line: 12
Block71:
	 //  @line: 12
	 call i158 := int$Terms.Random$random$2257();
	 goto Block74;
	 //  @line: 13
Block74:
	 //  @line: 13
	$r159 := $newvariable((75));
	 assume ($neref(($newvariable((75))), ($null))==1);
	 assert ($neref(($r159), ($null))==1);
	 //  @line: 13
	 call void$Terms.List$$la$init$ra$$2245(($r159));
	 //  @line: 13
	r060 := $r159;
	 //  @line: 14
	i468 := 0;
	 goto Block76;
	 //  @line: 14
Block76:
	 goto Block77, Block79;
	 //  @line: 14
Block77:
	 assume ($geint((i468), (i158))==1);
	 goto Block78;
	 //  @line: 14
Block79:
	 //  @line: 14
	 assume ($negInt(($geint((i468), (i158))))==1);
	 //  @line: 15
	$i264 := $subint((i056), (1));
	 //  @line: 15
	 call $r465 := Terms.Term$Terms.Term$create$2235(($i264));
	 assert ($neref((r060), ($null))==1);
	 //  @line: 15
	 call void$Terms.List$add$2246((r060), ($r465));
	 //  @line: 14
	i468 := $addint((i468), (1));
	 goto Block76;
	 //  @line: 17
Block78:
	 //  @line: 17
	$r262 := $newvariable((80));
	 assume ($neref(($newvariable((80))), ($null))==1);
	 goto Block81;
	 //  @line: 17
Block81:
	 //  @line: 17
	$r363 := $newvariable((82));
	 assume ($neref(($newvariable((82))), ($null))==1);
	 assert ($neref(($r363), ($null))==1);
	 //  @line: 17
	 call void$Terms.FunctionSymbol$$la$init$ra$$2241(($r363), (i158));
	 assert ($neref(($r262), ($null))==1);
	 //  @line: 17
	 call void$Terms.FunctionApplication$$la$init$ra$$2228(($r262), ($r363), (r060));
	 //  @line: 17
	__ret := $r262;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



	 //  @line: 18
// <Terms.Map: java.lang.Object get(java.lang.Object)>
procedure java.lang.Object$Terms.Map$get$2249(__this : ref, $param_0 : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r2113 : ref;
var $r4116 : ref;
var $r5117 : ref;
var r1112 : ref;
var $z0114 : int;
var r0111 : ref;
var $r6118 : ref;
var $r3115 : ref;
Block111:
	r0111 := __this;
	r1112 := $param_0;
	 assert ($neref((r0111), ($null))==1);
	 //  @line: 19
	$r2113 := $HeapVar[r0111, java.lang.Object$Terms.Map$key258];
	 assert ($neref(($r2113), ($null))==1);
	 //  @line: 19
	 call $z0114 := boolean$java.lang.Object$equals$32(($r2113), (r1112));
	 goto Block112;
	 //  @line: 19
Block112:
	 goto Block113, Block115;
	 //  @line: 19
Block113:
	 assume ($eqint(($z0114), (0))==1);
	 goto Block114;
	 //  @line: 19
Block115:
	 //  @line: 19
	 assume ($negInt(($eqint(($z0114), (0))))==1);
	 assert ($neref((r0111), ($null))==1);
	 //  @line: 20
	$r6118 := $HeapVar[r0111, java.lang.Object$Terms.Map$value259];
	 //  @line: 20
	__ret := $r6118;
	 return;
	 //  @line: 22
Block114:
	 assert ($neref((r0111), ($null))==1);
	 //  @line: 22
	$r3115 := $HeapVar[r0111, Terms.Map$Terms.Map$next260];
	 goto Block116;
	 //  @line: 22
Block116:
	 goto Block117, Block119;
	 //  @line: 22
Block117:
	 assume ($eqref(($r3115), ($null))==1);
	 goto Block118;
	 //  @line: 22
Block119:
	 //  @line: 22
	 assume ($negInt(($eqref(($r3115), ($null))))==1);
	 assert ($neref((r0111), ($null))==1);
	 //  @line: 23
	$r4116 := $HeapVar[r0111, Terms.Map$Terms.Map$next260];
	 assert ($neref(($r4116), ($null))==1);
	 //  @line: 23
	 call $r5117 := java.lang.Object$Terms.Map$get$2249(($r4116), (r1112));
	 //  @line: 23
	__ret := $r5117;
	 return;
	 //  @line: 25
Block118:
	 //  @line: 25
	__ret := $null;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 21
// <Terms.Term: boolean matches(Terms.Term)>
procedure boolean$Terms.Term$matches$2236(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r071 : ref;
var r375 : ref;
var $r269 : ref;
var r172 : ref;
var r476 : ref;
var $z077 : int;
Block83:
	r071 := __this;
	r172 := $param_0;
	 //  @line: 22
	$r269 := $newvariable((84));
	 assume ($neref(($newvariable((84))), ($null))==1);
	 assert ($neref(($r269), ($null))==1);
	 //  @line: 22
	 call void$Terms.Map$$la$init$ra$$2247(($r269));
	 //  @line: 22
	r375 := $r269;
	 assert ($neref((r071), ($null))==1);
	 //  @line: 23
	 call r476 := Terms.Map$Terms.Term$extendMatchingSubstitution$2237((r071), (r375), (r172));
	 goto Block85;
	 //  @line: 24
Block85:
	 goto Block86, Block88;
	 //  @line: 24
Block86:
	 assume ($eqref((r476), ($null))==1);
	 goto Block87;
	 //  @line: 24
Block88:
	 //  @line: 24
	 assume ($negInt(($eqref((r476), ($null))))==1);
	 //  @line: 24
	$z077 := 1;
	 goto Block89;
	 //  @line: 24
Block87:
	 //  @line: 24
	$z077 := 0;
	 goto Block89;
	 //  @line: 24
Block89:
	 //  @line: 24
	__ret := $z077;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 15
// <Terms.Variable: Terms.Map extendMatchingSubstitution(Terms.Map,Terms.Term)>
procedure Terms.Map$Terms.Variable$extendMatchingSubstitution$2252(__this : ref, $param_0 : ref, $param_1 : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r2127 : ref;
var r1123 : ref;
var $z0128 : int;
var r0124 : ref;
var $r4125 : ref;
var r3126 : ref;
Block122:
	r0124 := __this;
	r1123 := $param_0;
	r2127 := $param_1;
	 assert ($neref((r1123), ($null))==1);
	 //  @line: 16
	 call $r4125 := java.lang.Object$Terms.Map$get$2249((r1123), (r0124));
	 //  @line: 16
	r3126 := $r4125;
	 goto Block123;
	 //  @line: 17
Block123:
	 goto Block126, Block124;
	 //  @line: 17
Block126:
	 //  @line: 17
	 assume ($negInt(($neref((r3126), ($null))))==1);
	 assert ($neref((r1123), ($null))==1);
	 //  @line: 18
	 call void$Terms.Map$put$2248((r1123), (r0124), (r2127));
	 //  @line: 19
	__ret := r1123;
	 return;
	 //  @line: 17
Block124:
	 assume ($neref((r3126), ($null))==1);
	 goto Block125;
	 //  @line: 21
Block125:
	 assert ($neref((r3126), ($null))==1);
	 //  @line: 21
	 call $z0128 := boolean$java.lang.Object$equals$32((r3126), (r2127));
	 goto Block127;
	 //  @line: 21
Block127:
	 goto Block128, Block130;
	 //  @line: 21
Block128:
	 assume ($eqint(($z0128), (0))==1);
	 goto Block129;
	 //  @line: 21
Block130:
	 //  @line: 21
	 assume ($negInt(($eqint(($z0128), (0))))==1);
	 //  @line: 22
	__ret := r1123;
	 return;
	 //  @line: 24
Block129:
	 //  @line: 24
	__ret := $null;
	 return;
}


	 //  @line: 2
// <Terms.TermCreateCollect: void <init>()>
procedure void$Terms.TermCreateCollect$$la$init$ra$$2481(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0147 : ref;
Block146:
	r0147 := __this;
	 assert ($neref((r0147), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r0147));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 4
// <Terms.TermCreateCollect: void main(java.lang.String[])>
procedure void$Terms.TermCreateCollect$main$2482($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$Terms.Random$args261;
 {
var r1151 : ref;
var $i0149 : int;
var r0148 : [int]ref;

 //temp local variables 
var $freshlocal0 : ref;

Block147:
	r0148 := $param_0;
	 //  @line: 5
	java.lang.String$lp$$rp$$Terms.Random$args261 := r0148;
	 //  @line: 6
	 call $i0149 := int$Terms.Random$random$2257();
	 //  @line: 6
	 call r1151 := Terms.Term$Terms.Term$create$2235(($i0149));
	 assert ($neref((r1151), ($null))==1);
	 //  @line: 7
	 call $freshlocal0 := Terms.List$Terms.Term$getVariables$2239((r1151));
	 return;
}


	 //  @line: 41
// <Terms.Variable: int hashCode()>
procedure int$Terms.Variable$hashCode$2255(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i0139 : int;
var r0138 : ref;
Block142:
	r0138 := __this;
	 assert ($neref((r0138), ($null))==1);
	 //  @line: 42
	$i0139 := $HeapVar[r0138, int$Terms.Variable$number0];
	 //  @line: 42
	__ret := $i0139;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// <Terms.Term: int getDepth()>
procedure int$Terms.Term$getDepth$2240(__this : ref) returns (__ret : int);



// <java.lang.Object: int hashCode()>
procedure int$java.lang.Object$hashCode$31(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



	 //  @line: 14
// <Terms.FunctionSymbol: boolean equals(java.lang.Object)>
procedure boolean$Terms.FunctionSymbol$equals$2243(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r087 : ref;
var r185 : ref;
var $z192 : int;
var $i190 : int;
var $r288 : ref;
var $z086 : int;
var $i089 : int;
Block94:
	r087 := __this;
	r185 := $param_0;
	 //  @line: 15
	$z086 := $instanceof((r185), (Terms.FunctionSymbol));
	 goto Block95;
	 //  @line: 15
Block95:
	 goto Block98, Block96;
	 //  @line: 15
Block98:
	 //  @line: 15
	 assume ($negInt(($eqint(($z086), (0))))==1);
	 assert ($neref((r087), ($null))==1);
	 //  @line: 16
	$i190 := $HeapVar[r087, int$Terms.FunctionSymbol$number0];
	 //  @line: 16
	$r288 := r185;
	 assert ($neref(($r288), ($null))==1);
	 //  @line: 16
	$i089 := $HeapVar[$r288, int$Terms.FunctionSymbol$number0];
	 goto Block99;
	 //  @line: 15
Block96:
	 assume ($eqint(($z086), (0))==1);
	 goto Block97;
	 //  @line: 16
Block99:
	 goto Block102, Block100;
	 //  @line: 18
Block97:
	 //  @line: 18
	__ret := 0;
	 return;
	 //  @line: 16
Block102:
	 //  @line: 16
	 assume ($negInt(($neint(($i190), ($i089))))==1);
	 //  @line: 16
	$z192 := 1;
	 goto Block103;
	 //  @line: 16
Block100:
	 assume ($neint(($i190), ($i089))==1);
	 goto Block101;
	 //  @line: 16
Block103:
	 //  @line: 16
	__ret := $z192;
	 return;
	 //  @line: 16
Block101:
	 //  @line: 16
	$z192 := 0;
	 goto Block103;
}


// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



	 //  @line: 34
// <Terms.Variable: boolean equals(java.lang.Object)>
procedure boolean$Terms.Variable$equals$2254(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $z1137 : int;
var $z0131 : int;
var $i0134 : int;
var r0132 : ref;
var $r2133 : ref;
var $i1135 : int;
var r1130 : ref;
Block132:
	r0132 := __this;
	r1130 := $param_0;
	 //  @line: 35
	$z0131 := $instanceof((r1130), (Terms.Variable));
	 goto Block133;
	 //  @line: 35
Block133:
	 goto Block136, Block134;
	 //  @line: 35
Block136:
	 //  @line: 35
	 assume ($negInt(($eqint(($z0131), (0))))==1);
	 assert ($neref((r0132), ($null))==1);
	 //  @line: 36
	$i1135 := $HeapVar[r0132, int$Terms.Variable$number0];
	 //  @line: 36
	$r2133 := r1130;
	 assert ($neref(($r2133), ($null))==1);
	 //  @line: 36
	$i0134 := $HeapVar[$r2133, int$Terms.Variable$number0];
	 goto Block137;
	 //  @line: 35
Block134:
	 assume ($eqint(($z0131), (0))==1);
	 goto Block135;
	 //  @line: 36
Block137:
	 goto Block138, Block140;
	 //  @line: 38
Block135:
	 //  @line: 38
	__ret := 0;
	 return;
	 //  @line: 36
Block138:
	 assume ($neint(($i1135), ($i0134))==1);
	 goto Block139;
	 //  @line: 36
Block140:
	 //  @line: 36
	 assume ($negInt(($neint(($i1135), ($i0134))))==1);
	 //  @line: 36
	$z1137 := 1;
	 goto Block141;
	 //  @line: 36
Block139:
	 //  @line: 36
	$z1137 := 0;
	 goto Block141;
	 //  @line: 36
Block141:
	 //  @line: 36
	__ret := $z1137;
	 return;
}


// <Terms.Term: Terms.Map extendMatchingSubstitution(Terms.Map,Terms.Term)>
procedure Terms.Map$Terms.Term$extendMatchingSubstitution$2237(__this : ref, $param_0 : ref, $param_1 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



	 //  @line: 7
// <Terms.List: void add(java.lang.Object)>
procedure void$Terms.List$add$2246(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r297 : ref;
var $r5100 : ref;
var r1101 : ref;
var r098 : ref;
var $r396 : ref;
var $r499 : ref;
Block106:
	r098 := __this;
	r1101 := $param_0;
	 //  @line: 8
	$r396 := $newvariable((107));
	 assume ($neref(($newvariable((107))), ($null))==1);
	 assert ($neref(($r396), ($null))==1);
	 //  @line: 8
	 call void$Terms.List$$la$init$ra$$2245(($r396));
	 //  @line: 8
	r297 := $r396;
	 assert ($neref((r098), ($null))==1);
	 //  @line: 9
	$r499 := $HeapVar[r098, java.lang.Object$Terms.List$value256];
	 assert ($neref((r297), ($null))==1);
	 //  @line: 9
	$HeapVar[r297, java.lang.Object$Terms.List$value256] := $r499;
	 assert ($neref((r098), ($null))==1);
	 //  @line: 10
	$r5100 := $HeapVar[r098, Terms.List$Terms.List$next257];
	 assert ($neref((r297), ($null))==1);
	 //  @line: 10
	$HeapVar[r297, Terms.List$Terms.List$next257] := $r5100;
	 assert ($neref((r098), ($null))==1);
	 //  @line: 11
	$HeapVar[r098, Terms.List$Terms.List$next257] := r297;
	 assert ($neref((r098), ($null))==1);
	 //  @line: 12
	$HeapVar[r098, java.lang.Object$Terms.List$value256] := r1101;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 43
// <Terms.FunctionApplication: int getDepth()>
procedure int$Terms.FunctionApplication$getDepth$2231(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var i235 : int;
var i034 : int;
var r336 : ref;
var $r131 : ref;
var r029 : ref;
var $r232 : ref;
var $i133 : int;
Block44:
	r029 := __this;
	 //  @line: 44
	i235 := 0;
	 assert ($neref((r029), ($null))==1);
	 //  @line: 45
	r336 := $HeapVar[r029, Terms.List$Terms.FunctionApplication$args255];
	 goto Block45;
	 //  @line: 46
Block45:
	 goto Block48, Block46;
	 //  @line: 46
Block48:
	 //  @line: 46
	 assume ($negInt(($eqref((r336), ($null))))==1);
	 assert ($neref((r336), ($null))==1);
	 //  @line: 47
	$r131 := $HeapVar[r336, java.lang.Object$Terms.List$value256];
	 //  @line: 47
	$r232 := $r131;
	 assert ($neref(($r232), ($null))==1);
	 //  @line: 47
	 call $i133 := int$Terms.Term$getDepth$2240(($r232));
	 //  @line: 47
	i034 := $addint(($i133), (1));
	 goto Block49;
	 //  @line: 46
Block46:
	 assume ($eqref((r336), ($null))==1);
	 goto Block47;
	 //  @line: 48
Block49:
	 goto Block50, Block52;
	 //  @line: 51
Block47:
	 //  @line: 51
	__ret := i235;
	 return;
	 //  @line: 48
Block50:
	 assume ($leint((i034), (i235))==1);
	 goto Block51;
	 //  @line: 48
Block52:
	 //  @line: 48
	 assume ($negInt(($leint((i034), (i235))))==1);
	 //  @line: 46
	i235 := i034;
	 goto Block51;
	 //  @line: 49
Block51:
	 assert ($neref((r336), ($null))==1);
	 //  @line: 49
	r336 := $HeapVar[r336, Terms.List$Terms.List$next257];
	 goto Block45;
}


// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 54
// <Terms.FunctionApplication: boolean equals(java.lang.Object)>
procedure boolean$Terms.FunctionApplication$equals$2232(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $z348 : int;
var r239 : ref;
var r040 : ref;
var $z246 : int;
var $z143 : int;
var $r544 : ref;
var $r341 : ref;
var $r645 : ref;
var r137 : ref;
var $z038 : int;
var $r442 : ref;
Block53:
	r040 := __this;
	r137 := $param_0;
	 //  @line: 55
	$z038 := $instanceof((r137), (Terms.FunctionApplication));
	 goto Block54;
	 //  @line: 55
Block54:
	 goto Block55, Block57;
	 //  @line: 55
Block55:
	 assume ($eqint(($z038), (0))==1);
	 goto Block56;
	 //  @line: 55
Block57:
	 //  @line: 55
	 assume ($negInt(($eqint(($z038), (0))))==1);
	 //  @line: 56
	r239 := r137;
	 assert ($neref((r040), ($null))==1);
	 //  @line: 57
	$r442 := $HeapVar[r040, Terms.FunctionSymbol$Terms.FunctionApplication$fs254];
	 assert ($neref((r239), ($null))==1);
	 //  @line: 57
	$r341 := $HeapVar[r239, Terms.FunctionSymbol$Terms.FunctionApplication$fs254];
	 assert ($neref(($r442), ($null))==1);
	 //  @line: 57
	 call $z143 := boolean$Terms.FunctionSymbol$equals$2243(($r442), ($r341));
	 goto Block58;
	 //  @line: 59
Block56:
	 //  @line: 59
	__ret := 0;
	 return;
	 //  @line: 57
Block58:
	 goto Block59, Block61;
	 //  @line: 57
Block59:
	 assume ($eqint(($z143), (0))==1);
	 goto Block60;
	 //  @line: 57
Block61:
	 //  @line: 57
	 assume ($negInt(($eqint(($z143), (0))))==1);
	 assert ($neref((r040), ($null))==1);
	 //  @line: 57
	$r645 := $HeapVar[r040, Terms.List$Terms.FunctionApplication$args255];
	 assert ($neref((r239), ($null))==1);
	 //  @line: 57
	$r544 := $HeapVar[r239, Terms.List$Terms.FunctionApplication$args255];
	 assert ($neref(($r645), ($null))==1);
	 //  @line: 57
	 call $z246 := boolean$java.lang.Object$equals$32(($r645), ($r544));
	 goto Block62;
	 //  @line: 57
Block60:
	 //  @line: 57
	$z348 := 0;
	 goto Block65;
	 //  @line: 57
Block62:
	 goto Block64, Block63;
	 //  @line: 57
Block65:
	 //  @line: 57
	__ret := $z348;
	 return;
	 //  @line: 57
Block64:
	 //  @line: 57
	 assume ($negInt(($eqint(($z246), (0))))==1);
	 //  @line: 57
	$z348 := 1;
	 goto Block65;
	 //  @line: 57
Block63:
	 assume ($eqint(($z246), (0))==1);
	 goto Block60;
}


	 //  @line: 5
// <Terms.Variable: void <init>(int)>
procedure void$Terms.Variable$$la$init$ra$$2250(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0119 : ref;
var i0120 : int;
Block120:
	r0119 := __this;
	i0120 := $param_0;
	 assert ($neref((r0119), ($null))==1);
	 //  @line: 6
	 call void$Terms.Term$$la$init$ra$$2234((r0119));
	 assert ($neref((r0119), ($null))==1);
	 //  @line: 7
	$HeapVar[r0119, int$Terms.Variable$number0] := i0120;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


	 //  @line: 10
// <Terms.FunctionSymbol: int getArity()>
procedure int$Terms.FunctionSymbol$getArity$2242(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i084 : int;
var r083 : ref;
Block93:
	r083 := __this;
	 assert ($neref((r083), ($null))==1);
	 //  @line: 11
	$i084 := $HeapVar[r083, int$Terms.FunctionSymbol$number0];
	 //  @line: 11
	__ret := $i084;
	 return;
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// <Terms.Term: void collectVariables(Terms.List)>
procedure void$Terms.Term$collectVariables$2238(__this : ref, $param_0 : ref);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: boolean equals(java.lang.Object)>
procedure boolean$java.lang.Object$equals$32(__this : ref, $param_0 : ref) returns (__ret : int);



