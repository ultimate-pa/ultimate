type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var $fresh2 : int;
var $fresh6 : int;
var $fresh8 : int;
var $fresh1 : [int][int]int;
var $fresh3 : int;
var $fresh1 : [int]int;
var $fresh10 : int;
var $fresh2 : int;
var $fresh4 : int;
var $fresh5 : int;
var $fresh7 : int;
var char$lp$$rp$$MyString$charSet254 : [int]int;
var $fresh9 : int;
var char$lp$$rp$$MyString$values255 : Field [int]int;
var int$MyString$charSetLen0 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 30
// <MyString: char charAt(int)>
procedure char$MyString$charAt$2242(__this : ref, $param_0 : int) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $c2182 : int;
var $r2179 : [int]int;
var $r3181 : [int]int;
var r0178 : ref;
var i0176 : int;
var $i1180 : int;
var $r1177 : ref;

 //temp local variables 

	 //  @line: 30
Block30:
	$Exep0 := $null;
	 goto Block271;
Block271:
	r0178 := __this;
	i0176 := $param_0;
	 goto Block272;
	 //  @line: 31
Block272:
	 goto Block275, Block273;
	 //  @line: 31
Block275:
	 //  @line: 31
	 assume ($negInt(($gtint((0), (i0176))))==1);
	 assert ($neref((r0178), ($null))==1);
	 //  @line: 33
	$r2179 := $HeapVar[r0178, char$lp$$rp$$MyString$values255];
	 //  @line: 33
	$i1180 := $intArrSize[$r2179[$arrSizeIdx]];
	 goto Block276;
	 //  @line: 31
Block273:
	 assume ($gtint((0), (i0176))==1);
	 goto Block274;
	 //  @line: 33
Block276:
	 goto Block277, Block278;
	 //  @line: 33
Block274:
	 //  @line: 33
	$r1177 := $newvariable((279));
	 assume ($neref(($newvariable((279))), ($null))==1);
	 goto Block280;
	 //  @line: 33
Block277:
	 assume ($geint((i0176), ($i1180))==1);
	 goto Block274;
	 //  @line: 33
Block278:
	 //  @line: 33
	 assume ($negInt(($geint((i0176), ($i1180))))==1);
	 assert ($neref((r0178), ($null))==1);
	 //  @line: 32
	$r3181 := $HeapVar[r0178, char$lp$$rp$$MyString$values255];
	 assert ($geint((i0176), (0))==1);
	 assert ($ltint((i0176), ($intArrSize[$r3181[$arrSizeIdx]]))==1);
	 //  @line: 32
	$c2182 := $r3181[i0176];
	 //  @line: 32
	__ret := $c2182;
	 return;
	 //  @line: 33
Block280:
	 assert ($neref(($r1177), ($null))==1);
	 //  @line: 33
	 call void$java.lang.ArrayIndexOutOfBoundsException$$la$init$ra$$2207(($r1177));
	 goto Block281;
	 //  @line: 33
Block281:
	$Exep0 := $r1177;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 15
// <Distances: int levenshtein(MyString,MyString)>
procedure int$Distances$levenshtein$2232($param_0 : ref, $param_1 : ref) returns (__ret : int, $Exep0 : ref) {
var $i730 : int;
var $r846 : [int]int;
var $r1151 : [int]int;
var $i221 : int;
var $i1947 : int;
var $i2048 : int;
var $r535 : [int]int;
var $r1050 : [int]int;
var $i1034 : int;
var $i933 : int;
var $i1339 : int;
var r118 : ref;
var $c629 : int;
var $i322 : int;
var $i1845 : int;
var $i1136 : int;
var r015 : ref;
var i2253 : int;
var $r325 : [int]int;
var i2354 : int;
var $r742 : [int]int;
var i120 : int;
var $i1440 : int;
var $i1744 : int;
var $i1643 : int;
var $i1541 : int;
var r223 : [int][int]int;
var $c528 : int;
var $i1238 : int;
var i2152 : int;
var i2455 : int;
var $r637 : [int]int;
var $i426 : int;
var $r949 : [int]int;
var i017 : int;
var $r432 : [int]int;
var $i831 : int;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 15
Block31:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block32;
Block32:
	r015 := $param_0;
	r118 := $param_1;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 16
	 call i017 := int$MyString$length$2241((r015));
	 assert ($neref((r118), ($null))==1);
	 //  @line: 16
	 call i120 := int$MyString$length$2241((r118));
	 //  @line: 17
	$i322 := $addint((i017), (1));
	 //  @line: 17
	$i221 := $addint((i120), (1));
	 //  @line: 17
	r223 := $fresh1;
	 assume ($negInt(($fresh2))==1);
	 //  @line: 19
	i2152 := 0;
	 goto Block34;
	 //  @line: 19
Block34:
	 goto Block35, Block37;
	 //  @line: 19
Block35:
	 assume ($gtint((i2152), (i017))==1);
	 goto Block36;
	 //  @line: 19
Block37:
	 //  @line: 19
	 assume ($negInt(($gtint((i2152), (i017))))==1);
	 assert ($geint((i2152), (0))==1);
	 assert ($ltint((i2152), ($fresh2))==1);
	 //  @line: 23
	$r1151 := r223[i2152];
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r1151[$arrSizeIdx]]))==1);
	 //  @line: 23
	$r1151[0] := i2152;
	 //  @line: 23
	i2152 := $addint((i2152), (1));
	 goto Block34;
	 //  @line: 20
Block36:
	 //  @line: 20
	i2253 := 0;
	 goto Block38;
	 //  @line: 20
Block38:
	 goto Block39, Block41;
	 //  @line: 20
Block39:
	 assume ($gtint((i2253), (i120))==1);
	 goto Block40;
	 //  @line: 20
Block41:
	 //  @line: 20
	 assume ($negInt(($gtint((i2253), (i120))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($fresh3))==1);
	 //  @line: 23
	$r1050 := r223[0];
	 assert ($geint((i2253), (0))==1);
	 assert ($ltint((i2253), ($intArrSize[$r1050[$arrSizeIdx]]))==1);
	 //  @line: 23
	$r1050[i2253] := i2253;
	 //  @line: 23
	i2253 := $addint((i2253), (1));
	 goto Block38;
	 //  @line: 22
Block40:
	 //  @line: 22
	i2354 := 0;
	 goto Block42;
	 //  @line: 22
Block42:
	 goto Block43, Block45;
	 //  @line: 22
Block43:
	 assume ($geint((i2354), (i120))==1);
	 goto Block44;
	 //  @line: 22
Block45:
	 //  @line: 22
	 assume ($negInt(($geint((i2354), (i120))))==1);
	 //  @line: 23
	i2455 := 0;
	 goto Block46;
	 //  @line: 27
Block44:
	 assert ($geint((i017), (0))==1);
	 assert ($ltint((i017), ($fresh10))==1);
	 //  @line: 27
	$r325 := r223[i017];
	 goto Block65;
	 //  @line: 23
Block46:
	 goto Block49, Block47;
	 //  @line: 27
Block65:
	 assert ($geint((i120), (0))==1);
	 assert ($ltint((i120), ($intArrSize[$r325[$arrSizeIdx]]))==1);
	 //  @line: 27
	$i426 := $r325[i120];
	 //  @line: 27
	__ret := $i426;
	 return;
	 //  @line: 23
Block49:
	 //  @line: 23
	 assume ($negInt(($geint((i2455), (i017))))==1);
	 assert ($neref((r015), ($null))==1);
	 //  @line: 24
	 call $c528, $caughtEx1 := char$MyString$charAt$2242((r015), (i2455));
	 goto Block50, Block52;
	 //  @line: 23
Block47:
	 assume ($geint((i2455), (i017))==1);
	 goto Block48;
	 //  @line: 23
Block50:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block51;
	 //  @line: 23
Block52:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block53;
	 //  @line: 22
Block48:
	 //  @line: 22
	i2354 := $addint((i2354), (1));
	 goto Block64;
	 //  @line: 23
Block51:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 23
Block53:
	 assert ($neref((r118), ($null))==1);
	 //  @line: 24
	 call $c629, $caughtEx1 := char$MyString$charAt$2242((r118), (i2354));
	 goto Block54, Block56;
	 //  @line: 22
Block64:
	 goto Block42;
	 //  @line: 23
Block54:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block55;
	 //  @line: 23
Block56:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block57;
	 //  @line: 23
Block55:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 23
Block57:
	 goto Block58;
	 //  @line: 24
Block58:
	 goto Block61, Block59;
	 //  @line: 24
Block61:
	 //  @line: 24
	 assume ($negInt(($neint(($c528), ($c629))))==1);
	 //  @line: 23
	$i1845 := $addint((i2455), (1));
	 assert ($geint(($i1845), (0))==1);
	 assert ($ltint(($i1845), ($fresh4))==1);
	 //  @line: 23
	$r949 := r223[$i1845];
	 //  @line: 23
	$i2048 := $addint((i2354), (1));
	 assert ($geint((i2455), (0))==1);
	 assert ($ltint((i2455), ($fresh5))==1);
	 //  @line: 23
	$r846 := r223[i2455];
	 assert ($geint((i2354), (0))==1);
	 assert ($ltint((i2354), ($intArrSize[$r846[$arrSizeIdx]]))==1);
	 //  @line: 23
	$i1947 := $r846[i2354];
	 assert ($geint(($i2048), (0))==1);
	 assert ($ltint(($i2048), ($intArrSize[$r949[$arrSizeIdx]]))==1);
	 //  @line: 23
	$r949[$i2048] := $i1947;
	 goto Block62;
	 //  @line: 24
Block59:
	 assume ($neint(($c528), ($c629))==1);
	 goto Block60;
	 //  @line: 23
Block62:
	 //  @line: 23
	i2455 := $addint((i2455), (1));
	 goto Block46;
	 //  @line: 25
Block60:
	 //  @line: 25
	$i730 := $addint((i2455), (1));
	 goto Block63;
	 //  @line: 25
Block63:
	 assert ($geint(($i730), (0))==1);
	 assert ($ltint(($i730), ($fresh6))==1);
	 //  @line: 25
	$r742 := r223[$i730];
	 //  @line: 25
	$i1643 := $addint((i2354), (1));
	 assert ($geint((i2455), (0))==1);
	 assert ($ltint((i2455), ($fresh7))==1);
	 //  @line: 25
	$r432 := r223[i2455];
	 //  @line: 25
	$i831 := $addint((i2354), (1));
	 assert ($geint(($i831), (0))==1);
	 assert ($ltint(($i831), ($intArrSize[$r432[$arrSizeIdx]]))==1);
	 //  @line: 25
	$i933 := $r432[$i831];
	 //  @line: 25
	$i1541 := $addint(($i933), (1));
	 //  @line: 25
	$i1034 := $addint((i2455), (1));
	 assert ($geint(($i1034), (0))==1);
	 assert ($ltint(($i1034), ($fresh8))==1);
	 //  @line: 25
	$r535 := r223[$i1034];
	 assert ($geint((i2354), (0))==1);
	 assert ($ltint((i2354), ($intArrSize[$r535[$arrSizeIdx]]))==1);
	 //  @line: 25
	$i1136 := $r535[i2354];
	 //  @line: 25
	$i1440 := $addint(($i1136), (1));
	 assert ($geint((i2455), (0))==1);
	 assert ($ltint((i2455), ($fresh9))==1);
	 //  @line: 25
	$r637 := r223[i2455];
	 assert ($geint((i2354), (0))==1);
	 assert ($ltint((i2354), ($intArrSize[$r637[$arrSizeIdx]]))==1);
	 //  @line: 25
	$i1238 := $r637[i2354];
	 //  @line: 25
	$i1339 := $addint(($i1238), (1));
	 //  @line: 25
	 call $i1744 := int$Distances$min$2231(($i1541), ($i1440), ($i1339));
	 assert ($geint(($i1643), (0))==1);
	 assert ($ltint(($i1643), ($intArrSize[$r742[$arrSizeIdx]]))==1);
	 //  @line: 25
	$r742[$i1643] := $i1744;
	 goto Block62;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// <java.lang.ArrayIndexOutOfBoundsException: void <init>()>
procedure void$java.lang.ArrayIndexOutOfBoundsException$$la$init$ra$$2207(__this : ref);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



	 //  @line: 45
// <Distances: MyString findMatch(MyString,boolean[])>
procedure MyString$Distances$findMatch$2235($param_0 : ref, $param_1 : [int]int) returns (__ret : ref, $Exep0 : ref) {
var r175 : [int]int;
var r073 : ref;
var $z076 : int;
var $c177 : int;
var i278 : int;
var $r370 : ref;
var $i074 : int;
var r271 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 45
Block95:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block96;
Block96:
	r073 := $param_0;
	r175 := $param_1;
	 //  @line: 46
	$r370 := $newvariable((97));
	 assume ($neref(($newvariable((97))), ($null))==1);
	 assert ($neref(($r370), ($null))==1);
	 //  @line: 46
	 call void$MyString$$la$init$ra$$2238(($r370));
	 //  @line: 46
	r271 := $r370;
	 //  @line: 47
	i278 := 0;
	 goto Block98;
	 //  @line: 47
Block98:
	 assert ($neref((r073), ($null))==1);
	 //  @line: 47
	 call $i074 := int$MyString$length$2241((r073));
	 goto Block99;
	 //  @line: 47
Block99:
	 goto Block102, Block100;
	 //  @line: 47
Block102:
	 //  @line: 47
	 assume ($negInt(($geint((i278), ($i074))))==1);
	 assert ($geint((i278), (0))==1);
	 assert ($ltint((i278), ($intArrSize[r175[$arrSizeIdx]]))==1);
	 //  @line: 48
	$z076 := r175[i278];
	 goto Block103;
	 //  @line: 47
Block100:
	 assume ($geint((i278), ($i074))==1);
	 goto Block101;
	 //  @line: 48
Block103:
	 goto Block106, Block104;
	 //  @line: 49
Block101:
	 //  @line: 49
	__ret := r271;
	 return;
	 //  @line: 48
Block106:
	 //  @line: 48
	 assume ($negInt(($eqint(($z076), (0))))==1);
	 assert ($neref((r073), ($null))==1);
	 //  @line: 47
	 call $c177, $caughtEx1 := char$MyString$charAt$2242((r073), (i278));
	 goto Block109, Block107;
	 //  @line: 48
Block104:
	 assume ($eqint(($z076), (0))==1);
	 goto Block105;
	 //  @line: 48
Block109:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block110;
	 //  @line: 48
Block107:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block108;
	 //  @line: 47
Block105:
	 //  @line: 47
	i278 := $addint((i278), (1));
	 goto Block98;
	 //  @line: 48
Block110:
	 assert ($neref((r271), ($null))==1);
	 //  @line: 47
	 call void$MyString$append$2243((r271), ($c177));
	 goto Block105;
	 //  @line: 48
Block108:
	$Exep0 := $caughtEx1;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 52
// <Distances: int jaro(MyString,MyString)>
procedure int$Distances$jaro$2236($param_0 : ref, $param_1 : ref) returns (__ret : int, $Exep0 : ref)
  modifies $intArrSize;
 {
var i28123 : int;
var $i799 : int;
var i081 : int;
var $c19112 : int;
var r285 : [int]int;
var $i8100 : int;
var $c14106 : int;
var i23116 : int;
var i26121 : int;
var $i12104 : int;
var r4119 : ref;
var i184 : int;
var $i388 : int;
var $i10102 : int;
var i21114 : int;
var $i597 : int;
var $i11103 : int;
var $i16109 : int;
var $i18111 : int;
var i25118 : int;
var r5120 : ref;
var $i698 : int;
var r079 : ref;
var $i17110 : int;
var i24117 : int;
var $i9101 : int;
var r386 : [int]int;
var $i489 : int;
var $i15107 : int;
var r182 : ref;
var i22115 : int;
var $c13105 : int;
var $c20113 : int;
var i27122 : int;
var i290 : int;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 52
Block111:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block112;
Block112:
	r079 := $param_0;
	r182 := $param_1;
	 assert ($neref((r079), ($null))==1);
	 //  @line: 53
	 call i081 := int$MyString$length$2241((r079));
	 assert ($neref((r182), ($null))==1);
	 //  @line: 53
	 call i184 := int$MyString$length$2241((r182));
	 //  @line: 54
	r285 := $reftointarr(($newvariable((113))));
	$intArrSize[$reftointarr(($newvariable((113))))[$arrSizeIdx]] := i081;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((113))))), ($intArrNull))))==1);
	 //  @line: 55
	r386 := $reftointarr(($newvariable((114))));
	$intArrSize[$reftointarr(($newvariable((114))))[$arrSizeIdx]] := i184;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((114))))), ($intArrNull))))==1);
	 //  @line: 56
	i21114 := 0;
	 goto Block115;
	 //  @line: 56
Block115:
	 goto Block118, Block116;
	 //  @line: 56
Block118:
	 //  @line: 56
	 assume ($negInt(($geint((i21114), (i081))))==1);
	 assert ($geint((i21114), (0))==1);
	 assert ($ltint((i21114), ($intArrSize[r285[$arrSizeIdx]]))==1);
	 //  @line: 62
	r285[i21114] := 0;
	 //  @line: 62
	i21114 := $addint((i21114), (1));
	 goto Block115;
	 //  @line: 56
Block116:
	 assume ($geint((i21114), (i081))==1);
	 goto Block117;
	 //  @line: 57
Block117:
	 //  @line: 57
	i22115 := 0;
	 goto Block119;
	 //  @line: 57
Block119:
	 goto Block122, Block120;
	 //  @line: 57
Block122:
	 //  @line: 57
	 assume ($negInt(($geint((i22115), (i184))))==1);
	 assert ($geint((i22115), (0))==1);
	 assert ($ltint((i22115), ($intArrSize[r386[$arrSizeIdx]]))==1);
	 //  @line: 62
	r386[i22115] := 0;
	 //  @line: 62
	i22115 := $addint((i22115), (1));
	 goto Block119;
	 //  @line: 57
Block120:
	 assume ($geint((i22115), (i184))==1);
	 goto Block121;
	 //  @line: 60
Block121:
	 //  @line: 60
	i23116 := 0;
	 goto Block123;
	 //  @line: 61
Block123:
	 //  @line: 61
	 call $i388 := int$Distances$max$2229((i081), (i184));
	 assert ($neint((2), (0))==1);
	 //  @line: 61
	$i489 := $divint(($i388), (2));
	 //  @line: 61
	i290 := $subint(($i489), (1));
	 //  @line: 62
	i24117 := 0;
	 goto Block124;
	 //  @line: 62
Block124:
	 goto Block127, Block125;
	 //  @line: 62
Block127:
	 //  @line: 62
	 assume ($negInt(($geint((i24117), (i081))))==1);
	 //  @line: 63
	$i15107 := $subint((i24117), (i290));
	 //  @line: 63
	 call i25118 := int$Distances$max$2229(($i15107), (0));
	 goto Block128;
	 //  @line: 62
Block125:
	 assume ($geint((i24117), (i081))==1);
	 goto Block126;
	 //  @line: 63
Block128:
	 //  @line: 63
	$i17110 := $addint((i24117), (i290));
	 //  @line: 63
	$i16109 := $subint((i184), (1));
	 //  @line: 63
	 call $i18111 := int$Distances$min$2230(($i17110), ($i16109));
	 goto Block129;
	 //  @line: 70
Block126:
	 goto Block147, Block149;
	 //  @line: 63
Block129:
	 goto Block130, Block132;
	 //  @line: 70
Block147:
	 assume ($neint((i23116), (0))==1);
	 goto Block148;
	 //  @line: 70
Block149:
	 //  @line: 70
	 assume ($negInt(($neint((i23116), (0))))==1);
	 goto Block150;
	 //  @line: 63
Block130:
	 assume ($gtint((i25118), ($i18111))==1);
	 goto Block131;
	 //  @line: 63
Block132:
	 //  @line: 63
	 assume ($negInt(($gtint((i25118), ($i18111))))==1);
	 assert ($neref((r079), ($null))==1);
	 //  @line: 64
	 call $c19112, $caughtEx1 := char$MyString$charAt$2242((r079), (i24117));
	 goto Block135, Block133;
	 //  @line: 73
Block148:
	 //  @line: 73
	 call r4119, $caughtEx1 := MyString$Distances$findMatch$2235((r079), (r285));
	 goto Block153, Block151;
	 //  @line: 76
Block150:
	 //  @line: 76
	__ret := 0;
	 return;
	 //  @line: 62
Block131:
	 //  @line: 62
	i24117 := $addint((i24117), (1));
	 goto Block146;
	 //  @line: 63
Block135:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block136;
	 //  @line: 63
Block133:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block134;
	 //  @line: 73
Block153:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block154;
	 //  @line: 73
Block151:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block152;
	 //  @line: 62
Block146:
	 goto Block124;
	 //  @line: 63
Block136:
	 assert ($neref((r182), ($null))==1);
	 //  @line: 64
	 call $c20113, $caughtEx1 := char$MyString$charAt$2242((r182), (i25118));
	 goto Block139, Block137;
	 //  @line: 63
Block134:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 73
Block154:
	 goto Block155;
	 //  @line: 73
Block152:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 63
Block139:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block140;
	 //  @line: 63
Block137:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block138;
	 //  @line: 74
Block155:
	 //  @line: 74
	 call r5120, $caughtEx1 := MyString$Distances$findMatch$2235((r182), (r386));
	 goto Block156, Block158;
	 //  @line: 63
Block140:
	 goto Block141;
	 //  @line: 63
Block138:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 74
Block156:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block157;
	 //  @line: 74
Block158:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block159;
	 //  @line: 64
Block141:
	 goto Block142, Block144;
	 //  @line: 74
Block157:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 74
Block159:
	 //  @line: 75
	i26121 := 0;
	 //  @line: 76
	i27122 := 0;
	 goto Block160;
	 //  @line: 64
Block142:
	 assume ($neint(($c19112), ($c20113))==1);
	 goto Block143;
	 //  @line: 64
Block144:
	 //  @line: 64
	 assume ($negInt(($neint(($c19112), ($c20113))))==1);
	 //  @line: 65
	i23116 := $addint((i23116), (1));
	 assert ($geint((i24117), (0))==1);
	 assert ($ltint((i24117), ($intArrSize[r285[$arrSizeIdx]]))==1);
	 //  @line: 66
	r285[i24117] := 1;
	 assert ($geint((i25118), (0))==1);
	 assert ($ltint((i25118), ($intArrSize[r386[$arrSizeIdx]]))==1);
	 //  @line: 67
	r386[i25118] := 1;
	 goto Block131;
	 //  @line: 76
Block160:
	 assert ($neref((r4119), ($null))==1);
	 //  @line: 76
	 call $i597 := int$MyString$length$2241((r4119));
	 goto Block161;
	 //  @line: 63
Block143:
	 //  @line: 63
	i25118 := $addint((i25118), (1));
	 goto Block145;
	 //  @line: 76
Block161:
	 goto Block162, Block164;
	 //  @line: 63
Block145:
	 goto Block128;
	 //  @line: 76
Block162:
	 assume ($geint((i27122), ($i597))==1);
	 goto Block163;
	 //  @line: 76
Block164:
	 //  @line: 76
	 assume ($negInt(($geint((i27122), ($i597))))==1);
	 assert ($neref((r4119), ($null))==1);
	 //  @line: 77
	 call $c13105, $caughtEx1 := char$MyString$charAt$2242((r4119), (i27122));
	 goto Block165, Block167;
	 //  @line: 78
Block163:
	 assert ($neint((2), (0))==1);
	 //  @line: 78
	i28123 := $divint((i26121), (2));
	 goto Block177;
	 //  @line: 76
Block165:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block166;
	 //  @line: 76
Block167:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block168;
	 //  @line: 81
Block177:
	 assert ($neint((i081), (0))==1);
	 //  @line: 81
	$i799 := $divint((i23116), (i081));
	 assert ($neint((i184), (0))==1);
	 //  @line: 81
	$i698 := $divint((i23116), (i184));
	 //  @line: 81
	$i10102 := $addint(($i799), ($i698));
	 //  @line: 81
	$i8100 := $subint((i23116), (i28123));
	 assert ($neint((i23116), (0))==1);
	 //  @line: 81
	$i9101 := $divint(($i8100), (i23116));
	 //  @line: 81
	$i11103 := $addint(($i10102), ($i9101));
	 assert ($neint((3), (0))==1);
	 //  @line: 81
	$i12104 := $divint(($i11103), (3));
	 //  @line: 81
	__ret := $i12104;
	 return;
	 //  @line: 76
Block166:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 76
Block168:
	 assert ($neref((r5120), ($null))==1);
	 //  @line: 77
	 call $c14106, $caughtEx1 := char$MyString$charAt$2242((r5120), (i27122));
	 goto Block171, Block169;
	 //  @line: 76
Block171:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block172;
	 //  @line: 76
Block169:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block170;
	 //  @line: 76
Block172:
	 goto Block173;
	 //  @line: 76
Block170:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 77
Block173:
	 goto Block174, Block176;
	 //  @line: 77
Block174:
	 assume ($eqint(($c13105), ($c14106))==1);
	 goto Block175;
	 //  @line: 77
Block176:
	 //  @line: 77
	 assume ($negInt(($eqint(($c13105), ($c14106))))==1);
	 //  @line: 76
	i26121 := $addint((i26121), (1));
	 goto Block175;
	 //  @line: 76
Block175:
	 //  @line: 76
	i27122 := $addint((i27122), (1));
	 goto Block160;
}


	 //  @line: 84
// <Distances: void main(java.lang.String[])>
procedure void$Distances$main$2237($param_0 : [int]ref) returns ($Exep0 : ref) {
var $i2132 : int;
var $i8139 : int;
var i17148 : int;
var $r4129 : ref;
var $i12143 : int;
var $i13144 : int;
var r0125 : [int]ref;
var $i9140 : int;
var r2130 : ref;
var $i5136 : int;
var $i3133 : int;
var i16147 : int;
var $r3127 : ref;
var $i1131 : int;
var $i0126 : int;
var r1128 : ref;
var $i4135 : int;

 //temp local variables 
var $freshlocal6 : int;
var $freshlocal7 : int;
var $freshlocal2 : int;
var $freshlocal5 : int;
var $freshlocal3 : int;
var $caughtEx1 : ref;
var $freshlocal4 : int;

	 //  @line: 84
Block178:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block179;
Block179:
	r0125 := $param_0;
	 //  @line: 85
	i16147 := 1;
	 goto Block180;
	 //  @line: 85
Block180:
	 //  @line: 85
	$i0126 := $refArrSize[r0125[$arrSizeIdx]];
	 goto Block181;
	 //  @line: 85
Block181:
	 goto Block184, Block182;
	 //  @line: 85
Block184:
	 //  @line: 85
	 assume ($negInt(($gtint((i16147), ($i0126))))==1);
	 //  @line: 86
	$r3127 := $newvariable((185));
	 assume ($neref(($newvariable((185))), ($null))==1);
	 assert ($neref(($r3127), ($null))==1);
	 //  @line: 86
	 call void$MyString$$la$init$ra$$2239(($r3127), (i16147), (2));
	 //  @line: 86
	r1128 := $r3127;
	 //  @line: 87
	$r4129 := $newvariable((186));
	 assume ($neref(($newvariable((186))), ($null))==1);
	 assert ($neref(($r4129), ($null))==1);
	 //  @line: 87
	 call void$MyString$$la$init$ra$$2239(($r4129), (i16147), (3));
	 //  @line: 87
	r2130 := $r4129;
	 //  @line: 88
	$i1131 := $modint((i16147), (2));
	 goto Block187;
	 //  @line: 85
Block182:
	 assume ($gtint((i16147), ($i0126))==1);
	 goto Block183;
	 //  @line: 88
Block187:
	 goto Block188, Block190;
	 //  @line: 99
Block183:
	 return;
	 //  @line: 88
Block188:
	 assume ($neint(($i1131), (0))==1);
	 goto Block189;
	 //  @line: 88
Block190:
	 //  @line: 88
	 assume ($negInt(($neint(($i1131), (0))))==1);
	 //  @line: 89
	 call $i12143, $caughtEx1 := int$Distances$levenshtein$2232((r1128), (r2130));
	 goto Block191, Block193;
	 //  @line: 91
Block189:
	 //  @line: 91
	$i2132 := $modint((i16147), (3));
	 goto Block209;
	 //  @line: 88
Block191:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block192;
	 //  @line: 88
Block193:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block194;
	 //  @line: 91
Block209:
	 goto Block212, Block210;
	 //  @line: 88
Block192:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 88
Block194:
	 assert ($neint((2), (0))==1);
	 //  @line: 89
	$i13144 := $divint((i16147), (2));
	 goto Block195;
	 //  @line: 91
Block212:
	 //  @line: 91
	 assume ($negInt(($neint(($i2132), (0))))==1);
	 //  @line: 92
	 call $i8139, $caughtEx1 := int$Distances$levenshtein$2232((r1128), (r2130));
	 goto Block215, Block213;
	 //  @line: 91
Block210:
	 assume ($neint(($i2132), (0))==1);
	 goto Block211;
	 //  @line: 89
Block195:
	 goto Block196, Block198;
	 //  @line: 91
Block215:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block216;
	 //  @line: 91
Block213:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block214;
	 //  @line: 94
Block211:
	 //  @line: 94
	$i3133 := $modint((i16147), (5));
	 goto Block230;
	 //  @line: 89
Block196:
	 assume ($geint(($i12143), ($i13144))==1);
	 goto Block197;
	 //  @line: 89
Block198:
	 //  @line: 89
	 assume ($negInt(($geint(($i12143), ($i13144))))==1);
	 //  @line: 85
	 call $freshlocal2, $caughtEx1 := int$Distances$hamming$2234((r1128), (r2130));
	 goto Block199, Block201;
	 //  @line: 91
Block216:
	 assert ($neint((3), (0))==1);
	 //  @line: 92
	$i9140 := $divint((i16147), (3));
	 goto Block217;
	 //  @line: 91
Block214:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 94
Block230:
	 goto Block231, Block233;
	 //  @line: 90
Block197:
	 //  @line: 90
	 call $freshlocal3, $caughtEx1 := int$Distances$jaro$2236((r1128), (r2130));
	 goto Block204, Block206;
	 //  @line: 89
Block199:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block200;
	 //  @line: 89
Block201:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block202;
	 //  @line: 92
Block217:
	 goto Block220, Block218;
	 //  @line: 94
Block231:
	 assume ($neint(($i3133), (0))==1);
	 goto Block232;
	 //  @line: 94
Block233:
	 //  @line: 94
	 assume ($negInt(($neint(($i3133), (0))))==1);
	 //  @line: 95
	 call $i4135, $caughtEx1 := int$Distances$levenshtein$2232((r1128), (r2130));
	 goto Block234, Block236;
	 //  @line: 90
Block204:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block205;
	 //  @line: 90
Block206:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block207;
	 //  @line: 89
Block200:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 89
Block202:
	 goto Block203;
	 //  @line: 92
Block220:
	 //  @line: 92
	 assume ($negInt(($geint(($i8139), ($i9140))))==1);
	 //  @line: 85
	 call $freshlocal4, $caughtEx1 := int$Distances$hamming$2234((r1128), (r2130));
	 goto Block223, Block221;
	 //  @line: 92
Block218:
	 assume ($geint(($i8139), ($i9140))==1);
	 goto Block219;
	 //  @line: 97
Block232:
	 //  @line: 97
	i17148 := 0;
	 goto Block251;
	 //  @line: 94
Block234:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block235;
	 //  @line: 94
Block236:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block237;
	 //  @line: 90
Block205:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 90
Block207:
	 goto Block208;
	 //  @line: 85
Block203:
	 //  @line: 85
	i16147 := $addint((i16147), (1));
	 goto Block254;
	 //  @line: 92
Block223:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block224;
	 //  @line: 92
Block221:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block222;
	 //  @line: 93
Block219:
	 //  @line: 93
	 call $freshlocal5, $caughtEx1 := int$Distances$jaro$2236((r1128), (r2130));
	 goto Block227, Block225;
	 //  @line: 97
Block251:
	 goto Block253, Block252;
	 //  @line: 94
Block235:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 94
Block237:
	 assert ($neint((5), (0))==1);
	 //  @line: 95
	$i5136 := $divint((i16147), (5));
	 goto Block238;
	 //  @line: 90
Block208:
	 goto Block203;
	 //  @line: 85
Block254:
	 goto Block180;
	 //  @line: 92
Block224:
	 goto Block203;
	 //  @line: 92
Block222:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 93
Block227:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block228;
	 //  @line: 93
Block225:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block226;
	 //  @line: 97
Block253:
	 //  @line: 97
	 assume ($negInt(($geint((i17148), (100))))==1);
	 //  @line: 85
	i17148 := $addint((i17148), (1));
	 goto Block251;
	 //  @line: 97
Block252:
	 assume ($geint((i17148), (100))==1);
	 goto Block203;
	 //  @line: 95
Block238:
	 goto Block239, Block241;
	 //  @line: 93
Block228:
	 goto Block229;
	 //  @line: 93
Block226:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 95
Block239:
	 assume ($geint(($i4135), ($i5136))==1);
	 goto Block240;
	 //  @line: 95
Block241:
	 //  @line: 95
	 assume ($negInt(($geint(($i4135), ($i5136))))==1);
	 //  @line: 85
	 call $freshlocal6, $caughtEx1 := int$Distances$hamming$2234((r1128), (r2130));
	 goto Block242, Block244;
	 //  @line: 93
Block229:
	 goto Block203;
	 //  @line: 96
Block240:
	 //  @line: 96
	 call $freshlocal7, $caughtEx1 := int$Distances$jaro$2236((r1128), (r2130));
	 goto Block248, Block246;
	 //  @line: 95
Block242:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block243;
	 //  @line: 95
Block244:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block245;
	 //  @line: 96
Block248:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block249;
	 //  @line: 96
Block246:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block247;
	 //  @line: 95
Block243:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 95
Block245:
	 goto Block203;
	 //  @line: 96
Block249:
	 goto Block250;
	 //  @line: 96
Block247:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 96
Block250:
	 goto Block203;
}


// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 36
// <MyString: void append(char)>
procedure void$MyString$append$2243(__this : ref, $param_0 : int)
  modifies $HeapVar, $intArrSize;
  requires ($neref((__this), ($null))==1);
 {
var c0189 : int;
var i1185 : int;
var $c3191 : int;
var $i2186 : int;
var r0183 : ref;
var r1187 : [int]int;
var $r2184 : [int]int;
var i4192 : int;
var $r3190 : [int]int;
Block282:
	r0183 := __this;
	c0189 := $param_0;
	 assert ($neref((r0183), ($null))==1);
	 //  @line: 37
	$r2184 := $HeapVar[r0183, char$lp$$rp$$MyString$values255];
	 //  @line: 37
	i1185 := $intArrSize[$r2184[$arrSizeIdx]];
	 //  @line: 38
	$i2186 := $addint((i1185), (1));
	 //  @line: 38
	r1187 := $reftointarr(($newvariable((283))));
	$intArrSize[$reftointarr(($newvariable((283))))[$arrSizeIdx]] := $i2186;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((283))))), ($intArrNull))))==1);
	 //  @line: 39
	i4192 := 0;
	 goto Block284;
	 //  @line: 39
Block284:
	 goto Block287, Block285;
	 //  @line: 39
Block287:
	 //  @line: 39
	 assume ($negInt(($geint((i4192), (i1185))))==1);
	 assert ($neref((r0183), ($null))==1);
	 //  @line: 42
	$r3190 := $HeapVar[r0183, char$lp$$rp$$MyString$values255];
	 assert ($geint((i4192), (0))==1);
	 assert ($ltint((i4192), ($intArrSize[$r3190[$arrSizeIdx]]))==1);
	 //  @line: 42
	$c3191 := $r3190[i4192];
	 assert ($geint((i4192), (0))==1);
	 assert ($ltint((i4192), ($intArrSize[r1187[$arrSizeIdx]]))==1);
	 //  @line: 42
	r1187[i4192] := $c3191;
	 //  @line: 42
	i4192 := $addint((i4192), (1));
	 goto Block284;
	 //  @line: 39
Block285:
	 assume ($geint((i4192), (i1185))==1);
	 goto Block286;
	 //  @line: 40
Block286:
	 assert ($geint((i1185), (0))==1);
	 assert ($ltint((i1185), ($intArrSize[r1187[$arrSizeIdx]]))==1);
	 //  @line: 40
	r1187[i1185] := c0189;
	 goto Block288;
	 //  @line: 41
Block288:
	 assert ($neref((r0183), ($null))==1);
	 //  @line: 41
	$HeapVar[r0183, char$lp$$rp$$MyString$values255] := r1187;
	 return;
}


	 //  @line: 18
// <MyString: void <init>(char[])>
procedure void$MyString$$la$init$ra$$2240(__this : ref, $param_0 : [int]int)
  modifies $HeapVar, $intArrSize;
  requires ($neref((__this), ($null))==1);
 {
var r0163 : ref;
var $r4171 : [int]int;
var $i0165 : int;
var $r3168 : [int]int;
var $r2166 : [int]int;
var r1164 : [int]int;
var i3172 : int;
var $i1169 : int;
var $c2170 : int;
Block263:
	r0163 := __this;
	r1164 := $param_0;
	 assert ($neref((r0163), ($null))==1);
	 //  @line: 19
	 call void$java.lang.Object$$la$init$ra$$28((r0163));
	 //  @line: 20
	$i0165 := $intArrSize[r1164[$arrSizeIdx]];
	 //  @line: 20
	$r2166 := $reftointarr(($newvariable((264))));
	$intArrSize[$reftointarr(($newvariable((264))))[$arrSizeIdx]] := $i0165;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((264))))), ($intArrNull))))==1);
	 assert ($neref((r0163), ($null))==1);
	 //  @line: 20
	$HeapVar[r0163, char$lp$$rp$$MyString$values255] := $r2166;
	 //  @line: 22
	i3172 := 0;
	 goto Block265;
	 //  @line: 22
Block265:
	 assert ($neref((r0163), ($null))==1);
	 //  @line: 22
	$r3168 := $HeapVar[r0163, char$lp$$rp$$MyString$values255];
	 //  @line: 22
	$i1169 := $intArrSize[$r3168[$arrSizeIdx]];
	 goto Block266;
	 //  @line: 22
Block266:
	 goto Block267, Block269;
	 //  @line: 22
Block267:
	 assume ($geint((i3172), ($i1169))==1);
	 goto Block268;
	 //  @line: 22
Block269:
	 //  @line: 22
	 assume ($negInt(($geint((i3172), ($i1169))))==1);
	 assert ($neref((r0163), ($null))==1);
	 //  @line: 23
	$r4171 := $HeapVar[r0163, char$lp$$rp$$MyString$values255];
	 assert ($geint((i3172), (0))==1);
	 assert ($ltint((i3172), ($intArrSize[r1164[$arrSizeIdx]]))==1);
	 //  @line: 23
	$c2170 := r1164[i3172];
	 assert ($geint((i3172), (0))==1);
	 assert ($ltint((i3172), ($intArrSize[$r4171[$arrSizeIdx]]))==1);
	 //  @line: 23
	$r4171[i3172] := $c2170;
	 //  @line: 22
	i3172 := $addint((i3172), (1));
	 goto Block265;
	 //  @line: 24
Block268:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 11
// <Distances: int min(int,int,int)>
procedure int$Distances$min$2231($param_0 : int, $param_1 : int, $param_2 : int) returns (__ret : int) {
var $i414 : int;
var i010 : int;
var i111 : int;
var i212 : int;
var $i313 : int;
Block29:
	i010 := $param_0;
	i111 := $param_1;
	i212 := $param_2;
	 //  @line: 12
	 call $i313 := int$Distances$min$2230((i111), (i212));
	 //  @line: 12
	 call $i414 := int$Distances$min$2230((i010), ($i313));
	 //  @line: 12
	__ret := $i414;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 7
// <MyString: void <init>()>
procedure void$MyString$$la$init$ra$$2238(__this : ref)
  modifies $HeapVar, $intArrSize;
  requires ($neref((__this), ($null))==1);
 {
var r0149 : ref;
var $r1150 : [int]int;
Block255:
	r0149 := __this;
	 assert ($neref((r0149), ($null))==1);
	 //  @line: 8
	 call void$java.lang.Object$$la$init$ra$$28((r0149));
	 //  @line: 9
	$r1150 := $reftointarr(($newvariable((256))));
	$intArrSize[$reftointarr(($newvariable((256))))[$arrSizeIdx]] := 0;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((256))))), ($intArrNull))))==1);
	 assert ($neref((r0149), ($null))==1);
	 //  @line: 9
	$HeapVar[r0149, char$lp$$rp$$MyString$values255] := $r1150;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 11
// <MyString: void <init>(int,int)>
procedure void$MyString$$la$init$ra$$2239(__this : ref, $param_0 : int, $param_1 : int)
  modifies $HeapVar, $intArrSize;
  requires ($neref((__this), ($null))==1);
 {
var r0151 : ref;
var i0152 : int;
var $i3157 : int;
var $r1153 : [int]int;
var i6162 : int;
var $c5160 : int;
var i1155 : int;
var $i4158 : int;
var $i2156 : int;
var $r3161 : [int]int;
var $r2159 : [int]int;
Block257:
	r0151 := __this;
	i0152 := $param_0;
	i1155 := $param_1;
	 assert ($neref((r0151), ($null))==1);
	 //  @line: 12
	 call void$java.lang.Object$$la$init$ra$$28((r0151));
	 //  @line: 13
	$r1153 := $reftointarr(($newvariable((258))));
	$intArrSize[$reftointarr(($newvariable((258))))[$arrSizeIdx]] := i0152;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((258))))), ($intArrNull))))==1);
	 assert ($neref((r0151), ($null))==1);
	 //  @line: 13
	$HeapVar[r0151, char$lp$$rp$$MyString$values255] := $r1153;
	 //  @line: 15
	i6162 := 0;
	 goto Block259;
	 //  @line: 15
Block259:
	 goto Block260, Block262;
	 //  @line: 15
Block260:
	 assume ($geint((i6162), (i0152))==1);
	 goto Block261;
	 //  @line: 15
Block262:
	 //  @line: 15
	 assume ($negInt(($geint((i6162), (i0152))))==1);
	 assert ($neref((r0151), ($null))==1);
	 //  @line: 16
	$r3161 := $HeapVar[r0151, char$lp$$rp$$MyString$values255];
	 //  @line: 16
	$r2159 := char$lp$$rp$$MyString$charSet254;
	 //  @line: 16
	$i3157 := $addint((i6162), (i1155));
	 //  @line: 16
	$i2156 := int$MyString$charSetLen0;
	 //  @line: 16
	$i4158 := $modint(($i3157), ($i2156));
	 assert ($geint(($i4158), (0))==1);
	 assert ($ltint(($i4158), ($intArrSize[$r2159[$arrSizeIdx]]))==1);
	 //  @line: 16
	$c5160 := $r2159[$i4158];
	 assert ($geint((i6162), (0))==1);
	 assert ($ltint((i6162), ($intArrSize[$r3161[$arrSizeIdx]]))==1);
	 //  @line: 16
	$r3161[i6162] := $c5160;
	 //  @line: 15
	i6162 := $addint((i6162), (1));
	 goto Block259;
	 //  @line: 17
Block261:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 34
// <Distances: int hamming(MyString,MyString)>
procedure int$Distances$hamming$2234($param_0 : ref, $param_1 : ref) returns (__ret : int, $Exep0 : ref) {
var i061 : int;
var r059 : ref;
var r162 : ref;
var $c367 : int;
var i569 : int;
var $c266 : int;
var $i163 : int;
var i468 : int;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 34
Block72:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block73;
Block73:
	r059 := $param_0;
	r162 := $param_1;
	 assert ($neref((r059), ($null))==1);
	 //  @line: 35
	 call i061 := int$MyString$length$2241((r059));
	 assert ($neref((r162), ($null))==1);
	 //  @line: 37
	 call $i163 := int$MyString$length$2241((r162));
	 goto Block74;
	 //  @line: 37
Block74:
	 goto Block75, Block77;
	 //  @line: 37
Block75:
	 assume ($eqint((i061), ($i163))==1);
	 goto Block76;
	 //  @line: 37
Block77:
	 //  @line: 37
	 assume ($negInt(($eqint((i061), ($i163))))==1);
	 //  @line: 40
	__ret := -1;
	 return;
	 //  @line: 39
Block76:
	 //  @line: 39
	i468 := 0;
	 goto Block78;
	 //  @line: 40
Block78:
	 //  @line: 40
	i569 := 0;
	 goto Block79;
	 //  @line: 40
Block79:
	 goto Block80, Block82;
	 //  @line: 40
Block80:
	 assume ($geint((i569), (i061))==1);
	 goto Block81;
	 //  @line: 40
Block82:
	 //  @line: 40
	 assume ($negInt(($geint((i569), (i061))))==1);
	 assert ($neref((r059), ($null))==1);
	 //  @line: 41
	 call $c266, $caughtEx1 := char$MyString$charAt$2242((r059), (i569));
	 goto Block85, Block83;
	 //  @line: 42
Block81:
	 //  @line: 42
	__ret := i468;
	 return;
	 //  @line: 40
Block85:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block86;
	 //  @line: 40
Block83:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block84;
	 //  @line: 40
Block86:
	 assert ($neref((r162), ($null))==1);
	 //  @line: 41
	 call $c367, $caughtEx1 := char$MyString$charAt$2242((r162), (i569));
	 goto Block87, Block89;
	 //  @line: 40
Block84:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 40
Block87:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block88;
	 //  @line: 40
Block89:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block90;
	 //  @line: 40
Block88:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 40
Block90:
	 goto Block91;
	 //  @line: 41
Block91:
	 goto Block94, Block92;
	 //  @line: 41
Block94:
	 //  @line: 41
	 assume ($negInt(($eqint(($c266), ($c367))))==1);
	 //  @line: 40
	i468 := $addint((i468), (1));
	 goto Block93;
	 //  @line: 41
Block92:
	 assume ($eqint(($c266), ($c367))==1);
	 goto Block93;
	 //  @line: 40
Block93:
	 //  @line: 40
	i569 := $addint((i569), (1));
	 goto Block79;
}


// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 30
// <Distances: int abs(int)>
procedure int$Distances$abs$2233($param_0 : int) returns (__ret : int) {
var $i158 : int;
var i056 : int;
Block66:
	i056 := $param_0;
	 goto Block67;
	 //  @line: 31
Block67:
	 goto Block68, Block70;
	 //  @line: 31
Block68:
	 assume ($ltint((i056), (0))==1);
	 goto Block69;
	 //  @line: 31
Block70:
	 //  @line: 31
	 assume ($negInt(($ltint((i056), (0))))==1);
	 //  @line: 31
	$i158 := i056;
	 goto Block71;
	 //  @line: 31
Block69:
	 //  @line: 31
	$i158 := $mulint((-1), (i056));
	 goto Block71;
	 //  @line: 31
Block71:
	 //  @line: 31
	__ret := $i158;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 26
// <MyString: int length()>
procedure int$MyString$length$2241(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i0175 : int;
var r0173 : ref;
var $r1174 : [int]int;
Block270:
	r0173 := __this;
	 assert ($neref((r0173), ($null))==1);
	 //  @line: 27
	$r1174 := $HeapVar[r0173, char$lp$$rp$$MyString$values255];
	 //  @line: 27
	$i0175 := $intArrSize[$r1174[$arrSizeIdx]];
	 //  @line: 27
	__ret := $i0175;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 7
// <Distances: int min(int,int)>
procedure int$Distances$min$2230($param_0 : int, $param_1 : int) returns (__ret : int) {
var $i29 : int;
var i17 : int;
var i06 : int;
Block23:
	i06 := $param_0;
	i17 := $param_1;
	 goto Block24;
	 //  @line: 8
Block24:
	 goto Block27, Block25;
	 //  @line: 8
Block27:
	 //  @line: 8
	 assume ($negInt(($leint((i06), (i17))))==1);
	 //  @line: 8
	$i29 := i17;
	 goto Block28;
	 //  @line: 8
Block25:
	 assume ($leint((i06), (i17))==1);
	 goto Block26;
	 //  @line: 8
Block28:
	 //  @line: 8
	__ret := $i29;
	 return;
	 //  @line: 8
Block26:
	 //  @line: 8
	$i29 := i06;
	 goto Block28;
}


	 //  @line: 1
// <MyString: void <clinit>()>
procedure void$MyString$$la$clinit$ra$$2244()
  modifies char$lp$$rp$$MyString$charSet254, $intArrSize, int$MyString$charSetLen0;
 {
var $r0193 : [int]int;
var $r1194 : [int]int;
var $i0195 : int;
	 //  @line: 2
Block289:
	 //  @line: 2
	$r0193 := $reftointarr(($newvariable((290))));
	$intArrSize[$reftointarr(($newvariable((290))))[$arrSizeIdx]] := 26;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((290))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[0] := 97;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[1] := 98;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[2] := 99;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[3] := 100;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[4] := 101;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[5] := 102;
	 assert ($geint((6), (0))==1);
	 assert ($ltint((6), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[6] := 103;
	 assert ($geint((7), (0))==1);
	 assert ($ltint((7), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[7] := 104;
	 assert ($geint((8), (0))==1);
	 assert ($ltint((8), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[8] := 105;
	 assert ($geint((9), (0))==1);
	 assert ($ltint((9), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[9] := 106;
	 assert ($geint((10), (0))==1);
	 assert ($ltint((10), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[10] := 107;
	 assert ($geint((11), (0))==1);
	 assert ($ltint((11), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[11] := 108;
	 assert ($geint((12), (0))==1);
	 assert ($ltint((12), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[12] := 109;
	 assert ($geint((13), (0))==1);
	 assert ($ltint((13), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[13] := 110;
	 assert ($geint((14), (0))==1);
	 assert ($ltint((14), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[14] := 111;
	 assert ($geint((15), (0))==1);
	 assert ($ltint((15), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[15] := 112;
	 assert ($geint((16), (0))==1);
	 assert ($ltint((16), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[16] := 113;
	 assert ($geint((17), (0))==1);
	 assert ($ltint((17), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[17] := 114;
	 assert ($geint((18), (0))==1);
	 assert ($ltint((18), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[18] := 115;
	 assert ($geint((19), (0))==1);
	 assert ($ltint((19), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[19] := 116;
	 assert ($geint((20), (0))==1);
	 assert ($ltint((20), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[20] := 117;
	 assert ($geint((21), (0))==1);
	 assert ($ltint((21), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[21] := 118;
	 assert ($geint((22), (0))==1);
	 assert ($ltint((22), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[22] := 119;
	 assert ($geint((23), (0))==1);
	 assert ($ltint((23), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[23] := 120;
	 assert ($geint((24), (0))==1);
	 assert ($ltint((24), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[24] := 121;
	 assert ($geint((25), (0))==1);
	 assert ($ltint((25), ($intArrSize[$r0193[$arrSizeIdx]]))==1);
	 //  @line: 2
	$r0193[25] := 122;
	 //  @line: 2
	char$lp$$rp$$MyString$charSet254 := $r0193;
	 //  @line: 4
	$r1194 := char$lp$$rp$$MyString$charSet254;
	 //  @line: 4
	$i0195 := $intArrSize[$r1194[$arrSizeIdx]];
	 //  @line: 4
	int$MyString$charSetLen0 := $i0195;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// <Distances: void <init>()>
procedure void$Distances$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 3
// <Distances: int max(int,int)>
procedure int$Distances$max$2229($param_0 : int, $param_1 : int) returns (__ret : int) {
var i13 : int;
var i02 : int;
var $i25 : int;
Block17:
	i02 := $param_0;
	i13 := $param_1;
	 goto Block18;
	 //  @line: 4
Block18:
	 goto Block21, Block19;
	 //  @line: 4
Block21:
	 //  @line: 4
	 assume ($negInt(($geint((i02), (i13))))==1);
	 //  @line: 4
	$i25 := i13;
	 goto Block22;
	 //  @line: 4
Block19:
	 assume ($geint((i02), (i13))==1);
	 goto Block20;
	 //  @line: 4
Block22:
	 //  @line: 4
	__ret := $i25;
	 return;
	 //  @line: 4
Block20:
	 //  @line: 4
	$i25 := i02;
	 goto Block22;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


