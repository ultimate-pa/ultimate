type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 





// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 8
// <simple.mirrorInterv.Main: void main(java.lang.String[])>
procedure void$simple.mirrorInterv.Main$main$2229($param_0 : [int]ref) {
var $i03 : int;
var r02 : [int]ref;
Block17:
	r02 := $param_0;
	 //  @line: 9
	$i03 := $refArrSize[r02[$arrSizeIdx]];
	 //  @line: 9
	 call void$simple.mirrorInterv.MirrorInterv$loop$2231(($i03));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <simple.mirrorInterv.MirrorInterv: void <init>()>
procedure void$simple.mirrorInterv.MirrorInterv$$la$init$ra$$2230(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r04 : ref;
Block18:
	r04 := __this;
	 assert ($neref((r04), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r04));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 8
// <simple.mirrorInterv.MirrorInterv: void loop(int)>
procedure void$simple.mirrorInterv.MirrorInterv$loop$2231($param_0 : int) {
var i414 : int;
var $z115 : int;
var $z216 : int;
var $i07 : int;
var i313 : int;
var $z08 : int;
var $i210 : int;
var $i19 : int;
Block19:
	i313 := $param_0;
	 //  @line: 9
	i414 := 20;
	 goto Block20;
	 //  @line: 10
Block20:
	 //  @line: 10
	$i07 := $negInt((i414));
	 goto Block21;
	 //  @line: 10
Block21:
	 goto Block22, Block24;
	 //  @line: 10
Block22:
	 assume ($gtint(($i07), (i313))==1);
	 goto Block23;
	 //  @line: 10
Block24:
	 //  @line: 10
	 assume ($negInt(($gtint(($i07), (i313))))==1);
	 //  @line: 12
	$z115 := 1;
	 goto Block25;
	 //  @line: 12
Block23:
	 //  @line: 12
	$z115 := 0;
	 goto Block25;
	 //  @line: 10
Block25:
	 goto Block28, Block26;
	 //  @line: 10
Block28:
	 //  @line: 10
	 assume ($negInt(($gtint((i313), (i414))))==1);
	 goto Block29;
	 //  @line: 10
Block26:
	 assume ($gtint((i313), (i414))==1);
	 goto Block27;
	 //  @line: 12
Block29:
	 //  @line: 12
	$z216 := 1;
	 goto Block30;
	 //  @line: 12
Block27:
	 //  @line: 12
	$z216 := 0;
	 goto Block30;
	 //  @line: 10
Block30:
	 //  @line: 10
	$z08 := $andint(($z115), ($z216));
	 goto Block31;
	 //  @line: 10
Block31:
	 goto Block34, Block32;
	 //  @line: 10
Block34:
	 //  @line: 10
	 assume ($negInt(($eqint(($z08), (0))))==1);
	 //  @line: 11
	$i19 := $subint((i414), (i313));
	 goto Block35;
	 //  @line: 10
Block32:
	 assume ($eqint(($z08), (0))==1);
	 goto Block33;
	 //  @line: 11
Block35:
	 goto Block38, Block36;
	 //  @line: 22
Block33:
	 return;
	 //  @line: 11
Block38:
	 //  @line: 11
	 assume ($negInt(($ltint(($i19), (5))))==1);
	 //  @line: 10
	$i210 := $addint((i414), (i313));
	 goto Block39;
	 //  @line: 11
Block36:
	 assume ($ltint(($i19), (5))==1);
	 goto Block37;
	 //  @line: 10
Block39:
	 goto Block40, Block42;
	 //  @line: 12
Block37:
	 //  @line: 12
	i313 := $mulint((i313), (-1));
	 goto Block20;
	 //  @line: 10
Block40:
	 assume ($geint(($i210), (5))==1);
	 goto Block41;
	 //  @line: 10
Block42:
	 //  @line: 10
	 assume ($negInt(($geint(($i210), (5))))==1);
	 goto Block37;
	 //  @line: 14
Block41:
	 //  @line: 14
	i414 := $addint((i414), (1));
	 goto Block43;
	 //  @line: 15
Block43:
	 //  @line: 15
	i313 := $addint((i313), (-1));
	 goto Block44;
	 //  @line: 16
Block44:
	 goto Block46, Block45;
	 //  @line: 16
Block46:
	 //  @line: 16
	 assume ($negInt(($neint((i313), (0))))==1);
	 //  @line: 17
	i414 := -1;
	 goto Block20;
	 //  @line: 16
Block45:
	 assume ($neint((i313), (0))==1);
	 goto Block20;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 2
// <simple.mirrorInterv.Main: void <init>()>
procedure void$simple.mirrorInterv.Main$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


