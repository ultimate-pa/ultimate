type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var DivTernary2.Nats$DivTernary2.Nats$pred254 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 4
// <DivTernary2.DivTernary2: DivTernary2.Nats div(DivTernary2.Nats,DivTernary2.Nats,DivTernary2.Nats)>
procedure DivTernary2.Nats$DivTernary2.DivTernary2$div$2229($param_0 : ref, $param_1 : ref, $param_2 : ref) returns (__ret : ref) {
var $z03 : int;
var $r813 : ref;
var r14 : ref;
var $r712 : ref;
var $r510 : ref;
var $z15 : int;
var $r49 : ref;
var r06 : ref;
var r22 : ref;
var $r914 : ref;
var $r38 : ref;
var $z27 : int;
var $r611 : ref;
Block17:
	r06 := $param_0;
	r14 := $param_1;
	r22 := $param_2;
	 assert ($neref((r22), ($null))==1);
	 //  @line: 5
	 call $z03 := boolean$DivTernary2.Nats$isZero$2235((r22));
	 goto Block18;
	 //  @line: 5
Block18:
	 goto Block21, Block19;
	 //  @line: 5
Block21:
	 //  @line: 5
	 assume ($negInt(($eqint(($z03), (0))))==1);
	 //  @line: 6
	 call $r914 := DivTernary2.Nats$DivTernary2.Nats$zero$2236();
	 //  @line: 6
	__ret := $r914;
	 return;
	 //  @line: 5
Block19:
	 assume ($eqint(($z03), (0))==1);
	 goto Block20;
	 //  @line: 8
Block20:
	 assert ($neref((r14), ($null))==1);
	 //  @line: 8
	 call $z15 := boolean$DivTernary2.Nats$isZero$2235((r14));
	 goto Block22;
	 //  @line: 8
Block22:
	 goto Block23, Block25;
	 //  @line: 8
Block23:
	 assume ($eqint(($z15), (0))==1);
	 goto Block24;
	 //  @line: 8
Block25:
	 //  @line: 8
	 assume ($negInt(($eqint(($z15), (0))))==1);
	 //  @line: 9
	 call $r712 := DivTernary2.Nats$DivTernary2.DivTernary2$div$2229((r06), (r22), (r22));
	 //  @line: 9
	 call $r813 := DivTernary2.Nats$DivTernary2.Nats$succ$2237(($r712));
	 //  @line: 9
	__ret := $r813;
	 return;
	 //  @line: 11
Block24:
	 assert ($neref((r06), ($null))==1);
	 //  @line: 11
	 call $z27 := boolean$DivTernary2.Nats$isZero$2235((r06));
	 goto Block26;
	 //  @line: 11
Block26:
	 goto Block27, Block29;
	 //  @line: 11
Block27:
	 assume ($eqint(($z27), (0))==1);
	 goto Block28;
	 //  @line: 11
Block29:
	 //  @line: 11
	 assume ($negInt(($eqint(($z27), (0))))==1);
	 //  @line: 12
	 call $r611 := DivTernary2.Nats$DivTernary2.Nats$zero$2236();
	 //  @line: 12
	__ret := $r611;
	 return;
	 //  @line: 14
Block28:
	 assert ($neref((r06), ($null))==1);
	 //  @line: 14
	$r49 := $HeapVar[r06, DivTernary2.Nats$DivTernary2.Nats$pred254];
	 goto Block30;
	 //  @line: 14
Block30:
	 assert ($neref((r14), ($null))==1);
	 //  @line: 14
	$r38 := $HeapVar[r14, DivTernary2.Nats$DivTernary2.Nats$pred254];
	 //  @line: 14
	 call $r510 := DivTernary2.Nats$DivTernary2.DivTernary2$div$2229(($r49), ($r38), (r22));
	 //  @line: 14
	__ret := $r510;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



	 //  @line: 46
// <DivTernary2.Nats: DivTernary2.Nats copy()>
procedure DivTernary2.Nats$DivTernary2.Nats$copy$2238(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var $r451 : ref;
var $r552 : ref;
var r046 : ref;
var r150 : ref;
var $r247 : ref;
var $r348 : ref;
Block60:
	r046 := __this;
	 assert ($neref((r046), ($null))==1);
	 //  @line: 47
	$r247 := $HeapVar[r046, DivTernary2.Nats$DivTernary2.Nats$pred254];
	 goto Block61;
	 //  @line: 47
Block61:
	 goto Block64, Block62;
	 //  @line: 47
Block64:
	 //  @line: 47
	 assume ($negInt(($neref(($r247), ($null))))==1);
	 //  @line: 48
	$r552 := $newvariable((65));
	 assume ($neref(($newvariable((65))), ($null))==1);
	 assert ($neref(($r552), ($null))==1);
	 //  @line: 48
	 call void$DivTernary2.Nats$$la$init$ra$$2231(($r552));
	 //  @line: 48
	__ret := $r552;
	 return;
	 //  @line: 47
Block62:
	 assume ($neref(($r247), ($null))==1);
	 goto Block63;
	 //  @line: 50
Block63:
	 assert ($neref((r046), ($null))==1);
	 //  @line: 50
	$r348 := $HeapVar[r046, DivTernary2.Nats$DivTernary2.Nats$pred254];
	 goto Block66;
	 //  @line: 50
Block66:
	 assert ($neref(($r348), ($null))==1);
	 //  @line: 50
	 call r150 := DivTernary2.Nats$DivTernary2.Nats$copy$2238(($r348));
	 //  @line: 51
	 call $r451 := DivTernary2.Nats$DivTernary2.Nats$succ$2237((r150));
	 //  @line: 51
	__ret := $r451;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 29
// <DivTernary2.Nats: boolean isZero()>
procedure boolean$DivTernary2.Nats$isZero$2235(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $z041 : int;
var r038 : ref;
var $r139 : ref;
Block50:
	r038 := __this;
	 assert ($neref((r038), ($null))==1);
	 //  @line: 30
	$r139 := $HeapVar[r038, DivTernary2.Nats$DivTernary2.Nats$pred254];
	 goto Block51;
	 //  @line: 30
Block51:
	 goto Block52, Block54;
	 //  @line: 30
Block52:
	 assume ($neref(($r139), ($null))==1);
	 goto Block53;
	 //  @line: 30
Block54:
	 //  @line: 30
	 assume ($negInt(($neref(($r139), ($null))))==1);
	 //  @line: 30
	$z041 := 1;
	 goto Block55;
	 //  @line: 30
Block53:
	 //  @line: 30
	$z041 := 0;
	 goto Block55;
	 //  @line: 30
Block55:
	 //  @line: 30
	__ret := $z041;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


	 //  @line: 1
// <DivTernary2.DivTernary2: void <init>()>
procedure void$DivTernary2.DivTernary2$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 2
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 8
// <DivTernary2.Nats: void <init>(int)>
procedure void$DivTernary2.Nats$$la$init$ra$$2232(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i027 : int;
var r026 : ref;
var $r128 : ref;
var $i129 : int;
Block35:
	r026 := __this;
	i027 := $param_0;
	 assert ($neref((r026), ($null))==1);
	 //  @line: 9
	 call void$java.lang.Object$$la$init$ra$$28((r026));
	 goto Block36;
	 //  @line: 10
Block36:
	 goto Block37, Block39;
	 //  @line: 10
Block37:
	 assume ($gtint((i027), (0))==1);
	 goto Block38;
	 //  @line: 10
Block39:
	 //  @line: 10
	 assume ($negInt(($gtint((i027), (0))))==1);
	 assert ($neref((r026), ($null))==1);
	 //  @line: 11
	$HeapVar[r026, DivTernary2.Nats$DivTernary2.Nats$pred254] := $null;
	 goto Block40;
	 //  @line: 13
Block38:
	 //  @line: 13
	$r128 := $newvariable((41));
	 assume ($neref(($newvariable((41))), ($null))==1);
	 goto Block42;
	 //  @line: 15
Block40:
	 return;
	 //  @line: 13
Block42:
	 //  @line: 13
	$i129 := $subint((i027), (1));
	 assert ($neref(($r128), ($null))==1);
	 //  @line: 13
	 call void$DivTernary2.Nats$$la$init$ra$$2232(($r128), ($i129));
	 assert ($neref((r026), ($null))==1);
	 //  @line: 13
	$HeapVar[r026, DivTernary2.Nats$DivTernary2.Nats$pred254] := $r128;
	 goto Block40;
}


// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 18
// <DivTernary2.DivTernary2: void main(java.lang.String[])>
procedure void$DivTernary2.DivTernary2$main$2230($param_0 : [int]ref)
  modifies $stringSize;
 {
var r119 : ref;
var $r520 : ref;
var $r417 : ref;
var $i018 : int;
var r016 : [int]ref;
var $r315 : ref;
var $i122 : int;
var r223 : ref;
var $r621 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block31:
	r016 := $param_0;
	 //  @line: 19
	$r315 := $newvariable((32));
	 assume ($neref(($newvariable((32))), ($null))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($refArrSize[r016[$arrSizeIdx]]))==1);
	 //  @line: 19
	$r417 := r016[0];
	$i018 := $stringSize[$r417];
	 assert ($neref(($r315), ($null))==1);
	 //  @line: 19
	 call void$DivTernary2.Nats$$la$init$ra$$2232(($r315), ($i018));
	 //  @line: 19
	r119 := $r315;
	 //  @line: 20
	$r520 := $newvariable((33));
	 assume ($neref(($newvariable((33))), ($null))==1);
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($refArrSize[r016[$arrSizeIdx]]))==1);
	 //  @line: 20
	$r621 := r016[1];
	$i122 := $stringSize[$r621];
	 assert ($neref(($r520), ($null))==1);
	 //  @line: 20
	 call void$DivTernary2.Nats$$la$init$ra$$2232(($r520), ($i122));
	 //  @line: 20
	r223 := $r520;
	 //  @line: 22
	 call $freshlocal0 := DivTernary2.Nats$DivTernary2.DivTernary2$div$2229((r119), (r223), (r223));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 17
// <DivTernary2.Nats: int toInt()>
procedure int$DivTernary2.Nats$toInt$2233(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $r232 : ref;
var $i033 : int;
var $r131 : ref;
var r030 : ref;
var $i134 : int;
Block43:
	r030 := __this;
	 assert ($neref((r030), ($null))==1);
	 //  @line: 18
	$r131 := $HeapVar[r030, DivTernary2.Nats$DivTernary2.Nats$pred254];
	 goto Block44;
	 //  @line: 18
Block44:
	 goto Block45, Block47;
	 //  @line: 18
Block45:
	 assume ($neref(($r131), ($null))==1);
	 goto Block46;
	 //  @line: 18
Block47:
	 //  @line: 18
	 assume ($negInt(($neref(($r131), ($null))))==1);
	 //  @line: 19
	__ret := 0;
	 return;
	 //  @line: 21
Block46:
	 assert ($neref((r030), ($null))==1);
	 //  @line: 21
	$r232 := $HeapVar[r030, DivTernary2.Nats$DivTernary2.Nats$pred254];
	 goto Block48;
	 //  @line: 21
Block48:
	 assert ($neref(($r232), ($null))==1);
	 //  @line: 21
	 call $i033 := int$DivTernary2.Nats$toInt$2233(($r232));
	 //  @line: 21
	$i134 := $addint(($i033), (1));
	 //  @line: 21
	__ret := $i134;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 5
// <DivTernary2.Nats: void <init>()>
procedure void$DivTernary2.Nats$$la$init$ra$$2231(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r025 : ref;
Block34:
	r025 := __this;
	 assert ($neref((r025), ($null))==1);
	 //  @line: 6
	 call void$java.lang.Object$$la$init$ra$$28((r025));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 33
// <DivTernary2.Nats: DivTernary2.Nats zero()>
procedure DivTernary2.Nats$DivTernary2.Nats$zero$2236() returns (__ret : ref) {
var $r042 : ref;
	 //  @line: 34
Block56:
	 //  @line: 34
	$r042 := $newvariable((57));
	 assume ($neref(($newvariable((57))), ($null))==1);
	 assert ($neref(($r042), ($null))==1);
	 //  @line: 34
	 call void$DivTernary2.Nats$$la$init$ra$$2231(($r042));
	 //  @line: 34
	__ret := $r042;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



	 //  @line: 25
// <DivTernary2.Nats: java.lang.String toString()>
procedure java.lang.String$DivTernary2.Nats$toString$2234(__this : ref) returns (__ret : ref)
  modifies $stringSize;
  requires ($neref((__this), ($null))==1);
 {
var r035 : ref;
var $i036 : int;
var $r137 : ref;
Block49:
	r035 := __this;
	 assert ($neref((r035), ($null))==1);
	 //  @line: 26
	 call $i036 := int$DivTernary2.Nats$toInt$2233((r035));
	 //  @line: 26
	 call $r137 := java.lang.String$java.lang.String$valueOf$129(($i036));
	 //  @line: 26
	__ret := $r137;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 37
// <DivTernary2.Nats: DivTernary2.Nats succ(DivTernary2.Nats)>
procedure DivTernary2.Nats$DivTernary2.Nats$succ$2237($param_0 : ref) returns (__ret : ref)
  modifies $HeapVar;
 {
var r045 : ref;
var r144 : ref;
var $r243 : ref;
Block58:
	r045 := $param_0;
	 //  @line: 38
	$r243 := $newvariable((59));
	 assume ($neref(($newvariable((59))), ($null))==1);
	 assert ($neref(($r243), ($null))==1);
	 //  @line: 38
	 call void$DivTernary2.Nats$$la$init$ra$$2231(($r243));
	 //  @line: 38
	r144 := $r243;
	 assert ($neref((r144), ($null))==1);
	 //  @line: 39
	$HeapVar[r144, DivTernary2.Nats$DivTernary2.Nats$pred254] := r045;
	 //  @line: 40
	__ret := r144;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// <java.lang.String: java.lang.String valueOf(int)>
procedure java.lang.String$java.lang.String$valueOf$129($param_0 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


