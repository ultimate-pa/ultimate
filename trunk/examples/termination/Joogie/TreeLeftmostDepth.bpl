type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.String$lp$$rp$$TreeLeftmostDepth.Random$args254 : [int]ref;
var int$TreeLeftmostDepth.Random$index0 : int;
var TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$right297 : Field ref;
var java.lang.Object$TreeLeftmostDepth.Tree$value298 : Field ref;
var TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$left296 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 4
// <TreeLeftmostDepth.Random: void <clinit>()>
procedure void$TreeLeftmostDepth.Random$$la$clinit$ra$$2230()
  modifies int$TreeLeftmostDepth.Random$index0;
 {
	 //  @line: 5
Block18:
	 //  @line: 5
	int$TreeLeftmostDepth.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 52
// <TreeLeftmostDepth.Tree: void main(java.lang.String[])>
procedure void$TreeLeftmostDepth.Tree$main$2457($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$TreeLeftmostDepth.Random$args254, $stringSize;
 {
var r028 : [int]ref;

 //temp local variables 
var $freshlocal0 : ref;

Block49:
	r028 := $param_0;
	 //  @line: 53
	java.lang.String$lp$$rp$$TreeLeftmostDepth.Random$args254 := r028;
	 //  @line: 54
	 call $freshlocal0 := TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$createTree$2456();
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 2
// <TreeLeftmostDepth.Random: void <init>()>
procedure void$TreeLeftmostDepth.Random$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 2
// <TreeLeftmostDepth.TreeLeftmostDepth: void <init>()>
procedure void$TreeLeftmostDepth.TreeLeftmostDepth$$la$init$ra$$2458(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r030 : ref;
Block50:
	r030 := __this;
	 assert ($neref((r030), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r030));
	 return;
}


	 //  @line: 22
// <TreeLeftmostDepth.Tree: TreeLeftmostDepth.Tree createTree()>
procedure TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$createTree$2456() returns (__ret : ref)
  modifies $HeapVar;
 {
var i021 : int;
var r018 : ref;
var i126 : int;
var $r425 : ref;
var $r324 : ref;
var r527 : ref;
var $r122 : ref;
var $r223 : ref;
	 //  @line: 23
Block24:
	 //  @line: 23
	 call i126 := int$TreeLeftmostDepth.Random$random$2229();
	 goto Block25;
	 //  @line: 24
Block25:
	 goto Block26, Block28;
	 //  @line: 24
Block26:
	 assume ($neint((i126), (0))==1);
	 goto Block27;
	 //  @line: 24
Block28:
	 //  @line: 24
	 assume ($negInt(($neint((i126), (0))))==1);
	 //  @line: 25
	__ret := $null;
	 return;
	 //  @line: 27
Block27:
	 //  @line: 27
	 call r018 := TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$createNode$2455();
	 goto Block29;
	 //  @line: 28
Block29:
	 //  @line: 28
	r527 := r018;
	 goto Block30;
	 //  @line: 30
Block30:
	 goto Block33, Block31;
	 //  @line: 30
Block33:
	 //  @line: 30
	 assume ($negInt(($leint((i126), (0))))==1);
	 //  @line: 31
	 call i021 := int$TreeLeftmostDepth.Random$random$2229();
	 goto Block34;
	 //  @line: 30
Block31:
	 assume ($leint((i126), (0))==1);
	 goto Block32;
	 //  @line: 32
Block34:
	 goto Block35, Block37;
	 //  @line: 50
Block32:
	 //  @line: 50
	__ret := r018;
	 return;
	 //  @line: 32
Block35:
	 assume ($leint((i021), (0))==1);
	 goto Block36;
	 //  @line: 32
Block37:
	 //  @line: 32
	 assume ($negInt(($leint((i021), (0))))==1);
	 assert ($neref((r527), ($null))==1);
	 //  @line: 33
	$r324 := $HeapVar[r527, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$left296];
	 goto Block38;
	 //  @line: 40
Block36:
	 assert ($neref((r527), ($null))==1);
	 //  @line: 40
	$r122 := $HeapVar[r527, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$right297];
	 goto Block44;
	 //  @line: 33
Block38:
	 goto Block41, Block39;
	 //  @line: 40
Block44:
	 goto Block47, Block45;
	 //  @line: 33
Block41:
	 //  @line: 33
	 assume ($negInt(($neref(($r324), ($null))))==1);
	 //  @line: 34
	 call $r425 := TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$createNode$2455();
	 assert ($neref((r527), ($null))==1);
	 //  @line: 34
	$HeapVar[r527, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$left296] := $r425;
	 //  @line: 35
	r527 := r018;
	 goto Block42;
	 //  @line: 33
Block39:
	 assume ($neref(($r324), ($null))==1);
	 goto Block40;
	 //  @line: 40
Block47:
	 //  @line: 40
	 assume ($negInt(($neref(($r122), ($null))))==1);
	 //  @line: 41
	 call $r223 := TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$createNode$2455();
	 assert ($neref((r527), ($null))==1);
	 //  @line: 41
	$HeapVar[r527, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$right297] := $r223;
	 //  @line: 42
	r527 := r018;
	 goto Block42;
	 //  @line: 40
Block45:
	 assume ($neref(($r122), ($null))==1);
	 goto Block46;
	 //  @line: 47
Block42:
	 //  @line: 47
	i126 := $addint((i126), (-1));
	 goto Block48;
	 //  @line: 37
Block40:
	 assert ($neref((r527), ($null))==1);
	 //  @line: 37
	r527 := $HeapVar[r527, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$left296];
	 goto Block43;
	 //  @line: 44
Block46:
	 assert ($neref((r527), ($null))==1);
	 //  @line: 44
	r527 := $HeapVar[r527, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$right297];
	 goto Block42;
	 //  @line: 48
Block48:
	 goto Block30;
	 //  @line: 37
Block43:
	 goto Block42;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


	 //  @line: 12
// <TreeLeftmostDepth.Tree: void <init>()>
procedure void$TreeLeftmostDepth.Tree$$la$init$ra$$2454(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r011 : ref;
Block20:
	r011 := __this;
	 assert ($neref((r011), ($null))==1);
	 //  @line: 13
	 call void$java.lang.Object$$la$init$ra$$28((r011));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 7
// <TreeLeftmostDepth.Random: int random()>
procedure int$TreeLeftmostDepth.Random$random$2229() returns (__ret : int)
  modifies int$TreeLeftmostDepth.Random$index0, $stringSize;
 {
var $i26 : int;
var $r13 : [int]ref;
var $i02 : int;
var $i37 : int;
var $i15 : int;
var r04 : ref;
	 //  @line: 8
Block17:
	 //  @line: 8
	$r13 := java.lang.String$lp$$rp$$TreeLeftmostDepth.Random$args254;
	 //  @line: 8
	$i02 := int$TreeLeftmostDepth.Random$index0;
	 assert ($geint(($i02), (0))==1);
	 assert ($ltint(($i02), ($refArrSize[$r13[$arrSizeIdx]]))==1);
	 //  @line: 8
	r04 := $r13[$i02];
	 //  @line: 9
	$i15 := int$TreeLeftmostDepth.Random$index0;
	 //  @line: 9
	$i26 := $addint(($i15), (1));
	 //  @line: 9
	int$TreeLeftmostDepth.Random$index0 := $i26;
	$i37 := $stringSize[r04];
	 //  @line: 10
	__ret := $i37;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 7
// <TreeLeftmostDepth.Tree: void <init>(TreeLeftmostDepth.Tree,TreeLeftmostDepth.Tree)>
procedure void$TreeLeftmostDepth.Tree$$la$init$ra$$2453(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r08 : ref;
var r19 : ref;
var r210 : ref;
Block19:
	r08 := __this;
	r19 := $param_0;
	r210 := $param_1;
	 assert ($neref((r08), ($null))==1);
	 //  @line: 8
	 call void$java.lang.Object$$la$init$ra$$28((r08));
	 assert ($neref((r08), ($null))==1);
	 //  @line: 9
	$HeapVar[r08, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$left296] := r19;
	 assert ($neref((r08), ($null))==1);
	 //  @line: 10
	$HeapVar[r08, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$right297] := r210;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 16
// <TreeLeftmostDepth.Tree: TreeLeftmostDepth.Tree createNode()>
procedure TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$createNode$2455() returns (__ret : ref)
  modifies $HeapVar;
 {
var r013 : ref;
var $r214 : ref;
var $r112 : ref;
	 //  @line: 17
Block21:
	 //  @line: 17
	$r112 := $newvariable((22));
	 assume ($neref(($newvariable((22))), ($null))==1);
	 assert ($neref(($r112), ($null))==1);
	 //  @line: 17
	 call void$TreeLeftmostDepth.Tree$$la$init$ra$$2454(($r112));
	 //  @line: 17
	r013 := $r112;
	 //  @line: 18
	$r214 := $newvariable((23));
	 assume ($neref(($newvariable((23))), ($null))==1);
	 assert ($neref(($r214), ($null))==1);
	 //  @line: 18
	 call void$java.lang.Object$$la$init$ra$$28(($r214));
	 assert ($neref((r013), ($null))==1);
	 //  @line: 18
	$HeapVar[r013, java.lang.Object$TreeLeftmostDepth.Tree$value298] := $r214;
	 //  @line: 19
	__ret := r013;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


	 //  @line: 4
// <TreeLeftmostDepth.TreeLeftmostDepth: void main(java.lang.String[])>
procedure void$TreeLeftmostDepth.TreeLeftmostDepth$main$2459($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$TreeLeftmostDepth.Random$args254, $HeapVar, $stringSize;
 {
var r539 : ref;
var r031 : [int]ref;
var r438 : ref;
var $r635 : ref;
var r236 : ref;
var r337 : ref;
var r133 : ref;
Block51:
	r031 := $param_0;
	 //  @line: 5
	java.lang.String$lp$$rp$$TreeLeftmostDepth.Random$args254 := r031;
	 //  @line: 6
	 call r133 := TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$createTree$2456();
	 goto Block52;
	 //  @line: 8
Block52:
	 assert ($neref((r133), ($null))==1);
	 //  @line: 8
	$r635 := $HeapVar[r133, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$left296];
	 goto Block53;
	 //  @line: 8
Block53:
	 goto Block54, Block56;
	 //  @line: 8
Block54:
	 assume ($eqref(($r635), ($null))==1);
	 goto Block55;
	 //  @line: 8
Block56:
	 //  @line: 8
	 assume ($negInt(($eqref(($r635), ($null))))==1);
	 assert ($neref((r133), ($null))==1);
	 //  @line: 15
	r236 := $HeapVar[r133, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$left296];
	 assert ($neref((r236), ($null))==1);
	 //  @line: 16
	r337 := $HeapVar[r236, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$left296];
	 assert ($neref((r236), ($null))==1);
	 //  @line: 17
	r438 := $HeapVar[r236, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$right297];
	 assert ($neref((r133), ($null))==1);
	 //  @line: 18
	r539 := $HeapVar[r133, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$right297];
	 assert ($neref((r133), ($null))==1);
	 //  @line: 19
	$HeapVar[r133, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$right297] := r236;
	 assert ($neref((r236), ($null))==1);
	 //  @line: 20
	$HeapVar[r236, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$right297] := r539;
	 assert ($neref((r236), ($null))==1);
	 //  @line: 21
	$HeapVar[r236, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$left296] := r438;
	 assert ($neref((r133), ($null))==1);
	 //  @line: 22
	$HeapVar[r133, TreeLeftmostDepth.Tree$TreeLeftmostDepth.Tree$left296] := r337;
	 goto Block52;
	 //  @line: 25
Block55:
	 return;
}


