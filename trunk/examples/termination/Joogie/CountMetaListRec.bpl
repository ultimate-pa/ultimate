type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 
const unique List : classConst ;



var int$Random$index0 : int;
var java.lang.String$lp$$rp$$Random$args256 : [int]ref;
var java.lang.Object$List$value254 : Field ref;
var List$List$next255 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 9
// <CountMetaListRec: int countMetaList(List)>
procedure int$CountMetaListRec$countMetaList$2230($param_0 : ref) returns (__ret : int)
  modifies $HeapVar;
 {
var $r18 : ref;
var $i012 : int;
var $r314 : ref;
var $r618 : ref;
var r719 : ref;
var $i113 : int;
var $z09 : int;
var r015 : ref;
var $r517 : ref;
var $r416 : ref;
var $r210 : ref;
Block18:
	r719 := $param_0;
	 goto Block19;
	 //  @line: 10
Block19:
	 goto Block22, Block20;
	 //  @line: 10
Block22:
	 //  @line: 10
	 assume ($negInt(($neref((r719), ($null))))==1);
	 //  @line: 11
	__ret := 0;
	 return;
	 //  @line: 10
Block20:
	 assume ($neref((r719), ($null))==1);
	 goto Block21;
	 //  @line: 13
Block21:
	 assert ($neref((r719), ($null))==1);
	 //  @line: 13
	$r18 := $HeapVar[r719, java.lang.Object$List$value254];
	 goto Block23;
	 //  @line: 13
Block23:
	 //  @line: 13
	$z09 := $instanceof(($r18), (List));
	 goto Block24;
	 //  @line: 13
Block24:
	 goto Block25, Block27;
	 //  @line: 13
Block25:
	 assume ($eqint(($z09), (0))==1);
	 goto Block26;
	 //  @line: 13
Block27:
	 //  @line: 13
	 assume ($negInt(($eqint(($z09), (0))))==1);
	 assert ($neref((r719), ($null))==1);
	 //  @line: 14
	$r314 := $HeapVar[r719, java.lang.Object$List$value254];
	 //  @line: 14
	r015 := $r314;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 15
	$r416 := $HeapVar[r015, List$List$next255];
	 assert ($neref((r719), ($null))==1);
	 //  @line: 15
	$HeapVar[r719, java.lang.Object$List$value254] := $r416;
	 //  @line: 16
	$r517 := $newvariable((28));
	 assume ($neref(($newvariable((28))), ($null))==1);
	 assert ($neref((r015), ($null))==1);
	 //  @line: 16
	$r618 := $HeapVar[r015, java.lang.Object$List$value254];
	 assert ($neref(($r517), ($null))==1);
	 //  @line: 16
	 call void$List$$la$init$ra$$2232(($r517), ($r618), (r719));
	 //  @line: 16
	r719 := $r517;
	 goto Block26;
	 //  @line: 18
Block26:
	 assert ($neref((r719), ($null))==1);
	 //  @line: 18
	$r210 := $HeapVar[r719, List$List$next255];
	 //  @line: 18
	 call $i012 := int$CountMetaListRec$countMetaList$2230(($r210));
	 //  @line: 18
	$i113 := $addint((1), ($i012));
	 //  @line: 18
	__ret := $i113;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2233(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r037 : ref;
Block42:
	r037 := __this;
	 assert ($neref((r037), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r037));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 41
// <List: void <init>(java.lang.Object,List)>
procedure void$List$$la$init$ra$$2232(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r135 : ref;
var r236 : ref;
var r034 : ref;
Block41:
	r034 := __this;
	r135 := $param_0;
	r236 := $param_1;
	 assert ($neref((r034), ($null))==1);
	 //  @line: 42
	 call void$java.lang.Object$$la$init$ra$$28((r034));
	 assert ($neref((r034), ($null))==1);
	 //  @line: 43
	$HeapVar[r034, java.lang.Object$List$value254] := r135;
	 assert ($neref((r034), ($null))==1);
	 //  @line: 44
	$HeapVar[r034, List$List$next255] := r236;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2234() returns (__ret : int)
  modifies $stringSize, int$Random$index0;
 {
var $i141 : int;
var $r139 : [int]ref;
var $i343 : int;
var $i038 : int;
var $i242 : int;
var r040 : ref;
	 //  @line: 6
Block43:
	 //  @line: 6
	$r139 := java.lang.String$lp$$rp$$Random$args256;
	 //  @line: 6
	$i038 := int$Random$index0;
	 assert ($geint(($i038), (0))==1);
	 assert ($ltint(($i038), ($refArrSize[$r139[$arrSizeIdx]]))==1);
	 //  @line: 6
	r040 := $r139[$i038];
	 //  @line: 7
	$i141 := int$Random$index0;
	 //  @line: 7
	$i242 := $addint(($i141), (1));
	 //  @line: 7
	int$Random$index0 := $i242;
	$i343 := $stringSize[r040];
	 //  @line: 8
	__ret := $i343;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <CountMetaListRec: void main(java.lang.String[])>
procedure void$CountMetaListRec$main$2229($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$Random$args256;
 {
var r14 : ref;
var r02 : [int]ref;

 //temp local variables 
var $freshlocal0 : int;

Block17:
	r02 := $param_0;
	 //  @line: 3
	java.lang.String$lp$$rp$$Random$args256 := r02;
	 //  @line: 4
	 call r14 := List$CountMetaListRec$createMetaList$2231();
	 //  @line: 6
	 call $freshlocal0 := int$CountMetaListRec$countMetaList$2230((r14));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2235()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block44:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 22
// <CountMetaListRec: List createMetaList()>
procedure List$CountMetaListRec$createMetaList$2231() returns (__ret : ref) {
var $r028 : ref;
var i231 : int;
var r230 : ref;
var $r129 : ref;
var i125 : int;
var i333 : int;
var i021 : int;
var r332 : ref;
	 //  @line: 23
Block29:
	 //  @line: 23
	 call i021 := int$Random$random$2234();
	 //  @line: 24
	r230 := $null;
	 //  @line: 25
	i231 := 0;
	 goto Block30;
	 //  @line: 25
Block30:
	 goto Block33, Block31;
	 //  @line: 25
Block33:
	 //  @line: 25
	 assume ($negInt(($geint((i231), (i021))))==1);
	 //  @line: 26
	 call i125 := int$Random$random$2234();
	 //  @line: 27
	r332 := $null;
	 //  @line: 28
	i333 := i125;
	 goto Block34;
	 //  @line: 25
Block31:
	 assume ($geint((i231), (i021))==1);
	 goto Block32;
	 //  @line: 28
Block34:
	 goto Block37, Block35;
	 //  @line: 34
Block32:
	 //  @line: 34
	__ret := r230;
	 return;
	 //  @line: 28
Block37:
	 //  @line: 28
	 assume ($negInt(($leint((i333), (0))))==1);
	 //  @line: 29
	$r129 := $newvariable((38));
	 assume ($neref(($newvariable((38))), ($null))==1);
	 assert ($neref(($r129), ($null))==1);
	 //  @line: 29
	 call void$List$$la$init$ra$$2232(($r129), ($null), (r332));
	 //  @line: 29
	r332 := $r129;
	 //  @line: 28
	i333 := $addint((i333), (-1));
	 goto Block34;
	 //  @line: 28
Block35:
	 assume ($leint((i333), (0))==1);
	 goto Block36;
	 //  @line: 31
Block36:
	 //  @line: 31
	$r028 := $newvariable((39));
	 assume ($neref(($newvariable((39))), ($null))==1);
	 goto Block40;
	 //  @line: 31
Block40:
	 assert ($neref(($r028), ($null))==1);
	 //  @line: 31
	 call void$List$$la$init$ra$$2232(($r028), (r332), (r230));
	 //  @line: 31
	r230 := $r028;
	 //  @line: 25
	i231 := $addint((i231), (1));
	 goto Block30;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// <CountMetaListRec: void <init>()>
procedure void$CountMetaListRec$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


