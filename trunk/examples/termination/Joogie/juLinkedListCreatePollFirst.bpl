type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 
const unique javaUtilEx.Content : classConst ;
const unique javaUtilEx.List : classConst ;
const unique javaUtilEx.RandomAccess : classConst ;



var javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303 : Field ref;
var javaUtilEx.LinkedList$ListItr$javaUtilEx.LinkedList$DescendingIterator$itr306 : Field ref;
var javaUtilEx.AbstractList$javaUtilEx.AbstractList$Itr$this$0295 : Field ref;
var $fresh1 : ref;
var javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304 : Field ref;
var int$javaUtilEx.LinkedList$ListItr$nextIndex0 : Field int;
var javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302 : Field ref;
var javaUtilEx.LinkedList$javaUtilEx.LinkedList$DescendingIterator$this$0307 : Field ref;
var int$javaUtilEx.LinkedList$size0 : Field int;
var javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301 : Field ref;
var int$javaUtilEx.Random$index0 : int;
var javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298 : Field ref;
var int$javaUtilEx.LinkedList$ListItr$expectedModCount0 : Field int;
var int$javaUtilEx.AbstractList$modCount0 : Field int;
var java.lang.String$lp$$rp$$javaUtilEx.Random$args299 : [int]ref;
var int$javaUtilEx.AbstractList$Itr$expectedModCount0 : Field int;
var javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309 : Field ref;
var $fresh6 : ref;
var javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305 : Field ref;
var javaUtilEx.AbstractList$javaUtilEx.SubList$l297 : Field ref;
var javaUtilEx.ListIterator$javaUtilEx.SubList$1$i308 : Field ref;
var int$javaUtilEx.SubList$offset0 : Field int;
var int$javaUtilEx.AbstractList$Itr$lastRet0 : Field int;
var $fresh4 : ref;
var java.lang.Object$javaUtilEx.LinkedList$Entry$element300 : Field ref;
var int$javaUtilEx.AbstractList$Itr$cursor0 : Field int;
var int$javaUtilEx.Content$val0 : Field int;
var $fresh3 : ref;
var javaUtilEx.AbstractList$javaUtilEx.AbstractList$ListItr$this$0296 : Field ref;
var $fresh2 : ref;
var int$javaUtilEx.SubList$size0 : Field int;
var $fresh5 : ref;
var int$javaUtilEx.SubList$1$val$index0 : Field int;


// <java.lang.IndexOutOfBoundsException: void <init>()>
procedure void$java.lang.IndexOutOfBoundsException$$la$init$ra$$2075(__this : ref);



// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// <javaUtilEx.ListIterator: int previousIndex()>
procedure int$javaUtilEx.ListIterator$previousIndex$2530(__this : ref) returns (__ret : int);



	 //  @line: 539
// <javaUtilEx.AbstractList: int hashCode()>
procedure int$javaUtilEx.AbstractList$hashCode$2498(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r2197 : ref;
var i1200 : int;
var $i2201 : int;
var $z0195 : int;
var r0192 : ref;
var r1194 : ref;
var $i0198 : int;
Block314:
	r0192 := __this;
	 //  @line: 540
	i1200 := 1;
	 assert ($neref((r0192), ($null))==1);
	 //  @line: 541
	 call r1194 := javaUtilEx.Iterator$javaUtilEx.AbstractList$iterator$2493((r0192));
	 goto Block315;
	 //  @line: 542
Block315:
	 assert ($neref((r1194), ($null))==1);
	 //  @line: 542
	 call $z0195 := boolean$javaUtilEx.Iterator$hasNext$2254((r1194));
	 goto Block316;
	 //  @line: 542
Block316:
	 goto Block317, Block319;
	 //  @line: 542
Block317:
	 assume ($eqint(($z0195), (0))==1);
	 goto Block318;
	 //  @line: 542
Block319:
	 //  @line: 542
	 assume ($negInt(($eqint(($z0195), (0))))==1);
	 assert ($neref((r1194), ($null))==1);
	 //  @line: 543
	 call r2197 := java.lang.Object$javaUtilEx.Iterator$next$2255((r1194));
	 //  @line: 544
	$i0198 := $mulint((31), (i1200));
	 goto Block320;
	 //  @line: 546
Block318:
	 //  @line: 546
	__ret := i1200;
	 return;
	 //  @line: 544
Block320:
	 goto Block323, Block321;
	 //  @line: 544
Block323:
	 //  @line: 544
	 assume ($negInt(($neref((r2197), ($null))))==1);
	 //  @line: 542
	$i2201 := 0;
	 goto Block324;
	 //  @line: 544
Block321:
	 assume ($neref((r2197), ($null))==1);
	 goto Block322;
	 //  @line: 544
Block324:
	 //  @line: 544
	i1200 := $addint(($i0198), ($i2201));
	 goto Block325;
	 //  @line: 544
Block322:
	 assert ($neref((r2197), ($null))==1);
	 //  @line: 544
	 call $i2201 := int$java.lang.Object$hashCode$31((r2197));
	 goto Block324;
	 //  @line: 545
Block325:
	 goto Block315;
}


// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// <javaUtilEx.ListIterator: void remove()>
procedure void$javaUtilEx.ListIterator$remove$2531(__this : ref);



	 //  @line: 73
// <javaUtilEx.AbstractSequentialList: void <init>()>
procedure void$javaUtilEx.AbstractSequentialList$$la$init$ra$$2578(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0443 : ref;
Block690:
	r0443 := __this;
	 assert ($neref((r0443), ($null))==1);
	 //  @line: 74
	 call void$javaUtilEx.AbstractList$$la$init$ra$$2483((r0443));
	 return;
}


	 //  @line: 65
// <javaUtilEx.AbstractCollection: void <init>()>
procedure void$javaUtilEx.AbstractCollection$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 66
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


	 //  @line: 680
// <javaUtilEx.LinkedList$ListItr: int nextIndex()>
procedure int$javaUtilEx.LinkedList$ListItr$nextIndex$2682(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i0833 : int;
var r0832 : ref;
Block1210:
	r0832 := __this;
	 assert ($neref((r0832), ($null))==1);
	 //  @line: 681
	$i0833 := $HeapVar[r0832, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 //  @line: 681
	__ret := $i0833;
	 return;
}


	 //  @line: 697
// <javaUtilEx.SubList: javaUtilEx.ListIterator listIterator(int)>
procedure javaUtilEx.ListIterator$javaUtilEx.SubList$listIterator$2559(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r1395 : ref;
var r0393 : ref;
var i0394 : int;

 //temp local variables 
var $caughtEx3 : ref;
var $caughtEx2 : ref;

	 //  @line: 697
Block620:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block622;
Block622:
	r0393 := __this;
	i0394 := $param_0;
	 assert ($neref((r0393), ($null))==1);
	 //  @line: 698
	 call $caughtEx2 := void$javaUtilEx.SubList$checkForComodification$2564((r0393));
	 goto Block623, Block625;
Block623:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block624;
Block625:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block626;
Block624:
	$Exep0 := $caughtEx2;
	 return;
Block626:
	 assert ($neref((r0393), ($null))==1);
	 //  @line: 699
	 call $caughtEx3 := void$javaUtilEx.SubList$rangeCheckForAdd$2562((r0393), (i0394));
	 goto Block629, Block627;
Block629:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block630;
Block627:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block628;
Block630:
	 //  @line: 701
	$r1395 := $newvariable((631));
	 assume ($neref(($newvariable((631))), ($null))==1);
	 assert ($neref(($r1395), ($null))==1);
	 //  @line: 701
	 call $caughtEx3 := void$javaUtilEx.SubList$1$$la$init$ra$$2693(($r1395), (r0393), (i0394));
	 goto Block634, Block632;
Block628:
	$Exep1 := $caughtEx3;
	 return;
Block634:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block635;
Block632:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block633;
Block635:
	 //  @line: 701
	__ret := $r1395;
	 return;
Block633:
	$Exep1 := $caughtEx3;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



	 //  @line: 325
// <javaUtilEx.LinkedList: javaUtilEx.LinkedList$Entry entry(int)>
procedure javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$entry$2646(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r2631 : ref;
var i4632 : int;
var $i2628 : int;
var i5633 : int;
var i0623 : int;
var $i3629 : int;
var r0625 : ref;
var $i1626 : int;
var $r1624 : ref;

 //temp local variables 

	 //  @line: 325
Block859:
	$Exep0 := $null;
	 goto Block894;
Block894:
	r0625 := __this;
	i0623 := $param_0;
	 goto Block895;
	 //  @line: 326
Block895:
	 goto Block898, Block896;
	 //  @line: 326
Block898:
	 //  @line: 326
	 assume ($negInt(($ltint((i0623), (0))))==1);
	 assert ($neref((r0625), ($null))==1);
	 //  @line: 327
	$i1626 := $HeapVar[r0625, int$javaUtilEx.LinkedList$size0];
	 goto Block899;
	 //  @line: 326
Block896:
	 assume ($ltint((i0623), (0))==1);
	 goto Block897;
	 //  @line: 327
Block899:
	 goto Block902, Block900;
	 //  @line: 327
Block897:
	 //  @line: 327
	$r1624 := $newvariable((903));
	 assume ($neref(($newvariable((903))), ($null))==1);
	 assert ($neref(($r1624), ($null))==1);
	 //  @line: 327
	 call void$java.lang.IndexOutOfBoundsException$$la$init$ra$$2075(($r1624));
	 goto Block904;
	 //  @line: 327
Block902:
	 //  @line: 327
	 assume ($negInt(($ltint((i0623), ($i1626))))==1);
	 goto Block897;
	 //  @line: 327
Block900:
	 assume ($ltint((i0623), ($i1626))==1);
	 goto Block901;
	 //  @line: 327
Block904:
	$Exep0 := $r1624;
	 return;
	 //  @line: 328
Block901:
	 assert ($neref((r0625), ($null))==1);
	 //  @line: 328
	r2631 := $HeapVar[r0625, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block905;
	 //  @line: 329
Block905:
	 assert ($neref((r0625), ($null))==1);
	 //  @line: 329
	$i2628 := $HeapVar[r0625, int$javaUtilEx.LinkedList$size0];
	 //  @line: 329
	$i3629 := $shrint(($i2628), (1));
	 goto Block906;
	 //  @line: 329
Block906:
	 goto Block907, Block909;
	 //  @line: 329
Block907:
	 assume ($geint((i0623), ($i3629))==1);
	 goto Block908;
	 //  @line: 329
Block909:
	 //  @line: 329
	 assume ($negInt(($geint((i0623), ($i3629))))==1);
	 //  @line: 330
	i4632 := 0;
	 goto Block910;
	 //  @line: 333
Block908:
	 assert ($neref((r0625), ($null))==1);
	 //  @line: 333
	i5633 := $HeapVar[r0625, int$javaUtilEx.LinkedList$size0];
	 goto Block915;
	 //  @line: 330
Block910:
	 goto Block913, Block911;
	 //  @line: 333
Block915:
	 goto Block917, Block916;
	 //  @line: 330
Block913:
	 //  @line: 330
	 assume ($negInt(($gtint((i4632), (i0623))))==1);
	 assert ($neref((r2631), ($null))==1);
	 //  @line: 331
	r2631 := $HeapVar[r2631, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 //  @line: 330
	i4632 := $addint((i4632), (1));
	 goto Block910;
	 //  @line: 330
Block911:
	 assume ($gtint((i4632), (i0623))==1);
	 goto Block912;
	 //  @line: 333
Block917:
	 //  @line: 333
	 assume ($negInt(($leint((i5633), (i0623))))==1);
	 assert ($neref((r2631), ($null))==1);
	 //  @line: 334
	r2631 := $HeapVar[r2631, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 //  @line: 333
	i5633 := $addint((i5633), (-1));
	 goto Block915;
	 //  @line: 333
Block916:
	 assume ($leint((i5633), (i0623))==1);
	 goto Block914;
	 //  @line: 330
Block912:
	 goto Block914;
	 //  @line: 336
Block914:
	 //  @line: 336
	__ret := r2631;
	 return;
}


	 //  @line: 729
// <javaUtilEx.LinkedList$Entry: void <init>(java.lang.Object,javaUtilEx.LinkedList$Entry,javaUtilEx.LinkedList$Entry)>
procedure void$javaUtilEx.LinkedList$Entry$$la$init$ra$$2676(__this : ref, $param_0 : ref, $param_1 : ref, $param_2 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0772 : ref;
var r2774 : ref;
var r1773 : ref;
var r3775 : ref;
Block1144:
	r0772 := __this;
	r1773 := $param_0;
	r2774 := $param_1;
	r3775 := $param_2;
	 assert ($neref((r0772), ($null))==1);
	 //  @line: 730
	 call void$java.lang.Object$$la$init$ra$$28((r0772));
	 assert ($neref((r0772), ($null))==1);
	 //  @line: 731
	$HeapVar[r0772, java.lang.Object$javaUtilEx.LinkedList$Entry$element300] := r1773;
	 assert ($neref((r0772), ($null))==1);
	 //  @line: 732
	$HeapVar[r0772, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301] := r2774;
	 assert ($neref((r0772), ($null))==1);
	 //  @line: 733
	$HeapVar[r0772, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302] := r3775;
	 return;
}


	 //  @line: 391
// <javaUtilEx.AbstractList$ListItr: void <init>(javaUtilEx.AbstractList,int)>
procedure void$javaUtilEx.AbstractList$ListItr$$la$init$ra$$2542(__this : ref, $param_0 : ref, $param_1 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r1270 : ref;
var i0271 : int;
var r0269 : ref;
Block424:
	r0269 := __this;
	r1270 := $param_0;
	i0271 := $param_1;
	 assert ($neref((r0269), ($null))==1);
	 //  @line: 392
	$HeapVar[r0269, javaUtilEx.AbstractList$javaUtilEx.AbstractList$ListItr$this$0296] := r1270;
	 assert ($neref((r0269), ($null))==1);
	 //  @line: 392
	 call void$javaUtilEx.AbstractList$Itr$$la$init$ra$$2539((r0269), (r1270), ($null));
	 assert ($neref((r0269), ($null))==1);
	 //  @line: 393
	$HeapVar[r0269, int$javaUtilEx.AbstractList$Itr$cursor0] := i0271;
	 return;
}


	 //  @line: 298
// <javaUtilEx.AbstractCollection: void clear()>
procedure void$javaUtilEx.AbstractCollection$clear$2239(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var $z064 : int;
var r163 : ref;
var r061 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block106:
	r061 := __this;
	 assert ($neref((r061), ($null))==1);
	 //  @line: 299
	 call r163 := javaUtilEx.Iterator$javaUtilEx.AbstractCollection$iterator$2229((r061));
	 goto Block107;
	 //  @line: 300
Block107:
	 assert ($neref((r163), ($null))==1);
	 //  @line: 300
	 call $z064 := boolean$javaUtilEx.Iterator$hasNext$2254((r163));
	 goto Block108;
	 //  @line: 300
Block108:
	 goto Block109, Block111;
	 //  @line: 300
Block109:
	 assume ($eqint(($z064), (0))==1);
	 goto Block110;
	 //  @line: 300
Block111:
	 //  @line: 300
	 assume ($negInt(($eqint(($z064), (0))))==1);
	 assert ($neref((r163), ($null))==1);
	 //  @line: 301
	 call $freshlocal0 := java.lang.Object$javaUtilEx.Iterator$next$2255((r163));
	 assert ($neref((r163), ($null))==1);
	 //  @line: 302
	 call void$javaUtilEx.Iterator$remove$2256((r163));
	 goto Block107;
	 //  @line: 304
Block110:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 513
// <javaUtilEx.AbstractList: boolean equals(java.lang.Object)>
procedure boolean$javaUtilEx.AbstractList$equals$2497(__this : ref, $param_0 : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r6177 : ref;
var r0173 : ref;
var $z0174 : int;
var $z3182 : int;
var r3179 : ref;
var $z5189 : int;
var r2176 : ref;
var r4186 : ref;
var r5188 : ref;
var $z1180 : int;
var $z4184 : int;
var r1172 : ref;
var $z2181 : int;
var $z6190 : int;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 513
Block271:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block272;
Block272:
	r0173 := __this;
	r1172 := $param_0;
	 goto Block273;
	 //  @line: 514
Block273:
	 goto Block274, Block276;
	 //  @line: 514
Block274:
	 assume ($neref((r1172), (r0173))==1);
	 goto Block275;
	 //  @line: 514
Block276:
	 //  @line: 514
	 assume ($negInt(($neref((r1172), (r0173))))==1);
	 //  @line: 515
	__ret := 1;
	 return;
	 //  @line: 516
Block275:
	 //  @line: 516
	$z0174 := $instanceof((r1172), (javaUtilEx.List));
	 goto Block277;
	 //  @line: 516
Block277:
	 goto Block278, Block280;
	 //  @line: 516
Block278:
	 assume ($neint(($z0174), (0))==1);
	 goto Block279;
	 //  @line: 516
Block280:
	 //  @line: 516
	 assume ($negInt(($neint(($z0174), (0))))==1);
	 //  @line: 517
	__ret := 0;
	 return;
	 //  @line: 519
Block279:
	 assert ($neref((r0173), ($null))==1);
	 //  @line: 519
	 call r2176, $caughtEx1 := javaUtilEx.ListIterator$javaUtilEx.AbstractList$listIterator$2494((r0173));
	 goto Block283, Block281;
	 //  @line: 519
Block283:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block284;
	 //  @line: 519
Block281:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block282;
	 //  @line: 519
Block284:
	 goto Block285;
	 //  @line: 519
Block282:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 520
Block285:
	 //  @line: 520
	$r6177 := r1172;
	 assert ($neref(($r6177), ($null))==1);
	 //  @line: 520
	 call r3179 := javaUtilEx.ListIterator$javaUtilEx.List$listIterator$2522(($r6177));
	 goto Block286;
	 //  @line: 521
Block286:
	 assert ($neref((r2176), ($null))==1);
	 //  @line: 521
	 call $z1180 := boolean$javaUtilEx.ListIterator$hasNext$2525((r2176));
	 goto Block287;
	 //  @line: 521
Block287:
	 goto Block290, Block288;
	 //  @line: 521
Block290:
	 //  @line: 521
	 assume ($negInt(($eqint(($z1180), (0))))==1);
	 assert ($neref((r3179), ($null))==1);
	 //  @line: 527
	 call $z4184 := boolean$javaUtilEx.ListIterator$hasNext$2525((r3179));
	 goto Block291;
	 //  @line: 521
Block288:
	 assume ($eqint(($z1180), (0))==1);
	 goto Block289;
	 //  @line: 527
Block291:
	 goto Block292, Block293;
	 //  @line: 527
Block289:
	 assert ($neref((r2176), ($null))==1);
	 //  @line: 527
	 call $z2181 := boolean$javaUtilEx.ListIterator$hasNext$2525((r2176));
	 goto Block306;
	 //  @line: 527
Block292:
	 assume ($eqint(($z4184), (0))==1);
	 goto Block289;
	 //  @line: 527
Block293:
	 //  @line: 527
	 assume ($negInt(($eqint(($z4184), (0))))==1);
	 assert ($neref((r2176), ($null))==1);
	 //  @line: 522
	 call r4186 := java.lang.Object$javaUtilEx.ListIterator$next$2526((r2176));
	 assert ($neref((r3179), ($null))==1);
	 //  @line: 523
	 call r5188 := java.lang.Object$javaUtilEx.ListIterator$next$2526((r3179));
	 goto Block294;
	 //  @line: 527
Block306:
	 goto Block307, Block309;
	 //  @line: 524
Block294:
	 goto Block297, Block295;
	 //  @line: 527
Block307:
	 assume ($neint(($z2181), (0))==1);
	 goto Block308;
	 //  @line: 527
Block309:
	 //  @line: 527
	 assume ($negInt(($neint(($z2181), (0))))==1);
	 assert ($neref((r3179), ($null))==1);
	 //  @line: 527
	 call $z3182 := boolean$javaUtilEx.ListIterator$hasNext$2525((r3179));
	 goto Block310;
	 //  @line: 524
Block297:
	 //  @line: 524
	 assume ($negInt(($neref((r4186), ($null))))==1);
	 goto Block298;
	 //  @line: 524
Block295:
	 assume ($neref((r4186), ($null))==1);
	 goto Block296;
	 //  @line: 527
Block308:
	 //  @line: 527
	$z6190 := 0;
	 goto Block313;
	 //  @line: 527
Block310:
	 goto Block311, Block312;
	 //  @line: 525
Block298:
	 goto Block301, Block299;
	 //  @line: 524
Block296:
	 assert ($neref((r4186), ($null))==1);
	 //  @line: 524
	 call $z5189 := boolean$java.lang.Object$equals$32((r4186), (r5188));
	 goto Block303;
	 //  @line: 527
Block313:
	 //  @line: 527
	__ret := $z6190;
	 return;
	 //  @line: 527
Block311:
	 assume ($neint(($z3182), (0))==1);
	 goto Block308;
	 //  @line: 527
Block312:
	 //  @line: 527
	 assume ($negInt(($neint(($z3182), (0))))==1);
	 //  @line: 527
	$z6190 := 1;
	 goto Block313;
	 //  @line: 525
Block301:
	 //  @line: 525
	 assume ($negInt(($neref((r5188), ($null))))==1);
	 goto Block302;
	 //  @line: 525
Block299:
	 assume ($neref((r5188), ($null))==1);
	 goto Block300;
	 //  @line: 524
Block303:
	 goto Block305, Block304;
	 //  @line: 526
Block302:
	 goto Block286;
	 //  @line: 525
Block300:
	 //  @line: 525
	__ret := 0;
	 return;
	 //  @line: 524
Block305:
	 //  @line: 524
	 assume ($negInt(($neint(($z5189), (0))))==1);
	 goto Block300;
	 //  @line: 524
Block304:
	 assume ($neint(($z5189), (0))==1);
	 goto Block302;
}


	 //  @line: 781
// <javaUtilEx.RandomAccessSubList: javaUtilEx.List subList(int,int)>
procedure javaUtilEx.List$javaUtilEx.RandomAccessSubList$subList$2541(__this : ref, $param_0 : int, $param_1 : int) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref)  requires ($neref((__this), ($null))==1);
 {
var i0267 : int;
var r0266 : ref;
var $r1265 : ref;
var i1268 : int;

 //temp local variables 
var $caughtEx3 : ref;
var $caughtEx2 : ref;

	 //  @line: 781
Block413:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block414;
Block414:
	r0266 := __this;
	i0267 := $param_0;
	i1268 := $param_1;
	 //  @line: 782
	$r1265 := $newvariable((415));
	 assume ($neref(($newvariable((415))), ($null))==1);
	 assert ($neref(($r1265), ($null))==1);
	 //  @line: 782
	 call $caughtEx2, $caughtEx3 := void$javaUtilEx.RandomAccessSubList$$la$init$ra$$2540(($r1265), (r0266), (i0267), (i1268));
	 goto Block418, Block416;
Block418:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block419;
Block416:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block417;
Block419:
	 goto Block420, Block422;
Block417:
	$Exep0 := $caughtEx2;
	 return;
Block420:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block421;
Block422:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block423;
Block421:
	$Exep1 := $caughtEx3;
	 return;
Block423:
	 //  @line: 782
	__ret := $r1265;
	 return;
}


	 //  @line: 660
// <javaUtilEx.SubList: java.lang.Object remove(int)>
procedure java.lang.Object$javaUtilEx.SubList$remove$2554(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref, $Exep2 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i1352 : int;
var $r2354 : ref;
var $i2353 : int;
var $i3358 : int;
var $i4359 : int;
var $i5360 : int;
var $r3357 : ref;
var r0350 : ref;
var i0351 : int;
var r1356 : ref;

 //temp local variables 
var $caughtEx5 : ref;
var $caughtEx3 : ref;
var $caughtEx4 : ref;

	 //  @line: 660
Block553:
	$caughtEx5 := $null;
	$caughtEx4 := $null;
	$caughtEx3 := $null;
	$Exep2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block554;
Block554:
	r0350 := __this;
	i0351 := $param_0;
	 assert ($neref((r0350), ($null))==1);
	 //  @line: 661
	 call $caughtEx3 := void$javaUtilEx.SubList$rangeCheck$2561((r0350), (i0351));
	 goto Block555, Block557;
Block555:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block556;
Block557:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block558;
Block556:
	$Exep0 := $caughtEx3;
	 return;
Block558:
	 assert ($neref((r0350), ($null))==1);
	 //  @line: 662
	 call $caughtEx4 := void$javaUtilEx.SubList$checkForComodification$2564((r0350));
	 goto Block559, Block561;
Block559:
	 assume ($neref(($caughtEx4), ($null))==1);
	 goto Block560;
Block561:
	 assume ($eqref(($caughtEx4), ($null))==1);
	 goto Block562;
Block560:
	$Exep1 := $caughtEx4;
	 return;
Block562:
	 assert ($neref((r0350), ($null))==1);
	 //  @line: 663
	$r2354 := $HeapVar[r0350, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref((r0350), ($null))==1);
	 //  @line: 663
	$i1352 := $HeapVar[r0350, int$javaUtilEx.SubList$offset0];
	 //  @line: 663
	$i2353 := $addint((i0351), ($i1352));
	 assert ($neref(($r2354), ($null))==1);
	 //  @line: 663
	 call r1356, $caughtEx5 := java.lang.Object$javaUtilEx.AbstractList$remove$2488(($r2354), ($i2353));
	 goto Block565, Block563;
Block565:
	 assume ($eqref(($caughtEx5), ($null))==1);
	 goto Block566;
Block563:
	 assume ($neref(($caughtEx5), ($null))==1);
	 goto Block564;
Block566:
	 assert ($neref((r0350), ($null))==1);
	 //  @line: 664
	$r3357 := $HeapVar[r0350, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref(($r3357), ($null))==1);
	 //  @line: 664
	$i3358 := $HeapVar[$r3357, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0350), ($null))==1);
	 //  @line: 664
	$HeapVar[r0350, int$javaUtilEx.AbstractList$modCount0] := $i3358;
	 assert ($neref((r0350), ($null))==1);
	 //  @line: 665
	$i4359 := $HeapVar[r0350, int$javaUtilEx.SubList$size0];
	 //  @line: 665
	$i5360 := $subint(($i4359), (1));
	 assert ($neref((r0350), ($null))==1);
	 //  @line: 665
	$HeapVar[r0350, int$javaUtilEx.SubList$size0] := $i5360;
	 //  @line: 666
	__ret := r1356;
	 return;
Block564:
	$Exep2 := $caughtEx5;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



	 //  @line: 202
// <javaUtilEx.LinkedList: int size()>
procedure int$javaUtilEx.LinkedList$size$2638(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r0570 : ref;
var $i0571 : int;
Block815:
	r0570 := __this;
	 assert ($neref((r0570), ($null))==1);
	 //  @line: 203
	$i0571 := $HeapVar[r0570, int$javaUtilEx.LinkedList$size0];
	 //  @line: 203
	__ret := $i0571;
	 return;
}


	 //  @line: 147
// <javaUtilEx.AbstractList: void add(int,java.lang.Object)>
procedure void$javaUtilEx.AbstractList$add$2487(__this : ref, $param_0 : int, $param_1 : ref) returns ($Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0113 : ref;
var i0114 : int;
var r1115 : ref;
var $r2112 : ref;

 //temp local variables 

	 //  @line: 147
Block139:
	$Exep0 := $null;
	 goto Block150;
Block150:
	r0113 := __this;
	i0114 := $param_0;
	r1115 := $param_1;
	 //  @line: 148
	$r2112 := $newvariable((151));
	 assume ($neref(($newvariable((151))), ($null))==1);
	 assert ($neref(($r2112), ($null))==1);
	 //  @line: 148
	 call void$javaUtilEx.UnsupportedOperationException$$la$init$ra$$2257(($r2112));
	 goto Block152;
Block152:
	$Exep0 := $r2112;
	 return;
}


// <javaUtilEx.AbstractSequentialList: javaUtilEx.ListIterator listIterator(int)>
procedure javaUtilEx.ListIterator$javaUtilEx.AbstractSequentialList$listIterator$2585(__this : ref, $param_0 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 700
// <javaUtilEx.SubList$1: void <init>(javaUtilEx.SubList,int)>
procedure void$javaUtilEx.SubList$1$$la$init$ra$$2693(__this : ref, $param_0 : ref, $param_1 : int) returns ($Exep0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i3902 : int;
var r1895 : ref;
var r0894 : ref;
var i0896 : int;
var $r4899 : ref;
var $i2901 : int;
var $i1900 : int;
var $r2897 : ref;
var $r3898 : ref;
var $r5903 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 700
Block621:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1293;
Block1293:
	r0894 := __this;
	r1895 := $param_0;
	i0896 := $param_1;
	 assert ($neref((r0894), ($null))==1);
	 //  @line: 701
	$HeapVar[r0894, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309] := r1895;
	 assert ($neref((r0894), ($null))==1);
	 //  @line: 701
	$HeapVar[r0894, int$javaUtilEx.SubList$1$val$index0] := i0896;
	 assert ($neref((r0894), ($null))==1);
	 //  @line: 701
	 call void$java.lang.Object$$la$init$ra$$28((r0894));
	 assert ($neref((r0894), ($null))==1);
	 //  @line: 702
	$r2897 := $HeapVar[r0894, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 //  @line: 702
	 call $r3898 := javaUtilEx.AbstractList$javaUtilEx.SubList$access$100$2566(($r2897));
	 assert ($neref((r0894), ($null))==1);
	 //  @line: 702
	$i1900 := $HeapVar[r0894, int$javaUtilEx.SubList$1$val$index0];
	 assert ($neref((r0894), ($null))==1);
	 //  @line: 702
	$r4899 := $HeapVar[r0894, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 //  @line: 702
	 call $i2901 := int$javaUtilEx.SubList$access$000$2565(($r4899));
	 //  @line: 702
	$i3902 := $addint(($i1900), ($i2901));
	 assert ($neref(($r3898), ($null))==1);
	 //  @line: 702
	 call $r5903, $caughtEx1 := javaUtilEx.ListIterator$javaUtilEx.AbstractList$listIterator$2495(($r3898), ($i3902));
	 goto Block1296, Block1294;
Block1296:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1297;
Block1294:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1295;
Block1297:
	 assert ($neref((r0894), ($null))==1);
	 //  @line: 702
	$HeapVar[r0894, javaUtilEx.ListIterator$javaUtilEx.SubList$1$i308] := $r5903;
	 return;
Block1295:
	$Exep0 := $caughtEx1;
	 return;
}


	 //  @line: 616
// <javaUtilEx.SubList: javaUtilEx.AbstractList access$100(javaUtilEx.SubList)>
procedure javaUtilEx.AbstractList$javaUtilEx.SubList$access$100$2566($param_0 : ref) returns (__ret : ref) {
var r0419 : ref;
var $r1420 : ref;
Block678:
	r0419 := $param_0;
	 assert ($neref((r0419), ($null))==1);
	 //  @line: 617
	$r1420 := $HeapVar[r0419, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 //  @line: 617
	__ret := $r1420;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 561
// <javaUtilEx.LinkedList: java.lang.Object pop()>
procedure java.lang.Object$javaUtilEx.LinkedList$pop$2661(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r1694 : ref;
var r0693 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 561
Block1051:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1052;
Block1052:
	r0693 := __this;
	 assert ($neref((r0693), ($null))==1);
	 //  @line: 562
	 call $r1694, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$removeFirst$2633((r0693));
	 goto Block1053, Block1055;
Block1053:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1054;
Block1055:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1056;
Block1054:
	$Exep0 := $caughtEx1;
	 return;
Block1056:
	 //  @line: 562
	__ret := $r1694;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


	 //  @line: 676
// <javaUtilEx.SubList: boolean addAll(javaUtilEx.Collection)>
procedure boolean$javaUtilEx.SubList$addAll$2556(__this : ref, $param_0 : ref) returns (__ret : int, $Exep0 : ref, $Exep1 : ref, $Exep2 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0374 : ref;
var $i0376 : int;
var r1375 : ref;
var $z0377 : int;

 //temp local variables 
var $caughtEx5 : ref;
var $caughtEx4 : ref;
var $caughtEx3 : ref;

	 //  @line: 676
Block578:
	$caughtEx5 := $null;
	$caughtEx4 := $null;
	$caughtEx3 := $null;
	$Exep2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block579;
Block579:
	r0374 := __this;
	r1375 := $param_0;
	 assert ($neref((r0374), ($null))==1);
	 //  @line: 677
	$i0376 := $HeapVar[r0374, int$javaUtilEx.SubList$size0];
	 assert ($neref((r0374), ($null))==1);
	 //  @line: 677
	 call $z0377, $caughtEx3, $caughtEx4, $caughtEx5 := boolean$javaUtilEx.SubList$addAll$2557((r0374), ($i0376), (r1375));
	 goto Block580, Block582;
Block580:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block581;
Block582:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block583;
Block581:
	$Exep0 := $caughtEx3;
	 return;
Block583:
	 goto Block584, Block586;
Block584:
	 assume ($neref(($caughtEx4), ($null))==1);
	 goto Block585;
Block586:
	 assume ($eqref(($caughtEx4), ($null))==1);
	 goto Block587;
Block585:
	$Exep1 := $caughtEx4;
	 return;
Block587:
	 goto Block588, Block590;
Block588:
	 assume ($neref(($caughtEx5), ($null))==1);
	 goto Block589;
Block590:
	 assume ($eqref(($caughtEx5), ($null))==1);
	 goto Block591;
Block589:
	$Exep2 := $caughtEx5;
	 return;
Block591:
	 //  @line: 677
	__ret := $z0377;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


	 //  @line: 407
// <javaUtilEx.LinkedList: java.lang.Object peek()>
procedure java.lang.Object$javaUtilEx.LinkedList$peek$2649(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0662 : ref;
var $i0663 : int;
var $r1664 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 407
Block970:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block971;
Block971:
	r0662 := __this;
	 assert ($neref((r0662), ($null))==1);
	 //  @line: 408
	$i0663 := $HeapVar[r0662, int$javaUtilEx.LinkedList$size0];
	 goto Block972;
	 //  @line: 408
Block972:
	 goto Block973, Block975;
	 //  @line: 408
Block973:
	 assume ($neint(($i0663), (0))==1);
	 goto Block974;
	 //  @line: 408
Block975:
	 //  @line: 408
	 assume ($negInt(($neint(($i0663), (0))))==1);
	 //  @line: 409
	__ret := $null;
	 return;
	 //  @line: 410
Block974:
	 assert ($neref((r0662), ($null))==1);
	 //  @line: 410
	 call $r1664, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$getFirst$2631((r0662));
	 goto Block976, Block978;
	 //  @line: 410
Block976:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block977;
	 //  @line: 410
Block978:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block979;
	 //  @line: 410
Block977:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 410
Block979:
	 goto Block980;
	 //  @line: 410
Block980:
	 //  @line: 410
	__ret := $r1664;
	 return;
}


	 //  @line: 616
// <javaUtilEx.SubList: int access$208(javaUtilEx.SubList)>
procedure int$javaUtilEx.SubList$access$208$2569($param_0 : ref) returns (__ret : int)
  modifies $HeapVar;
 {
var r0426 : ref;
var $i0427 : int;
var $i1428 : int;
Block681:
	r0426 := $param_0;
	 assert ($neref((r0426), ($null))==1);
	 //  @line: 617
	$i0427 := $HeapVar[r0426, int$javaUtilEx.SubList$size0];
	 //  @line: 617
	$i1428 := $addint(($i0427), (1));
	 assert ($neref((r0426), ($null))==1);
	 //  @line: 617
	$HeapVar[r0426, int$javaUtilEx.SubList$size0] := $i1428;
	 //  @line: 617
	__ret := $i0427;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 289
// <javaUtilEx.LinkedList: java.lang.Object set(int,java.lang.Object)>
procedure java.lang.Object$javaUtilEx.LinkedList$set$2643(__this : ref, $param_0 : int, $param_1 : ref) returns (__ret : ref, $Exep0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r3610 : ref;
var r0606 : ref;
var i0607 : int;
var r2609 : ref;
var r1611 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 289
Block866:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block867;
Block867:
	r0606 := __this;
	i0607 := $param_0;
	r1611 := $param_1;
	 assert ($neref((r0606), ($null))==1);
	 //  @line: 290
	 call r2609, $caughtEx1 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$entry$2646((r0606), (i0607));
	 goto Block870, Block868;
Block870:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block871;
Block868:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block869;
Block871:
	 assert ($neref((r2609), ($null))==1);
	 //  @line: 291
	r3610 := $HeapVar[r2609, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 assert ($neref((r2609), ($null))==1);
	 //  @line: 292
	$HeapVar[r2609, java.lang.Object$javaUtilEx.LinkedList$Entry$element300] := r1611;
	 //  @line: 293
	__ret := r3610;
	 return;
Block869:
	$Exep0 := $caughtEx1;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
procedure java.lang.StringBuilder$java.lang.StringBuilder$append$2265(__this : ref, $param_0 : ref) returns (__ret : ref);



// <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
procedure void$java.lang.RuntimeException$$la$init$ra$$763(__this : ref, $param_0 : ref);



	 //  @line: 72
// <javaUtilEx.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
procedure void$javaUtilEx.IllegalArgumentException$$la$init$ra$$2624(__this : ref, $param_0 : ref, $param_1 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1512 : ref;
var r0511 : ref;
var r2513 : ref;
Block751:
	r0511 := __this;
	r1512 := $param_0;
	r2513 := $param_1;
	 assert ($neref((r0511), ($null))==1);
	 //  @line: 73
	 call void$java.lang.RuntimeException$$la$init$ra$$762((r0511), (r1512), (r2513));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 752
// <javaUtilEx.SubList: javaUtilEx.List subList(int,int)>
procedure javaUtilEx.List$javaUtilEx.SubList$subList$2560(__this : ref, $param_0 : int, $param_1 : int) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0397 : ref;
var i1399 : int;
var $r1396 : ref;
var i0398 : int;

 //temp local variables 
var $caughtEx3 : ref;
var $caughtEx2 : ref;

	 //  @line: 752
Block636:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block637;
Block637:
	r0397 := __this;
	i0398 := $param_0;
	i1399 := $param_1;
	 //  @line: 753
	$r1396 := $newvariable((638));
	 assume ($neref(($newvariable((638))), ($null))==1);
	 assert ($neref(($r1396), ($null))==1);
	 //  @line: 753
	 call $caughtEx2, $caughtEx3 := void$javaUtilEx.SubList$$la$init$ra$$2549(($r1396), (r0397), (i0398), (i1399));
	 goto Block639, Block641;
Block639:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block640;
Block641:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block642;
Block640:
	$Exep0 := $caughtEx2;
	 return;
Block642:
	 goto Block643, Block645;
Block643:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block644;
Block645:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block646;
Block644:
	$Exep1 := $caughtEx3;
	 return;
Block646:
	 //  @line: 753
	__ret := $r1396;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// <javaUtilEx.AbstractCollection: int size()>
procedure int$javaUtilEx.AbstractCollection$size$2230(__this : ref) returns (__ret : int);



// <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
procedure void$java.lang.RuntimeException$$la$init$ra$$762(__this : ref, $param_0 : ref, $param_1 : ref);



	 //  @line: 726
// <javaUtilEx.SubList$1: int nextIndex()>
procedure int$javaUtilEx.SubList$1$nextIndex$2698(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $r1925 : ref;
var $r2927 : ref;
var $i0926 : int;
var $i2929 : int;
var $i1928 : int;
var r0924 : ref;
Block1328:
	r0924 := __this;
	 assert ($neref((r0924), ($null))==1);
	 //  @line: 727
	$r1925 := $HeapVar[r0924, javaUtilEx.ListIterator$javaUtilEx.SubList$1$i308];
	 assert ($neref(($r1925), ($null))==1);
	 //  @line: 727
	 call $i0926 := int$javaUtilEx.ListIterator$nextIndex$2529(($r1925));
	 assert ($neref((r0924), ($null))==1);
	 //  @line: 727
	$r2927 := $HeapVar[r0924, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 //  @line: 727
	 call $i1928 := int$javaUtilEx.SubList$access$000$2565(($r2927));
	 //  @line: 727
	$i2929 := $subint(($i0926), ($i1928));
	 //  @line: 727
	__ret := $i2929;
	 return;
}


	 //  @line: 693
// <javaUtilEx.SubList: javaUtilEx.Iterator iterator()>
procedure javaUtilEx.Iterator$javaUtilEx.SubList$iterator$2558(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0391 : ref;
var $r1392 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 693
Block614:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block615;
Block615:
	r0391 := __this;
	 assert ($neref((r0391), ($null))==1);
	 //  @line: 694
	 call $r1392, $caughtEx1 := javaUtilEx.ListIterator$javaUtilEx.AbstractList$listIterator$2494((r0391));
	 goto Block616, Block618;
Block616:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block617;
Block618:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block619;
Block617:
	$Exep0 := $caughtEx1;
	 return;
Block619:
	 //  @line: 694
	__ret := $r1392;
	 return;
}


	 //  @line: 503
// <javaUtilEx.LinkedList: java.lang.Object peekLast()>
procedure java.lang.Object$javaUtilEx.LinkedList$peekLast$2657(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0682 : ref;
var $r1684 : ref;
var $i0683 : int;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 503
Block1018:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1019;
Block1019:
	r0682 := __this;
	 assert ($neref((r0682), ($null))==1);
	 //  @line: 504
	$i0683 := $HeapVar[r0682, int$javaUtilEx.LinkedList$size0];
	 goto Block1020;
	 //  @line: 504
Block1020:
	 goto Block1023, Block1021;
	 //  @line: 504
Block1023:
	 //  @line: 504
	 assume ($negInt(($neint(($i0683), (0))))==1);
	 //  @line: 505
	__ret := $null;
	 return;
	 //  @line: 504
Block1021:
	 assume ($neint(($i0683), (0))==1);
	 goto Block1022;
	 //  @line: 506
Block1022:
	 assert ($neref((r0682), ($null))==1);
	 //  @line: 506
	 call $r1684, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$getLast$2632((r0682));
	 goto Block1024, Block1026;
	 //  @line: 506
Block1024:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1025;
	 //  @line: 506
Block1026:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1027;
	 //  @line: 506
Block1025:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 506
Block1027:
	 goto Block1028;
	 //  @line: 506
Block1028:
	 //  @line: 506
	__ret := $r1684;
	 return;
}


	 //  @line: 756
// <javaUtilEx.SubList: void rangeCheck(int)>
procedure void$javaUtilEx.SubList$rangeCheck$2561(__this : ref, $param_0 : int) returns ($Exep0 : ref)
  modifies $stringSize;
  requires ($neref((__this), ($null))==1);
 {
var i0400 : int;
var $r1401 : ref;
var r0402 : ref;
var $i1404 : int;
var $r2403 : ref;

 //temp local variables 

	 //  @line: 756
Block506:
	$Exep0 := $null;
	 goto Block647;
Block647:
	r0402 := __this;
	i0400 := $param_0;
	 goto Block648;
	 //  @line: 757
Block648:
	 goto Block651, Block649;
	 //  @line: 757
Block651:
	 //  @line: 757
	 assume ($negInt(($ltint((i0400), (0))))==1);
	 assert ($neref((r0402), ($null))==1);
	 //  @line: 758
	$i1404 := $HeapVar[r0402, int$javaUtilEx.SubList$size0];
	 goto Block652;
	 //  @line: 757
Block649:
	 assume ($ltint((i0400), (0))==1);
	 goto Block650;
	 //  @line: 758
Block652:
	 goto Block655, Block653;
	 //  @line: 758
Block650:
	 //  @line: 758
	$r1401 := $newvariable((656));
	 assume ($neref(($newvariable((656))), ($null))==1);
	 assert ($neref((r0402), ($null))==1);
	 //  @line: 758
	 call $r2403 := java.lang.String$javaUtilEx.SubList$outOfBoundsMsg$2563((r0402), (i0400));
	 assert ($neref(($r1401), ($null))==1);
	 //  @line: 758
	 call void$java.lang.IndexOutOfBoundsException$$la$init$ra$$2076(($r1401), ($r2403));
	 goto Block657;
	 //  @line: 758
Block655:
	 //  @line: 758
	 assume ($negInt(($ltint((i0400), ($i1404))))==1);
	 goto Block650;
	 //  @line: 758
Block653:
	 assume ($ltint((i0400), ($i1404))==1);
	 goto Block654;
	 //  @line: 758
Block657:
	$Exep0 := $r1401;
	 return;
	 //  @line: 759
Block654:
	 return;
}


	 //  @line: 669
// <javaUtilEx.SubList: void removeRange(int,int)>
procedure void$javaUtilEx.SubList$removeRange$2555(__this : ref, $param_0 : int, $param_1 : int) returns ($Exep0 : ref, $Exep1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r2369 : ref;
var $i3365 : int;
var $i7371 : int;
var $i6370 : int;
var $i9373 : int;
var $i2363 : int;
var $i8372 : int;
var r0361 : ref;
var i1364 : int;
var $r1368 : ref;
var $i4366 : int;
var i0362 : int;
var $i5367 : int;

 //temp local variables 
var $caughtEx3 : ref;
var $caughtEx2 : ref;

	 //  @line: 669
Block567:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block568;
Block568:
	r0361 := __this;
	i0362 := $param_0;
	i1364 := $param_1;
	 assert ($neref((r0361), ($null))==1);
	 //  @line: 670
	 call $caughtEx2 := void$javaUtilEx.SubList$checkForComodification$2564((r0361));
	 goto Block569, Block571;
Block569:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block570;
Block571:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block572;
Block570:
	$Exep0 := $caughtEx2;
	 return;
Block572:
	 assert ($neref((r0361), ($null))==1);
	 //  @line: 671
	$r1368 := $HeapVar[r0361, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref((r0361), ($null))==1);
	 //  @line: 671
	$i2363 := $HeapVar[r0361, int$javaUtilEx.SubList$offset0];
	 //  @line: 671
	$i5367 := $addint((i0362), ($i2363));
	 assert ($neref((r0361), ($null))==1);
	 //  @line: 671
	$i3365 := $HeapVar[r0361, int$javaUtilEx.SubList$offset0];
	 //  @line: 671
	$i4366 := $addint((i1364), ($i3365));
	 assert ($neref(($r1368), ($null))==1);
	 //  @line: 671
	 call $caughtEx3 := void$javaUtilEx.AbstractList$removeRange$2499(($r1368), ($i5367), ($i4366));
	 goto Block575, Block573;
Block575:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block576;
Block573:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block574;
Block576:
	 assert ($neref((r0361), ($null))==1);
	 //  @line: 672
	$r2369 := $HeapVar[r0361, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref(($r2369), ($null))==1);
	 //  @line: 672
	$i6370 := $HeapVar[$r2369, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0361), ($null))==1);
	 //  @line: 672
	$HeapVar[r0361, int$javaUtilEx.AbstractList$modCount0] := $i6370;
	 assert ($neref((r0361), ($null))==1);
	 //  @line: 673
	$i8372 := $HeapVar[r0361, int$javaUtilEx.SubList$size0];
	 //  @line: 673
	$i7371 := $subint((i1364), (i0362));
	 //  @line: 673
	$i9373 := $subint(($i8372), ($i7371));
	 assert ($neref((r0361), ($null))==1);
	 //  @line: 673
	$HeapVar[r0361, int$javaUtilEx.SubList$size0] := $i9373;
	 return;
Block574:
	$Exep1 := $caughtEx3;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



	 //  @line: 737
// <javaUtilEx.LinkedList: javaUtilEx.LinkedList$Entry addBefore(java.lang.Object,javaUtilEx.LinkedList$Entry)>
procedure javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$addBefore$2665(__this : ref, $param_0 : ref, $param_1 : ref) returns (__ret : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r1716 : ref;
var r3719 : ref;
var $i1724 : int;
var $r5718 : ref;
var r2717 : ref;
var $i2725 : int;
var r0722 : ref;
var $r4715 : ref;
var $r6720 : ref;
var $i0723 : int;
var $i3726 : int;
var $r7721 : ref;
Block1106:
	r0722 := __this;
	r1716 := $param_0;
	r2717 := $param_1;
	 //  @line: 738
	$r4715 := $newvariable((1107));
	 assume ($neref(($newvariable((1107))), ($null))==1);
	 assert ($neref((r2717), ($null))==1);
	 //  @line: 738
	$r5718 := $HeapVar[r2717, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 assert ($neref(($r4715), ($null))==1);
	 //  @line: 738
	 call void$javaUtilEx.LinkedList$Entry$$la$init$ra$$2676(($r4715), (r1716), (r2717), ($r5718));
	 //  @line: 738
	r3719 := $r4715;
	 assert ($neref((r3719), ($null))==1);
	 //  @line: 739
	$r6720 := $HeapVar[r3719, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 assert ($neref(($r6720), ($null))==1);
	 //  @line: 739
	$HeapVar[$r6720, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301] := r3719;
	 assert ($neref((r3719), ($null))==1);
	 //  @line: 740
	$r7721 := $HeapVar[r3719, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 assert ($neref(($r7721), ($null))==1);
	 //  @line: 740
	$HeapVar[$r7721, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302] := r3719;
	 assert ($neref((r0722), ($null))==1);
	 //  @line: 741
	$i0723 := $HeapVar[r0722, int$javaUtilEx.LinkedList$size0];
	 //  @line: 741
	$i1724 := $addint(($i0723), (1));
	 assert ($neref((r0722), ($null))==1);
	 //  @line: 741
	$HeapVar[r0722, int$javaUtilEx.LinkedList$size0] := $i1724;
	 assert ($neref((r0722), ($null))==1);
	 //  @line: 742
	$i2725 := $HeapVar[r0722, int$javaUtilEx.AbstractList$modCount0];
	 //  @line: 742
	$i3726 := $addint(($i2725), (1));
	 assert ($neref((r0722), ($null))==1);
	 //  @line: 742
	$HeapVar[r0722, int$javaUtilEx.AbstractList$modCount0] := $i3726;
	 //  @line: 743
	__ret := r3719;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 795
// <javaUtilEx.LinkedList: java.lang.Object[] toArray()>
procedure java.lang.Object$lp$$rp$$javaUtilEx.LinkedList$toArray$2668(__this : ref) returns (__ret : [int]ref)
  modifies $refArrSize;
  requires ($neref((__this), ($null))==1);
 {
var r0743 : ref;
var i2752 : int;
var $r3749 : ref;
var $r4751 : ref;
var $i0744 : int;
var $i1750 : int;
var $r2747 : ref;
var r1745 : [int]ref;
var r5753 : ref;
Block1125:
	r0743 := __this;
	 assert ($neref((r0743), ($null))==1);
	 //  @line: 796
	$i0744 := $HeapVar[r0743, int$javaUtilEx.LinkedList$size0];
	 //  @line: 796
	r1745 := $reftorefarr(($newvariable((1126))));
	$refArrSize[$reftorefarr(($newvariable((1126))))[$arrSizeIdx]] := $i0744;
	 assume ($negInt(($eqrefarray(($reftorefarr(($newvariable((1126))))), ($refArrNull))))==1);
	 //  @line: 797
	i2752 := 0;
	 assert ($neref((r0743), ($null))==1);
	 //  @line: 798
	$r2747 := $HeapVar[r0743, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r2747), ($null))==1);
	 //  @line: 798
	r5753 := $HeapVar[$r2747, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block1127;
	 //  @line: 798
Block1127:
	 assert ($neref((r0743), ($null))==1);
	 //  @line: 798
	$r3749 := $HeapVar[r0743, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block1128;
	 //  @line: 798
Block1128:
	 goto Block1131, Block1129;
	 //  @line: 798
Block1131:
	 //  @line: 798
	 assume ($negInt(($eqref((r5753), ($r3749))))==1);
	 //  @line: 799
	$i1750 := i2752;
	 //  @line: 799
	i2752 := $addint((i2752), (1));
	 assert ($neref((r5753), ($null))==1);
	 //  @line: 799
	$r4751 := $HeapVar[r5753, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 assert ($geint(($i1750), (0))==1);
	 assert ($ltint(($i1750), ($refArrSize[r1745[$arrSizeIdx]]))==1);
	 //  @line: 799
	r1745[$i1750] := $r4751;
	 assert ($neref((r5753), ($null))==1);
	 //  @line: 798
	r5753 := $HeapVar[r5753, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block1127;
	 //  @line: 798
Block1129:
	 assume ($eqref((r5753), ($r3749))==1);
	 goto Block1130;
	 //  @line: 800
Block1130:
	 //  @line: 800
	__ret := r1745;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 773
// <javaUtilEx.LinkedList$DescendingIterator: java.lang.Object next()>
procedure java.lang.Object$javaUtilEx.LinkedList$DescendingIterator$next$2690(__this : ref) returns (__ret : ref, $Exep1 : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r2888 : ref;
var r0886 : ref;
var $r1887 : ref;

 //temp local variables 
var $caughtEx2 : ref;
var $caughtEx3 : ref;

	 //  @line: 773
Block1268:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block1269;
Block1269:
	r0886 := __this;
	 assert ($neref((r0886), ($null))==1);
	 //  @line: 774
	$r1887 := $HeapVar[r0886, javaUtilEx.LinkedList$ListItr$javaUtilEx.LinkedList$DescendingIterator$itr306];
	 assert ($neref(($r1887), ($null))==1);
	 //  @line: 774
	 call $r2888, $caughtEx2, $caughtEx3 := java.lang.Object$javaUtilEx.LinkedList$ListItr$previous$2681(($r1887));
	 goto Block1272, Block1270;
Block1272:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block1273;
Block1270:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block1271;
Block1273:
	 goto Block1276, Block1274;
Block1271:
	$Exep1 := $caughtEx2;
	 return;
Block1276:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block1277;
Block1274:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block1275;
Block1277:
	 //  @line: 774
	__ret := $r2888;
	 return;
Block1275:
	$Exep0 := $caughtEx3;
	 return;
}


	 //  @line: 607
// <javaUtilEx.AbstractList: void rangeCheckForAdd(int)>
procedure void$javaUtilEx.AbstractList$rangeCheckForAdd$2500(__this : ref, $param_0 : int) returns ($Exep0 : ref)
  modifies $stringSize;
  requires ($neref((__this), ($null))==1);
 {
var $i1215 : int;
var i0211 : int;
var r0213 : ref;
var $r2214 : ref;
var $r1212 : ref;

 //temp local variables 

	 //  @line: 607
Block157:
	$Exep0 := $null;
	 goto Block335;
Block335:
	r0213 := __this;
	i0211 := $param_0;
	 goto Block336;
	 //  @line: 608
Block336:
	 goto Block339, Block337;
	 //  @line: 608
Block339:
	 //  @line: 608
	 assume ($negInt(($ltint((i0211), (0))))==1);
	 assert ($neref((r0213), ($null))==1);
	 //  @line: 609
	 call $i1215 := int$javaUtilEx.AbstractCollection$size$2230((r0213));
	 goto Block340;
	 //  @line: 608
Block337:
	 assume ($ltint((i0211), (0))==1);
	 goto Block338;
	 //  @line: 609
Block340:
	 goto Block343, Block341;
	 //  @line: 609
Block338:
	 //  @line: 609
	$r1212 := $newvariable((344));
	 assume ($neref(($newvariable((344))), ($null))==1);
	 assert ($neref((r0213), ($null))==1);
	 //  @line: 609
	 call $r2214 := java.lang.String$javaUtilEx.AbstractList$outOfBoundsMsg$2501((r0213), (i0211));
	 assert ($neref(($r1212), ($null))==1);
	 //  @line: 609
	 call void$java.lang.IndexOutOfBoundsException$$la$init$ra$$2076(($r1212), ($r2214));
	 goto Block345;
	 //  @line: 609
Block343:
	 //  @line: 609
	 assume ($negInt(($leint((i0211), ($i1215))))==1);
	 goto Block338;
	 //  @line: 609
Block341:
	 assume ($leint((i0211), ($i1215))==1);
	 goto Block342;
	 //  @line: 609
Block345:
	$Exep0 := $r1212;
	 return;
	 //  @line: 610
Block342:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 319
// <javaUtilEx.AbstractCollection: java.lang.String toString()>
procedure java.lang.String$javaUtilEx.AbstractCollection$toString$2240(__this : ref) returns (__ret : ref)
  modifies $stringSize;
  requires ($neref((__this), ($null))==1);
 {
var $r677 : ref;
var $r879 : ref;
var $r1286 : ref;
var r276 : ref;
var $r778 : ref;
var $z181 : int;
var r1995 : ref;
var r066 : ref;
var r1692 : ref;
var r168 : ref;
var $r472 : ref;
var $r1488 : ref;
var $r1184 : ref;
var $r371 : ref;
var $r1083 : ref;
var $r573 : ref;
var r1591 : ref;
var r1894 : ref;
var $r1387 : ref;
var $r1793 : ref;
var $z069 : int;
var $r982 : ref;
Block112:
	r066 := __this;
	 assert ($neref((r066), ($null))==1);
	 //  @line: 320
	 call r168 := javaUtilEx.Iterator$javaUtilEx.AbstractCollection$iterator$2229((r066));
	 assert ($neref((r168), ($null))==1);
	 //  @line: 321
	 call $z069 := boolean$javaUtilEx.Iterator$hasNext$2254((r168));
	 goto Block113;
	 //  @line: 321
Block113:
	 goto Block116, Block114;
	 //  @line: 321
Block116:
	 //  @line: 321
	 assume ($negInt(($neint(($z069), (0))))==1);
	$stringSize[$fresh1] := 2;
	 //  @line: 322
	__ret := $fresh1;
	 return;
	 //  @line: 321
Block114:
	 assume ($neint(($z069), (0))==1);
	 goto Block115;
	 //  @line: 324
Block115:
	$stringSize[$fresh2] := 0;
	 //  @line: 324
	r1591 := $fresh2;
	 goto Block117;
	 //  @line: 325
Block117:
	 //  @line: 325
	$r371 := $newvariable((118));
	 assume ($neref(($newvariable((118))), ($null))==1);
	 assert ($neref(($r371), ($null))==1);
	 //  @line: 325
	 call void$java.lang.StringBuilder$$la$init$ra$$2261(($r371));
	 assert ($neref(($r371), ($null))==1);
	 //  @line: 325
	 call $r472 := java.lang.StringBuilder$java.lang.StringBuilder$append$2266(($r371), (r1591));
	$stringSize[$fresh3] := 1;
	 assert ($neref(($r472), ($null))==1);
	 //  @line: 325
	 call $r573 := java.lang.StringBuilder$java.lang.StringBuilder$append$2266(($r472), ($fresh3));
	 assert ($neref(($r573), ($null))==1);
	 //  @line: 325
	 call r1692 := java.lang.String$java.lang.StringBuilder$toString$2299(($r573));
	 goto Block119;
	 //  @line: 327
Block119:
	 assert ($neref((r168), ($null))==1);
	 //  @line: 327
	 call r276 := java.lang.Object$javaUtilEx.Iterator$next$2255((r168));
	 //  @line: 328
	$r677 := $newvariable((120));
	 assume ($neref(($newvariable((120))), ($null))==1);
	 assert ($neref(($r677), ($null))==1);
	 //  @line: 328
	 call void$java.lang.StringBuilder$$la$init$ra$$2261(($r677));
	 assert ($neref(($r677), ($null))==1);
	 //  @line: 328
	 call $r778 := java.lang.StringBuilder$java.lang.StringBuilder$append$2266(($r677), (r1692));
	 goto Block121;
	 //  @line: 328
Block121:
	 goto Block122, Block124;
	 //  @line: 328
Block122:
	 assume ($neref((r276), (r066))==1);
	 goto Block123;
	 //  @line: 328
Block124:
	 //  @line: 328
	 assume ($negInt(($neref((r276), (r066))))==1);
	$stringSize[$fresh4] := 17;
	 //  @line: 331
	$r1793 := $fresh4;
	 goto Block125;
	 //  @line: 331
Block123:
	 //  @line: 331
	$r1793 := r276;
	 goto Block125;
	 //  @line: 328
Block125:
	 assert ($neref(($r778), ($null))==1);
	 //  @line: 328
	 call $r879 := java.lang.StringBuilder$java.lang.StringBuilder$append$2265(($r778), ($r1793));
	 goto Block126;
	 //  @line: 328
Block126:
	 assert ($neref(($r879), ($null))==1);
	 //  @line: 328
	 call r1894 := java.lang.String$java.lang.StringBuilder$toString$2299(($r879));
	 assert ($neref((r168), ($null))==1);
	 //  @line: 329
	 call $z181 := boolean$javaUtilEx.Iterator$hasNext$2254((r168));
	 goto Block127;
	 //  @line: 329
Block127:
	 goto Block128, Block130;
	 //  @line: 329
Block128:
	 assume ($neint(($z181), (0))==1);
	 goto Block129;
	 //  @line: 329
Block130:
	 //  @line: 329
	 assume ($negInt(($neint(($z181), (0))))==1);
	 //  @line: 330
	$r1286 := $newvariable((131));
	 assume ($neref(($newvariable((131))), ($null))==1);
	 assert ($neref(($r1286), ($null))==1);
	 //  @line: 330
	 call void$java.lang.StringBuilder$$la$init$ra$$2261(($r1286));
	 assert ($neref(($r1286), ($null))==1);
	 //  @line: 330
	 call $r1387 := java.lang.StringBuilder$java.lang.StringBuilder$append$2266(($r1286), (r1894));
	$stringSize[$fresh5] := 1;
	 assert ($neref(($r1387), ($null))==1);
	 //  @line: 330
	 call $r1488 := java.lang.StringBuilder$java.lang.StringBuilder$append$2266(($r1387), ($fresh5));
	 assert ($neref(($r1488), ($null))==1);
	 //  @line: 330
	 call r1995 := java.lang.String$java.lang.StringBuilder$toString$2299(($r1488));
	 //  @line: 331
	__ret := r1995;
	 return;
	 //  @line: 333
Block129:
	 //  @line: 333
	$r982 := $newvariable((132));
	 assume ($neref(($newvariable((132))), ($null))==1);
	 goto Block133;
	 //  @line: 333
Block133:
	 assert ($neref(($r982), ($null))==1);
	 //  @line: 333
	 call void$java.lang.StringBuilder$$la$init$ra$$2261(($r982));
	 assert ($neref(($r982), ($null))==1);
	 //  @line: 333
	 call $r1083 := java.lang.StringBuilder$java.lang.StringBuilder$append$2266(($r982), (r1894));
	$stringSize[$fresh6] := 2;
	 assert ($neref(($r1083), ($null))==1);
	 //  @line: 333
	 call $r1184 := java.lang.StringBuilder$java.lang.StringBuilder$append$2266(($r1083), ($fresh6));
	 assert ($neref(($r1184), ($null))==1);
	 //  @line: 333
	 call r1692 := java.lang.String$java.lang.StringBuilder$toString$2299(($r1184));
	 goto Block119;
}


	 //  @line: 763
// <javaUtilEx.LinkedList: javaUtilEx.Iterator descendingIterator()>
procedure javaUtilEx.Iterator$javaUtilEx.LinkedList$descendingIterator$2667(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0742 : ref;
var $r1741 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 763
Block1118:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1119;
Block1119:
	r0742 := __this;
	 //  @line: 764
	$r1741 := $newvariable((1120));
	 assume ($neref(($newvariable((1120))), ($null))==1);
	 assert ($neref(($r1741), ($null))==1);
	 //  @line: 764
	 call $caughtEx1 := void$javaUtilEx.LinkedList$DescendingIterator$$la$init$ra$$2692(($r1741), (r0742), ($null));
	 goto Block1123, Block1121;
Block1123:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1124;
Block1121:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1122;
Block1124:
	 //  @line: 764
	__ret := $r1741;
	 return;
Block1122:
	$Exep0 := $caughtEx1;
	 return;
}


	 //  @line: 193
// <javaUtilEx.LinkedList: boolean contains(java.lang.Object)>
procedure boolean$javaUtilEx.LinkedList$contains$2637(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r1566 : ref;
var r0565 : ref;
var $i0567 : int;
var $z0569 : int;
Block809:
	r0565 := __this;
	r1566 := $param_0;
	 assert ($neref((r0565), ($null))==1);
	 //  @line: 194
	 call $i0567 := int$javaUtilEx.LinkedList$indexOf$2647((r0565), (r1566));
	 goto Block810;
	 //  @line: 194
Block810:
	 goto Block811, Block813;
	 //  @line: 194
Block811:
	 assume ($eqint(($i0567), (-1))==1);
	 goto Block812;
	 //  @line: 194
Block813:
	 //  @line: 194
	 assume ($negInt(($eqint(($i0567), (-1))))==1);
	 //  @line: 194
	$z0569 := 1;
	 goto Block814;
	 //  @line: 194
Block812:
	 //  @line: 194
	$z0569 := 0;
	 goto Block814;
	 //  @line: 194
Block814:
	 //  @line: 194
	__ret := $z0569;
	 return;
}


	 //  @line: 464
// <javaUtilEx.LinkedList: boolean offerFirst(java.lang.Object)>
procedure boolean$javaUtilEx.LinkedList$offerFirst$2654(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r1676 : ref;
var r0675 : ref;
Block1005:
	r0675 := __this;
	r1676 := $param_0;
	 assert ($neref((r0675), ($null))==1);
	 //  @line: 465
	 call void$javaUtilEx.LinkedList$addFirst$2635((r0675), (r1676));
	 //  @line: 466
	__ret := 1;
	 return;
}


	 //  @line: 90
// <javaUtilEx.LinkedList: javaUtilEx.LinkedList$Entry access$000(javaUtilEx.LinkedList)>
procedure javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$access$000$2669($param_0 : ref) returns (__ret : ref) {
var r0754 : ref;
var $r1755 : ref;
Block1132:
	r0754 := $param_0;
	 assert ($neref((r0754), ($null))==1);
	 //  @line: 91
	$r1755 := $HeapVar[r0754, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 //  @line: 91
	__ret := $r1755;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// <javaUtilEx.AbstractList: java.lang.Object get(int)>
procedure java.lang.Object$javaUtilEx.AbstractList$get$2485(__this : ref, $param_0 : int) returns (__ret : ref);



	 //  @line: 299
// <javaUtilEx.AbstractList: javaUtilEx.ListIterator listIterator()>
procedure javaUtilEx.ListIterator$javaUtilEx.AbstractList$listIterator$2494(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0158 : ref;
var $r1159 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 299
Block159:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block232;
Block232:
	r0158 := __this;
	 assert ($neref((r0158), ($null))==1);
	 //  @line: 300
	 call $r1159, $caughtEx1 := javaUtilEx.ListIterator$javaUtilEx.AbstractList$listIterator$2495((r0158), (0));
	 goto Block235, Block233;
Block235:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block236;
Block233:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block234;
Block236:
	 //  @line: 300
	__ret := $r1159;
	 return;
Block234:
	$Exep0 := $caughtEx1;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 616
// <javaUtilEx.SubList: int access$200(javaUtilEx.SubList)>
procedure int$javaUtilEx.SubList$access$200$2567($param_0 : ref) returns (__ret : int) {
var r0421 : ref;
var $i0422 : int;
Block679:
	r0421 := $param_0;
	 assert ($neref((r0421), ($null))==1);
	 //  @line: 617
	$i0422 := $HeapVar[r0421, int$javaUtilEx.SubList$size0];
	 //  @line: 617
	__ret := $i0422;
	 return;
}


	 //  @line: 42
// <javaUtilEx.IllegalArgumentException: void <init>()>
procedure void$javaUtilEx.IllegalArgumentException$$la$init$ra$$2622(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0508 : ref;
Block749:
	r0508 := __this;
	 assert ($neref((r0508), ($null))==1);
	 //  @line: 43
	 call void$java.lang.RuntimeException$$la$init$ra$$760((r0508));
	 return;
}


	 //  @line: 83
// <javaUtilEx.ConcurrentModificationException: void <init>(java.lang.String)>
procedure void$javaUtilEx.ConcurrentModificationException$$la$init$ra$$2571(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1431 : ref;
var r0430 : ref;
Block683:
	r0430 := __this;
	r1431 := $param_0;
	 assert ($neref((r0430), ($null))==1);
	 //  @line: 84
	 call void$java.lang.RuntimeException$$la$init$ra$$761((r0430), (r1431));
	 return;
}


	 //  @line: 11
// <javaUtilEx.juLinkedListCreatePollFirst: javaUtilEx.LinkedList createList(int)>
procedure javaUtilEx.LinkedList$javaUtilEx.juLinkedListCreatePollFirst$createList$2628($param_0 : int) returns (__ret : ref) {
var i1527 : int;
var $r1522 : ref;
var r0523 : ref;
var $i0526 : int;
var $r2525 : ref;
Block763:
	i1527 := $param_0;
	 //  @line: 12
	$r1522 := $newvariable((764));
	 assume ($neref(($newvariable((764))), ($null))==1);
	 assert ($neref(($r1522), ($null))==1);
	 //  @line: 12
	 call void$javaUtilEx.LinkedList$$la$init$ra$$2629(($r1522));
	 //  @line: 12
	r0523 := $r1522;
	 goto Block765;
	 //  @line: 13
Block765:
	 goto Block766, Block768;
	 //  @line: 13
Block766:
	 assume ($leint((i1527), (0))==1);
	 goto Block767;
	 //  @line: 13
Block768:
	 //  @line: 13
	 assume ($negInt(($leint((i1527), (0))))==1);
	 //  @line: 14
	$r2525 := $newvariable((769));
	 assume ($neref(($newvariable((769))), ($null))==1);
	 //  @line: 14
	 call $i0526 := int$javaUtilEx.Random$random$2674();
	 assert ($neref(($r2525), ($null))==1);
	 //  @line: 14
	 call void$javaUtilEx.Content$$la$init$ra$$2586(($r2525), ($i0526));
	 assert ($neref((r0523), ($null))==1);
	 //  @line: 14
	 call void$javaUtilEx.LinkedList$addLast$2636((r0523), ($r2525));
	 //  @line: 15
	i1527 := $addint((i1527), (-1));
	 goto Block765;
	 //  @line: 17
Block767:
	 //  @line: 17
	__ret := r0523;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 238
// <javaUtilEx.AbstractSequentialList: javaUtilEx.Iterator iterator()>
procedure javaUtilEx.Iterator$javaUtilEx.AbstractSequentialList$iterator$2584(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0493 : ref;
var $r1494 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 238
Block731:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block732;
Block732:
	r0493 := __this;
	 assert ($neref((r0493), ($null))==1);
	 //  @line: 239
	 call $r1494, $caughtEx1 := javaUtilEx.ListIterator$javaUtilEx.AbstractList$listIterator$2494((r0493));
	 goto Block733, Block735;
Block733:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block734;
Block735:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block736;
Block734:
	$Exep0 := $caughtEx1;
	 return;
Block736:
	 //  @line: 239
	__ret := $r1494;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// <javaUtilEx.ListIterator: int nextIndex()>
procedure int$javaUtilEx.ListIterator$nextIndex$2529(__this : ref) returns (__ret : int);



	 //  @line: 169
// <javaUtilEx.LinkedList: void addFirst(java.lang.Object)>
procedure void$javaUtilEx.LinkedList$addFirst$2635(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1557 : ref;
var $r3559 : ref;
var r0556 : ref;
var $r2558 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block807:
	r0556 := __this;
	r1557 := $param_0;
	 assert ($neref((r0556), ($null))==1);
	 //  @line: 170
	$r2558 := $HeapVar[r0556, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r2558), ($null))==1);
	 //  @line: 170
	$r3559 := $HeapVar[$r2558, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 assert ($neref((r0556), ($null))==1);
	 //  @line: 170
	 call $freshlocal0 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$addBefore$2665((r0556), (r1557), ($r3559));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 708
// <javaUtilEx.SubList$1: java.lang.Object next()>
procedure java.lang.Object$javaUtilEx.SubList$1$next$2695(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r1912 : ref;
var $r3914 : ref;
var r0910 : ref;
var $r2913 : ref;
var $z0911 : int;

 //temp local variables 

	 //  @line: 708
Block1304:
	$Exep0 := $null;
	 goto Block1305;
Block1305:
	r0910 := __this;
	 assert ($neref((r0910), ($null))==1);
	 //  @line: 709
	 call $z0911 := boolean$javaUtilEx.SubList$1$hasNext$2694((r0910));
	 goto Block1306;
	 //  @line: 709
Block1306:
	 goto Block1309, Block1307;
	 //  @line: 709
Block1309:
	 //  @line: 709
	 assume ($negInt(($eqint(($z0911), (0))))==1);
	 assert ($neref((r0910), ($null))==1);
	 //  @line: 710
	$r2913 := $HeapVar[r0910, javaUtilEx.ListIterator$javaUtilEx.SubList$1$i308];
	 assert ($neref(($r2913), ($null))==1);
	 //  @line: 710
	 call $r3914 := java.lang.Object$javaUtilEx.ListIterator$next$2526(($r2913));
	 //  @line: 710
	__ret := $r3914;
	 return;
	 //  @line: 709
Block1307:
	 assume ($eqint(($z0911), (0))==1);
	 goto Block1308;
	 //  @line: 712
Block1308:
	 //  @line: 712
	$r1912 := $newvariable((1310));
	 assume ($neref(($newvariable((1310))), ($null))==1);
	 goto Block1311;
	 //  @line: 712
Block1311:
	 assert ($neref(($r1912), ($null))==1);
	 //  @line: 712
	 call void$javaUtilEx.NoSuchElementException$$la$init$ra$$2572(($r1912));
	 goto Block1312;
	 //  @line: 712
Block1312:
	$Exep0 := $r1912;
	 return;
}


	 //  @line: 207
// <javaUtilEx.AbstractCollection: boolean addAll(javaUtilEx.Collection)>
procedure boolean$javaUtilEx.AbstractCollection$addAll$2236(__this : ref, $param_0 : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var z242 : int;
var r237 : ref;
var $z038 : int;
var $z141 : int;
var r135 : ref;
var $r340 : ref;
var r039 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 207
Block74:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block75;
Block75:
	r039 := __this;
	r135 := $param_0;
	 //  @line: 208
	z242 := 0;
	 assert ($neref((r135), ($null))==1);
	 //  @line: 209
	 call r237 := javaUtilEx.Iterator$javaUtilEx.Collection$iterator$2244((r135));
	 goto Block76;
	 //  @line: 210
Block76:
	 assert ($neref((r237), ($null))==1);
	 //  @line: 210
	 call $z038 := boolean$javaUtilEx.Iterator$hasNext$2254((r237));
	 goto Block77;
	 //  @line: 210
Block77:
	 goto Block80, Block78;
	 //  @line: 210
Block80:
	 //  @line: 210
	 assume ($negInt(($eqint(($z038), (0))))==1);
	 assert ($neref((r237), ($null))==1);
	 //  @line: 211
	 call $r340 := java.lang.Object$javaUtilEx.Iterator$next$2255((r237));
	 assert ($neref((r039), ($null))==1);
	 //  @line: 211
	 call $z141, $caughtEx1 := boolean$javaUtilEx.AbstractCollection$add$2233((r039), ($r340));
	 goto Block81, Block83;
	 //  @line: 210
Block78:
	 assume ($eqint(($z038), (0))==1);
	 goto Block79;
	 //  @line: 210
Block81:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block82;
	 //  @line: 210
Block83:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block84;
	 //  @line: 214
Block79:
	 //  @line: 214
	__ret := z242;
	 return;
	 //  @line: 210
Block82:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 210
Block84:
	 goto Block85;
	 //  @line: 211
Block85:
	 goto Block86, Block87;
	 //  @line: 211
Block86:
	 assume ($eqint(($z141), (0))==1);
	 goto Block76;
	 //  @line: 211
Block87:
	 //  @line: 211
	 assume ($negInt(($eqint(($z141), (0))))==1);
	 //  @line: 212
	z242 := 1;
	 goto Block76;
}


// <javaUtilEx.ListIterator: boolean hasPrevious()>
procedure boolean$javaUtilEx.ListIterator$hasPrevious$2527(__this : ref) returns (__ret : int);



	 //  @line: 150
// <javaUtilEx.LinkedList: java.lang.Object removeFirst()>
procedure java.lang.Object$javaUtilEx.LinkedList$removeFirst$2633(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r3551 : ref;
var r0548 : ref;
var $r2550 : ref;
var $r1549 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 150
Block755:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block796;
Block796:
	r0548 := __this;
	 assert ($neref((r0548), ($null))==1);
	 //  @line: 151
	$r1549 := $HeapVar[r0548, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r1549), ($null))==1);
	 //  @line: 151
	$r2550 := $HeapVar[$r1549, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 assert ($neref((r0548), ($null))==1);
	 //  @line: 151
	 call $r3551, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$remove$2666((r0548), ($r2550));
	 goto Block797, Block799;
Block797:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block798;
Block799:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block800;
Block798:
	$Exep0 := $caughtEx1;
	 return;
Block800:
	 //  @line: 151
	__ret := $r3551;
	 return;
}


	 //  @line: 85
// <javaUtilEx.AbstractCollection: boolean isEmpty()>
procedure boolean$javaUtilEx.AbstractCollection$isEmpty$2231(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r02 : ref;
var $i03 : int;
var $z05 : int;
Block17:
	r02 := __this;
	 assert ($neref((r02), ($null))==1);
	 //  @line: 86
	 call $i03 := int$javaUtilEx.AbstractCollection$size$2230((r02));
	 goto Block18;
	 //  @line: 86
Block18:
	 goto Block21, Block19;
	 //  @line: 86
Block21:
	 //  @line: 86
	 assume ($negInt(($neint(($i03), (0))))==1);
	 //  @line: 86
	$z05 := 1;
	 goto Block22;
	 //  @line: 86
Block19:
	 assume ($neint(($i03), (0))==1);
	 goto Block20;
	 //  @line: 86
Block22:
	 //  @line: 86
	__ret := $z05;
	 return;
	 //  @line: 86
Block20:
	 //  @line: 86
	$z05 := 0;
	 goto Block22;
}


// <javaUtilEx.AbstractCollection: javaUtilEx.Iterator iterator()>
procedure javaUtilEx.Iterator$javaUtilEx.AbstractCollection$iterator$2229(__this : ref) returns (__ret : ref);



	 //  @line: 233
// <javaUtilEx.AbstractList: void clear()>
procedure void$javaUtilEx.AbstractList$clear$2491(__this : ref) returns ($Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $i0144 : int;
var r0142 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 233
Block209:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block210;
Block210:
	r0142 := __this;
	 assert ($neref((r0142), ($null))==1);
	 //  @line: 234
	 call $i0144 := int$javaUtilEx.AbstractCollection$size$2230((r0142));
	 assert ($neref((r0142), ($null))==1);
	 //  @line: 234
	 call $caughtEx1 := void$javaUtilEx.AbstractList$removeRange$2499((r0142), (0), ($i0144));
	 goto Block211, Block213;
Block211:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block212;
Block213:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block214;
Block212:
	$Exep0 := $caughtEx1;
	 return;
Block214:
	 return;
}


	 //  @line: 351
// <javaUtilEx.AbstractList$Itr: boolean hasNext()>
procedure boolean$javaUtilEx.AbstractList$Itr$hasNext$2535(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $z0227 : int;
var $i0224 : int;
var $i1225 : int;
var $r1223 : ref;
var r0222 : ref;
Block348:
	r0222 := __this;
	 assert ($neref((r0222), ($null))==1);
	 //  @line: 352
	$i0224 := $HeapVar[r0222, int$javaUtilEx.AbstractList$Itr$cursor0];
	 assert ($neref((r0222), ($null))==1);
	 //  @line: 352
	$r1223 := $HeapVar[r0222, javaUtilEx.AbstractList$javaUtilEx.AbstractList$Itr$this$0295];
	 assert ($neref(($r1223), ($null))==1);
	 //  @line: 352
	 call $i1225 := int$javaUtilEx.AbstractCollection$size$2230(($r1223));
	 goto Block349;
	 //  @line: 352
Block349:
	 goto Block350, Block352;
	 //  @line: 352
Block350:
	 assume ($eqint(($i0224), ($i1225))==1);
	 goto Block351;
	 //  @line: 352
Block352:
	 //  @line: 352
	 assume ($negInt(($eqint(($i0224), ($i1225))))==1);
	 //  @line: 352
	$z0227 := 1;
	 goto Block353;
	 //  @line: 352
Block351:
	 //  @line: 352
	$z0227 := 0;
	 goto Block353;
	 //  @line: 352
Block353:
	 //  @line: 352
	__ret := $z0227;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


	 //  @line: 666
// <javaUtilEx.LinkedList$ListItr: boolean hasPrevious()>
procedure boolean$javaUtilEx.LinkedList$ListItr$hasPrevious$2680(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r0819 : ref;
var $i0820 : int;
var $z0822 : int;
Block1191:
	r0819 := __this;
	 assert ($neref((r0819), ($null))==1);
	 //  @line: 667
	$i0820 := $HeapVar[r0819, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 goto Block1192;
	 //  @line: 667
Block1192:
	 goto Block1193, Block1195;
	 //  @line: 667
Block1193:
	 assume ($eqint(($i0820), (0))==1);
	 goto Block1194;
	 //  @line: 667
Block1195:
	 //  @line: 667
	 assume ($negInt(($eqint(($i0820), (0))))==1);
	 //  @line: 667
	$z0822 := 1;
	 goto Block1196;
	 //  @line: 667
Block1194:
	 //  @line: 667
	$z0822 := 0;
	 goto Block1196;
	 //  @line: 667
Block1196:
	 //  @line: 667
	__ret := $z0822;
	 return;
}


	 //  @line: 715
// <javaUtilEx.SubList$1: boolean hasPrevious()>
procedure boolean$javaUtilEx.SubList$1$hasPrevious$2696(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $z0918 : int;
var $i0916 : int;
var r0915 : ref;
Block1313:
	r0915 := __this;
	 assert ($neref((r0915), ($null))==1);
	 //  @line: 716
	 call $i0916 := int$javaUtilEx.SubList$1$previousIndex$2699((r0915));
	 goto Block1314;
	 //  @line: 716
Block1314:
	 goto Block1315, Block1317;
	 //  @line: 716
Block1315:
	 assume ($ltint(($i0916), (0))==1);
	 goto Block1316;
	 //  @line: 716
Block1317:
	 //  @line: 716
	 assume ($negInt(($ltint(($i0916), (0))))==1);
	 //  @line: 716
	$z0918 := 1;
	 goto Block1318;
	 //  @line: 716
Block1316:
	 //  @line: 716
	$z0918 := 0;
	 goto Block1318;
	 //  @line: 716
Block1318:
	 //  @line: 716
	__ret := $z0918;
	 return;
}


// <javaUtilEx.List: javaUtilEx.ListIterator listIterator()>
procedure javaUtilEx.ListIterator$javaUtilEx.List$listIterator$2522(__this : ref) returns (__ret : ref);



// <java.lang.Object: int hashCode()>
procedure int$java.lang.Object$hashCode$31(__this : ref) returns (__ret : int);



	 //  @line: 100
// <javaUtilEx.LinkedList: void <init>()>
procedure void$javaUtilEx.LinkedList$$la$init$ra$$2629(__this : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0528 : ref;
var $r4532 : ref;
var $r3531 : ref;
var $r1529 : ref;
var $r2530 : ref;
Block770:
	r0528 := __this;
	 assert ($neref((r0528), ($null))==1);
	 //  @line: 101
	 call void$javaUtilEx.AbstractSequentialList$$la$init$ra$$2578((r0528));
	 //  @line: 95
	$r1529 := $newvariable((771));
	 assume ($neref(($newvariable((771))), ($null))==1);
	 assert ($neref(($r1529), ($null))==1);
	 //  @line: 95
	 call void$javaUtilEx.LinkedList$Entry$$la$init$ra$$2676(($r1529), ($null), ($null), ($null));
	 assert ($neref((r0528), ($null))==1);
	 //  @line: 95
	$HeapVar[r0528, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298] := $r1529;
	 assert ($neref((r0528), ($null))==1);
	 //  @line: 96
	$HeapVar[r0528, int$javaUtilEx.LinkedList$size0] := 0;
	 assert ($neref((r0528), ($null))==1);
	 //  @line: 102
	$r4532 := $HeapVar[r0528, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref((r0528), ($null))==1);
	 //  @line: 102
	$r3531 := $HeapVar[r0528, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref((r0528), ($null))==1);
	 //  @line: 102
	$r2530 := $HeapVar[r0528, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r3531), ($null))==1);
	 //  @line: 102
	$HeapVar[$r3531, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302] := $r2530;
	 assert ($neref(($r4532), ($null))==1);
	 //  @line: 102
	$HeapVar[$r4532, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301] := $r2530;
	 return;
}


// <javaUtilEx.ListIterator: boolean hasNext()>
procedure boolean$javaUtilEx.ListIterator$hasNext$2525(__this : ref) returns (__ret : int);



	 //  @line: 90
// <javaUtilEx.LinkedList: javaUtilEx.LinkedList$Entry access$300(javaUtilEx.LinkedList,java.lang.Object,javaUtilEx.LinkedList$Entry)>
procedure javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$access$300$2672($param_0 : ref, $param_1 : ref, $param_2 : ref) returns (__ret : ref) {
var r2763 : ref;
var $r3764 : ref;
var r0761 : ref;
var r1762 : ref;
Block1140:
	r0761 := $param_0;
	r1762 := $param_1;
	r2763 := $param_2;
	 assert ($neref((r0761), ($null))==1);
	 //  @line: 91
	 call $r3764 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$addBefore$2665((r0761), (r1762), (r2763));
	 //  @line: 91
	__ret := $r3764;
	 return;
}


	 //  @line: 181
// <javaUtilEx.AbstractCollection: boolean containsAll(javaUtilEx.Collection)>
procedure boolean$javaUtilEx.AbstractCollection$containsAll$2235(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $z030 : int;
var r127 : ref;
var $r332 : ref;
var r031 : ref;
var r229 : ref;
var $z133 : int;
Block65:
	r031 := __this;
	r127 := $param_0;
	 assert ($neref((r127), ($null))==1);
	 //  @line: 182
	 call r229 := javaUtilEx.Iterator$javaUtilEx.Collection$iterator$2244((r127));
	 goto Block66;
	 //  @line: 183
Block66:
	 assert ($neref((r229), ($null))==1);
	 //  @line: 183
	 call $z030 := boolean$javaUtilEx.Iterator$hasNext$2254((r229));
	 goto Block67;
	 //  @line: 183
Block67:
	 goto Block70, Block68;
	 //  @line: 183
Block70:
	 //  @line: 183
	 assume ($negInt(($eqint(($z030), (0))))==1);
	 assert ($neref((r229), ($null))==1);
	 //  @line: 184
	 call $r332 := java.lang.Object$javaUtilEx.Iterator$next$2255((r229));
	 assert ($neref((r031), ($null))==1);
	 //  @line: 184
	 call $z133 := boolean$javaUtilEx.AbstractCollection$contains$2232((r031), ($r332));
	 goto Block71;
	 //  @line: 183
Block68:
	 assume ($eqint(($z030), (0))==1);
	 goto Block69;
	 //  @line: 184
Block71:
	 goto Block72, Block73;
	 //  @line: 186
Block69:
	 //  @line: 186
	__ret := 1;
	 return;
	 //  @line: 184
Block72:
	 assume ($neint(($z133), (0))==1);
	 goto Block66;
	 //  @line: 184
Block73:
	 //  @line: 184
	 assume ($negInt(($neint(($z133), (0))))==1);
	 //  @line: 185
	__ret := 0;
	 return;
}


	 //  @line: 684
// <javaUtilEx.LinkedList$ListItr: int previousIndex()>
procedure int$javaUtilEx.LinkedList$ListItr$previousIndex$2683(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i0835 : int;
var $i1836 : int;
var r0834 : ref;
Block1211:
	r0834 := __this;
	 assert ($neref((r0834), ($null))==1);
	 //  @line: 685
	$i0835 := $HeapVar[r0834, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 //  @line: 685
	$i1836 := $subint(($i0835), (1));
	 //  @line: 685
	__ret := $i1836;
	 return;
}


	 //  @line: 627
// <javaUtilEx.LinkedList: javaUtilEx.ListIterator listIterator(int)>
procedure javaUtilEx.ListIterator$javaUtilEx.LinkedList$listIterator$2664(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var i0714 : int;
var $r1712 : ref;
var r0713 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 627
Block1099:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1100;
Block1100:
	r0713 := __this;
	i0714 := $param_0;
	 //  @line: 628
	$r1712 := $newvariable((1101));
	 assume ($neref(($newvariable((1101))), ($null))==1);
	 assert ($neref(($r1712), ($null))==1);
	 //  @line: 628
	 call $caughtEx1 := void$javaUtilEx.LinkedList$ListItr$$la$init$ra$$2677(($r1712), (r0713), (i0714));
	 goto Block1104, Block1102;
Block1104:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1105;
Block1102:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1103;
Block1105:
	 //  @line: 628
	__ret := $r1712;
	 return;
Block1103:
	$Exep0 := $caughtEx1;
	 return;
}


	 //  @line: 711
// <javaUtilEx.LinkedList$ListItr: void add(java.lang.Object)>
procedure void$javaUtilEx.LinkedList$ListItr$add$2686(__this : ref, $param_0 : ref) returns ($Exep0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r3863 : ref;
var $r2862 : ref;
var r1864 : ref;
var $r5866 : ref;
var $i3871 : int;
var $i1869 : int;
var $r4865 : ref;
var $i2870 : int;
var $i0868 : int;
var r0861 : ref;

 //temp local variables 
var $freshlocal2 : ref;
var $caughtEx1 : ref;

	 //  @line: 711
Block1248:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1249;
Block1249:
	r0861 := __this;
	r1864 := $param_0;
	 assert ($neref((r0861), ($null))==1);
	 //  @line: 712
	 call $caughtEx1 := void$javaUtilEx.LinkedList$ListItr$checkForComodification$2687((r0861));
	 goto Block1250, Block1252;
Block1250:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1251;
Block1252:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1253;
Block1251:
	$Exep0 := $caughtEx1;
	 return;
Block1253:
	 assert ($neref((r0861), ($null))==1);
	 //  @line: 713
	$r2862 := $HeapVar[r0861, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305];
	 //  @line: 713
	 call $r3863 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$access$000$2669(($r2862));
	 assert ($neref((r0861), ($null))==1);
	 //  @line: 713
	$HeapVar[r0861, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303] := $r3863;
	 assert ($neref((r0861), ($null))==1);
	 //  @line: 714
	$r5866 := $HeapVar[r0861, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305];
	 assert ($neref((r0861), ($null))==1);
	 //  @line: 714
	$r4865 := $HeapVar[r0861, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304];
	 //  @line: 714
	 call $freshlocal2 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$access$300$2672(($r5866), (r1864), ($r4865));
	 assert ($neref((r0861), ($null))==1);
	 //  @line: 715
	$i0868 := $HeapVar[r0861, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 //  @line: 715
	$i1869 := $addint(($i0868), (1));
	 assert ($neref((r0861), ($null))==1);
	 //  @line: 715
	$HeapVar[r0861, int$javaUtilEx.LinkedList$ListItr$nextIndex0] := $i1869;
	 assert ($neref((r0861), ($null))==1);
	 //  @line: 716
	$i2870 := $HeapVar[r0861, int$javaUtilEx.LinkedList$ListItr$expectedModCount0];
	 //  @line: 716
	$i3871 := $addint(($i2870), (1));
	 assert ($neref((r0861), ($null))==1);
	 //  @line: 716
	$HeapVar[r0861, int$javaUtilEx.LinkedList$ListItr$expectedModCount0] := $i3871;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 571
// <javaUtilEx.AbstractList: void removeRange(int,int)>
procedure void$javaUtilEx.AbstractList$removeRange$2499(__this : ref, $param_0 : int, $param_1 : int) returns ($Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1205 : ref;
var i1207 : int;
var i0203 : int;
var i3210 : int;
var i2208 : int;
var r0202 : ref;

 //temp local variables 
var $freshlocal2 : ref;
var $caughtEx1 : ref;

	 //  @line: 571
Block208:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block326;
Block326:
	r0202 := __this;
	i0203 := $param_0;
	i1207 := $param_1;
	 assert ($neref((r0202), ($null))==1);
	 //  @line: 572
	 call r1205, $caughtEx1 := javaUtilEx.ListIterator$javaUtilEx.AbstractList$listIterator$2495((r0202), (i0203));
	 goto Block327, Block329;
Block327:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block328;
Block329:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block330;
Block328:
	$Exep0 := $caughtEx1;
	 return;
Block330:
	 //  @line: 573
	i3210 := 0;
	 //  @line: 573
	i2208 := $subint((i1207), (i0203));
	 goto Block331;
	 //  @line: 573
Block331:
	 goto Block332, Block334;
	 //  @line: 573
Block332:
	 assume ($geint((i3210), (i2208))==1);
	 goto Block333;
	 //  @line: 573
Block334:
	 //  @line: 573
	 assume ($negInt(($geint((i3210), (i2208))))==1);
	 assert ($neref((r1205), ($null))==1);
	 //  @line: 574
	 call $freshlocal2 := java.lang.Object$javaUtilEx.ListIterator$next$2526((r1205));
	 assert ($neref((r1205), ($null))==1);
	 //  @line: 575
	 call void$javaUtilEx.ListIterator$remove$2531((r1205));
	 //  @line: 573
	i3210 := $addint((i3210), (1));
	 goto Block331;
	 //  @line: 577
Block333:
	 return;
}


	 //  @line: 635
// <javaUtilEx.SubList: java.lang.Object set(int,java.lang.Object)>
procedure java.lang.Object$javaUtilEx.SubList$set$2550(__this : ref, $param_0 : int, $param_1 : ref) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref, $Exep2 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r3331 : ref;
var r0325 : ref;
var i0326 : int;
var $i1327 : int;
var r1328 : ref;
var $i2329 : int;
var $r2330 : ref;

 //temp local variables 
var $caughtEx3 : ref;
var $caughtEx4 : ref;
var $caughtEx5 : ref;

	 //  @line: 635
Block507:
	$caughtEx5 := $null;
	$caughtEx4 := $null;
	$caughtEx3 := $null;
	$Exep2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block509;
Block509:
	r0325 := __this;
	i0326 := $param_0;
	r1328 := $param_1;
	 assert ($neref((r0325), ($null))==1);
	 //  @line: 636
	 call $caughtEx3 := void$javaUtilEx.SubList$rangeCheck$2561((r0325), (i0326));
	 goto Block512, Block510;
Block512:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block513;
Block510:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block511;
Block513:
	 assert ($neref((r0325), ($null))==1);
	 //  @line: 637
	 call $caughtEx4 := void$javaUtilEx.SubList$checkForComodification$2564((r0325));
	 goto Block514, Block516;
Block511:
	$Exep0 := $caughtEx3;
	 return;
Block514:
	 assume ($neref(($caughtEx4), ($null))==1);
	 goto Block515;
Block516:
	 assume ($eqref(($caughtEx4), ($null))==1);
	 goto Block517;
Block515:
	$Exep1 := $caughtEx4;
	 return;
Block517:
	 assert ($neref((r0325), ($null))==1);
	 //  @line: 638
	$r2330 := $HeapVar[r0325, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref((r0325), ($null))==1);
	 //  @line: 638
	$i1327 := $HeapVar[r0325, int$javaUtilEx.SubList$offset0];
	 //  @line: 638
	$i2329 := $addint((i0326), ($i1327));
	 assert ($neref(($r2330), ($null))==1);
	 //  @line: 638
	 call $r3331, $caughtEx5 := java.lang.Object$javaUtilEx.AbstractList$set$2486(($r2330), ($i2329), (r1328));
	 goto Block518, Block520;
Block518:
	 assume ($neref(($caughtEx5), ($null))==1);
	 goto Block519;
Block520:
	 assume ($eqref(($caughtEx5), ($null))==1);
	 goto Block521;
Block519:
	$Exep2 := $caughtEx5;
	 return;
Block521:
	 //  @line: 638
	__ret := $r3331;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


	 //  @line: 2
// <javaUtilEx.Random: void <init>()>
procedure void$javaUtilEx.Random$$la$init$ra$$2673(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0765 : ref;
Block1141:
	r0765 := __this;
	 assert ($neref((r0765), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r0765));
	 return;
}


	 //  @line: 766
// <javaUtilEx.SubList: java.lang.String outOfBoundsMsg(int)>
procedure java.lang.String$javaUtilEx.SubList$outOfBoundsMsg$2563(__this : ref, $param_0 : int) returns (__ret : ref)
  modifies $stringSize;
  requires ($neref((__this), ($null))==1);
 {
var r0410 : ref;
var i0411 : int;
Block669:
	r0410 := __this;
	i0411 := $param_0;
	$stringSize[$fresh2] := 0;
	 //  @line: 767
	__ret := $fresh2;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 4
// <javaUtilEx.Random: void <clinit>()>
procedure void$javaUtilEx.Random$$la$clinit$ra$$2675()
  modifies int$javaUtilEx.Random$index0;
 {
	 //  @line: 5
Block1143:
	 //  @line: 5
	int$javaUtilEx.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// <java.lang.RuntimeException: void <init>()>
procedure void$java.lang.RuntimeException$$la$init$ra$$760(__this : ref);



	 //  @line: 52
// <javaUtilEx.IllegalArgumentException: void <init>(java.lang.String)>
procedure void$javaUtilEx.IllegalArgumentException$$la$init$ra$$2623(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1510 : ref;
var r0509 : ref;
Block750:
	r0509 := __this;
	r1510 := $param_0;
	 assert ($neref((r0509), ($null))==1);
	 //  @line: 53
	 call void$java.lang.RuntimeException$$la$init$ra$$761((r0509), (r1510));
	 return;
}


	 //  @line: 54
// <javaUtilEx.IllegalStateException: void <init>(java.lang.String)>
procedure void$javaUtilEx.IllegalStateException$$la$init$ra$$2575(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0436 : ref;
var r1437 : ref;
Block687:
	r0436 := __this;
	r1437 := $param_0;
	 assert ($neref((r0436), ($null))==1);
	 //  @line: 55
	 call void$java.lang.RuntimeException$$la$init$ra$$761((r0436), (r1437));
	 return;
}


	 //  @line: 256
// <javaUtilEx.AbstractList: boolean addAll(int,javaUtilEx.Collection)>
procedure boolean$javaUtilEx.AbstractList$addAll$2492(__this : ref, $param_0 : int, $param_1 : ref) returns (__ret : int, $Exep0 : ref, $Exep1 : ref)  requires ($neref((__this), ($null))==1);
 {
var $z0151 : int;
var r2150 : ref;
var i1154 : int;
var r1148 : ref;
var r0145 : ref;
var $r3153 : ref;
var z1155 : int;
var $i0152 : int;

 //temp local variables 
var $caughtEx3 : ref;
var $caughtEx2 : ref;

	 //  @line: 256
Block215:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block216;
Block216:
	r0145 := __this;
	i1154 := $param_0;
	r1148 := $param_1;
	 assert ($neref((r0145), ($null))==1);
	 //  @line: 257
	 call $caughtEx2 := void$javaUtilEx.AbstractList$rangeCheckForAdd$2500((r0145), (i1154));
	 goto Block219, Block217;
Block219:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block220;
Block217:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block218;
Block220:
	 //  @line: 258
	z1155 := 0;
	 assert ($neref((r1148), ($null))==1);
	 //  @line: 259
	 call r2150 := javaUtilEx.Iterator$javaUtilEx.Collection$iterator$2244((r1148));
	 goto Block221;
Block218:
	$Exep0 := $caughtEx2;
	 return;
	 //  @line: 260
Block221:
	 assert ($neref((r2150), ($null))==1);
	 //  @line: 260
	 call $z0151 := boolean$javaUtilEx.Iterator$hasNext$2254((r2150));
	 goto Block222;
	 //  @line: 260
Block222:
	 goto Block225, Block223;
	 //  @line: 260
Block225:
	 //  @line: 260
	 assume ($negInt(($eqint(($z0151), (0))))==1);
	 //  @line: 261
	$i0152 := i1154;
	 //  @line: 261
	i1154 := $addint((i1154), (1));
	 assert ($neref((r2150), ($null))==1);
	 //  @line: 261
	 call $r3153 := java.lang.Object$javaUtilEx.Iterator$next$2255((r2150));
	 assert ($neref((r0145), ($null))==1);
	 //  @line: 261
	 call $caughtEx3 := void$javaUtilEx.AbstractList$add$2487((r0145), ($i0152), ($r3153));
	 goto Block226, Block228;
	 //  @line: 260
Block223:
	 assume ($eqint(($z0151), (0))==1);
	 goto Block224;
	 //  @line: 260
Block226:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block227;
	 //  @line: 260
Block228:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block229;
	 //  @line: 264
Block224:
	 //  @line: 264
	__ret := z1155;
	 return;
	 //  @line: 260
Block227:
	$Exep1 := $caughtEx3;
	 return;
	 //  @line: 260
Block229:
	 //  @line: 262
	z1155 := 1;
	 goto Block221;
}


	 //  @line: 90
// <javaUtilEx.LinkedList: java.lang.Object access$200(javaUtilEx.LinkedList,javaUtilEx.LinkedList$Entry)>
procedure java.lang.Object$javaUtilEx.LinkedList$access$200$2671($param_0 : ref, $param_1 : ref) returns (__ret : ref, $Exep0 : ref) {
var r0758 : ref;
var r1759 : ref;
var $r2760 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 90
Block1134:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1135;
Block1135:
	r0758 := $param_0;
	r1759 := $param_1;
	 assert ($neref((r0758), ($null))==1);
	 //  @line: 91
	 call $r2760, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$remove$2666((r0758), (r1759));
	 goto Block1138, Block1136;
Block1138:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1139;
Block1136:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1137;
Block1139:
	 //  @line: 91
	__ret := $r2760;
	 return;
Block1137:
	$Exep0 := $caughtEx1;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 767
// <javaUtilEx.LinkedList$DescendingIterator: void <init>(javaUtilEx.LinkedList,javaUtilEx.LinkedList$1)>
procedure void$javaUtilEx.LinkedList$DescendingIterator$$la$init$ra$$2692(__this : ref, $param_0 : ref, $param_1 : ref) returns ($Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1892 : ref;
var r0891 : ref;
var r2893 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 767
Block1117:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1288;
Block1288:
	r0891 := __this;
	r1892 := $param_0;
	r2893 := $param_1;
	 assert ($neref((r0891), ($null))==1);
	 //  @line: 768
	 call $caughtEx1 := void$javaUtilEx.LinkedList$DescendingIterator$$la$init$ra$$2688((r0891), (r1892));
	 goto Block1289, Block1291;
Block1289:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1290;
Block1291:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1292;
Block1290:
	$Exep0 := $caughtEx1;
	 return;
Block1292:
	 return;
}


	 //  @line: 170
// <javaUtilEx.AbstractSequentialList: java.lang.Object remove(int)>
procedure java.lang.Object$javaUtilEx.AbstractSequentialList$remove$2582(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r3476 : ref;
var r1474 : ref;
var r0469 : ref;
var i0470 : int;
var $r2475 : ref;
var r4477 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 170
Block713:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block714;
Block714:
	r0469 := __this;
	i0470 := $param_0;
	 goto Block715;
	 //  @line: 171
Block715:
	 assert ($neref((r0469), ($null))==1);
	 //  @line: 171
	 call r4477 := javaUtilEx.ListIterator$javaUtilEx.AbstractSequentialList$listIterator$2585((r0469), (i0470));
	 assert ($neref((r4477), ($null))==1);
	 //  @line: 172
	 call r1474 := java.lang.Object$javaUtilEx.ListIterator$next$2526((r4477));
	 assert ($neref((r4477), ($null))==1);
	 //  @line: 173
	 call void$javaUtilEx.ListIterator$remove$2531((r4477));
	 goto Block716;
	 //  @line: 174
Block716:
	 //  @line: 174
	__ret := r1474;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 213
// <javaUtilEx.AbstractSequentialList: boolean addAll(int,javaUtilEx.Collection)>
procedure boolean$javaUtilEx.AbstractSequentialList$addAll$2583(__this : ref, $param_0 : int, $param_1 : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r3486 : ref;
var r1484 : ref;
var i0481 : int;
var $r4488 : ref;
var $z0487 : int;
var r2483 : ref;
var z1491 : int;
var $r5489 : ref;
var r0480 : ref;
var $r6490 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 213
Block720:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block721;
Block721:
	r0480 := __this;
	i0481 := $param_0;
	r1484 := $param_1;
	 goto Block722;
	 //  @line: 214
Block722:
	 //  @line: 214
	z1491 := 0;
	 assert ($neref((r0480), ($null))==1);
	 //  @line: 215
	 call r2483 := javaUtilEx.ListIterator$javaUtilEx.AbstractSequentialList$listIterator$2585((r0480), (i0481));
	 assert ($neref((r1484), ($null))==1);
	 //  @line: 216
	 call r3486 := javaUtilEx.Iterator$javaUtilEx.Collection$iterator$2244((r1484));
	 goto Block723;
	 //  @line: 217
Block723:
	 assert ($neref((r3486), ($null))==1);
	 //  @line: 217
	 call $z0487 := boolean$javaUtilEx.Iterator$hasNext$2254((r3486));
	 goto Block724;
	 //  @line: 217
Block724:
	 goto Block725, Block727;
	 //  @line: 217
Block725:
	 assume ($eqint(($z0487), (0))==1);
	 goto Block726;
	 //  @line: 217
Block727:
	 //  @line: 217
	 assume ($negInt(($eqint(($z0487), (0))))==1);
	 assert ($neref((r3486), ($null))==1);
	 //  @line: 218
	 call $r4488 := java.lang.Object$javaUtilEx.Iterator$next$2255((r3486));
	 assert ($neref((r2483), ($null))==1);
	 //  @line: 218
	 call void$javaUtilEx.ListIterator$add$2533((r2483), ($r4488));
	 //  @line: 219
	z1491 := 1;
	 goto Block723;
	 //  @line: 221
Block726:
	 //  @line: 221
	__ret := z1491;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// <javaUtilEx.Collection: javaUtilEx.Iterator iterator()>
procedure javaUtilEx.Iterator$javaUtilEx.Collection$iterator$2244(__this : ref) returns (__ret : ref);



	 //  @line: 90
// <javaUtilEx.IllegalArgumentException: void <init>(java.lang.Throwable)>
procedure void$javaUtilEx.IllegalArgumentException$$la$init$ra$$2625(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0514 : ref;
var r1515 : ref;
Block752:
	r0514 := __this;
	r1515 := $param_0;
	 assert ($neref((r0514), ($null))==1);
	 //  @line: 91
	 call void$java.lang.RuntimeException$$la$init$ra$$763((r0514), (r1515));
	 return;
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 92
// <javaUtilEx.IllegalStateException: void <init>(java.lang.Throwable)>
procedure void$javaUtilEx.IllegalStateException$$la$init$ra$$2577(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0441 : ref;
var r1442 : ref;
Block689:
	r0441 := __this;
	r1442 := $param_0;
	 assert ($neref((r0441), ($null))==1);
	 //  @line: 93
	 call void$java.lang.RuntimeException$$la$init$ra$$763((r0441), (r1442));
	 return;
}


	 //  @line: 434
// <javaUtilEx.AbstractList$ListItr: void add(java.lang.Object)>
procedure void$javaUtilEx.AbstractList$ListItr$add$2548(__this : ref, $param_0 : ref) returns ($Exep0 : ref, $Exep1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0303 : ref;
var $r3308 : ref;
var $i1309 : int;
var $r4310 : ref;
var i2312 : int;
var $i0307 : int;
var $r2306 : ref;
var r1305 : ref;
var $r5311 : ref;

 //temp local variables 
var $caughtEx2 : ref;
var $caughtEx4 : ref;
var $caughtEx3 : ref;

	 //  @line: 434
Block470:
	$caughtEx4 := $null;
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block471;
Block471:
	r0303 := __this;
	r1305 := $param_0;
	 assert ($neref((r0303), ($null))==1);
	 //  @line: 435
	 call $caughtEx2 := void$javaUtilEx.AbstractList$Itr$checkForComodification$2538((r0303));
	 goto Block472, Block474;
Block472:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block473;
Block474:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block475;
Block473:
	$Exep0 := $caughtEx2;
	 return;
Block475:
	 goto Block476;
	 //  @line: 438
Block476:
	 assert ($neref((r0303), ($null))==1);
	 //  @line: 438
	i2312 := $HeapVar[r0303, int$javaUtilEx.AbstractList$Itr$cursor0];
	 assert ($neref((r0303), ($null))==1);
	 //  @line: 439
	$r2306 := $HeapVar[r0303, javaUtilEx.AbstractList$javaUtilEx.AbstractList$ListItr$this$0296];
	 assert ($neref(($r2306), ($null))==1);
	 //  @line: 439
	 call $caughtEx3 := void$javaUtilEx.AbstractList$add$2487(($r2306), (i2312), (r1305));
	 goto Block477, Block479;
	 //  @line: 438
Block477:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block478;
	 //  @line: 438
Block479:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block480;
	 //  @line: 438
Block478:
	$Exep1 := $caughtEx3;
	 return;
	 //  @line: 438
Block480:
	 assert ($neref((r0303), ($null))==1);
	 //  @line: 440
	$HeapVar[r0303, int$javaUtilEx.AbstractList$Itr$lastRet0] := -1;
	 //  @line: 441
	$i0307 := $addint((i2312), (1));
	 assert ($neref((r0303), ($null))==1);
	 //  @line: 441
	$HeapVar[r0303, int$javaUtilEx.AbstractList$Itr$cursor0] := $i0307;
	 assert ($neref((r0303), ($null))==1);
	 //  @line: 442
	$r3308 := $HeapVar[r0303, javaUtilEx.AbstractList$javaUtilEx.AbstractList$ListItr$this$0296];
	 assert ($neref(($r3308), ($null))==1);
	 //  @line: 442
	$i1309 := $HeapVar[$r3308, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0303), ($null))==1);
	 //  @line: 442
	$HeapVar[r0303, int$javaUtilEx.AbstractList$Itr$expectedModCount0] := $i1309;
	 goto Block481;
	 //  @line: 445
Block481:
	 goto Block482;
	 //  @line: 446
Block482:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 253
// <javaUtilEx.LinkedList: void clear()>
procedure void$javaUtilEx.LinkedList$clear$2641(__this : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r3593 : ref;
var $r6596 : ref;
var $i0597 : int;
var $i1598 : int;
var $r5595 : ref;
var r7601 : ref;
var r0590 : ref;
var r1599 : ref;
var $r2591 : ref;
var $r4594 : ref;
Block852:
	r0590 := __this;
	 assert ($neref((r0590), ($null))==1);
	 //  @line: 254
	$r2591 := $HeapVar[r0590, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r2591), ($null))==1);
	 //  @line: 254
	r7601 := $HeapVar[$r2591, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block853;
	 //  @line: 255
Block853:
	 assert ($neref((r0590), ($null))==1);
	 //  @line: 255
	$r3593 := $HeapVar[r0590, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block854;
	 //  @line: 255
Block854:
	 goto Block857, Block855;
	 //  @line: 255
Block857:
	 //  @line: 255
	 assume ($negInt(($eqref((r7601), ($r3593))))==1);
	 assert ($neref((r7601), ($null))==1);
	 //  @line: 256
	r1599 := $HeapVar[r7601, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 assert ($neref((r7601), ($null))==1);
	 //  @line: 257
	$HeapVar[r7601, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302] := $null;
	 assert ($neref((r7601), ($null))==1);
	 //  @line: 257
	$HeapVar[r7601, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301] := $null;
	 assert ($neref((r7601), ($null))==1);
	 //  @line: 258
	$HeapVar[r7601, java.lang.Object$javaUtilEx.LinkedList$Entry$element300] := $null;
	 //  @line: 259
	r7601 := r1599;
	 goto Block853;
	 //  @line: 255
Block855:
	 assume ($eqref((r7601), ($r3593))==1);
	 goto Block856;
	 //  @line: 261
Block856:
	 assert ($neref((r0590), ($null))==1);
	 //  @line: 261
	$r6596 := $HeapVar[r0590, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block858;
	 //  @line: 261
Block858:
	 assert ($neref((r0590), ($null))==1);
	 //  @line: 261
	$r5595 := $HeapVar[r0590, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref((r0590), ($null))==1);
	 //  @line: 261
	$r4594 := $HeapVar[r0590, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r5595), ($null))==1);
	 //  @line: 261
	$HeapVar[$r5595, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302] := $r4594;
	 assert ($neref(($r6596), ($null))==1);
	 //  @line: 261
	$HeapVar[$r6596, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301] := $r4594;
	 assert ($neref((r0590), ($null))==1);
	 //  @line: 262
	$HeapVar[r0590, int$javaUtilEx.LinkedList$size0] := 0;
	 assert ($neref((r0590), ($null))==1);
	 //  @line: 263
	$i0597 := $HeapVar[r0590, int$javaUtilEx.AbstractList$modCount0];
	 //  @line: 263
	$i1598 := $addint(($i0597), (1));
	 assert ($neref((r0590), ($null))==1);
	 //  @line: 263
	$HeapVar[r0590, int$javaUtilEx.AbstractList$modCount0] := $i1598;
	 return;
}


	 //  @line: 318
// <javaUtilEx.LinkedList: java.lang.Object remove(int)>
procedure java.lang.Object$javaUtilEx.LinkedList$remove$2645(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r2622 : ref;
var $r1621 : ref;
var r0619 : ref;
var i0620 : int;

 //temp local variables 
var $caughtEx2 : ref;
var $caughtEx3 : ref;

	 //  @line: 318
Block884:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block885;
Block885:
	r0619 := __this;
	i0620 := $param_0;
	 assert ($neref((r0619), ($null))==1);
	 //  @line: 319
	 call $r1621, $caughtEx2 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$entry$2646((r0619), (i0620));
	 goto Block886, Block888;
Block886:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block887;
Block888:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block889;
Block887:
	$Exep0 := $caughtEx2;
	 return;
Block889:
	 assert ($neref((r0619), ($null))==1);
	 //  @line: 319
	 call $r2622, $caughtEx3 := java.lang.Object$javaUtilEx.LinkedList$remove$2666((r0619), ($r1621));
	 goto Block892, Block890;
Block892:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block893;
Block890:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block891;
Block893:
	 //  @line: 319
	__ret := $r2622;
	 return;
Block891:
	$Exep1 := $caughtEx3;
	 return;
}


// <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
procedure java.lang.StringBuilder$java.lang.StringBuilder$append$2266(__this : ref, $param_0 : ref) returns (__ret : ref);



	 //  @line: 137
// <javaUtilEx.LinkedList: java.lang.Object getLast()>
procedure java.lang.Object$javaUtilEx.LinkedList$getLast$2632(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r4547 : ref;
var $r3546 : ref;
var $r2545 : ref;
var $r1544 : ref;
var $i0543 : int;
var r0542 : ref;

 //temp local variables 

	 //  @line: 137
Block787:
	$Exep0 := $null;
	 goto Block788;
Block788:
	r0542 := __this;
	 assert ($neref((r0542), ($null))==1);
	 //  @line: 138
	$i0543 := $HeapVar[r0542, int$javaUtilEx.LinkedList$size0];
	 goto Block789;
	 //  @line: 138
Block789:
	 goto Block790, Block792;
	 //  @line: 138
Block790:
	 assume ($neint(($i0543), (0))==1);
	 goto Block791;
	 //  @line: 138
Block792:
	 //  @line: 138
	 assume ($negInt(($neint(($i0543), (0))))==1);
	 //  @line: 139
	$r4547 := $newvariable((793));
	 assume ($neref(($newvariable((793))), ($null))==1);
	 assert ($neref(($r4547), ($null))==1);
	 //  @line: 139
	 call void$javaUtilEx.NoSuchElementException$$la$init$ra$$2572(($r4547));
	 goto Block794;
	 //  @line: 141
Block791:
	 assert ($neref((r0542), ($null))==1);
	 //  @line: 141
	$r1544 := $HeapVar[r0542, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block795;
	 //  @line: 138
Block794:
	$Exep0 := $r4547;
	 return;
	 //  @line: 141
Block795:
	 assert ($neref(($r1544), ($null))==1);
	 //  @line: 141
	$r2545 := $HeapVar[$r1544, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 assert ($neref(($r2545), ($null))==1);
	 //  @line: 141
	$r3546 := $HeapVar[$r2545, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 //  @line: 141
	__ret := $r3546;
	 return;
}


	 //  @line: 23
// <javaUtilEx.Content: void <init>(int)>
procedure void$javaUtilEx.Content$$la$init$ra$$2586(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0495 : ref;
var i0496 : int;
Block737:
	r0495 := __this;
	i0496 := $param_0;
	 assert ($neref((r0495), ($null))==1);
	 //  @line: 24
	 call void$java.lang.Object$$la$init$ra$$28((r0495));
	 assert ($neref((r0495), ($null))==1);
	 //  @line: 25
	$HeapVar[r0495, int$javaUtilEx.Content$val0] := i0496;
	 return;
}


	 //  @line: 616
// <javaUtilEx.SubList: int access$000(javaUtilEx.SubList)>
procedure int$javaUtilEx.SubList$access$000$2565($param_0 : ref) returns (__ret : int) {
var $i0418 : int;
var r0417 : ref;
Block677:
	r0417 := $param_0;
	 assert ($neref((r0417), ($null))==1);
	 //  @line: 617
	$i0418 := $HeapVar[r0417, int$javaUtilEx.SubList$offset0];
	 //  @line: 617
	__ret := $i0418;
	 return;
}


	 //  @line: 382
// <javaUtilEx.LinkedList: int lastIndexOf(java.lang.Object)>
procedure int$javaUtilEx.LinkedList$lastIndexOf$2648(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r1650 : ref;
var $r4654 : ref;
var $r3653 : ref;
var i0659 : int;
var $r6657 : ref;
var $r2651 : ref;
var r9661 : ref;
var $r5656 : ref;
var r0648 : ref;
var $z0655 : int;
var r8660 : ref;
var $r7658 : ref;
Block944:
	r0648 := __this;
	r1650 := $param_0;
	 assert ($neref((r0648), ($null))==1);
	 //  @line: 383
	i0659 := $HeapVar[r0648, int$javaUtilEx.LinkedList$size0];
	 goto Block945;
	 //  @line: 384
Block945:
	 goto Block946, Block948;
	 //  @line: 384
Block946:
	 assume ($neref((r1650), ($null))==1);
	 goto Block947;
	 //  @line: 384
Block948:
	 //  @line: 384
	 assume ($negInt(($neref((r1650), ($null))))==1);
	 assert ($neref((r0648), ($null))==1);
	 //  @line: 385
	$r5656 := $HeapVar[r0648, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r5656), ($null))==1);
	 //  @line: 385
	r8660 := $HeapVar[$r5656, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 goto Block949;
	 //  @line: 391
Block947:
	 assert ($neref((r0648), ($null))==1);
	 //  @line: 391
	$r2651 := $HeapVar[r0648, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block960;
	 //  @line: 385
Block949:
	 assert ($neref((r0648), ($null))==1);
	 //  @line: 385
	$r6657 := $HeapVar[r0648, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block950;
	 //  @line: 391
Block960:
	 assert ($neref(($r2651), ($null))==1);
	 //  @line: 391
	r9661 := $HeapVar[$r2651, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 goto Block961;
	 //  @line: 385
Block950:
	 goto Block953, Block951;
	 //  @line: 391
Block961:
	 assert ($neref((r0648), ($null))==1);
	 //  @line: 391
	$r3653 := $HeapVar[r0648, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block962;
	 //  @line: 385
Block953:
	 //  @line: 385
	 assume ($negInt(($eqref((r8660), ($r6657))))==1);
	 //  @line: 386
	i0659 := $addint((i0659), (-1));
	 assert ($neref((r8660), ($null))==1);
	 //  @line: 387
	$r7658 := $HeapVar[r8660, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 goto Block954;
	 //  @line: 385
Block951:
	 assume ($eqref((r8660), ($r6657))==1);
	 goto Block952;
	 //  @line: 391
Block962:
	 goto Block964, Block963;
	 //  @line: 387
Block954:
	 goto Block957, Block955;
	 //  @line: 385
Block952:
	 goto Block959;
	 //  @line: 391
Block964:
	 //  @line: 391
	 assume ($negInt(($eqref((r9661), ($r3653))))==1);
	 //  @line: 392
	i0659 := $addint((i0659), (-1));
	 assert ($neref((r9661), ($null))==1);
	 //  @line: 393
	$r4654 := $HeapVar[r9661, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 assert ($neref((r1650), ($null))==1);
	 //  @line: 393
	 call $z0655 := boolean$java.lang.Object$equals$32((r1650), ($r4654));
	 goto Block965;
	 //  @line: 391
Block963:
	 assume ($eqref((r9661), ($r3653))==1);
	 goto Block959;
	 //  @line: 387
Block957:
	 //  @line: 387
	 assume ($negInt(($neref(($r7658), ($null))))==1);
	 //  @line: 388
	__ret := i0659;
	 return;
	 //  @line: 387
Block955:
	 assume ($neref(($r7658), ($null))==1);
	 goto Block956;
	 //  @line: 397
Block959:
	 //  @line: 397
	__ret := -1;
	 return;
	 //  @line: 393
Block965:
	 goto Block966, Block968;
	 //  @line: 385
Block956:
	 assert ($neref((r8660), ($null))==1);
	 //  @line: 385
	r8660 := $HeapVar[r8660, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 goto Block958;
	 //  @line: 393
Block966:
	 assume ($eqint(($z0655), (0))==1);
	 goto Block967;
	 //  @line: 393
Block968:
	 //  @line: 393
	 assume ($negInt(($eqint(($z0655), (0))))==1);
	 //  @line: 394
	__ret := i0659;
	 return;
	 //  @line: 385
Block958:
	 goto Block949;
	 //  @line: 391
Block967:
	 assert ($neref((r9661), ($null))==1);
	 //  @line: 391
	r9661 := $HeapVar[r9661, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 goto Block969;
	 //  @line: 391
Block969:
	 goto Block961;
}


// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 746
// <javaUtilEx.LinkedList: java.lang.Object remove(javaUtilEx.LinkedList$Entry)>
procedure java.lang.Object$javaUtilEx.LinkedList$remove$2666(__this : ref, $param_0 : ref) returns (__ret : ref, $Exep0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i1737 : int;
var $r6733 : ref;
var $r3729 : ref;
var $r4731 : ref;
var $i0736 : int;
var $i3739 : int;
var $r5732 : ref;
var r2730 : ref;
var $r7734 : ref;
var r0728 : ref;
var $r8740 : ref;
var r1727 : ref;
var $i2738 : int;

 //temp local variables 

	 //  @line: 746
Block754:
	$Exep0 := $null;
	 goto Block1108;
Block1108:
	r0728 := __this;
	r1727 := $param_0;
	 assert ($neref((r0728), ($null))==1);
	 //  @line: 747
	$r3729 := $HeapVar[r0728, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block1109;
	 //  @line: 747
Block1109:
	 goto Block1110, Block1112;
	 //  @line: 747
Block1110:
	 assume ($neref((r1727), ($r3729))==1);
	 goto Block1111;
	 //  @line: 747
Block1112:
	 //  @line: 747
	 assume ($negInt(($neref((r1727), ($r3729))))==1);
	 //  @line: 748
	$r8740 := $newvariable((1113));
	 assume ($neref(($newvariable((1113))), ($null))==1);
	 assert ($neref(($r8740), ($null))==1);
	 //  @line: 748
	 call void$javaUtilEx.NoSuchElementException$$la$init$ra$$2572(($r8740));
	 goto Block1114;
	 //  @line: 750
Block1111:
	 assert ($neref((r1727), ($null))==1);
	 //  @line: 750
	r2730 := $HeapVar[r1727, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 goto Block1115;
	 //  @line: 747
Block1114:
	$Exep0 := $r8740;
	 return;
	 //  @line: 751
Block1115:
	 assert ($neref((r1727), ($null))==1);
	 //  @line: 751
	$r5732 := $HeapVar[r1727, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 assert ($neref((r1727), ($null))==1);
	 //  @line: 751
	$r4731 := $HeapVar[r1727, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 assert ($neref(($r5732), ($null))==1);
	 //  @line: 751
	$HeapVar[$r5732, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301] := $r4731;
	 assert ($neref((r1727), ($null))==1);
	 //  @line: 752
	$r7734 := $HeapVar[r1727, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 assert ($neref((r1727), ($null))==1);
	 //  @line: 752
	$r6733 := $HeapVar[r1727, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 assert ($neref(($r7734), ($null))==1);
	 //  @line: 752
	$HeapVar[$r7734, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302] := $r6733;
	 assert ($neref((r1727), ($null))==1);
	 //  @line: 753
	$HeapVar[r1727, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302] := $null;
	 assert ($neref((r1727), ($null))==1);
	 //  @line: 753
	$HeapVar[r1727, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301] := $null;
	 assert ($neref((r1727), ($null))==1);
	 //  @line: 754
	$HeapVar[r1727, java.lang.Object$javaUtilEx.LinkedList$Entry$element300] := $null;
	 assert ($neref((r0728), ($null))==1);
	 //  @line: 755
	$i0736 := $HeapVar[r0728, int$javaUtilEx.LinkedList$size0];
	 //  @line: 755
	$i1737 := $subint(($i0736), (1));
	 assert ($neref((r0728), ($null))==1);
	 //  @line: 755
	$HeapVar[r0728, int$javaUtilEx.LinkedList$size0] := $i1737;
	 assert ($neref((r0728), ($null))==1);
	 //  @line: 756
	$i2738 := $HeapVar[r0728, int$javaUtilEx.AbstractList$modCount0];
	 //  @line: 756
	$i3739 := $addint(($i2738), (1));
	 assert ($neref((r0728), ($null))==1);
	 //  @line: 756
	$HeapVar[r0728, int$javaUtilEx.AbstractList$modCount0] := $i3739;
	 //  @line: 757
	__ret := r2730;
	 return;
}


	 //  @line: 73
// <javaUtilEx.ConcurrentModificationException: void <init>()>
procedure void$javaUtilEx.ConcurrentModificationException$$la$init$ra$$2570(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0429 : ref;
Block682:
	r0429 := __this;
	 assert ($neref((r0429), ($null))==1);
	 //  @line: 74
	 call void$java.lang.RuntimeException$$la$init$ra$$760((r0429));
	 return;
}


	 //  @line: 546
// <javaUtilEx.LinkedList: void push(java.lang.Object)>
procedure void$javaUtilEx.LinkedList$push$2660(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0691 : ref;
var r1692 : ref;
Block1050:
	r0691 := __this;
	r1692 := $param_0;
	 assert ($neref((r0691), ($null))==1);
	 //  @line: 547
	 call void$javaUtilEx.LinkedList$addFirst$2635((r0691), (r1692));
	 return;
}


	 //  @line: 484
// <javaUtilEx.AbstractList: javaUtilEx.List subList(int,int)>
procedure javaUtilEx.List$javaUtilEx.AbstractList$subList$2496(__this : ref, $param_0 : int, $param_1 : int) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0163 : ref;
var r3171 : ref;
var $r1169 : ref;
var r2170 : ref;
var i1167 : int;
var i0166 : int;
var $z0164 : int;

 //temp local variables 
var $caughtEx2 : ref;
var $caughtEx3 : ref;

	 //  @line: 484
Block245:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block246;
Block246:
	r0163 := __this;
	i0166 := $param_0;
	i1167 := $param_1;
	 //  @line: 485
	$z0164 := $instanceof((r0163), (javaUtilEx.RandomAccess));
	 goto Block247;
	 //  @line: 485
Block247:
	 goto Block250, Block248;
	 //  @line: 485
Block250:
	 //  @line: 485
	 assume ($negInt(($eqint(($z0164), (0))))==1);
	 //  @line: 485
	r2170 := $newvariable((251));
	 assume ($neref(($newvariable((251))), ($null))==1);
	$r1169 := r2170;
	 assert ($neref((r2170), ($null))==1);
	 //  @line: 485
	 call $caughtEx2, $caughtEx3 := void$javaUtilEx.RandomAccessSubList$$la$init$ra$$2540((r2170), (r0163), (i0166), (i1167));
	 goto Block252, Block254;
	 //  @line: 485
Block248:
	 assume ($eqint(($z0164), (0))==1);
	 goto Block249;
	 //  @line: 485
Block252:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block253;
	 //  @line: 485
Block254:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block255;
	 //  @line: 485
Block249:
	 //  @line: 485
	r3171 := $newvariable((261));
	 assume ($neref(($newvariable((261))), ($null))==1);
	 goto Block262;
	 //  @line: 485
Block253:
	$Exep0 := $caughtEx2;
	 return;
	 //  @line: 485
Block255:
	 goto Block256, Block258;
Block262:
	$r1169 := r3171;
	 assert ($neref((r3171), ($null))==1);
	 //  @line: 485
	 call $caughtEx2, $caughtEx3 := void$javaUtilEx.SubList$$la$init$ra$$2549((r3171), (r0163), (i0166), (i1167));
	 goto Block265, Block263;
	 //  @line: 485
Block256:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block257;
	 //  @line: 485
Block258:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block259;
Block265:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block266;
Block263:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block264;
	 //  @line: 485
Block257:
	$Exep1 := $caughtEx3;
	 return;
	 //  @line: 485
Block259:
	 goto Block260;
Block266:
	 goto Block269, Block267;
Block264:
	$Exep0 := $caughtEx2;
	 return;
	 //  @line: 485
Block260:
	 //  @line: 485
	__ret := $r1169;
	 return;
Block269:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block270;
Block267:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block268;
Block270:
	 goto Block260;
Block268:
	$Exep1 := $caughtEx3;
	 return;
}


	 //  @line: 180
// <javaUtilEx.LinkedList: void addLast(java.lang.Object)>
procedure void$javaUtilEx.LinkedList$addLast$2636(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1562 : ref;
var $r2563 : ref;
var r0561 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block808:
	r0561 := __this;
	r1562 := $param_0;
	 assert ($neref((r0561), ($null))==1);
	 //  @line: 181
	$r2563 := $HeapVar[r0561, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref((r0561), ($null))==1);
	 //  @line: 181
	 call $freshlocal0 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$addBefore$2665((r0561), (r1562), ($r2563));
	 return;
}


	 //  @line: 730
// <javaUtilEx.SubList$1: int previousIndex()>
procedure int$javaUtilEx.SubList$1$previousIndex$2699(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i0932 : int;
var $i2935 : int;
var $i1934 : int;
var $r2933 : ref;
var $r1931 : ref;
var r0930 : ref;
Block1329:
	r0930 := __this;
	 assert ($neref((r0930), ($null))==1);
	 //  @line: 731
	$r1931 := $HeapVar[r0930, javaUtilEx.ListIterator$javaUtilEx.SubList$1$i308];
	 assert ($neref(($r1931), ($null))==1);
	 //  @line: 731
	 call $i0932 := int$javaUtilEx.ListIterator$previousIndex$2530(($r1931));
	 assert ($neref((r0930), ($null))==1);
	 //  @line: 731
	$r2933 := $HeapVar[r0930, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 //  @line: 731
	 call $i1934 := int$javaUtilEx.SubList$access$000$2565(($r2933));
	 //  @line: 731
	$i2935 := $subint(($i0932), ($i1934));
	 //  @line: 731
	__ret := $i2935;
	 return;
}


	 //  @line: 688
// <javaUtilEx.LinkedList$ListItr: void remove()>
procedure void$javaUtilEx.LinkedList$ListItr$remove$2684(__this : ref) returns ($Exep0 : ref, $Exep1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i0845 : int;
var $r8844 : ref;
var r0837 : ref;
var $r10848 : ref;
var $r4840 : ref;
var $r9847 : ref;
var $i1846 : int;
var $r3838 : ref;
var $i3850 : int;
var $r5841 : ref;
var $r11851 : ref;
var r1839 : ref;
var $r7843 : ref;
var $i2849 : int;
var $r12853 : ref;

 //temp local variables 
var $caughtEx3 : ref;
var $caughtEx5 : ref;
var $caughtEx2 : ref;
var $freshlocal4 : ref;

	 //  @line: 688
Block1212:
	$caughtEx5 := $null;
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block1213;
Block1213:
	r0837 := __this;
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 689
	 call $caughtEx2 := void$javaUtilEx.LinkedList$ListItr$checkForComodification$2687((r0837));
	 goto Block1214, Block1216;
Block1214:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block1215;
Block1216:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block1217;
Block1215:
	$Exep0 := $caughtEx2;
	 return;
Block1217:
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 690
	$r3838 := $HeapVar[r0837, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303];
	 assert ($neref(($r3838), ($null))==1);
	 //  @line: 690
	r1839 := $HeapVar[$r3838, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block1218;
	 //  @line: 692
Block1218:
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 692
	$r5841 := $HeapVar[r0837, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305];
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 692
	$r4840 := $HeapVar[r0837, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303];
	 //  @line: 692
	 call $freshlocal4, $caughtEx3 := java.lang.Object$javaUtilEx.LinkedList$access$200$2671(($r5841), ($r4840));
	 goto Block1221, Block1219;
	 //  @line: 692
Block1221:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block1222;
	 //  @line: 692
Block1219:
	 assume ($neref(($caughtEx3), ($null))==1);
	$caughtEx5 := $caughtEx3;
	 goto Block1220;
	 //  @line: 692
Block1222:
	 goto Block1223;
	 //  @line: 702
Block1220:
	 //  @line: 702
	$r11851 := $caughtEx5;
	 goto Block1225;
	 //  @line: 695
Block1223:
	 goto Block1224;
	 //  @line: 694
Block1225:
	 //  @line: 694
	$r12853 := $newvariable((1226));
	 assume ($neref(($newvariable((1226))), ($null))==1);
	 assert ($neref(($r12853), ($null))==1);
	 //  @line: 694
	 call void$javaUtilEx.IllegalStateException$$la$init$ra$$2574(($r12853));
	 goto Block1227;
	 //  @line: 696
Block1224:
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 696
	$r8844 := $HeapVar[r0837, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304];
	 goto Block1228;
	 //  @line: 694
Block1227:
	$Exep1 := $r12853;
	 return;
	 //  @line: 696
Block1228:
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 696
	$r7843 := $HeapVar[r0837, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303];
	 goto Block1229;
	 //  @line: 696
Block1229:
	 goto Block1230, Block1232;
	 //  @line: 696
Block1230:
	 assume ($neref(($r8844), ($r7843))==1);
	 goto Block1231;
	 //  @line: 696
Block1232:
	 //  @line: 696
	 assume ($negInt(($neref(($r8844), ($r7843))))==1);
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 697
	$HeapVar[r0837, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304] := r1839;
	 goto Block1233;
	 //  @line: 699
Block1231:
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 699
	$i0845 := $HeapVar[r0837, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 goto Block1234;
	 //  @line: 700
Block1233:
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 700
	$r9847 := $HeapVar[r0837, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305];
	 //  @line: 700
	 call $r10848 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$access$000$2669(($r9847));
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 700
	$HeapVar[r0837, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303] := $r10848;
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 701
	$i2849 := $HeapVar[r0837, int$javaUtilEx.LinkedList$ListItr$expectedModCount0];
	 //  @line: 701
	$i3850 := $addint(($i2849), (1));
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 701
	$HeapVar[r0837, int$javaUtilEx.LinkedList$ListItr$expectedModCount0] := $i3850;
	 return;
	 //  @line: 699
Block1234:
	 //  @line: 699
	$i1846 := $subint(($i0845), (1));
	 assert ($neref((r0837), ($null))==1);
	 //  @line: 699
	$HeapVar[r0837, int$javaUtilEx.LinkedList$ListItr$nextIndex0] := $i1846;
	 goto Block1233;
}


// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 353
// <javaUtilEx.LinkedList: int indexOf(java.lang.Object)>
procedure int$javaUtilEx.LinkedList$indexOf$2647(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r1635 : ref;
var $r6643 : ref;
var $r4640 : ref;
var $z0641 : int;
var $r7644 : ref;
var r8646 : ref;
var $r2637 : ref;
var r0636 : ref;
var $r3639 : ref;
var r9647 : ref;
var i0645 : int;
var $r5642 : ref;
Block918:
	r0636 := __this;
	r1635 := $param_0;
	 //  @line: 354
	i0645 := 0;
	 goto Block919;
	 //  @line: 355
Block919:
	 goto Block922, Block920;
	 //  @line: 355
Block922:
	 //  @line: 355
	 assume ($negInt(($neref((r1635), ($null))))==1);
	 assert ($neref((r0636), ($null))==1);
	 //  @line: 356
	$r5642 := $HeapVar[r0636, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r5642), ($null))==1);
	 //  @line: 356
	r8646 := $HeapVar[$r5642, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block923;
	 //  @line: 355
Block920:
	 assume ($neref((r1635), ($null))==1);
	 goto Block921;
	 //  @line: 356
Block923:
	 assert ($neref((r0636), ($null))==1);
	 //  @line: 356
	$r6643 := $HeapVar[r0636, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block924;
	 //  @line: 362
Block921:
	 assert ($neref((r0636), ($null))==1);
	 //  @line: 362
	$r2637 := $HeapVar[r0636, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block934;
	 //  @line: 356
Block924:
	 goto Block927, Block925;
	 //  @line: 362
Block934:
	 assert ($neref(($r2637), ($null))==1);
	 //  @line: 362
	r9647 := $HeapVar[$r2637, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block935;
	 //  @line: 356
Block927:
	 //  @line: 356
	 assume ($negInt(($eqref((r8646), ($r6643))))==1);
	 assert ($neref((r8646), ($null))==1);
	 //  @line: 357
	$r7644 := $HeapVar[r8646, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 goto Block928;
	 //  @line: 356
Block925:
	 assume ($eqref((r8646), ($r6643))==1);
	 goto Block926;
	 //  @line: 362
Block935:
	 assert ($neref((r0636), ($null))==1);
	 //  @line: 362
	$r3639 := $HeapVar[r0636, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block936;
	 //  @line: 357
Block928:
	 goto Block929, Block931;
	 //  @line: 356
Block926:
	 goto Block933;
	 //  @line: 362
Block936:
	 goto Block938, Block937;
	 //  @line: 357
Block929:
	 assume ($neref(($r7644), ($null))==1);
	 goto Block930;
	 //  @line: 357
Block931:
	 //  @line: 357
	 assume ($negInt(($neref(($r7644), ($null))))==1);
	 //  @line: 358
	__ret := i0645;
	 return;
	 //  @line: 368
Block933:
	 //  @line: 368
	__ret := -1;
	 return;
	 //  @line: 362
Block938:
	 //  @line: 362
	 assume ($negInt(($eqref((r9647), ($r3639))))==1);
	 assert ($neref((r9647), ($null))==1);
	 //  @line: 363
	$r4640 := $HeapVar[r9647, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 assert ($neref((r1635), ($null))==1);
	 //  @line: 363
	 call $z0641 := boolean$java.lang.Object$equals$32((r1635), ($r4640));
	 goto Block939;
	 //  @line: 362
Block937:
	 assume ($eqref((r9647), ($r3639))==1);
	 goto Block933;
	 //  @line: 359
Block930:
	 //  @line: 359
	i0645 := $addint((i0645), (1));
	 goto Block932;
	 //  @line: 363
Block939:
	 goto Block942, Block940;
	 //  @line: 356
Block932:
	 assert ($neref((r8646), ($null))==1);
	 //  @line: 356
	r8646 := $HeapVar[r8646, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block923;
	 //  @line: 363
Block942:
	 //  @line: 363
	 assume ($negInt(($eqint(($z0641), (0))))==1);
	 //  @line: 364
	__ret := i0645;
	 return;
	 //  @line: 363
Block940:
	 assume ($eqint(($z0641), (0))==1);
	 goto Block941;
	 //  @line: 365
Block941:
	 //  @line: 365
	i0645 := $addint((i0645), (1));
	 goto Block943;
	 //  @line: 362
Block943:
	 assert ($neref((r9647), ($null))==1);
	 //  @line: 362
	r9647 := $HeapVar[r9647, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block935;
}


// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 114
// <javaUtilEx.AbstractSequentialList: java.lang.Object set(int,java.lang.Object)>
procedure java.lang.Object$javaUtilEx.AbstractSequentialList$set$2580(__this : ref, $param_0 : int, $param_1 : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r3458 : ref;
var r5460 : ref;
var r2456 : ref;
var i0452 : int;
var $r4459 : ref;
var r1457 : ref;
var r0451 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 114
Block698:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block699;
Block699:
	r0451 := __this;
	i0452 := $param_0;
	r1457 := $param_1;
	 goto Block700;
	 //  @line: 115
Block700:
	 assert ($neref((r0451), ($null))==1);
	 //  @line: 115
	 call r5460 := javaUtilEx.ListIterator$javaUtilEx.AbstractSequentialList$listIterator$2585((r0451), (i0452));
	 assert ($neref((r5460), ($null))==1);
	 //  @line: 116
	 call r2456 := java.lang.Object$javaUtilEx.ListIterator$next$2526((r5460));
	 assert ($neref((r5460), ($null))==1);
	 //  @line: 117
	 call void$javaUtilEx.ListIterator$set$2532((r5460), (r1457));
	 goto Block701;
	 //  @line: 118
Block701:
	 //  @line: 118
	__ret := r2456;
	 return;
}


	 //  @line: 7
// <javaUtilEx.Random: int random()>
procedure int$javaUtilEx.Random$random$2674() returns (__ret : int)
  modifies int$javaUtilEx.Random$index0, $stringSize;
 {
var $r1767 : [int]ref;
var $i0766 : int;
var r0768 : ref;
var $i2770 : int;
var $i1769 : int;
var $i3771 : int;
	 //  @line: 8
Block1142:
	 //  @line: 8
	$r1767 := java.lang.String$lp$$rp$$javaUtilEx.Random$args299;
	 //  @line: 8
	$i0766 := int$javaUtilEx.Random$index0;
	 assert ($geint(($i0766), (0))==1);
	 assert ($ltint(($i0766), ($refArrSize[$r1767[$arrSizeIdx]]))==1);
	 //  @line: 8
	r0768 := $r1767[$i0766];
	 //  @line: 9
	$i1769 := int$javaUtilEx.Random$index0;
	 //  @line: 9
	$i2770 := $addint(($i1769), (1));
	 //  @line: 9
	int$javaUtilEx.Random$index0 := $i2770;
	$i3771 := $stringSize[r0768];
	 //  @line: 10
	__ret := $i3771;
	 return;
}


	 //  @line: 238
// <javaUtilEx.AbstractCollection: boolean removeAll(javaUtilEx.Collection)>
procedure boolean$javaUtilEx.AbstractCollection$removeAll$2237(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $r349 : ref;
var r246 : ref;
var $z150 : int;
var r044 : ref;
var r148 : ref;
var $z047 : int;
var z251 : int;
Block88:
	r044 := __this;
	r148 := $param_0;
	 //  @line: 239
	z251 := 0;
	 assert ($neref((r044), ($null))==1);
	 //  @line: 240
	 call r246 := javaUtilEx.Iterator$javaUtilEx.AbstractCollection$iterator$2229((r044));
	 goto Block89;
	 //  @line: 241
Block89:
	 assert ($neref((r246), ($null))==1);
	 //  @line: 241
	 call $z047 := boolean$javaUtilEx.Iterator$hasNext$2254((r246));
	 goto Block90;
	 //  @line: 241
Block90:
	 goto Block91, Block93;
	 //  @line: 241
Block91:
	 assume ($eqint(($z047), (0))==1);
	 goto Block92;
	 //  @line: 241
Block93:
	 //  @line: 241
	 assume ($negInt(($eqint(($z047), (0))))==1);
	 assert ($neref((r246), ($null))==1);
	 //  @line: 242
	 call $r349 := java.lang.Object$javaUtilEx.Iterator$next$2255((r246));
	 assert ($neref((r148), ($null))==1);
	 //  @line: 242
	 call $z150 := boolean$javaUtilEx.Collection$contains$2243((r148), ($r349));
	 goto Block94;
	 //  @line: 247
Block92:
	 //  @line: 247
	__ret := z251;
	 return;
	 //  @line: 242
Block94:
	 goto Block95, Block96;
	 //  @line: 242
Block95:
	 assume ($eqint(($z150), (0))==1);
	 goto Block89;
	 //  @line: 242
Block96:
	 //  @line: 242
	 assume ($negInt(($eqint(($z150), (0))))==1);
	 assert ($neref((r246), ($null))==1);
	 //  @line: 243
	 call void$javaUtilEx.Iterator$remove$2256((r246));
	 //  @line: 244
	z251 := 1;
	 goto Block89;
}


	 //  @line: 651
// <javaUtilEx.LinkedList$ListItr: boolean hasNext()>
procedure boolean$javaUtilEx.LinkedList$ListItr$hasNext$2678(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r0801 : ref;
var $r1802 : ref;
var $i0803 : int;
var $i1804 : int;
var $z0806 : int;
Block1171:
	r0801 := __this;
	 assert ($neref((r0801), ($null))==1);
	 //  @line: 652
	$i0803 := $HeapVar[r0801, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 assert ($neref((r0801), ($null))==1);
	 //  @line: 652
	$r1802 := $HeapVar[r0801, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305];
	 //  @line: 652
	 call $i1804 := int$javaUtilEx.LinkedList$access$100$2670(($r1802));
	 goto Block1172;
	 //  @line: 652
Block1172:
	 goto Block1175, Block1173;
	 //  @line: 652
Block1175:
	 //  @line: 652
	 assume ($negInt(($eqint(($i0803), ($i1804))))==1);
	 //  @line: 652
	$z0806 := 1;
	 goto Block1176;
	 //  @line: 652
Block1173:
	 assume ($eqint(($i0803), ($i1804))==1);
	 goto Block1174;
	 //  @line: 652
Block1176:
	 //  @line: 652
	__ret := $z0806;
	 return;
	 //  @line: 652
Block1174:
	 //  @line: 652
	$z0806 := 0;
	 goto Block1176;
}


	 //  @line: 396
// <javaUtilEx.AbstractList$ListItr: boolean hasPrevious()>
procedure boolean$javaUtilEx.AbstractList$ListItr$hasPrevious$2543(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r0272 : ref;
var $i0273 : int;
var $z0275 : int;
Block425:
	r0272 := __this;
	 assert ($neref((r0272), ($null))==1);
	 //  @line: 397
	$i0273 := $HeapVar[r0272, int$javaUtilEx.AbstractList$Itr$cursor0];
	 goto Block426;
	 //  @line: 397
Block426:
	 goto Block427, Block429;
	 //  @line: 397
Block427:
	 assume ($eqint(($i0273), (0))==1);
	 goto Block428;
	 //  @line: 397
Block429:
	 //  @line: 397
	 assume ($negInt(($eqint(($i0273), (0))))==1);
	 //  @line: 397
	$z0275 := 1;
	 goto Block430;
	 //  @line: 397
Block428:
	 //  @line: 397
	$z0275 := 0;
	 goto Block430;
	 //  @line: 397
Block430:
	 //  @line: 397
	__ret := $z0275;
	 return;
}


	 //  @line: 612
// <javaUtilEx.AbstractList: java.lang.String outOfBoundsMsg(int)>
procedure java.lang.String$javaUtilEx.AbstractList$outOfBoundsMsg$2501(__this : ref, $param_0 : int) returns (__ret : ref)
  modifies $stringSize;
  requires ($neref((__this), ($null))==1);
 {
var i0217 : int;
var r0216 : ref;
Block346:
	r0216 := __this;
	i0217 := $param_0;
	$stringSize[$fresh2] := 0;
	 //  @line: 613
	__ret := $fresh2;
	 return;
}


	 //  @line: 670
// <javaUtilEx.LinkedList$ListItr: java.lang.Object previous()>
procedure java.lang.Object$javaUtilEx.LinkedList$ListItr$previous$2681(__this : ref) returns (__ret : ref, $Exep1 : ref, $Exep0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i0824 : int;
var $r1825 : ref;
var r0823 : ref;
var $r5831 : ref;
var $r2826 : ref;
var $r4830 : ref;
var $r3829 : ref;
var $i1827 : int;
var $i2828 : int;

 //temp local variables 
var $caughtEx2 : ref;

	 //  @line: 670
Block1197:
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block1198;
Block1198:
	r0823 := __this;
	 assert ($neref((r0823), ($null))==1);
	 //  @line: 671
	$i0824 := $HeapVar[r0823, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 goto Block1199;
	 //  @line: 671
Block1199:
	 goto Block1200, Block1202;
	 //  @line: 671
Block1200:
	 assume ($neint(($i0824), (0))==1);
	 goto Block1201;
	 //  @line: 671
Block1202:
	 //  @line: 671
	 assume ($negInt(($neint(($i0824), (0))))==1);
	 //  @line: 672
	$r5831 := $newvariable((1203));
	 assume ($neref(($newvariable((1203))), ($null))==1);
	 assert ($neref(($r5831), ($null))==1);
	 //  @line: 672
	 call void$javaUtilEx.NoSuchElementException$$la$init$ra$$2572(($r5831));
	 goto Block1204;
	 //  @line: 674
Block1201:
	 assert ($neref((r0823), ($null))==1);
	 //  @line: 674
	$r1825 := $HeapVar[r0823, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304];
	 goto Block1205;
	 //  @line: 671
Block1204:
	$Exep0 := $r5831;
	 return;
	 //  @line: 674
Block1205:
	 assert ($neref(($r1825), ($null))==1);
	 //  @line: 674
	$r2826 := $HeapVar[$r1825, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 assert ($neref((r0823), ($null))==1);
	 //  @line: 674
	$HeapVar[r0823, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304] := $r2826;
	 assert ($neref((r0823), ($null))==1);
	 //  @line: 674
	$HeapVar[r0823, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303] := $r2826;
	 assert ($neref((r0823), ($null))==1);
	 //  @line: 675
	$i1827 := $HeapVar[r0823, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 //  @line: 675
	$i2828 := $subint(($i1827), (1));
	 assert ($neref((r0823), ($null))==1);
	 //  @line: 675
	$HeapVar[r0823, int$javaUtilEx.LinkedList$ListItr$nextIndex0] := $i2828;
	 assert ($neref((r0823), ($null))==1);
	 //  @line: 676
	 call $caughtEx2 := void$javaUtilEx.LinkedList$ListItr$checkForComodification$2687((r0823));
	 goto Block1206, Block1208;
	 //  @line: 674
Block1206:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block1207;
	 //  @line: 674
Block1208:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block1209;
	 //  @line: 674
Block1207:
	$Exep1 := $caughtEx2;
	 return;
	 //  @line: 674
Block1209:
	 assert ($neref((r0823), ($null))==1);
	 //  @line: 677
	$r3829 := $HeapVar[r0823, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303];
	 assert ($neref(($r3829), ($null))==1);
	 //  @line: 677
	$r4830 := $HeapVar[$r3829, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 //  @line: 677
	__ret := $r4830;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



	 //  @line: 421
// <javaUtilEx.AbstractList$ListItr: void set(java.lang.Object)>
procedure void$javaUtilEx.AbstractList$ListItr$set$2547(__this : ref, $param_0 : ref) returns ($Exep1 : ref, $Exep2 : ref, $Exep0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r7300 : ref;
var $i1294 : int;
var $i2298 : int;
var $r8302 : ref;
var $r5297 : ref;
var $i0292 : int;
var r0291 : ref;
var r1293 : ref;
var $r3295 : ref;
var $r6299 : ref;

 //temp local variables 
var $caughtEx3 : ref;
var $freshlocal5 : ref;
var $caughtEx6 : ref;
var $caughtEx4 : ref;

	 //  @line: 421
Block448:
	$caughtEx6 := $null;
	$caughtEx4 := $null;
	$caughtEx3 := $null;
	$Exep2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block449;
Block449:
	r0291 := __this;
	r1293 := $param_0;
	 assert ($neref((r0291), ($null))==1);
	 //  @line: 422
	$i0292 := $HeapVar[r0291, int$javaUtilEx.AbstractList$Itr$lastRet0];
	 goto Block450;
	 //  @line: 422
Block450:
	 goto Block451, Block453;
	 //  @line: 422
Block451:
	 assume ($geint(($i0292), (0))==1);
	 goto Block452;
	 //  @line: 422
Block453:
	 //  @line: 422
	 assume ($negInt(($geint(($i0292), (0))))==1);
	 //  @line: 423
	$r6299 := $newvariable((454));
	 assume ($neref(($newvariable((454))), ($null))==1);
	 assert ($neref(($r6299), ($null))==1);
	 //  @line: 423
	 call void$javaUtilEx.IllegalStateException$$la$init$ra$$2574(($r6299));
	 goto Block455;
	 //  @line: 424
Block452:
	 assert ($neref((r0291), ($null))==1);
	 //  @line: 424
	 call $caughtEx3 := void$javaUtilEx.AbstractList$Itr$checkForComodification$2538((r0291));
	 goto Block458, Block456;
	 //  @line: 422
Block455:
	$Exep0 := $r6299;
	 return;
	 //  @line: 424
Block458:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block459;
	 //  @line: 424
Block456:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block457;
	 //  @line: 424
Block459:
	 goto Block460;
	 //  @line: 424
Block457:
	$Exep1 := $caughtEx3;
	 return;
	 //  @line: 427
Block460:
	 assert ($neref((r0291), ($null))==1);
	 //  @line: 427
	$r3295 := $HeapVar[r0291, javaUtilEx.AbstractList$javaUtilEx.AbstractList$ListItr$this$0296];
	 assert ($neref((r0291), ($null))==1);
	 //  @line: 427
	$i1294 := $HeapVar[r0291, int$javaUtilEx.AbstractList$Itr$lastRet0];
	 assert ($neref(($r3295), ($null))==1);
	 //  @line: 427
	 call $freshlocal5, $caughtEx4 := java.lang.Object$javaUtilEx.AbstractList$set$2486(($r3295), ($i1294), (r1293));
	 goto Block461, Block463;
	 //  @line: 427
Block461:
	 assume ($neref(($caughtEx4), ($null))==1);
	 goto Block462;
	 //  @line: 427
Block463:
	 assume ($eqref(($caughtEx4), ($null))==1);
	 goto Block464;
	 //  @line: 427
Block462:
	$Exep2 := $caughtEx4;
	 return;
	 //  @line: 427
Block464:
	 assert ($neref((r0291), ($null))==1);
	 //  @line: 428
	$r5297 := $HeapVar[r0291, javaUtilEx.AbstractList$javaUtilEx.AbstractList$ListItr$this$0296];
	 assert ($neref(($r5297), ($null))==1);
	 //  @line: 428
	$i2298 := $HeapVar[$r5297, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0291), ($null))==1);
	 //  @line: 428
	$HeapVar[r0291, int$javaUtilEx.AbstractList$Itr$expectedModCount0] := $i2298;
	 goto Block465;
	 //  @line: 431
Block465:
	 goto Block466;
	 //  @line: 432
Block466:
	 return;
}


	 //  @line: 276
// <javaUtilEx.LinkedList: java.lang.Object get(int)>
procedure java.lang.Object$javaUtilEx.LinkedList$get$2642(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0602 : ref;
var $r1604 : ref;
var $r2605 : ref;
var i0603 : int;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 276
Block860:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block861;
Block861:
	r0602 := __this;
	i0603 := $param_0;
	 assert ($neref((r0602), ($null))==1);
	 //  @line: 277
	 call $r1604, $caughtEx1 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$entry$2646((r0602), (i0603));
	 goto Block862, Block864;
Block862:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block863;
Block864:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block865;
Block863:
	$Exep0 := $caughtEx1;
	 return;
Block865:
	 assert ($neref(($r1604), ($null))==1);
	 //  @line: 277
	$r2605 := $HeapVar[$r1604, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 //  @line: 277
	__ret := $r2605;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 75
// <javaUtilEx.AbstractList: void <init>()>
procedure void$javaUtilEx.AbstractList$$la$init$ra$$2483(__this : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0104 : ref;
Block138:
	r0104 := __this;
	 assert ($neref((r0104), ($null))==1);
	 //  @line: 76
	 call void$javaUtilEx.AbstractCollection$$la$init$ra$$2228((r0104));
	 assert ($neref((r0104), ($null))==1);
	 //  @line: 605
	$HeapVar[r0104, int$javaUtilEx.AbstractList$modCount0] := 0;
	 return;
}


	 //  @line: 704
// <javaUtilEx.SubList$1: boolean hasNext()>
procedure boolean$javaUtilEx.SubList$1$hasNext$2694(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i0905 : int;
var $z0909 : int;
var $r1906 : ref;
var r0904 : ref;
var $i1907 : int;
Block1298:
	r0904 := __this;
	 assert ($neref((r0904), ($null))==1);
	 //  @line: 705
	 call $i0905 := int$javaUtilEx.SubList$1$nextIndex$2698((r0904));
	 assert ($neref((r0904), ($null))==1);
	 //  @line: 705
	$r1906 := $HeapVar[r0904, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 //  @line: 705
	 call $i1907 := int$javaUtilEx.SubList$access$200$2567(($r1906));
	 goto Block1299;
	 //  @line: 705
Block1299:
	 goto Block1302, Block1300;
	 //  @line: 705
Block1302:
	 //  @line: 705
	 assume ($negInt(($geint(($i0905), ($i1907))))==1);
	 //  @line: 705
	$z0909 := 1;
	 goto Block1303;
	 //  @line: 705
Block1300:
	 assume ($geint(($i0905), ($i1907))==1);
	 goto Block1301;
	 //  @line: 705
Block1303:
	 //  @line: 705
	__ret := $z0909;
	 return;
	 //  @line: 705
Block1301:
	 //  @line: 705
	$z0909 := 0;
	 goto Block1303;
}


	 //  @line: 98
// <javaUtilEx.AbstractCollection: boolean contains(java.lang.Object)>
procedure boolean$javaUtilEx.AbstractCollection$contains$2232(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $r311 : ref;
var $z213 : int;
var r19 : ref;
var $z010 : int;
var $z112 : int;
var r28 : ref;
var r06 : ref;
var $r414 : ref;
Block23:
	r06 := __this;
	r19 := $param_0;
	 assert ($neref((r06), ($null))==1);
	 //  @line: 99
	 call r28 := javaUtilEx.Iterator$javaUtilEx.AbstractCollection$iterator$2229((r06));
	 goto Block24;
	 //  @line: 100
Block24:
	 goto Block27, Block25;
	 //  @line: 100
Block27:
	 //  @line: 100
	 assume ($negInt(($neref((r19), ($null))))==1);
	 goto Block28;
	 //  @line: 100
Block25:
	 assume ($neref((r19), ($null))==1);
	 goto Block26;
	 //  @line: 101
Block28:
	 assert ($neref((r28), ($null))==1);
	 //  @line: 101
	 call $z213 := boolean$javaUtilEx.Iterator$hasNext$2254((r28));
	 goto Block29;
	 //  @line: 105
Block26:
	 assert ($neref((r28), ($null))==1);
	 //  @line: 105
	 call $z010 := boolean$javaUtilEx.Iterator$hasNext$2254((r28));
	 goto Block36;
	 //  @line: 101
Block29:
	 goto Block30, Block32;
	 //  @line: 105
Block36:
	 goto Block38, Block37;
	 //  @line: 101
Block30:
	 assume ($eqint(($z213), (0))==1);
	 goto Block31;
	 //  @line: 101
Block32:
	 //  @line: 101
	 assume ($negInt(($eqint(($z213), (0))))==1);
	 assert ($neref((r28), ($null))==1);
	 //  @line: 102
	 call $r414 := java.lang.Object$javaUtilEx.Iterator$next$2255((r28));
	 goto Block33;
	 //  @line: 105
Block38:
	 //  @line: 105
	 assume ($negInt(($eqint(($z010), (0))))==1);
	 assert ($neref((r28), ($null))==1);
	 //  @line: 106
	 call $r311 := java.lang.Object$javaUtilEx.Iterator$next$2255((r28));
	 assert ($neref((r19), ($null))==1);
	 //  @line: 106
	 call $z112 := boolean$java.lang.Object$equals$32((r19), ($r311));
	 goto Block39;
	 //  @line: 105
Block37:
	 assume ($eqint(($z010), (0))==1);
	 goto Block31;
	 //  @line: 109
Block31:
	 //  @line: 109
	__ret := 0;
	 return;
	 //  @line: 102
Block33:
	 goto Block34, Block35;
	 //  @line: 106
Block39:
	 goto Block41, Block40;
	 //  @line: 102
Block34:
	 assume ($neref(($r414), ($null))==1);
	 goto Block28;
	 //  @line: 102
Block35:
	 //  @line: 102
	 assume ($negInt(($neref(($r414), ($null))))==1);
	 //  @line: 103
	__ret := 1;
	 return;
	 //  @line: 106
Block41:
	 //  @line: 106
	 assume ($negInt(($eqint(($z112), (0))))==1);
	 //  @line: 107
	__ret := 1;
	 return;
	 //  @line: 106
Block40:
	 assume ($eqint(($z112), (0))==1);
	 goto Block26;
}


	 //  @line: 428
// <javaUtilEx.LinkedList: java.lang.Object poll()>
procedure java.lang.Object$javaUtilEx.LinkedList$poll$2651(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $i0668 : int;
var $r1669 : ref;
var r0667 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 428
Block987:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block988;
Block988:
	r0667 := __this;
	 assert ($neref((r0667), ($null))==1);
	 //  @line: 429
	$i0668 := $HeapVar[r0667, int$javaUtilEx.LinkedList$size0];
	 goto Block989;
	 //  @line: 429
Block989:
	 goto Block990, Block992;
	 //  @line: 429
Block990:
	 assume ($neint(($i0668), (0))==1);
	 goto Block991;
	 //  @line: 429
Block992:
	 //  @line: 429
	 assume ($negInt(($neint(($i0668), (0))))==1);
	 //  @line: 430
	__ret := $null;
	 return;
	 //  @line: 431
Block991:
	 assert ($neref((r0667), ($null))==1);
	 //  @line: 431
	 call $r1669, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$removeFirst$2633((r0667));
	 goto Block993, Block995;
	 //  @line: 431
Block993:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block994;
	 //  @line: 431
Block995:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block996;
	 //  @line: 431
Block994:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 431
Block996:
	 goto Block997;
	 //  @line: 431
Block997:
	 //  @line: 431
	__ret := $r1669;
	 return;
}


// <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
procedure void$java.lang.IndexOutOfBoundsException$$la$init$ra$$2076(__this : ref, $param_0 : ref);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 489
// <javaUtilEx.LinkedList: java.lang.Object peekFirst()>
procedure java.lang.Object$javaUtilEx.LinkedList$peekFirst$2656(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0679 : ref;
var $r1681 : ref;
var $i0680 : int;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 489
Block1007:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1008;
Block1008:
	r0679 := __this;
	 assert ($neref((r0679), ($null))==1);
	 //  @line: 490
	$i0680 := $HeapVar[r0679, int$javaUtilEx.LinkedList$size0];
	 goto Block1009;
	 //  @line: 490
Block1009:
	 goto Block1010, Block1012;
	 //  @line: 490
Block1010:
	 assume ($neint(($i0680), (0))==1);
	 goto Block1011;
	 //  @line: 490
Block1012:
	 //  @line: 490
	 assume ($negInt(($neint(($i0680), (0))))==1);
	 //  @line: 491
	__ret := $null;
	 return;
	 //  @line: 492
Block1011:
	 assert ($neref((r0679), ($null))==1);
	 //  @line: 492
	 call $r1681, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$getFirst$2631((r0679));
	 goto Block1013, Block1015;
	 //  @line: 492
Block1013:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1014;
	 //  @line: 492
Block1015:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1016;
	 //  @line: 492
Block1014:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 492
Block1016:
	 goto Block1017;
	 //  @line: 492
Block1017:
	 //  @line: 492
	__ret := $r1681;
	 return;
}


	 //  @line: 71
// <javaUtilEx.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>
procedure void$javaUtilEx.UnsupportedOperationException$$la$init$ra$$2259(__this : ref, $param_0 : ref, $param_1 : ref)  requires ($neref((__this), ($null))==1);
 {
var r099 : ref;
var r2101 : ref;
var r1100 : ref;
Block136:
	r099 := __this;
	r1100 := $param_0;
	r2101 := $param_1;
	 assert ($neref((r099), ($null))==1);
	 //  @line: 72
	 call void$java.lang.RuntimeException$$la$init$ra$$762((r099), (r1100), (r2101));
	 return;
}


	 //  @line: 419
// <javaUtilEx.LinkedList: java.lang.Object element()>
procedure java.lang.Object$javaUtilEx.LinkedList$element$2650(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r1666 : ref;
var r0665 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 419
Block981:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block982;
Block982:
	r0665 := __this;
	 assert ($neref((r0665), ($null))==1);
	 //  @line: 420
	 call $r1666, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$getFirst$2631((r0665));
	 goto Block985, Block983;
Block985:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block986;
Block983:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block984;
Block986:
	 //  @line: 420
	__ret := $r1666;
	 return;
Block984:
	$Exep0 := $caughtEx1;
	 return;
}


	 //  @line: 767
// <javaUtilEx.LinkedList$DescendingIterator: void <init>(javaUtilEx.LinkedList)>
procedure void$javaUtilEx.LinkedList$DescendingIterator$$la$init$ra$$2688(__this : ref, $param_0 : ref) returns ($Exep0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r2879 : ref;
var $r3880 : ref;
var $i0882 : int;
var r1878 : ref;
var $r4881 : ref;
var r0877 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 767
Block1116:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1261;
Block1261:
	r0877 := __this;
	r1878 := $param_0;
	 assert ($neref((r0877), ($null))==1);
	 //  @line: 768
	$HeapVar[r0877, javaUtilEx.LinkedList$javaUtilEx.LinkedList$DescendingIterator$this$0307] := r1878;
	 assert ($neref((r0877), ($null))==1);
	 //  @line: 768
	 call void$java.lang.Object$$la$init$ra$$28((r0877));
	 //  @line: 769
	$r2879 := $newvariable((1262));
	 assume ($neref(($newvariable((1262))), ($null))==1);
	 assert ($neref((r0877), ($null))==1);
	 //  @line: 769
	$r4881 := $HeapVar[r0877, javaUtilEx.LinkedList$javaUtilEx.LinkedList$DescendingIterator$this$0307];
	 assert ($neref((r0877), ($null))==1);
	 //  @line: 769
	$r3880 := $HeapVar[r0877, javaUtilEx.LinkedList$javaUtilEx.LinkedList$DescendingIterator$this$0307];
	 assert ($neref(($r3880), ($null))==1);
	 //  @line: 769
	 call $i0882 := int$javaUtilEx.LinkedList$size$2638(($r3880));
	 assert ($neref(($r2879), ($null))==1);
	 //  @line: 769
	 call $caughtEx1 := void$javaUtilEx.LinkedList$ListItr$$la$init$ra$$2677(($r2879), ($r4881), ($i0882));
	 goto Block1265, Block1263;
Block1265:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1266;
Block1263:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1264;
Block1266:
	 assert ($neref((r0877), ($null))==1);
	 //  @line: 769
	$HeapVar[r0877, javaUtilEx.LinkedList$ListItr$javaUtilEx.LinkedList$DescendingIterator$itr306] := $r2879;
	 return;
Block1264:
	$Exep0 := $caughtEx1;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 32
// <javaUtilEx.Content: boolean equals(java.lang.Object)>
procedure boolean$javaUtilEx.Content$equals$2588(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i1505 : int;
var $i0504 : int;
var r0502 : ref;
var $z1507 : int;
var $r2503 : ref;
var $z0501 : int;
var r1500 : ref;
Block739:
	r0502 := __this;
	r1500 := $param_0;
	 //  @line: 33
	$z0501 := $instanceof((r1500), (javaUtilEx.Content));
	 goto Block740;
	 //  @line: 33
Block740:
	 goto Block741, Block743;
	 //  @line: 33
Block741:
	 assume ($eqint(($z0501), (0))==1);
	 goto Block742;
	 //  @line: 33
Block743:
	 //  @line: 33
	 assume ($negInt(($eqint(($z0501), (0))))==1);
	 assert ($neref((r0502), ($null))==1);
	 //  @line: 34
	$i1505 := $HeapVar[r0502, int$javaUtilEx.Content$val0];
	 //  @line: 34
	$r2503 := r1500;
	 assert ($neref(($r2503), ($null))==1);
	 //  @line: 34
	$i0504 := $HeapVar[$r2503, int$javaUtilEx.Content$val0];
	 goto Block744;
	 //  @line: 36
Block742:
	 //  @line: 36
	__ret := 0;
	 return;
	 //  @line: 34
Block744:
	 goto Block747, Block745;
	 //  @line: 34
Block747:
	 //  @line: 34
	 assume ($negInt(($neint(($i1505), ($i0504))))==1);
	 //  @line: 34
	$z1507 := 1;
	 goto Block748;
	 //  @line: 34
Block745:
	 assume ($neint(($i1505), ($i0504))==1);
	 goto Block746;
	 //  @line: 34
Block748:
	 //  @line: 34
	__ret := $z1507;
	 return;
	 //  @line: 34
Block746:
	 //  @line: 34
	$z1507 := 0;
	 goto Block748;
}


// <javaUtilEx.ListIterator: void add(java.lang.Object)>
procedure void$javaUtilEx.ListIterator$add$2533(__this : ref, $param_0 : ref);



// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



	 //  @line: 476
// <javaUtilEx.LinkedList: boolean offerLast(java.lang.Object)>
procedure boolean$javaUtilEx.LinkedList$offerLast$2655(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r1678 : ref;
var r0677 : ref;
Block1006:
	r0677 := __this;
	r1678 := $param_0;
	 assert ($neref((r0677), ($null))==1);
	 //  @line: 477
	 call void$javaUtilEx.LinkedList$addLast$2636((r0677), (r1678));
	 //  @line: 478
	__ret := 1;
	 return;
}


	 //  @line: 636
// <javaUtilEx.LinkedList$ListItr: void <init>(javaUtilEx.LinkedList,int)>
procedure void$javaUtilEx.LinkedList$ListItr$$la$init$ra$$2677(__this : ref, $param_0 : ref, $param_1 : int) returns ($Exep0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i9796 : int;
var $i5788 : int;
var $r11797 : ref;
var $r12798 : ref;
var $i2784 : int;
var $r3779 : ref;
var $r5783 : ref;
var $r8791 : ref;
var $r6787 : ref;
var $i1781 : int;
var $i3785 : int;
var r0776 : ref;
var r1777 : ref;
var $i4786 : int;
var $i11800 : int;
var $r10795 : ref;
var $i6789 : int;
var i0782 : int;
var $i7792 : int;
var $i10799 : int;
var $i8793 : int;
var $r9794 : ref;
var $r2778 : ref;
var $r4780 : ref;
var $r7790 : ref;

 //temp local variables 

	 //  @line: 636
Block1098:
	$Exep0 := $null;
	 goto Block1145;
Block1145:
	r0776 := __this;
	r1777 := $param_0;
	i0782 := $param_1;
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 637
	$HeapVar[r0776, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305] := r1777;
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 637
	 call void$java.lang.Object$$la$init$ra$$28((r0776));
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 632
	$r2778 := $HeapVar[r0776, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305];
	 //  @line: 632
	 call $r3779 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$access$000$2669(($r2778));
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 632
	$HeapVar[r0776, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303] := $r3779;
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 635
	$r4780 := $HeapVar[r0776, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305];
	 assert ($neref(($r4780), ($null))==1);
	 //  @line: 635
	$i1781 := $HeapVar[$r4780, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 635
	$HeapVar[r0776, int$javaUtilEx.LinkedList$ListItr$expectedModCount0] := $i1781;
	 goto Block1146;
	 //  @line: 638
Block1146:
	 goto Block1147, Block1149;
	 //  @line: 638
Block1147:
	 assume ($ltint((i0782), (0))==1);
	 goto Block1148;
	 //  @line: 638
Block1149:
	 //  @line: 638
	 assume ($negInt(($ltint((i0782), (0))))==1);
	 //  @line: 639
	 call $i2784 := int$javaUtilEx.LinkedList$access$100$2670((r1777));
	 goto Block1150;
	 //  @line: 639
Block1148:
	 //  @line: 639
	$r5783 := $newvariable((1154));
	 assume ($neref(($newvariable((1154))), ($null))==1);
	 assert ($neref(($r5783), ($null))==1);
	 //  @line: 639
	 call void$java.lang.IndexOutOfBoundsException$$la$init$ra$$2075(($r5783));
	 goto Block1155;
	 //  @line: 639
Block1150:
	 goto Block1151, Block1153;
	 //  @line: 639
Block1155:
	$Exep0 := $r5783;
	 return;
	 //  @line: 639
Block1151:
	 assume ($leint((i0782), ($i2784))==1);
	 goto Block1152;
	 //  @line: 639
Block1153:
	 //  @line: 639
	 assume ($negInt(($leint((i0782), ($i2784))))==1);
	 goto Block1148;
	 //  @line: 640
Block1152:
	 //  @line: 640
	 call $i3785 := int$javaUtilEx.LinkedList$access$100$2670((r1777));
	 goto Block1156;
	 //  @line: 640
Block1156:
	 //  @line: 640
	$i4786 := $shrint(($i3785), (1));
	 goto Block1157;
	 //  @line: 640
Block1157:
	 goto Block1158, Block1160;
	 //  @line: 640
Block1158:
	 assume ($geint((i0782), ($i4786))==1);
	 goto Block1159;
	 //  @line: 640
Block1160:
	 //  @line: 640
	 assume ($negInt(($geint((i0782), ($i4786))))==1);
	 //  @line: 641
	 call $r9794 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$access$000$2669((r1777));
	 assert ($neref(($r9794), ($null))==1);
	 //  @line: 641
	$r10795 := $HeapVar[$r9794, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 641
	$HeapVar[r0776, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304] := $r10795;
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 642
	$HeapVar[r0776, int$javaUtilEx.LinkedList$ListItr$nextIndex0] := 0;
	 goto Block1161;
	 //  @line: 645
Block1159:
	 //  @line: 645
	 call $r6787 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$access$000$2669((r1777));
	 goto Block1166;
	 //  @line: 642
Block1161:
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 642
	$i9796 := $HeapVar[r0776, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 goto Block1162;
	 //  @line: 645
Block1166:
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 645
	$HeapVar[r0776, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304] := $r6787;
	 //  @line: 646
	 call $i5788 := int$javaUtilEx.LinkedList$access$100$2670((r1777));
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 646
	$HeapVar[r0776, int$javaUtilEx.LinkedList$ListItr$nextIndex0] := $i5788;
	 goto Block1167;
	 //  @line: 642
Block1162:
	 goto Block1163, Block1165;
	 //  @line: 646
Block1167:
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 646
	$i6789 := $HeapVar[r0776, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 goto Block1168;
	 //  @line: 642
Block1163:
	 assume ($geint(($i9796), (i0782))==1);
	 goto Block1164;
	 //  @line: 642
Block1165:
	 //  @line: 642
	 assume ($negInt(($geint(($i9796), (i0782))))==1);
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 643
	$r11797 := $HeapVar[r0776, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304];
	 assert ($neref(($r11797), ($null))==1);
	 //  @line: 643
	$r12798 := $HeapVar[$r11797, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 643
	$HeapVar[r0776, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304] := $r12798;
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 642
	$i10799 := $HeapVar[r0776, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 //  @line: 642
	$i11800 := $addint(($i10799), (1));
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 642
	$HeapVar[r0776, int$javaUtilEx.LinkedList$ListItr$nextIndex0] := $i11800;
	 goto Block1161;
	 //  @line: 646
Block1168:
	 goto Block1170, Block1169;
	 //  @line: 649
Block1164:
	 return;
	 //  @line: 646
Block1170:
	 //  @line: 646
	 assume ($negInt(($leint(($i6789), (i0782))))==1);
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 647
	$r7790 := $HeapVar[r0776, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304];
	 assert ($neref(($r7790), ($null))==1);
	 //  @line: 647
	$r8791 := $HeapVar[$r7790, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 647
	$HeapVar[r0776, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304] := $r8791;
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 646
	$i7792 := $HeapVar[r0776, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 //  @line: 646
	$i8793 := $subint(($i7792), (1));
	 assert ($neref((r0776), ($null))==1);
	 //  @line: 646
	$HeapVar[r0776, int$javaUtilEx.LinkedList$ListItr$nextIndex0] := $i8793;
	 goto Block1167;
	 //  @line: 646
Block1169:
	 assume ($leint(($i6789), (i0782))==1);
	 goto Block1164;
}


// <javaUtilEx.Iterator: void remove()>
procedure void$javaUtilEx.Iterator$remove$2256(__this : ref);



	 //  @line: 776
// <javaUtilEx.LinkedList$DescendingIterator: void remove()>
procedure void$javaUtilEx.LinkedList$DescendingIterator$remove$2691(__this : ref) returns ($Exep0 : ref, $Exep1 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0889 : ref;
var $r1890 : ref;

 //temp local variables 
var $caughtEx3 : ref;
var $caughtEx2 : ref;

	 //  @line: 776
Block1278:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block1279;
Block1279:
	r0889 := __this;
	 assert ($neref((r0889), ($null))==1);
	 //  @line: 777
	$r1890 := $HeapVar[r0889, javaUtilEx.LinkedList$ListItr$javaUtilEx.LinkedList$DescendingIterator$itr306];
	 assert ($neref(($r1890), ($null))==1);
	 //  @line: 777
	 call $caughtEx2, $caughtEx3 := void$javaUtilEx.LinkedList$ListItr$remove$2684(($r1890));
	 goto Block1280, Block1282;
Block1280:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block1281;
Block1282:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block1283;
Block1281:
	$Exep0 := $caughtEx2;
	 return;
Block1283:
	 goto Block1284, Block1286;
Block1284:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block1285;
Block1286:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block1287;
Block1285:
	$Exep1 := $caughtEx3;
	 return;
Block1287:
	 return;
}


	 //  @line: 55
// <javaUtilEx.NoSuchElementException: void <init>(java.lang.String)>
procedure void$javaUtilEx.NoSuchElementException$$la$init$ra$$2573(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1434 : ref;
var r0433 : ref;
Block685:
	r0433 := __this;
	r1434 := $param_0;
	 assert ($neref((r0433), ($null))==1);
	 //  @line: 56
	 call void$java.lang.RuntimeException$$la$init$ra$$761((r0433), (r1434));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 770
// <javaUtilEx.LinkedList$DescendingIterator: boolean hasNext()>
procedure boolean$javaUtilEx.LinkedList$DescendingIterator$hasNext$2689(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $r1884 : ref;
var r0883 : ref;
var $z0885 : int;
Block1267:
	r0883 := __this;
	 assert ($neref((r0883), ($null))==1);
	 //  @line: 771
	$r1884 := $HeapVar[r0883, javaUtilEx.LinkedList$ListItr$javaUtilEx.LinkedList$DescendingIterator$itr306];
	 assert ($neref(($r1884), ($null))==1);
	 //  @line: 771
	 call $z0885 := boolean$javaUtilEx.LinkedList$ListItr$hasPrevious$2680(($r1884));
	 //  @line: 771
	__ret := $z0885;
	 return;
}


	 //  @line: 616
// <javaUtilEx.SubList: int access$210(javaUtilEx.SubList)>
procedure int$javaUtilEx.SubList$access$210$2568($param_0 : ref) returns (__ret : int)
  modifies $HeapVar;
 {
var r0423 : ref;
var $i0424 : int;
var $i1425 : int;
Block680:
	r0423 := $param_0;
	 assert ($neref((r0423), ($null))==1);
	 //  @line: 617
	$i0424 := $HeapVar[r0423, int$javaUtilEx.SubList$size0];
	 //  @line: 617
	$i1425 := $subint(($i0424), (1));
	 assert ($neref((r0423), ($null))==1);
	 //  @line: 617
	$HeapVar[r0423, int$javaUtilEx.SubList$size0] := $i1425;
	 //  @line: 617
	__ret := $i0424;
	 return;
}


// <javaUtilEx.ListIterator: java.lang.Object previous()>
procedure java.lang.Object$javaUtilEx.ListIterator$previous$2528(__this : ref) returns (__ret : ref);



	 //  @line: 680
// <javaUtilEx.SubList: boolean addAll(int,javaUtilEx.Collection)>
procedure boolean$javaUtilEx.SubList$addAll$2557(__this : ref, $param_0 : int, $param_1 : ref) returns (__ret : int, $Exep0 : ref, $Exep1 : ref, $Exep2 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i3384 : int;
var r1380 : ref;
var $i6390 : int;
var i1382 : int;
var $r3387 : ref;
var $i4388 : int;
var r0378 : ref;
var $i2383 : int;
var i0379 : int;
var $r2385 : ref;
var $i5389 : int;

 //temp local variables 
var $caughtEx4 : ref;
var $freshlocal6 : int;
var $caughtEx3 : ref;
var $caughtEx5 : ref;

	 //  @line: 680
Block577:
	$caughtEx5 := $null;
	$caughtEx4 := $null;
	$caughtEx3 := $null;
	$Exep2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block592;
Block592:
	r0378 := __this;
	i0379 := $param_0;
	r1380 := $param_1;
	 assert ($neref((r0378), ($null))==1);
	 //  @line: 681
	 call $caughtEx3 := void$javaUtilEx.SubList$rangeCheckForAdd$2562((r0378), (i0379));
	 goto Block593, Block595;
Block593:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block594;
Block595:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block596;
Block594:
	$Exep0 := $caughtEx3;
	 return;
Block596:
	 assert ($neref((r1380), ($null))==1);
	 //  @line: 682
	 call i1382 := int$javaUtilEx.Collection$size$2241((r1380));
	 goto Block597;
	 //  @line: 683
Block597:
	 goto Block598, Block600;
	 //  @line: 683
Block598:
	 assume ($neint((i1382), (0))==1);
	 goto Block599;
	 //  @line: 683
Block600:
	 //  @line: 683
	 assume ($negInt(($neint((i1382), (0))))==1);
	 //  @line: 684
	__ret := 0;
	 return;
	 //  @line: 686
Block599:
	 assert ($neref((r0378), ($null))==1);
	 //  @line: 686
	 call $caughtEx4 := void$javaUtilEx.SubList$checkForComodification$2564((r0378));
	 goto Block601, Block603;
	 //  @line: 686
Block601:
	 assume ($neref(($caughtEx4), ($null))==1);
	 goto Block602;
	 //  @line: 686
Block603:
	 assume ($eqref(($caughtEx4), ($null))==1);
	 goto Block604;
	 //  @line: 686
Block602:
	$Exep1 := $caughtEx4;
	 return;
	 //  @line: 686
Block604:
	 goto Block605;
	 //  @line: 687
Block605:
	 assert ($neref((r0378), ($null))==1);
	 //  @line: 687
	$r2385 := $HeapVar[r0378, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref((r0378), ($null))==1);
	 //  @line: 687
	$i2383 := $HeapVar[r0378, int$javaUtilEx.SubList$offset0];
	 //  @line: 687
	$i3384 := $addint(($i2383), (i0379));
	 assert ($neref(($r2385), ($null))==1);
	 //  @line: 687
	 call $freshlocal6, $caughtEx3, $caughtEx5 := boolean$javaUtilEx.AbstractList$addAll$2492(($r2385), ($i3384), (r1380));
	 goto Block608, Block606;
	 //  @line: 687
Block608:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block609;
	 //  @line: 687
Block606:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block607;
	 //  @line: 687
Block609:
	 goto Block610, Block612;
	 //  @line: 687
Block607:
	$Exep0 := $caughtEx3;
	 return;
	 //  @line: 687
Block610:
	 assume ($neref(($caughtEx5), ($null))==1);
	 goto Block611;
	 //  @line: 687
Block612:
	 assume ($eqref(($caughtEx5), ($null))==1);
	 goto Block613;
	 //  @line: 687
Block611:
	$Exep2 := $caughtEx5;
	 return;
	 //  @line: 687
Block613:
	 assert ($neref((r0378), ($null))==1);
	 //  @line: 688
	$r3387 := $HeapVar[r0378, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref(($r3387), ($null))==1);
	 //  @line: 688
	$i4388 := $HeapVar[$r3387, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0378), ($null))==1);
	 //  @line: 688
	$HeapVar[r0378, int$javaUtilEx.AbstractList$modCount0] := $i4388;
	 assert ($neref((r0378), ($null))==1);
	 //  @line: 689
	$i5389 := $HeapVar[r0378, int$javaUtilEx.SubList$size0];
	 //  @line: 689
	$i6390 := $addint(($i5389), (i1382));
	 assert ($neref((r0378), ($null))==1);
	 //  @line: 689
	$HeapVar[r0378, int$javaUtilEx.SubList$size0] := $i6390;
	 //  @line: 690
	__ret := 1;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 305
// <javaUtilEx.LinkedList: void add(int,java.lang.Object)>
procedure void$javaUtilEx.LinkedList$add$2644(__this : ref, $param_0 : int, $param_1 : ref) returns ($Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $i1615 : int;
var $r3618 : ref;
var r0612 : ref;
var i0614 : int;
var r1613 : ref;

 //temp local variables 
var $caughtEx1 : ref;
var $freshlocal2 : ref;

	 //  @line: 305
Block872:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block873;
Block873:
	r0612 := __this;
	i0614 := $param_0;
	r1613 := $param_1;
	 assert ($neref((r0612), ($null))==1);
	 //  @line: 306
	$i1615 := $HeapVar[r0612, int$javaUtilEx.LinkedList$size0];
	 goto Block874;
	 //  @line: 306
Block874:
	 goto Block877, Block875;
	 //  @line: 306
Block877:
	 //  @line: 306
	 assume ($negInt(($neint((i0614), ($i1615))))==1);
	 assert ($neref((r0612), ($null))==1);
	 //  @line: 307
	$r3618 := $HeapVar[r0612, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block878;
	 //  @line: 306
Block875:
	 assume ($neint((i0614), ($i1615))==1);
	 goto Block876;
	 //  @line: 306
Block878:
	 assert ($neref((r0612), ($null))==1);
	 //  @line: 306
	 call $freshlocal2 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$addBefore$2665((r0612), (r1613), ($r3618));
	 goto Block883;
	 //  @line: 306
Block876:
	 assert ($neref((r0612), ($null))==1);
	 //  @line: 306
	 call $r3618, $caughtEx1 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$entry$2646((r0612), (i0614));
	 goto Block879, Block881;
	 //  @line: 307
Block883:
	 return;
	 //  @line: 306
Block879:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block880;
	 //  @line: 306
Block881:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block882;
	 //  @line: 306
Block880:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 306
Block882:
	 goto Block878;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 417
// <javaUtilEx.AbstractList$ListItr: int previousIndex()>
procedure int$javaUtilEx.AbstractList$ListItr$previousIndex$2546(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r0288 : ref;
var $i0289 : int;
var $i1290 : int;
Block447:
	r0288 := __this;
	 assert ($neref((r0288), ($null))==1);
	 //  @line: 418
	$i0289 := $HeapVar[r0288, int$javaUtilEx.AbstractList$Itr$cursor0];
	 //  @line: 418
	$i1290 := $subint(($i0289), (1));
	 //  @line: 418
	__ret := $i1290;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 74
// <javaUtilEx.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
procedure void$javaUtilEx.IllegalStateException$$la$init$ra$$2576(__this : ref, $param_0 : ref, $param_1 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0438 : ref;
var r1439 : ref;
var r2440 : ref;
Block688:
	r0438 := __this;
	r1439 := $param_0;
	r2440 := $param_1;
	 assert ($neref((r0438), ($null))==1);
	 //  @line: 75
	 call void$java.lang.RuntimeException$$la$init$ra$$762((r0438), (r1439), (r2440));
	 return;
}


	 //  @line: 4
// <javaUtilEx.juLinkedListCreatePollFirst: void main(java.lang.String[])>
procedure void$javaUtilEx.juLinkedListCreatePollFirst$main$2627($param_0 : [int]ref) returns ($Exep0 : ref)
  modifies $stringSize, java.lang.String$lp$$rp$$javaUtilEx.Random$args299;
 {
var r0517 : [int]ref;
var $i0518 : int;
var r1520 : ref;

 //temp local variables 
var $freshlocal2 : ref;
var $caughtEx1 : ref;

	 //  @line: 4
Block757:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block758;
Block758:
	r0517 := $param_0;
	 //  @line: 5
	java.lang.String$lp$$rp$$javaUtilEx.Random$args299 := r0517;
	 //  @line: 7
	 call $i0518 := int$javaUtilEx.Random$random$2674();
	 //  @line: 7
	 call r1520 := javaUtilEx.LinkedList$javaUtilEx.juLinkedListCreatePollFirst$createList$2628(($i0518));
	 assert ($neref((r1520), ($null))==1);
	 //  @line: 8
	 call $freshlocal2, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$pollFirst$2658((r1520));
	 goto Block761, Block759;
Block761:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block762;
Block759:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block760;
Block762:
	 return;
Block760:
	$Exep0 := $caughtEx1;
	 return;
}


	 //  @line: 740
// <javaUtilEx.SubList$1: void set(java.lang.Object)>
procedure void$javaUtilEx.SubList$1$set$2701(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1945 : ref;
var $r2946 : ref;
var r0944 : ref;
Block1331:
	r0944 := __this;
	r1945 := $param_0;
	 assert ($neref((r0944), ($null))==1);
	 //  @line: 741
	$r2946 := $HeapVar[r0944, javaUtilEx.ListIterator$javaUtilEx.SubList$1$i308];
	 assert ($neref(($r2946), ($null))==1);
	 //  @line: 741
	 call void$javaUtilEx.ListIterator$set$2532(($r2946), (r1945));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// <java.lang.StringBuilder: void <init>()>
procedure void$java.lang.StringBuilder$$la$init$ra$$2261(__this : ref);



	 //  @line: 89
// <javaUtilEx.UnsupportedOperationException: void <init>(java.lang.Throwable)>
procedure void$javaUtilEx.UnsupportedOperationException$$la$init$ra$$2260(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1103 : ref;
var r0102 : ref;
Block137:
	r0102 := __this;
	r1103 := $param_0;
	 assert ($neref((r0102), ($null))==1);
	 //  @line: 90
	 call void$java.lang.RuntimeException$$la$init$ra$$763((r0102), (r1103));
	 return;
}


	 //  @line: 400
// <javaUtilEx.AbstractList$ListItr: java.lang.Object previous()>
procedure java.lang.Object$javaUtilEx.AbstractList$ListItr$previous$2544(__this : ref) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0276 : ref;
var r1281 : ref;
var $r3282 : ref;
var i1284 : int;
var $r2279 : ref;
var $r4283 : ref;
var $i0277 : int;

 //temp local variables 
var $caughtEx3 : ref;
var $caughtEx2 : ref;

	 //  @line: 400
Block431:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block432;
Block432:
	r0276 := __this;
	 assert ($neref((r0276), ($null))==1);
	 //  @line: 401
	 call $caughtEx2 := void$javaUtilEx.AbstractList$Itr$checkForComodification$2538((r0276));
	 goto Block435, Block433;
Block435:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block436;
Block433:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block434;
Block436:
	 goto Block437;
Block434:
	$Exep0 := $caughtEx2;
	 return;
	 //  @line: 403
Block437:
	 assert ($neref((r0276), ($null))==1);
	 //  @line: 403
	$i0277 := $HeapVar[r0276, int$javaUtilEx.AbstractList$Itr$cursor0];
	 //  @line: 403
	i1284 := $subint(($i0277), (1));
	 assert ($neref((r0276), ($null))==1);
	 //  @line: 404
	$r2279 := $HeapVar[r0276, javaUtilEx.AbstractList$javaUtilEx.AbstractList$ListItr$this$0296];
	 assert ($neref(($r2279), ($null))==1);
	 //  @line: 404
	 call r1281 := java.lang.Object$javaUtilEx.AbstractList$get$2485(($r2279), (i1284));
	 assert ($neref((r0276), ($null))==1);
	 //  @line: 405
	$HeapVar[r0276, int$javaUtilEx.AbstractList$Itr$cursor0] := i1284;
	 assert ($neref((r0276), ($null))==1);
	 //  @line: 405
	$HeapVar[r0276, int$javaUtilEx.AbstractList$Itr$lastRet0] := i1284;
	 goto Block438;
	 //  @line: 406
Block438:
	 //  @line: 406
	__ret := r1281;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 647
// <javaUtilEx.SubList: int size()>
procedure int$javaUtilEx.SubList$size$2552(__this : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0338 : ref;
var $i0339 : int;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 647
Block532:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block533;
Block533:
	r0338 := __this;
	 assert ($neref((r0338), ($null))==1);
	 //  @line: 648
	 call $caughtEx1 := void$javaUtilEx.SubList$checkForComodification$2564((r0338));
	 goto Block536, Block534;
Block536:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block537;
Block534:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block535;
Block537:
	 assert ($neref((r0338), ($null))==1);
	 //  @line: 649
	$i0339 := $HeapVar[r0338, int$javaUtilEx.SubList$size0];
	 //  @line: 649
	__ret := $i0339;
	 return;
Block535:
	$Exep0 := $caughtEx1;
	 return;
}


	 //  @line: 355
// <javaUtilEx.AbstractList$Itr: java.lang.Object next()>
procedure java.lang.Object$javaUtilEx.AbstractList$Itr$next$2536(__this : ref) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r0228 : ref;
var $i0233 : int;
var i1236 : int;
var r1232 : ref;
var $r2230 : ref;
var $r4235 : ref;
var $r3234 : ref;

 //temp local variables 
var $caughtEx2 : ref;
var $caughtEx3 : ref;

	 //  @line: 355
Block355:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block356;
Block356:
	r0228 := __this;
	 assert ($neref((r0228), ($null))==1);
	 //  @line: 356
	 call $caughtEx2 := void$javaUtilEx.AbstractList$Itr$checkForComodification$2538((r0228));
	 goto Block357, Block359;
Block357:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block358;
Block359:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block360;
Block358:
	$Exep0 := $caughtEx2;
	 return;
Block360:
	 goto Block361;
	 //  @line: 358
Block361:
	 assert ($neref((r0228), ($null))==1);
	 //  @line: 358
	i1236 := $HeapVar[r0228, int$javaUtilEx.AbstractList$Itr$cursor0];
	 assert ($neref((r0228), ($null))==1);
	 //  @line: 359
	$r2230 := $HeapVar[r0228, javaUtilEx.AbstractList$javaUtilEx.AbstractList$Itr$this$0295];
	 assert ($neref(($r2230), ($null))==1);
	 //  @line: 359
	 call r1232 := java.lang.Object$javaUtilEx.AbstractList$get$2485(($r2230), (i1236));
	 assert ($neref((r0228), ($null))==1);
	 //  @line: 360
	$HeapVar[r0228, int$javaUtilEx.AbstractList$Itr$lastRet0] := i1236;
	 //  @line: 361
	$i0233 := $addint((i1236), (1));
	 assert ($neref((r0228), ($null))==1);
	 //  @line: 361
	$HeapVar[r0228, int$javaUtilEx.AbstractList$Itr$cursor0] := $i0233;
	 goto Block362;
	 //  @line: 362
Block362:
	 //  @line: 362
	__ret := r1232;
	 return;
}


// <javaUtilEx.Collection: boolean contains(java.lang.Object)>
procedure boolean$javaUtilEx.Collection$contains$2243(__this : ref, $param_0 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



	 //  @line: 271
// <javaUtilEx.AbstractCollection: boolean retainAll(javaUtilEx.Collection)>
procedure boolean$javaUtilEx.AbstractCollection$retainAll$2238(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r053 : ref;
var $r358 : ref;
var $z159 : int;
var $z056 : int;
var z260 : int;
var r255 : ref;
var r157 : ref;
Block97:
	r053 := __this;
	r157 := $param_0;
	 //  @line: 272
	z260 := 0;
	 assert ($neref((r053), ($null))==1);
	 //  @line: 273
	 call r255 := javaUtilEx.Iterator$javaUtilEx.AbstractCollection$iterator$2229((r053));
	 goto Block98;
	 //  @line: 274
Block98:
	 assert ($neref((r255), ($null))==1);
	 //  @line: 274
	 call $z056 := boolean$javaUtilEx.Iterator$hasNext$2254((r255));
	 goto Block99;
	 //  @line: 274
Block99:
	 goto Block102, Block100;
	 //  @line: 274
Block102:
	 //  @line: 274
	 assume ($negInt(($eqint(($z056), (0))))==1);
	 assert ($neref((r255), ($null))==1);
	 //  @line: 275
	 call $r358 := java.lang.Object$javaUtilEx.Iterator$next$2255((r255));
	 assert ($neref((r157), ($null))==1);
	 //  @line: 275
	 call $z159 := boolean$javaUtilEx.Collection$contains$2243((r157), ($r358));
	 goto Block103;
	 //  @line: 274
Block100:
	 assume ($eqint(($z056), (0))==1);
	 goto Block101;
	 //  @line: 275
Block103:
	 goto Block105, Block104;
	 //  @line: 280
Block101:
	 //  @line: 280
	__ret := z260;
	 return;
	 //  @line: 275
Block105:
	 //  @line: 275
	 assume ($negInt(($neint(($z159), (0))))==1);
	 assert ($neref((r255), ($null))==1);
	 //  @line: 276
	 call void$javaUtilEx.Iterator$remove$2256((r255));
	 //  @line: 277
	z260 := 1;
	 goto Block98;
	 //  @line: 275
Block104:
	 assume ($neint(($z159), (0))==1);
	 goto Block98;
}


	 //  @line: 87
// <javaUtilEx.AbstractSequentialList: java.lang.Object get(int)>
procedure java.lang.Object$javaUtilEx.AbstractSequentialList$get$2579(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r4448 : ref;
var i0445 : int;
var $r5450 : ref;
var $r3447 : ref;
var $r2446 : ref;
var r0444 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 87
Block691:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block692;
Block692:
	r0444 := __this;
	i0445 := $param_0;
	 goto Block693;
	 //  @line: 88
Block693:
	 assert ($neref((r0444), ($null))==1);
	 //  @line: 88
	 call $r2446 := javaUtilEx.ListIterator$javaUtilEx.AbstractSequentialList$listIterator$2585((r0444), (i0445));
	 assert ($neref(($r2446), ($null))==1);
	 //  @line: 88
	 call $r3447 := java.lang.Object$javaUtilEx.ListIterator$next$2526(($r2446));
	 goto Block694;
	 //  @line: 88
Block694:
	 //  @line: 88
	__ret := $r3447;
	 return;
}


	 //  @line: 655
// <javaUtilEx.LinkedList$ListItr: java.lang.Object next()>
procedure java.lang.Object$javaUtilEx.LinkedList$ListItr$next$2679(__this : ref) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i2814 : int;
var $i0809 : int;
var $r7818 : ref;
var $r4813 : ref;
var $r1808 : ref;
var $r2811 : ref;
var $r3812 : ref;
var r0807 : ref;
var $i1810 : int;
var $r5816 : ref;
var $r6817 : ref;
var $i3815 : int;

 //temp local variables 
var $caughtEx2 : ref;

	 //  @line: 655
Block1178:
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block1179;
Block1179:
	r0807 := __this;
	 assert ($neref((r0807), ($null))==1);
	 //  @line: 656
	 call $caughtEx2 := void$javaUtilEx.LinkedList$ListItr$checkForComodification$2687((r0807));
	 goto Block1180, Block1182;
Block1180:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block1181;
Block1182:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block1183;
Block1181:
	$Exep0 := $caughtEx2;
	 return;
Block1183:
	 assert ($neref((r0807), ($null))==1);
	 //  @line: 657
	$i0809 := $HeapVar[r0807, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 assert ($neref((r0807), ($null))==1);
	 //  @line: 657
	$r1808 := $HeapVar[r0807, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305];
	 //  @line: 657
	 call $i1810 := int$javaUtilEx.LinkedList$access$100$2670(($r1808));
	 goto Block1184;
	 //  @line: 657
Block1184:
	 goto Block1187, Block1185;
	 //  @line: 657
Block1187:
	 //  @line: 657
	 assume ($negInt(($neint(($i0809), ($i1810))))==1);
	 //  @line: 658
	$r7818 := $newvariable((1188));
	 assume ($neref(($newvariable((1188))), ($null))==1);
	 assert ($neref(($r7818), ($null))==1);
	 //  @line: 658
	 call void$javaUtilEx.NoSuchElementException$$la$init$ra$$2572(($r7818));
	 goto Block1189;
	 //  @line: 657
Block1185:
	 assume ($neint(($i0809), ($i1810))==1);
	 goto Block1186;
	 //  @line: 657
Block1189:
	$Exep1 := $r7818;
	 return;
	 //  @line: 660
Block1186:
	 assert ($neref((r0807), ($null))==1);
	 //  @line: 660
	$r2811 := $HeapVar[r0807, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304];
	 goto Block1190;
	 //  @line: 660
Block1190:
	 assert ($neref((r0807), ($null))==1);
	 //  @line: 660
	$HeapVar[r0807, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303] := $r2811;
	 assert ($neref((r0807), ($null))==1);
	 //  @line: 661
	$r3812 := $HeapVar[r0807, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304];
	 assert ($neref(($r3812), ($null))==1);
	 //  @line: 661
	$r4813 := $HeapVar[$r3812, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 assert ($neref((r0807), ($null))==1);
	 //  @line: 661
	$HeapVar[r0807, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$next304] := $r4813;
	 assert ($neref((r0807), ($null))==1);
	 //  @line: 662
	$i2814 := $HeapVar[r0807, int$javaUtilEx.LinkedList$ListItr$nextIndex0];
	 //  @line: 662
	$i3815 := $addint(($i2814), (1));
	 assert ($neref((r0807), ($null))==1);
	 //  @line: 662
	$HeapVar[r0807, int$javaUtilEx.LinkedList$ListItr$nextIndex0] := $i3815;
	 assert ($neref((r0807), ($null))==1);
	 //  @line: 663
	$r5816 := $HeapVar[r0807, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303];
	 assert ($neref(($r5816), ($null))==1);
	 //  @line: 663
	$r6817 := $HeapVar[$r5816, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 //  @line: 663
	__ret := $r6817;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



	 //  @line: 413
// <javaUtilEx.AbstractList$ListItr: int nextIndex()>
procedure int$javaUtilEx.AbstractList$ListItr$nextIndex$2545(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $i0287 : int;
var r0286 : ref;
Block446:
	r0286 := __this;
	 assert ($neref((r0286), ($null))==1);
	 //  @line: 414
	$i0287 := $HeapVar[r0286, int$javaUtilEx.AbstractList$Itr$cursor0];
	 //  @line: 414
	__ret := $i0287;
	 return;
}


	 //  @line: 160
// <javaUtilEx.LinkedList: java.lang.Object removeLast()>
procedure java.lang.Object$javaUtilEx.LinkedList$removeLast$2634(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r1553 : ref;
var $r2554 : ref;
var r0552 : ref;
var $r3555 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 160
Block801:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block802;
Block802:
	r0552 := __this;
	 assert ($neref((r0552), ($null))==1);
	 //  @line: 161
	$r1553 := $HeapVar[r0552, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r1553), ($null))==1);
	 //  @line: 161
	$r2554 := $HeapVar[$r1553, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 assert ($neref((r0552), ($null))==1);
	 //  @line: 161
	 call $r3555, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$remove$2666((r0552), ($r2554));
	 goto Block803, Block805;
Block803:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block804;
Block805:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block806;
Block804:
	$Exep0 := $caughtEx1;
	 return;
Block806:
	 //  @line: 161
	__ret := $r3555;
	 return;
}


	 //  @line: 761
// <javaUtilEx.SubList: void rangeCheckForAdd(int)>
procedure void$javaUtilEx.SubList$rangeCheckForAdd$2562(__this : ref, $param_0 : int) returns ($Exep0 : ref)
  modifies $stringSize;
  requires ($neref((__this), ($null))==1);
 {
var r0407 : ref;
var i0405 : int;
var $i1409 : int;
var $r2408 : ref;
var $r1406 : ref;

 //temp local variables 

	 //  @line: 761
Block538:
	$Exep0 := $null;
	 goto Block658;
Block658:
	r0407 := __this;
	i0405 := $param_0;
	 goto Block659;
	 //  @line: 762
Block659:
	 goto Block660, Block662;
	 //  @line: 762
Block660:
	 assume ($ltint((i0405), (0))==1);
	 goto Block661;
	 //  @line: 762
Block662:
	 //  @line: 762
	 assume ($negInt(($ltint((i0405), (0))))==1);
	 assert ($neref((r0407), ($null))==1);
	 //  @line: 763
	$i1409 := $HeapVar[r0407, int$javaUtilEx.SubList$size0];
	 goto Block663;
	 //  @line: 763
Block661:
	 //  @line: 763
	$r1406 := $newvariable((667));
	 assume ($neref(($newvariable((667))), ($null))==1);
	 assert ($neref((r0407), ($null))==1);
	 //  @line: 763
	 call $r2408 := java.lang.String$javaUtilEx.SubList$outOfBoundsMsg$2563((r0407), (i0405));
	 assert ($neref(($r1406), ($null))==1);
	 //  @line: 763
	 call void$java.lang.IndexOutOfBoundsException$$la$init$ra$$2076(($r1406), ($r2408));
	 goto Block668;
	 //  @line: 763
Block663:
	 goto Block664, Block666;
	 //  @line: 763
Block668:
	$Exep0 := $r1406;
	 return;
	 //  @line: 763
Block664:
	 assume ($leint((i0405), ($i1409))==1);
	 goto Block665;
	 //  @line: 763
Block666:
	 //  @line: 763
	 assume ($negInt(($leint((i0405), ($i1409))))==1);
	 goto Block661;
	 //  @line: 764
Block665:
	 return;
}


	 //  @line: 107
// <javaUtilEx.AbstractList: boolean add(java.lang.Object)>
procedure boolean$javaUtilEx.AbstractList$add$2484(__this : ref, $param_0 : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0105 : ref;
var r1107 : ref;
var $i0106 : int;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 107
Block140:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block141;
Block141:
	r0105 := __this;
	r1107 := $param_0;
	 assert ($neref((r0105), ($null))==1);
	 //  @line: 108
	 call $i0106 := int$javaUtilEx.AbstractCollection$size$2230((r0105));
	 assert ($neref((r0105), ($null))==1);
	 //  @line: 108
	 call $caughtEx1 := void$javaUtilEx.AbstractList$add$2487((r0105), ($i0106), (r1107));
	 goto Block144, Block142;
Block144:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block145;
Block142:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block143;
Block145:
	 //  @line: 109
	__ret := 1;
	 return;
Block143:
	$Exep0 := $caughtEx1;
	 return;
}


	 //  @line: 330
// <javaUtilEx.AbstractList$Itr: void <init>(javaUtilEx.AbstractList,javaUtilEx.AbstractList$1)>
procedure void$javaUtilEx.AbstractList$Itr$$la$init$ra$$2539(__this : ref, $param_0 : ref, $param_1 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1259 : ref;
var r0258 : ref;
var r2260 : ref;
Block403:
	r0258 := __this;
	r1259 := $param_0;
	r2260 := $param_1;
	 assert ($neref((r0258), ($null))==1);
	 //  @line: 331
	 call void$javaUtilEx.AbstractList$Itr$$la$init$ra$$2534((r0258), (r1259));
	 return;
}


// <javaUtilEx.Iterator: boolean hasNext()>
procedure boolean$javaUtilEx.Iterator$hasNext$2254(__this : ref) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 131
// <javaUtilEx.AbstractList: java.lang.Object set(int,java.lang.Object)>
procedure java.lang.Object$javaUtilEx.AbstractList$set$2486(__this : ref, $param_0 : int, $param_1 : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1111 : ref;
var r0109 : ref;
var $r2108 : ref;
var i0110 : int;

 //temp local variables 

	 //  @line: 131
Block146:
	$Exep0 := $null;
	 goto Block147;
Block147:
	r0109 := __this;
	i0110 := $param_0;
	r1111 := $param_1;
	 //  @line: 132
	$r2108 := $newvariable((148));
	 assume ($neref(($newvariable((148))), ($null))==1);
	 assert ($neref(($r2108), ($null))==1);
	 //  @line: 132
	 call void$javaUtilEx.UnsupportedOperationException$$la$init$ra$$2257(($r2108));
	 goto Block149;
Block149:
	$Exep0 := $r2108;
	 return;
}


// <javaUtilEx.ListIterator: void set(java.lang.Object)>
procedure void$javaUtilEx.ListIterator$set$2532(__this : ref, $param_0 : ref);



	 //  @line: 441
// <javaUtilEx.LinkedList: java.lang.Object remove()>
procedure java.lang.Object$javaUtilEx.LinkedList$remove$2652(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0670 : ref;
var $r1671 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 441
Block998:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block999;
Block999:
	r0670 := __this;
	 assert ($neref((r0670), ($null))==1);
	 //  @line: 442
	 call $r1671, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$removeFirst$2633((r0670));
	 goto Block1002, Block1000;
Block1002:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1003;
Block1000:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1001;
Block1003:
	 //  @line: 442
	__ret := $r1671;
	 return;
Block1001:
	$Exep0 := $caughtEx1;
	 return;
}


	 //  @line: 43
// <javaUtilEx.IllegalStateException: void <init>()>
procedure void$javaUtilEx.IllegalStateException$$la$init$ra$$2574(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0435 : ref;
Block686:
	r0435 := __this;
	 assert ($neref((r0435), ($null))==1);
	 //  @line: 44
	 call void$java.lang.RuntimeException$$la$init$ra$$760((r0435));
	 return;
}


	 //  @line: 770
// <javaUtilEx.SubList: void checkForComodification()>
procedure void$javaUtilEx.SubList$checkForComodification$2564(__this : ref) returns ($Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r1413 : ref;
var $i1415 : int;
var $i0414 : int;
var $r2416 : ref;
var r0412 : ref;

 //temp local variables 

	 //  @line: 770
Block508:
	$Exep0 := $null;
	 goto Block670;
Block670:
	r0412 := __this;
	 assert ($neref((r0412), ($null))==1);
	 //  @line: 771
	$i1415 := $HeapVar[r0412, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0412), ($null))==1);
	 //  @line: 771
	$r1413 := $HeapVar[r0412, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref(($r1413), ($null))==1);
	 //  @line: 771
	$i0414 := $HeapVar[$r1413, int$javaUtilEx.AbstractList$modCount0];
	 goto Block671;
	 //  @line: 771
Block671:
	 goto Block672, Block674;
	 //  @line: 771
Block672:
	 assume ($eqint(($i1415), ($i0414))==1);
	 goto Block673;
	 //  @line: 771
Block674:
	 //  @line: 771
	 assume ($negInt(($eqint(($i1415), ($i0414))))==1);
	 //  @line: 772
	$r2416 := $newvariable((675));
	 assume ($neref(($newvariable((675))), ($null))==1);
	 assert ($neref(($r2416), ($null))==1);
	 //  @line: 772
	 call void$javaUtilEx.ConcurrentModificationException$$la$init$ra$$2570(($r2416));
	 goto Block676;
	 //  @line: 773
Block673:
	 return;
	 //  @line: 771
Block676:
	$Exep0 := $r2416;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 652
// <javaUtilEx.SubList: void add(int,java.lang.Object)>
procedure void$javaUtilEx.SubList$add$2553(__this : ref, $param_0 : int, $param_1 : ref) returns ($Exep0 : ref, $Exep1 : ref, $Exep2 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i0341 : int;
var $i2344 : int;
var $i3347 : int;
var $r3346 : ref;
var $r2345 : ref;
var $i1342 : int;
var $i4348 : int;
var r0340 : ref;
var r1343 : ref;
var $i5349 : int;

 //temp local variables 
var $caughtEx3 : ref;
var $caughtEx5 : ref;
var $caughtEx4 : ref;

	 //  @line: 652
Block539:
	$caughtEx5 := $null;
	$caughtEx4 := $null;
	$caughtEx3 := $null;
	$Exep2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block540;
Block540:
	r0340 := __this;
	i0341 := $param_0;
	r1343 := $param_1;
	 assert ($neref((r0340), ($null))==1);
	 //  @line: 653
	 call $caughtEx3 := void$javaUtilEx.SubList$rangeCheckForAdd$2562((r0340), (i0341));
	 goto Block543, Block541;
Block543:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block544;
Block541:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block542;
Block544:
	 assert ($neref((r0340), ($null))==1);
	 //  @line: 654
	 call $caughtEx4 := void$javaUtilEx.SubList$checkForComodification$2564((r0340));
	 goto Block545, Block547;
Block542:
	$Exep0 := $caughtEx3;
	 return;
Block545:
	 assume ($neref(($caughtEx4), ($null))==1);
	 goto Block546;
Block547:
	 assume ($eqref(($caughtEx4), ($null))==1);
	 goto Block548;
Block546:
	$Exep1 := $caughtEx4;
	 return;
Block548:
	 assert ($neref((r0340), ($null))==1);
	 //  @line: 655
	$r2345 := $HeapVar[r0340, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref((r0340), ($null))==1);
	 //  @line: 655
	$i1342 := $HeapVar[r0340, int$javaUtilEx.SubList$offset0];
	 //  @line: 655
	$i2344 := $addint((i0341), ($i1342));
	 assert ($neref(($r2345), ($null))==1);
	 //  @line: 655
	 call $caughtEx5 := void$javaUtilEx.AbstractList$add$2487(($r2345), ($i2344), (r1343));
	 goto Block549, Block551;
Block549:
	 assume ($neref(($caughtEx5), ($null))==1);
	 goto Block550;
Block551:
	 assume ($eqref(($caughtEx5), ($null))==1);
	 goto Block552;
Block550:
	$Exep2 := $caughtEx5;
	 return;
Block552:
	 assert ($neref((r0340), ($null))==1);
	 //  @line: 656
	$r3346 := $HeapVar[r0340, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref(($r3346), ($null))==1);
	 //  @line: 656
	$i3347 := $HeapVar[$r3346, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0340), ($null))==1);
	 //  @line: 656
	$HeapVar[r0340, int$javaUtilEx.AbstractList$modCount0] := $i3347;
	 assert ($neref((r0340), ($null))==1);
	 //  @line: 657
	$i4348 := $HeapVar[r0340, int$javaUtilEx.SubList$size0];
	 //  @line: 657
	$i5349 := $addint(($i4348), (1));
	 assert ($neref((r0340), ($null))==1);
	 //  @line: 657
	$HeapVar[r0340, int$javaUtilEx.SubList$size0] := $i5349;
	 return;
}


	 //  @line: 641
// <javaUtilEx.SubList: java.lang.Object get(int)>
procedure java.lang.Object$javaUtilEx.SubList$get$2551(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref, $Exep1 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0332 : ref;
var $i1334 : int;
var i0333 : int;
var $r1336 : ref;
var $i2335 : int;
var $r2337 : ref;

 //temp local variables 
var $caughtEx2 : ref;
var $caughtEx3 : ref;

	 //  @line: 641
Block522:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block523;
Block523:
	r0332 := __this;
	i0333 := $param_0;
	 assert ($neref((r0332), ($null))==1);
	 //  @line: 642
	 call $caughtEx2 := void$javaUtilEx.SubList$rangeCheck$2561((r0332), (i0333));
	 goto Block526, Block524;
Block526:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block527;
Block524:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block525;
Block527:
	 assert ($neref((r0332), ($null))==1);
	 //  @line: 643
	 call $caughtEx3 := void$javaUtilEx.SubList$checkForComodification$2564((r0332));
	 goto Block528, Block530;
Block525:
	$Exep0 := $caughtEx2;
	 return;
Block528:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block529;
Block530:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block531;
Block529:
	$Exep1 := $caughtEx3;
	 return;
Block531:
	 assert ($neref((r0332), ($null))==1);
	 //  @line: 644
	$r1336 := $HeapVar[r0332, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref((r0332), ($null))==1);
	 //  @line: 644
	$i1334 := $HeapVar[r0332, int$javaUtilEx.SubList$offset0];
	 //  @line: 644
	$i2335 := $addint((i0333), ($i1334));
	 assert ($neref(($r1336), ($null))==1);
	 //  @line: 644
	 call $r2337 := java.lang.Object$javaUtilEx.AbstractList$get$2485(($r1336), ($i2335));
	 //  @line: 644
	__ret := $r2337;
	 return;
}


	 //  @line: 517
// <javaUtilEx.LinkedList: java.lang.Object pollFirst()>
procedure java.lang.Object$javaUtilEx.LinkedList$pollFirst$2658(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $i0686 : int;
var $r1687 : ref;
var r0685 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 517
Block756:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1029;
Block1029:
	r0685 := __this;
	 assert ($neref((r0685), ($null))==1);
	 //  @line: 518
	$i0686 := $HeapVar[r0685, int$javaUtilEx.LinkedList$size0];
	 goto Block1030;
	 //  @line: 518
Block1030:
	 goto Block1031, Block1033;
	 //  @line: 518
Block1031:
	 assume ($neint(($i0686), (0))==1);
	 goto Block1032;
	 //  @line: 518
Block1033:
	 //  @line: 518
	 assume ($negInt(($neint(($i0686), (0))))==1);
	 //  @line: 519
	__ret := $null;
	 return;
	 //  @line: 520
Block1032:
	 assert ($neref((r0685), ($null))==1);
	 //  @line: 520
	 call $r1687, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$removeFirst$2633((r0685));
	 goto Block1034, Block1036;
	 //  @line: 520
Block1034:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1035;
	 //  @line: 520
Block1036:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1037;
	 //  @line: 520
Block1035:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 520
Block1037:
	 goto Block1038;
	 //  @line: 520
Block1038:
	 //  @line: 520
	__ret := $r1687;
	 return;
}


	 //  @line: 177
// <javaUtilEx.AbstractList: int indexOf(java.lang.Object)>
procedure int$javaUtilEx.AbstractList$indexOf$2489(__this : ref, $param_0 : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0119 : ref;
var r1122 : ref;
var $i0126 : int;
var $z0123 : int;
var $z1125 : int;
var $i1129 : int;
var $r3124 : ref;
var $r4128 : ref;
var $z2127 : int;
var r2121 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 177
Block160:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block161;
Block161:
	r0119 := __this;
	r1122 := $param_0;
	 assert ($neref((r0119), ($null))==1);
	 //  @line: 178
	 call r2121, $caughtEx1 := javaUtilEx.ListIterator$javaUtilEx.AbstractList$listIterator$2494((r0119));
	 goto Block162, Block164;
Block162:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block163;
Block164:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block165;
Block163:
	$Exep0 := $caughtEx1;
	 return;
Block165:
	 goto Block166;
	 //  @line: 179
Block166:
	 goto Block167, Block169;
	 //  @line: 179
Block167:
	 assume ($neref((r1122), ($null))==1);
	 goto Block168;
	 //  @line: 179
Block169:
	 //  @line: 179
	 assume ($negInt(($neref((r1122), ($null))))==1);
	 goto Block170;
	 //  @line: 184
Block168:
	 assert ($neref((r2121), ($null))==1);
	 //  @line: 184
	 call $z0123 := boolean$javaUtilEx.ListIterator$hasNext$2525((r2121));
	 goto Block178;
	 //  @line: 180
Block170:
	 assert ($neref((r2121), ($null))==1);
	 //  @line: 180
	 call $z2127 := boolean$javaUtilEx.ListIterator$hasNext$2525((r2121));
	 goto Block171;
	 //  @line: 184
Block178:
	 goto Block180, Block179;
	 //  @line: 180
Block171:
	 goto Block172, Block174;
	 //  @line: 184
Block180:
	 //  @line: 184
	 assume ($negInt(($eqint(($z0123), (0))))==1);
	 assert ($neref((r2121), ($null))==1);
	 //  @line: 185
	 call $r3124 := java.lang.Object$javaUtilEx.ListIterator$next$2526((r2121));
	 assert ($neref((r1122), ($null))==1);
	 //  @line: 185
	 call $z1125 := boolean$java.lang.Object$equals$32((r1122), ($r3124));
	 goto Block181;
	 //  @line: 184
Block179:
	 assume ($eqint(($z0123), (0))==1);
	 goto Block173;
	 //  @line: 180
Block172:
	 assume ($eqint(($z2127), (0))==1);
	 goto Block173;
	 //  @line: 180
Block174:
	 //  @line: 180
	 assume ($negInt(($eqint(($z2127), (0))))==1);
	 assert ($neref((r2121), ($null))==1);
	 //  @line: 181
	 call $r4128 := java.lang.Object$javaUtilEx.ListIterator$next$2526((r2121));
	 goto Block175;
	 //  @line: 185
Block181:
	 goto Block183, Block182;
	 //  @line: 188
Block173:
	 //  @line: 188
	__ret := -1;
	 return;
	 //  @line: 181
Block175:
	 goto Block177, Block176;
	 //  @line: 185
Block183:
	 //  @line: 185
	 assume ($negInt(($eqint(($z1125), (0))))==1);
	 assert ($neref((r2121), ($null))==1);
	 //  @line: 186
	 call $i0126 := int$javaUtilEx.ListIterator$previousIndex$2530((r2121));
	 //  @line: 186
	__ret := $i0126;
	 return;
	 //  @line: 185
Block182:
	 assume ($eqint(($z1125), (0))==1);
	 goto Block168;
	 //  @line: 181
Block177:
	 //  @line: 181
	 assume ($negInt(($neref(($r4128), ($null))))==1);
	 assert ($neref((r2121), ($null))==1);
	 //  @line: 182
	 call $i1129 := int$javaUtilEx.ListIterator$previousIndex$2530((r2121));
	 //  @line: 182
	__ret := $i1129;
	 return;
	 //  @line: 181
Block176:
	 assume ($neref(($r4128), ($null))==1);
	 goto Block170;
}


// <javaUtilEx.Collection: int size()>
procedure int$javaUtilEx.Collection$size$2241(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 2
// <javaUtilEx.juLinkedListCreatePollFirst: void <init>()>
procedure void$javaUtilEx.juLinkedListCreatePollFirst$$la$init$ra$$2626(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0516 : ref;
Block753:
	r0516 := __this;
	 assert ($neref((r0516), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r0516));
	 return;
}


	 //  @line: 777
// <javaUtilEx.RandomAccessSubList: void <init>(javaUtilEx.AbstractList,int,int)>
procedure void$javaUtilEx.RandomAccessSubList$$la$init$ra$$2540(__this : ref, $param_0 : ref, $param_1 : int, $param_2 : int) returns ($Exep0 : ref, $Exep1 : ref)  requires ($neref((__this), ($null))==1);
 {
var i0263 : int;
var i1264 : int;
var r0261 : ref;
var r1262 : ref;

 //temp local variables 
var $caughtEx2 : ref;
var $caughtEx3 : ref;

	 //  @line: 777
Block244:
	$caughtEx3 := $null;
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block404;
Block404:
	r0261 := __this;
	r1262 := $param_0;
	i0263 := $param_1;
	i1264 := $param_2;
	 assert ($neref((r0261), ($null))==1);
	 //  @line: 778
	 call $caughtEx2, $caughtEx3 := void$javaUtilEx.SubList$$la$init$ra$$2549((r0261), (r1262), (i0263), (i1264));
	 goto Block405, Block407;
Block405:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block406;
Block407:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block408;
Block406:
	$Exep0 := $caughtEx2;
	 return;
Block408:
	 goto Block409, Block411;
Block409:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block410;
Block411:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block412;
Block410:
	$Exep1 := $caughtEx3;
	 return;
Block412:
	 return;
}


	 //  @line: 369
// <javaUtilEx.AbstractList$Itr: void remove()>
procedure void$javaUtilEx.AbstractList$Itr$remove$2537(__this : ref) returns ($Exep1 : ref, $Exep2 : ref, $Exep0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i5247 : int;
var $i6248 : int;
var $r7252 : ref;
var $i4246 : int;
var $r5249 : ref;
var $r6250 : ref;
var $r4245 : ref;
var $i2243 : int;
var $i1240 : int;
var $r2241 : ref;
var $i3244 : int;
var $i0239 : int;
var r0238 : ref;

 //temp local variables 
var $caughtEx4 : ref;
var $caughtEx6 : ref;
var $freshlocal5 : ref;
var $caughtEx3 : ref;

	 //  @line: 369
Block370:
	$caughtEx6 := $null;
	$caughtEx4 := $null;
	$caughtEx3 := $null;
	$Exep2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block371;
Block371:
	r0238 := __this;
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 370
	$i0239 := $HeapVar[r0238, int$javaUtilEx.AbstractList$Itr$lastRet0];
	 goto Block372;
	 //  @line: 370
Block372:
	 goto Block375, Block373;
	 //  @line: 370
Block375:
	 //  @line: 370
	 assume ($negInt(($geint(($i0239), (0))))==1);
	 //  @line: 371
	$r5249 := $newvariable((376));
	 assume ($neref(($newvariable((376))), ($null))==1);
	 assert ($neref(($r5249), ($null))==1);
	 //  @line: 371
	 call void$javaUtilEx.IllegalStateException$$la$init$ra$$2574(($r5249));
	 goto Block377;
	 //  @line: 370
Block373:
	 assume ($geint(($i0239), (0))==1);
	 goto Block374;
	 //  @line: 370
Block377:
	$Exep0 := $r5249;
	 return;
	 //  @line: 372
Block374:
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 372
	 call $caughtEx3 := void$javaUtilEx.AbstractList$Itr$checkForComodification$2538((r0238));
	 goto Block380, Block378;
	 //  @line: 372
Block380:
	 assume ($eqref(($caughtEx3), ($null))==1);
	 goto Block381;
	 //  @line: 372
Block378:
	 assume ($neref(($caughtEx3), ($null))==1);
	 goto Block379;
	 //  @line: 372
Block381:
	 goto Block382;
	 //  @line: 372
Block379:
	$Exep1 := $caughtEx3;
	 return;
	 //  @line: 375
Block382:
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 375
	$r2241 := $HeapVar[r0238, javaUtilEx.AbstractList$javaUtilEx.AbstractList$Itr$this$0295];
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 375
	$i1240 := $HeapVar[r0238, int$javaUtilEx.AbstractList$Itr$lastRet0];
	 assert ($neref(($r2241), ($null))==1);
	 //  @line: 375
	 call $freshlocal5, $caughtEx4 := java.lang.Object$javaUtilEx.AbstractList$remove$2488(($r2241), ($i1240));
	 goto Block385, Block383;
	 //  @line: 375
Block385:
	 assume ($eqref(($caughtEx4), ($null))==1);
	 goto Block386;
	 //  @line: 375
Block383:
	 assume ($neref(($caughtEx4), ($null))==1);
	 goto Block384;
	 //  @line: 375
Block386:
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 376
	$i3244 := $HeapVar[r0238, int$javaUtilEx.AbstractList$Itr$lastRet0];
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 376
	$i2243 := $HeapVar[r0238, int$javaUtilEx.AbstractList$Itr$cursor0];
	 goto Block387;
	 //  @line: 375
Block384:
	$Exep2 := $caughtEx4;
	 return;
	 //  @line: 376
Block387:
	 goto Block388, Block390;
	 //  @line: 376
Block388:
	 assume ($geint(($i3244), ($i2243))==1);
	 goto Block389;
	 //  @line: 376
Block390:
	 //  @line: 376
	 assume ($negInt(($geint(($i3244), ($i2243))))==1);
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 377
	$i5247 := $HeapVar[r0238, int$javaUtilEx.AbstractList$Itr$cursor0];
	 //  @line: 377
	$i6248 := $subint(($i5247), (1));
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 377
	$HeapVar[r0238, int$javaUtilEx.AbstractList$Itr$cursor0] := $i6248;
	 goto Block389;
	 //  @line: 378
Block389:
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 378
	$HeapVar[r0238, int$javaUtilEx.AbstractList$Itr$lastRet0] := -1;
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 379
	$r4245 := $HeapVar[r0238, javaUtilEx.AbstractList$javaUtilEx.AbstractList$Itr$this$0295];
	 assert ($neref(($r4245), ($null))==1);
	 //  @line: 379
	$i4246 := $HeapVar[$r4245, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0238), ($null))==1);
	 //  @line: 379
	$HeapVar[r0238, int$javaUtilEx.AbstractList$Itr$expectedModCount0] := $i4246;
	 goto Block391;
	 //  @line: 382
Block391:
	 goto Block392;
	 //  @line: 383
Block392:
	 return;
}


	 //  @line: 145
// <javaUtilEx.AbstractSequentialList: void add(int,java.lang.Object)>
procedure void$javaUtilEx.AbstractSequentialList$add$2581(__this : ref, $param_0 : int, $param_1 : ref) returns ($Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var i0463 : int;
var $r4466 : ref;
var $r5468 : ref;
var r1465 : ref;
var $r3464 : ref;
var r0462 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 145
Block705:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block706;
Block706:
	r0462 := __this;
	i0463 := $param_0;
	r1465 := $param_1;
	 goto Block707;
	 //  @line: 146
Block707:
	 assert ($neref((r0462), ($null))==1);
	 //  @line: 146
	 call $r3464 := javaUtilEx.ListIterator$javaUtilEx.AbstractSequentialList$listIterator$2585((r0462), (i0463));
	 assert ($neref(($r3464), ($null))==1);
	 //  @line: 146
	 call void$javaUtilEx.ListIterator$add$2533(($r3464), (r1465));
	 goto Block708;
	 //  @line: 149
Block708:
	 goto Block709;
	 //  @line: 150
Block709:
	 return;
}


	 //  @line: 531
// <javaUtilEx.LinkedList: java.lang.Object pollLast()>
procedure java.lang.Object$javaUtilEx.LinkedList$pollLast$2659(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r1690 : ref;
var r0688 : ref;
var $i0689 : int;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 531
Block1039:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1040;
Block1040:
	r0688 := __this;
	 assert ($neref((r0688), ($null))==1);
	 //  @line: 532
	$i0689 := $HeapVar[r0688, int$javaUtilEx.LinkedList$size0];
	 goto Block1041;
	 //  @line: 532
Block1041:
	 goto Block1044, Block1042;
	 //  @line: 532
Block1044:
	 //  @line: 532
	 assume ($negInt(($neint(($i0689), (0))))==1);
	 //  @line: 533
	__ret := $null;
	 return;
	 //  @line: 532
Block1042:
	 assume ($neint(($i0689), (0))==1);
	 goto Block1043;
	 //  @line: 534
Block1043:
	 assert ($neref((r0688), ($null))==1);
	 //  @line: 534
	 call $r1690, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$removeLast$2634((r0688));
	 goto Block1045, Block1047;
	 //  @line: 534
Block1045:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1046;
	 //  @line: 534
Block1047:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1048;
	 //  @line: 534
Block1046:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 534
Block1048:
	 goto Block1049;
	 //  @line: 534
Block1049:
	 //  @line: 534
	__ret := $r1690;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



	 //  @line: 574
// <javaUtilEx.LinkedList: boolean removeFirstOccurrence(java.lang.Object)>
procedure boolean$javaUtilEx.LinkedList$removeFirstOccurrence$2662(__this : ref, $param_0 : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0695 : ref;
var $z0697 : int;
var r1696 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 574
Block1057:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1058;
Block1058:
	r0695 := __this;
	r1696 := $param_0;
	 assert ($neref((r0695), ($null))==1);
	 //  @line: 575
	 call $z0697, $caughtEx1 := boolean$javaUtilEx.LinkedList$remove$2640((r0695), (r1696));
	 goto Block1061, Block1059;
Block1061:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1062;
Block1059:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1060;
Block1062:
	 //  @line: 575
	__ret := $z0697;
	 return;
Block1060:
	$Exep0 := $caughtEx1;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// <java.lang.RuntimeException: void <init>(java.lang.String)>
procedure void$java.lang.RuntimeException$$la$init$ra$$761(__this : ref, $param_0 : ref);



// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 51
// <javaUtilEx.UnsupportedOperationException: void <init>(java.lang.String)>
procedure void$javaUtilEx.UnsupportedOperationException$$la$init$ra$$2258(__this : ref, $param_0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r097 : ref;
var r198 : ref;
Block135:
	r097 := __this;
	r198 := $param_0;
	 assert ($neref((r097), ($null))==1);
	 //  @line: 52
	 call void$java.lang.RuntimeException$$la$init$ra$$761((r097), (r198));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



	 //  @line: 28
// <javaUtilEx.Content: int hashCode()>
procedure int$javaUtilEx.Content$hashCode$2587(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r0497 : ref;
var $i0498 : int;
var $i1499 : int;
Block738:
	r0497 := __this;
	 assert ($neref((r0497), ($null))==1);
	 //  @line: 29
	$i0498 := $HeapVar[r0497, int$javaUtilEx.Content$val0];
	 //  @line: 29
	$i1499 := $xorint(($i0498), (31));
	 //  @line: 29
	__ret := $i1499;
	 return;
}


	 //  @line: 330
// <javaUtilEx.AbstractList$Itr: void <init>(javaUtilEx.AbstractList)>
procedure void$javaUtilEx.AbstractList$Itr$$la$init$ra$$2534(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $i0221 : int;
var $r2220 : ref;
var r1219 : ref;
var r0218 : ref;
Block347:
	r0218 := __this;
	r1219 := $param_0;
	 assert ($neref((r0218), ($null))==1);
	 //  @line: 331
	$HeapVar[r0218, javaUtilEx.AbstractList$javaUtilEx.AbstractList$Itr$this$0295] := r1219;
	 assert ($neref((r0218), ($null))==1);
	 //  @line: 331
	 call void$java.lang.Object$$la$init$ra$$28((r0218));
	 assert ($neref((r0218), ($null))==1);
	 //  @line: 335
	$HeapVar[r0218, int$javaUtilEx.AbstractList$Itr$cursor0] := 0;
	 assert ($neref((r0218), ($null))==1);
	 //  @line: 342
	$HeapVar[r0218, int$javaUtilEx.AbstractList$Itr$lastRet0] := -1;
	 assert ($neref((r0218), ($null))==1);
	 //  @line: 349
	$r2220 := $HeapVar[r0218, javaUtilEx.AbstractList$javaUtilEx.AbstractList$Itr$this$0295];
	 assert ($neref(($r2220), ($null))==1);
	 //  @line: 349
	$i0221 := $HeapVar[$r2220, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0218), ($null))==1);
	 //  @line: 349
	$HeapVar[r0218, int$javaUtilEx.AbstractList$Itr$expectedModCount0] := $i0221;
	 return;
}


	 //  @line: 704
// <javaUtilEx.LinkedList$ListItr: void set(java.lang.Object)>
procedure void$javaUtilEx.LinkedList$ListItr$set$2685(__this : ref, $param_0 : ref) returns ($Exep1 : ref, $Exep0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r1858 : ref;
var $r2855 : ref;
var $r4857 : ref;
var r0854 : ref;
var $r3856 : ref;
var $r5859 : ref;
var $r6860 : ref;

 //temp local variables 
var $caughtEx2 : ref;

	 //  @line: 704
Block1235:
	$caughtEx2 := $null;
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block1236;
Block1236:
	r0854 := __this;
	r1858 := $param_0;
	 assert ($neref((r0854), ($null))==1);
	 //  @line: 705
	$r3856 := $HeapVar[r0854, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303];
	 assert ($neref((r0854), ($null))==1);
	 //  @line: 705
	$r2855 := $HeapVar[r0854, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305];
	 //  @line: 705
	 call $r4857 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$access$000$2669(($r2855));
	 goto Block1237;
	 //  @line: 705
Block1237:
	 goto Block1238, Block1240;
	 //  @line: 705
Block1238:
	 assume ($neref(($r3856), ($r4857))==1);
	 goto Block1239;
	 //  @line: 705
Block1240:
	 //  @line: 705
	 assume ($negInt(($neref(($r3856), ($r4857))))==1);
	 //  @line: 706
	$r6860 := $newvariable((1241));
	 assume ($neref(($newvariable((1241))), ($null))==1);
	 assert ($neref(($r6860), ($null))==1);
	 //  @line: 706
	 call void$javaUtilEx.IllegalStateException$$la$init$ra$$2574(($r6860));
	 goto Block1242;
	 //  @line: 707
Block1239:
	 assert ($neref((r0854), ($null))==1);
	 //  @line: 707
	 call $caughtEx2 := void$javaUtilEx.LinkedList$ListItr$checkForComodification$2687((r0854));
	 goto Block1243, Block1245;
	 //  @line: 705
Block1242:
	$Exep0 := $r6860;
	 return;
	 //  @line: 707
Block1243:
	 assume ($neref(($caughtEx2), ($null))==1);
	 goto Block1244;
	 //  @line: 707
Block1245:
	 assume ($eqref(($caughtEx2), ($null))==1);
	 goto Block1246;
	 //  @line: 707
Block1244:
	$Exep1 := $caughtEx2;
	 return;
	 //  @line: 707
Block1246:
	 goto Block1247;
	 //  @line: 708
Block1247:
	 assert ($neref((r0854), ($null))==1);
	 //  @line: 708
	$r5859 := $HeapVar[r0854, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$ListItr$lastReturned303];
	 assert ($neref(($r5859), ($null))==1);
	 //  @line: 708
	$HeapVar[$r5859, java.lang.Object$javaUtilEx.LinkedList$Entry$element300] := r1858;
	 return;
}


	 //  @line: 719
// <javaUtilEx.SubList$1: java.lang.Object previous()>
procedure java.lang.Object$javaUtilEx.SubList$1$previous$2697(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0919 : ref;
var $r1921 : ref;
var $r2922 : ref;
var $z0920 : int;
var $r3923 : ref;

 //temp local variables 

	 //  @line: 719
Block1319:
	$Exep0 := $null;
	 goto Block1320;
Block1320:
	r0919 := __this;
	 assert ($neref((r0919), ($null))==1);
	 //  @line: 720
	 call $z0920 := boolean$javaUtilEx.SubList$1$hasPrevious$2696((r0919));
	 goto Block1321;
	 //  @line: 720
Block1321:
	 goto Block1322, Block1324;
	 //  @line: 720
Block1322:
	 assume ($eqint(($z0920), (0))==1);
	 goto Block1323;
	 //  @line: 720
Block1324:
	 //  @line: 720
	 assume ($negInt(($eqint(($z0920), (0))))==1);
	 assert ($neref((r0919), ($null))==1);
	 //  @line: 721
	$r2922 := $HeapVar[r0919, javaUtilEx.ListIterator$javaUtilEx.SubList$1$i308];
	 assert ($neref(($r2922), ($null))==1);
	 //  @line: 721
	 call $r3923 := java.lang.Object$javaUtilEx.ListIterator$previous$2528(($r2922));
	 //  @line: 721
	__ret := $r3923;
	 return;
	 //  @line: 723
Block1323:
	 //  @line: 723
	$r1921 := $newvariable((1325));
	 assume ($neref(($newvariable((1325))), ($null))==1);
	 goto Block1326;
	 //  @line: 723
Block1326:
	 assert ($neref(($r1921), ($null))==1);
	 //  @line: 723
	 call void$javaUtilEx.NoSuchElementException$$la$init$ra$$2572(($r1921));
	 goto Block1327;
	 //  @line: 723
Block1327:
	$Exep0 := $r1921;
	 return;
}


// <javaUtilEx.Iterator: java.lang.Object next()>
procedure java.lang.Object$javaUtilEx.Iterator$next$2255(__this : ref) returns (__ret : ref);



	 //  @line: 113
// <javaUtilEx.LinkedList: void <init>(javaUtilEx.Collection)>
procedure void$javaUtilEx.LinkedList$$la$init$ra$$2630(__this : ref, $param_0 : ref) returns ($Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0533 : ref;
var r1534 : ref;

 //temp local variables 
var $freshlocal2 : int;
var $caughtEx1 : ref;

	 //  @line: 113
Block772:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block773;
Block773:
	r0533 := __this;
	r1534 := $param_0;
	 assert ($neref((r0533), ($null))==1);
	 //  @line: 114
	 call void$javaUtilEx.LinkedList$$la$init$ra$$2629((r0533));
	 assert ($neref((r0533), ($null))==1);
	 //  @line: 115
	 call $freshlocal2, $caughtEx1 := boolean$javaUtilEx.AbstractCollection$addAll$2236((r0533), (r1534));
	 goto Block776, Block774;
Block776:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block777;
Block774:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block775;
Block777:
	 return;
Block775:
	$Exep0 := $caughtEx1;
	 return;
}


	 //  @line: 41
// <javaUtilEx.UnsupportedOperationException: void <init>()>
procedure void$javaUtilEx.UnsupportedOperationException$$la$init$ra$$2257(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r096 : ref;
Block134:
	r096 := __this;
	 assert ($neref((r096), ($null))==1);
	 //  @line: 42
	 call void$java.lang.RuntimeException$$la$init$ra$$760((r096));
	 return;
}


// <javaUtilEx.ListIterator: java.lang.Object next()>
procedure java.lang.Object$javaUtilEx.ListIterator$next$2526(__this : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



	 //  @line: 719
// <javaUtilEx.LinkedList$ListItr: void checkForComodification()>
procedure void$javaUtilEx.LinkedList$ListItr$checkForComodification$2687(__this : ref) returns ($Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $i0874 : int;
var $r2876 : ref;
var $r1873 : ref;
var $i1875 : int;
var r0872 : ref;

 //temp local variables 

	 //  @line: 719
Block1177:
	$Exep0 := $null;
	 goto Block1254;
Block1254:
	r0872 := __this;
	 assert ($neref((r0872), ($null))==1);
	 //  @line: 720
	$r1873 := $HeapVar[r0872, javaUtilEx.LinkedList$javaUtilEx.LinkedList$ListItr$this$0305];
	 assert ($neref(($r1873), ($null))==1);
	 //  @line: 720
	$i1875 := $HeapVar[$r1873, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0872), ($null))==1);
	 //  @line: 720
	$i0874 := $HeapVar[r0872, int$javaUtilEx.LinkedList$ListItr$expectedModCount0];
	 goto Block1255;
	 //  @line: 720
Block1255:
	 goto Block1258, Block1256;
	 //  @line: 720
Block1258:
	 //  @line: 720
	 assume ($negInt(($eqint(($i1875), ($i0874))))==1);
	 //  @line: 721
	$r2876 := $newvariable((1259));
	 assume ($neref(($newvariable((1259))), ($null))==1);
	 assert ($neref(($r2876), ($null))==1);
	 //  @line: 721
	 call void$javaUtilEx.ConcurrentModificationException$$la$init$ra$$2570(($r2876));
	 goto Block1260;
	 //  @line: 720
Block1256:
	 assume ($eqint(($i1875), ($i0874))==1);
	 goto Block1257;
	 //  @line: 720
Block1260:
	$Exep0 := $r2876;
	 return;
	 //  @line: 722
Block1257:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// <java.lang.StringBuilder: java.lang.String toString()>
procedure java.lang.String$java.lang.StringBuilder$toString$2299(__this : ref) returns (__ret : ref);



	 //  @line: 126
// <javaUtilEx.AbstractCollection: boolean add(java.lang.Object)>
procedure boolean$javaUtilEx.AbstractCollection$add$2233(__this : ref, $param_0 : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r215 : ref;
var r117 : ref;
var r016 : ref;

 //temp local variables 

	 //  @line: 126
Block42:
	$Exep0 := $null;
	 goto Block43;
Block43:
	r016 := __this;
	r117 := $param_0;
	 //  @line: 127
	$r215 := $newvariable((44));
	 assume ($neref(($newvariable((44))), ($null))==1);
	 assert ($neref(($r215), ($null))==1);
	 //  @line: 127
	 call void$javaUtilEx.UnsupportedOperationException$$la$init$ra$$2257(($r215));
	 goto Block45;
Block45:
	$Exep0 := $r215;
	 return;
}


	 //  @line: 325
// <javaUtilEx.AbstractList: javaUtilEx.ListIterator listIterator(int)>
procedure javaUtilEx.ListIterator$javaUtilEx.AbstractList$listIterator$2495(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r1162 : ref;
var i0161 : int;
var r0160 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 325
Block158:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block237;
Block237:
	r0160 := __this;
	i0161 := $param_0;
	 assert ($neref((r0160), ($null))==1);
	 //  @line: 326
	 call $caughtEx1 := void$javaUtilEx.AbstractList$rangeCheckForAdd$2500((r0160), (i0161));
	 goto Block240, Block238;
Block240:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block241;
Block238:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block239;
Block241:
	 //  @line: 328
	$r1162 := $newvariable((242));
	 assume ($neref(($newvariable((242))), ($null))==1);
	 assert ($neref(($r1162), ($null))==1);
	 //  @line: 328
	 call void$javaUtilEx.AbstractList$ListItr$$la$init$ra$$2542(($r1162), (r0160), (i0161));
	 //  @line: 328
	__ret := $r1162;
	 return;
Block239:
	$Exep0 := $caughtEx1;
	 return;
}


	 //  @line: 124
// <javaUtilEx.LinkedList: java.lang.Object getFirst()>
procedure java.lang.Object$javaUtilEx.LinkedList$getFirst$2631(__this : ref) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0536 : ref;
var $i0537 : int;
var $r1538 : ref;
var $r4541 : ref;
var $r3540 : ref;
var $r2539 : ref;

 //temp local variables 

	 //  @line: 124
Block778:
	$Exep0 := $null;
	 goto Block779;
Block779:
	r0536 := __this;
	 assert ($neref((r0536), ($null))==1);
	 //  @line: 125
	$i0537 := $HeapVar[r0536, int$javaUtilEx.LinkedList$size0];
	 goto Block780;
	 //  @line: 125
Block780:
	 goto Block781, Block783;
	 //  @line: 125
Block781:
	 assume ($neint(($i0537), (0))==1);
	 goto Block782;
	 //  @line: 125
Block783:
	 //  @line: 125
	 assume ($negInt(($neint(($i0537), (0))))==1);
	 //  @line: 126
	$r4541 := $newvariable((784));
	 assume ($neref(($newvariable((784))), ($null))==1);
	 assert ($neref(($r4541), ($null))==1);
	 //  @line: 126
	 call void$javaUtilEx.NoSuchElementException$$la$init$ra$$2572(($r4541));
	 goto Block785;
	 //  @line: 128
Block782:
	 assert ($neref((r0536), ($null))==1);
	 //  @line: 128
	$r1538 := $HeapVar[r0536, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block786;
	 //  @line: 125
Block785:
	$Exep0 := $r4541;
	 return;
	 //  @line: 128
Block786:
	 assert ($neref(($r1538), ($null))==1);
	 //  @line: 128
	$r2539 := $HeapVar[$r1538, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 assert ($neref(($r2539), ($null))==1);
	 //  @line: 128
	$r3540 := $HeapVar[$r2539, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 //  @line: 128
	__ret := $r3540;
	 return;
}


	 //  @line: 232
// <javaUtilEx.LinkedList: boolean remove(java.lang.Object)>
procedure boolean$javaUtilEx.LinkedList$remove$2640(__this : ref, $param_0 : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $r8586 : ref;
var $r4581 : ref;
var $r7585 : ref;
var r0577 : ref;
var r10588 : ref;
var r11589 : ref;
var $r3580 : ref;
var $r6584 : ref;
var $r2578 : ref;
var r1576 : ref;
var $z0582 : int;

 //temp local variables 
var $freshlocal3 : ref;
var $caughtEx1 : ref;
var $freshlocal2 : ref;

	 //  @line: 232
Block817:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block818;
Block818:
	r0577 := __this;
	r1576 := $param_0;
	 goto Block819;
	 //  @line: 233
Block819:
	 goto Block822, Block820;
	 //  @line: 233
Block822:
	 //  @line: 233
	 assume ($negInt(($neref((r1576), ($null))))==1);
	 assert ($neref((r0577), ($null))==1);
	 //  @line: 234
	$r6584 := $HeapVar[r0577, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r6584), ($null))==1);
	 //  @line: 234
	r10588 := $HeapVar[$r6584, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block823;
	 //  @line: 233
Block820:
	 assume ($neref((r1576), ($null))==1);
	 goto Block821;
	 //  @line: 234
Block823:
	 assert ($neref((r0577), ($null))==1);
	 //  @line: 234
	$r7585 := $HeapVar[r0577, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block824;
	 //  @line: 241
Block821:
	 assert ($neref((r0577), ($null))==1);
	 //  @line: 241
	$r2578 := $HeapVar[r0577, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block838;
	 //  @line: 234
Block824:
	 goto Block827, Block825;
	 //  @line: 241
Block838:
	 assert ($neref(($r2578), ($null))==1);
	 //  @line: 241
	r11589 := $HeapVar[$r2578, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block839;
	 //  @line: 234
Block827:
	 //  @line: 234
	 assume ($negInt(($eqref((r10588), ($r7585))))==1);
	 assert ($neref((r10588), ($null))==1);
	 //  @line: 235
	$r8586 := $HeapVar[r10588, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 goto Block828;
	 //  @line: 234
Block825:
	 assume ($eqref((r10588), ($r7585))==1);
	 goto Block826;
	 //  @line: 241
Block839:
	 assert ($neref((r0577), ($null))==1);
	 //  @line: 241
	$r3580 := $HeapVar[r0577, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block840;
	 //  @line: 235
Block828:
	 goto Block829, Block831;
	 //  @line: 234
Block826:
	 goto Block837;
	 //  @line: 241
Block840:
	 goto Block841, Block842;
	 //  @line: 235
Block829:
	 assume ($neref(($r8586), ($null))==1);
	 goto Block830;
	 //  @line: 235
Block831:
	 //  @line: 235
	 assume ($negInt(($neref(($r8586), ($null))))==1);
	 assert ($neref((r0577), ($null))==1);
	 //  @line: 236
	 call $freshlocal2, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$remove$2666((r0577), (r10588));
	 goto Block832, Block834;
	 //  @line: 248
Block837:
	 //  @line: 248
	__ret := 0;
	 return;
	 //  @line: 241
Block841:
	 assume ($eqref((r11589), ($r3580))==1);
	 goto Block837;
	 //  @line: 241
Block842:
	 //  @line: 241
	 assume ($negInt(($eqref((r11589), ($r3580))))==1);
	 assert ($neref((r11589), ($null))==1);
	 //  @line: 242
	$r4581 := $HeapVar[r11589, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 assert ($neref((r1576), ($null))==1);
	 //  @line: 242
	 call $z0582 := boolean$java.lang.Object$equals$32((r1576), ($r4581));
	 goto Block843;
	 //  @line: 234
Block830:
	 assert ($neref((r10588), ($null))==1);
	 //  @line: 234
	r10588 := $HeapVar[r10588, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block836;
	 //  @line: 235
Block832:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block833;
	 //  @line: 235
Block834:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block835;
	 //  @line: 242
Block843:
	 goto Block846, Block844;
	 //  @line: 234
Block836:
	 goto Block823;
	 //  @line: 235
Block833:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 235
Block835:
	 //  @line: 237
	__ret := 1;
	 return;
	 //  @line: 242
Block846:
	 //  @line: 242
	 assume ($negInt(($eqint(($z0582), (0))))==1);
	 assert ($neref((r0577), ($null))==1);
	 //  @line: 243
	 call $freshlocal3, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$remove$2666((r0577), (r11589));
	 goto Block847, Block849;
	 //  @line: 242
Block844:
	 assume ($eqint(($z0582), (0))==1);
	 goto Block845;
	 //  @line: 242
Block847:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block848;
	 //  @line: 242
Block849:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block850;
	 //  @line: 241
Block845:
	 assert ($neref((r11589), ($null))==1);
	 //  @line: 241
	r11589 := $HeapVar[r11589, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$next301];
	 goto Block851;
	 //  @line: 242
Block848:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 242
Block850:
	 //  @line: 244
	__ret := 1;
	 return;
	 //  @line: 241
Block851:
	 goto Block839;
}


// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



	 //  @line: 621
// <javaUtilEx.SubList: void <init>(javaUtilEx.AbstractList,int,int)>
procedure void$javaUtilEx.SubList$$la$init$ra$$2549(__this : ref, $param_0 : ref, $param_1 : int, $param_2 : int) returns ($Exep0 : ref, $Exep1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i0315 : int;
var i1316 : int;
var $r3322 : ref;
var $r5324 : ref;
var r0314 : ref;
var $i2318 : int;
var $r4323 : ref;
var $i4321 : int;
var $r2320 : ref;
var $i3319 : int;
var r1317 : ref;

 //temp local variables 

	 //  @line: 621
Block243:
	$Exep1 := $null;
	$Exep0 := $null;
	 goto Block486;
Block486:
	r0314 := __this;
	r1317 := $param_0;
	i0315 := $param_1;
	i1316 := $param_2;
	 assert ($neref((r0314), ($null))==1);
	 //  @line: 622
	 call void$javaUtilEx.AbstractList$$la$init$ra$$2483((r0314));
	 goto Block487;
	 //  @line: 623
Block487:
	 goto Block490, Block488;
	 //  @line: 623
Block490:
	 //  @line: 623
	 assume ($negInt(($geint((i0315), (0))))==1);
	 //  @line: 624
	$r5324 := $newvariable((491));
	 assume ($neref(($newvariable((491))), ($null))==1);
	 assert ($neref(($r5324), ($null))==1);
	 //  @line: 624
	 call void$java.lang.IndexOutOfBoundsException$$la$init$ra$$2075(($r5324));
	 goto Block492;
	 //  @line: 623
Block488:
	 assume ($geint((i0315), (0))==1);
	 goto Block489;
	 //  @line: 623
Block492:
	$Exep0 := $r5324;
	 return;
	 //  @line: 625
Block489:
	 assert ($neref((r1317), ($null))==1);
	 //  @line: 625
	 call $i2318 := int$javaUtilEx.AbstractCollection$size$2230((r1317));
	 goto Block493;
	 //  @line: 625
Block493:
	 goto Block494, Block496;
	 //  @line: 625
Block494:
	 assume ($leint((i1316), ($i2318))==1);
	 goto Block495;
	 //  @line: 625
Block496:
	 //  @line: 625
	 assume ($negInt(($leint((i1316), ($i2318))))==1);
	 //  @line: 626
	$r4323 := $newvariable((497));
	 assume ($neref(($newvariable((497))), ($null))==1);
	 assert ($neref(($r4323), ($null))==1);
	 //  @line: 626
	 call void$java.lang.IndexOutOfBoundsException$$la$init$ra$$2075(($r4323));
	 goto Block498;
	 //  @line: 627
Block495:
	 goto Block501, Block499;
	 //  @line: 625
Block498:
	$Exep0 := $r4323;
	 return;
	 //  @line: 627
Block501:
	 //  @line: 627
	 assume ($negInt(($leint((i0315), (i1316))))==1);
	 goto Block502;
	 //  @line: 627
Block499:
	 assume ($leint((i0315), (i1316))==1);
	 goto Block500;
	 //  @line: 628
Block502:
	 //  @line: 628
	$r3322 := $newvariable((503));
	 assume ($neref(($newvariable((503))), ($null))==1);
	 assert ($neref(($r3322), ($null))==1);
	 //  @line: 628
	 call void$javaUtilEx.IllegalArgumentException$$la$init$ra$$2622(($r3322));
	 goto Block504;
	 //  @line: 629
Block500:
	 assert ($neref((r0314), ($null))==1);
	 //  @line: 629
	$HeapVar[r0314, javaUtilEx.AbstractList$javaUtilEx.SubList$l297] := r1317;
	 goto Block505;
	 //  @line: 628
Block504:
	$Exep1 := $r3322;
	 return;
	 //  @line: 630
Block505:
	 assert ($neref((r0314), ($null))==1);
	 //  @line: 630
	$HeapVar[r0314, int$javaUtilEx.SubList$offset0] := i0315;
	 //  @line: 631
	$i3319 := $subint((i1316), (i0315));
	 assert ($neref((r0314), ($null))==1);
	 //  @line: 631
	$HeapVar[r0314, int$javaUtilEx.SubList$size0] := $i3319;
	 assert ($neref((r0314), ($null))==1);
	 //  @line: 632
	$r2320 := $HeapVar[r0314, javaUtilEx.AbstractList$javaUtilEx.SubList$l297];
	 assert ($neref(($r2320), ($null))==1);
	 //  @line: 632
	$i4321 := $HeapVar[$r2320, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0314), ($null))==1);
	 //  @line: 632
	$HeapVar[r0314, int$javaUtilEx.AbstractList$modCount0] := $i4321;
	 return;
}


	 //  @line: 452
// <javaUtilEx.LinkedList: boolean offer(java.lang.Object)>
procedure boolean$javaUtilEx.LinkedList$offer$2653(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $z0674 : int;
var r0672 : ref;
var r1673 : ref;
Block1004:
	r0672 := __this;
	r1673 := $param_0;
	 assert ($neref((r0672), ($null))==1);
	 //  @line: 453
	 call $z0674 := boolean$javaUtilEx.LinkedList$add$2639((r0672), (r1673));
	 //  @line: 453
	__ret := $z0674;
	 return;
}


	 //  @line: 385
// <javaUtilEx.AbstractList$Itr: void checkForComodification()>
procedure void$javaUtilEx.AbstractList$Itr$checkForComodification$2538(__this : ref) returns ($Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0253 : ref;
var $r1254 : ref;
var $r2257 : ref;
var $i0255 : int;
var $i1256 : int;

 //temp local variables 

	 //  @line: 385
Block354:
	$Exep0 := $null;
	 goto Block396;
Block396:
	r0253 := __this;
	 assert ($neref((r0253), ($null))==1);
	 //  @line: 386
	$r1254 := $HeapVar[r0253, javaUtilEx.AbstractList$javaUtilEx.AbstractList$Itr$this$0295];
	 assert ($neref(($r1254), ($null))==1);
	 //  @line: 386
	$i1256 := $HeapVar[$r1254, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref((r0253), ($null))==1);
	 //  @line: 386
	$i0255 := $HeapVar[r0253, int$javaUtilEx.AbstractList$Itr$expectedModCount0];
	 goto Block397;
	 //  @line: 386
Block397:
	 goto Block398, Block400;
	 //  @line: 386
Block398:
	 assume ($eqint(($i1256), ($i0255))==1);
	 goto Block399;
	 //  @line: 386
Block400:
	 //  @line: 386
	 assume ($negInt(($eqint(($i1256), ($i0255))))==1);
	 //  @line: 387
	$r2257 := $newvariable((401));
	 assume ($neref(($newvariable((401))), ($null))==1);
	 assert ($neref(($r2257), ($null))==1);
	 //  @line: 387
	 call void$javaUtilEx.ConcurrentModificationException$$la$init$ra$$2570(($r2257));
	 goto Block402;
	 //  @line: 388
Block399:
	 return;
	 //  @line: 386
Block402:
	$Exep0 := $r2257;
	 return;
}


	 //  @line: 202
// <javaUtilEx.AbstractList: int lastIndexOf(java.lang.Object)>
procedure int$javaUtilEx.AbstractList$lastIndexOf$2490(__this : ref, $param_0 : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r1134 : ref;
var $i1138 : int;
var $z0135 : int;
var r0130 : ref;
var $r3136 : ref;
var $z1137 : int;
var r2133 : ref;
var $i0131 : int;
var $i2141 : int;
var $z2139 : int;
var $r4140 : ref;

 //temp local variables 
var $caughtEx1 : ref;

	 //  @line: 202
Block184:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block185;
Block185:
	r0130 := __this;
	r1134 := $param_0;
	 assert ($neref((r0130), ($null))==1);
	 //  @line: 203
	 call $i0131 := int$javaUtilEx.AbstractCollection$size$2230((r0130));
	 assert ($neref((r0130), ($null))==1);
	 //  @line: 203
	 call r2133, $caughtEx1 := javaUtilEx.ListIterator$javaUtilEx.AbstractList$listIterator$2495((r0130), ($i0131));
	 goto Block186, Block188;
Block186:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block187;
Block188:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block189;
Block187:
	$Exep0 := $caughtEx1;
	 return;
Block189:
	 goto Block190;
	 //  @line: 204
Block190:
	 goto Block191, Block193;
	 //  @line: 204
Block191:
	 assume ($neref((r1134), ($null))==1);
	 goto Block192;
	 //  @line: 204
Block193:
	 //  @line: 204
	 assume ($negInt(($neref((r1134), ($null))))==1);
	 goto Block194;
	 //  @line: 209
Block192:
	 assert ($neref((r2133), ($null))==1);
	 //  @line: 209
	 call $z0135 := boolean$javaUtilEx.ListIterator$hasPrevious$2527((r2133));
	 goto Block202;
	 //  @line: 205
Block194:
	 assert ($neref((r2133), ($null))==1);
	 //  @line: 205
	 call $z2139 := boolean$javaUtilEx.ListIterator$hasPrevious$2527((r2133));
	 goto Block195;
	 //  @line: 209
Block202:
	 goto Block204, Block203;
	 //  @line: 205
Block195:
	 goto Block196, Block198;
	 //  @line: 209
Block204:
	 //  @line: 209
	 assume ($negInt(($eqint(($z0135), (0))))==1);
	 assert ($neref((r2133), ($null))==1);
	 //  @line: 210
	 call $r3136 := java.lang.Object$javaUtilEx.ListIterator$previous$2528((r2133));
	 assert ($neref((r1134), ($null))==1);
	 //  @line: 210
	 call $z1137 := boolean$java.lang.Object$equals$32((r1134), ($r3136));
	 goto Block205;
	 //  @line: 209
Block203:
	 assume ($eqint(($z0135), (0))==1);
	 goto Block197;
	 //  @line: 205
Block196:
	 assume ($eqint(($z2139), (0))==1);
	 goto Block197;
	 //  @line: 205
Block198:
	 //  @line: 205
	 assume ($negInt(($eqint(($z2139), (0))))==1);
	 assert ($neref((r2133), ($null))==1);
	 //  @line: 206
	 call $r4140 := java.lang.Object$javaUtilEx.ListIterator$previous$2528((r2133));
	 goto Block199;
	 //  @line: 210
Block205:
	 goto Block206, Block207;
	 //  @line: 213
Block197:
	 //  @line: 213
	__ret := -1;
	 return;
	 //  @line: 206
Block199:
	 goto Block201, Block200;
	 //  @line: 210
Block206:
	 assume ($eqint(($z1137), (0))==1);
	 goto Block192;
	 //  @line: 210
Block207:
	 //  @line: 210
	 assume ($negInt(($eqint(($z1137), (0))))==1);
	 assert ($neref((r2133), ($null))==1);
	 //  @line: 211
	 call $i1138 := int$javaUtilEx.ListIterator$nextIndex$2529((r2133));
	 //  @line: 211
	__ret := $i1138;
	 return;
	 //  @line: 206
Block201:
	 //  @line: 206
	 assume ($negInt(($neref(($r4140), ($null))))==1);
	 assert ($neref((r2133), ($null))==1);
	 //  @line: 207
	 call $i2141 := int$javaUtilEx.ListIterator$nextIndex$2529((r2133));
	 //  @line: 207
	__ret := $i2141;
	 return;
	 //  @line: 206
Block200:
	 assume ($neref(($r4140), ($null))==1);
	 goto Block194;
}


	 //  @line: 160
// <javaUtilEx.AbstractList: java.lang.Object remove(int)>
procedure java.lang.Object$javaUtilEx.AbstractList$remove$2488(__this : ref, $param_0 : int) returns (__ret : ref, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var r0117 : ref;
var i0118 : int;
var $r1116 : ref;

 //temp local variables 

	 //  @line: 160
Block153:
	$Exep0 := $null;
	 goto Block154;
Block154:
	r0117 := __this;
	i0118 := $param_0;
	 //  @line: 161
	$r1116 := $newvariable((155));
	 assume ($neref(($newvariable((155))), ($null))==1);
	 assert ($neref(($r1116), ($null))==1);
	 //  @line: 161
	 call void$javaUtilEx.UnsupportedOperationException$$la$init$ra$$2257(($r1116));
	 goto Block156;
Block156:
	$Exep0 := $r1116;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


	 //  @line: 744
// <javaUtilEx.SubList$1: void add(java.lang.Object)>
procedure void$javaUtilEx.SubList$1$add$2702(__this : ref, $param_0 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r6954 : ref;
var r1948 : ref;
var $r3950 : ref;
var $r5952 : ref;
var $r4951 : ref;
var $i0953 : int;
var $r2949 : ref;
var r0947 : ref;

 //temp local variables 
var $freshlocal0 : int;

Block1332:
	r0947 := __this;
	r1948 := $param_0;
	 assert ($neref((r0947), ($null))==1);
	 //  @line: 745
	$r2949 := $HeapVar[r0947, javaUtilEx.ListIterator$javaUtilEx.SubList$1$i308];
	 assert ($neref(($r2949), ($null))==1);
	 //  @line: 745
	 call void$javaUtilEx.ListIterator$add$2533(($r2949), (r1948));
	 assert ($neref((r0947), ($null))==1);
	 //  @line: 746
	$r4951 := $HeapVar[r0947, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 assert ($neref((r0947), ($null))==1);
	 //  @line: 746
	$r3950 := $HeapVar[r0947, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 //  @line: 746
	 call $r5952 := javaUtilEx.AbstractList$javaUtilEx.SubList$access$100$2566(($r3950));
	 assert ($neref(($r5952), ($null))==1);
	 //  @line: 746
	$i0953 := $HeapVar[$r5952, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref(($r4951), ($null))==1);
	 //  @line: 746
	$HeapVar[$r4951, int$javaUtilEx.AbstractList$modCount0] := $i0953;
	 assert ($neref((r0947), ($null))==1);
	 //  @line: 747
	$r6954 := $HeapVar[r0947, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 //  @line: 747
	 call $freshlocal0 := int$javaUtilEx.SubList$access$208$2569(($r6954));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// <java.lang.Object: boolean equals(java.lang.Object)>
procedure boolean$java.lang.Object$equals$32(__this : ref, $param_0 : ref) returns (__ret : int);



	 //  @line: 587
// <javaUtilEx.LinkedList: boolean removeLastOccurrence(java.lang.Object)>
procedure boolean$javaUtilEx.LinkedList$removeLastOccurrence$2663(__this : ref, $param_0 : ref) returns (__ret : int, $Exep0 : ref)  requires ($neref((__this), ($null))==1);
 {
var $z0704 : int;
var $r4703 : ref;
var r11711 : ref;
var r0699 : ref;
var r10710 : ref;
var r1698 : ref;
var $r7707 : ref;
var $r8708 : ref;
var $r3702 : ref;
var $r6706 : ref;
var $r2700 : ref;

 //temp local variables 
var $caughtEx1 : ref;
var $freshlocal3 : ref;
var $freshlocal2 : ref;

	 //  @line: 587
Block1063:
	$caughtEx1 := $null;
	$Exep0 := $null;
	 goto Block1064;
Block1064:
	r0699 := __this;
	r1698 := $param_0;
	 goto Block1065;
	 //  @line: 588
Block1065:
	 goto Block1066, Block1068;
	 //  @line: 588
Block1066:
	 assume ($neref((r1698), ($null))==1);
	 goto Block1067;
	 //  @line: 588
Block1068:
	 //  @line: 588
	 assume ($negInt(($neref((r1698), ($null))))==1);
	 assert ($neref((r0699), ($null))==1);
	 //  @line: 589
	$r6706 := $HeapVar[r0699, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref(($r6706), ($null))==1);
	 //  @line: 589
	r10710 := $HeapVar[$r6706, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 goto Block1069;
	 //  @line: 596
Block1067:
	 assert ($neref((r0699), ($null))==1);
	 //  @line: 596
	$r2700 := $HeapVar[r0699, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block1084;
	 //  @line: 589
Block1069:
	 assert ($neref((r0699), ($null))==1);
	 //  @line: 589
	$r7707 := $HeapVar[r0699, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block1070;
	 //  @line: 596
Block1084:
	 assert ($neref(($r2700), ($null))==1);
	 //  @line: 596
	r11711 := $HeapVar[$r2700, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 goto Block1085;
	 //  @line: 589
Block1070:
	 goto Block1073, Block1071;
	 //  @line: 596
Block1085:
	 assert ($neref((r0699), ($null))==1);
	 //  @line: 596
	$r3702 := $HeapVar[r0699, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 goto Block1086;
	 //  @line: 589
Block1073:
	 //  @line: 589
	 assume ($negInt(($eqref((r10710), ($r7707))))==1);
	 assert ($neref((r10710), ($null))==1);
	 //  @line: 590
	$r8708 := $HeapVar[r10710, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 goto Block1074;
	 //  @line: 589
Block1071:
	 assume ($eqref((r10710), ($r7707))==1);
	 goto Block1072;
	 //  @line: 596
Block1086:
	 goto Block1088, Block1087;
	 //  @line: 590
Block1074:
	 goto Block1077, Block1075;
	 //  @line: 589
Block1072:
	 goto Block1083;
	 //  @line: 596
Block1088:
	 //  @line: 596
	 assume ($negInt(($eqref((r11711), ($r3702))))==1);
	 assert ($neref((r11711), ($null))==1);
	 //  @line: 597
	$r4703 := $HeapVar[r11711, java.lang.Object$javaUtilEx.LinkedList$Entry$element300];
	 assert ($neref((r1698), ($null))==1);
	 //  @line: 597
	 call $z0704 := boolean$java.lang.Object$equals$32((r1698), ($r4703));
	 goto Block1089;
	 //  @line: 596
Block1087:
	 assume ($eqref((r11711), ($r3702))==1);
	 goto Block1083;
	 //  @line: 590
Block1077:
	 //  @line: 590
	 assume ($negInt(($neref(($r8708), ($null))))==1);
	 assert ($neref((r0699), ($null))==1);
	 //  @line: 591
	 call $freshlocal2, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$remove$2666((r0699), (r10710));
	 goto Block1078, Block1080;
	 //  @line: 590
Block1075:
	 assume ($neref(($r8708), ($null))==1);
	 goto Block1076;
	 //  @line: 603
Block1083:
	 //  @line: 603
	__ret := 0;
	 return;
	 //  @line: 597
Block1089:
	 goto Block1090, Block1092;
	 //  @line: 590
Block1078:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1079;
	 //  @line: 590
Block1080:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1081;
	 //  @line: 589
Block1076:
	 assert ($neref((r10710), ($null))==1);
	 //  @line: 589
	r10710 := $HeapVar[r10710, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 goto Block1082;
	 //  @line: 597
Block1090:
	 assume ($eqint(($z0704), (0))==1);
	 goto Block1091;
	 //  @line: 597
Block1092:
	 //  @line: 597
	 assume ($negInt(($eqint(($z0704), (0))))==1);
	 assert ($neref((r0699), ($null))==1);
	 //  @line: 598
	 call $freshlocal3, $caughtEx1 := java.lang.Object$javaUtilEx.LinkedList$remove$2666((r0699), (r11711));
	 goto Block1093, Block1095;
	 //  @line: 590
Block1079:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 590
Block1081:
	 //  @line: 592
	__ret := 1;
	 return;
	 //  @line: 589
Block1082:
	 goto Block1069;
	 //  @line: 596
Block1091:
	 assert ($neref((r11711), ($null))==1);
	 //  @line: 596
	r11711 := $HeapVar[r11711, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$Entry$previous302];
	 goto Block1097;
	 //  @line: 597
Block1093:
	 assume ($neref(($caughtEx1), ($null))==1);
	 goto Block1094;
	 //  @line: 597
Block1095:
	 assume ($eqref(($caughtEx1), ($null))==1);
	 goto Block1096;
	 //  @line: 596
Block1097:
	 goto Block1085;
	 //  @line: 597
Block1094:
	$Exep0 := $caughtEx1;
	 return;
	 //  @line: 597
Block1096:
	 //  @line: 599
	__ret := 1;
	 return;
}


	 //  @line: 734
// <javaUtilEx.SubList$1: void remove()>
procedure void$javaUtilEx.SubList$1$remove$2700(__this : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var $r5942 : ref;
var r0936 : ref;
var $r3939 : ref;
var $r2938 : ref;
var $r4940 : ref;
var $i0941 : int;
var $r1937 : ref;

 //temp local variables 
var $freshlocal0 : int;

Block1330:
	r0936 := __this;
	 assert ($neref((r0936), ($null))==1);
	 //  @line: 735
	$r1937 := $HeapVar[r0936, javaUtilEx.ListIterator$javaUtilEx.SubList$1$i308];
	 assert ($neref(($r1937), ($null))==1);
	 //  @line: 735
	 call void$javaUtilEx.ListIterator$remove$2531(($r1937));
	 assert ($neref((r0936), ($null))==1);
	 //  @line: 736
	$r3939 := $HeapVar[r0936, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 assert ($neref((r0936), ($null))==1);
	 //  @line: 736
	$r2938 := $HeapVar[r0936, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 //  @line: 736
	 call $r4940 := javaUtilEx.AbstractList$javaUtilEx.SubList$access$100$2566(($r2938));
	 assert ($neref(($r4940), ($null))==1);
	 //  @line: 736
	$i0941 := $HeapVar[$r4940, int$javaUtilEx.AbstractList$modCount0];
	 assert ($neref(($r3939), ($null))==1);
	 //  @line: 736
	$HeapVar[$r3939, int$javaUtilEx.AbstractList$modCount0] := $i0941;
	 assert ($neref((r0936), ($null))==1);
	 //  @line: 737
	$r5942 := $HeapVar[r0936, javaUtilEx.SubList$javaUtilEx.SubList$1$this$0309];
	 //  @line: 737
	 call $freshlocal0 := int$javaUtilEx.SubList$access$210$2568(($r5942));
	 return;
}


	 //  @line: 288
// <javaUtilEx.AbstractList: javaUtilEx.Iterator iterator()>
procedure javaUtilEx.Iterator$javaUtilEx.AbstractList$iterator$2493(__this : ref) returns (__ret : ref)  requires ($neref((__this), ($null))==1);
 {
var r0157 : ref;
var $r1156 : ref;
Block230:
	r0157 := __this;
	 //  @line: 289
	$r1156 := $newvariable((231));
	 assume ($neref(($newvariable((231))), ($null))==1);
	 assert ($neref(($r1156), ($null))==1);
	 //  @line: 289
	 call void$javaUtilEx.AbstractList$Itr$$la$init$ra$$2539(($r1156), (r0157), ($null));
	 //  @line: 289
	__ret := $r1156;
	 return;
}


	 //  @line: 146
// <javaUtilEx.AbstractCollection: boolean remove(java.lang.Object)>
procedure boolean$javaUtilEx.AbstractCollection$remove$2234(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $z225 : int;
var r018 : ref;
var $z022 : int;
var $r426 : ref;
var $r323 : ref;
var $z124 : int;
var r220 : ref;
var r121 : ref;
Block46:
	r018 := __this;
	r121 := $param_0;
	 assert ($neref((r018), ($null))==1);
	 //  @line: 147
	 call r220 := javaUtilEx.Iterator$javaUtilEx.AbstractCollection$iterator$2229((r018));
	 goto Block47;
	 //  @line: 148
Block47:
	 goto Block50, Block48;
	 //  @line: 148
Block50:
	 //  @line: 148
	 assume ($negInt(($neref((r121), ($null))))==1);
	 goto Block51;
	 //  @line: 148
Block48:
	 assume ($neref((r121), ($null))==1);
	 goto Block49;
	 //  @line: 149
Block51:
	 assert ($neref((r220), ($null))==1);
	 //  @line: 149
	 call $z225 := boolean$javaUtilEx.Iterator$hasNext$2254((r220));
	 goto Block52;
	 //  @line: 156
Block49:
	 assert ($neref((r220), ($null))==1);
	 //  @line: 156
	 call $z022 := boolean$javaUtilEx.Iterator$hasNext$2254((r220));
	 goto Block59;
	 //  @line: 149
Block52:
	 goto Block55, Block53;
	 //  @line: 156
Block59:
	 goto Block61, Block60;
	 //  @line: 149
Block55:
	 //  @line: 149
	 assume ($negInt(($eqint(($z225), (0))))==1);
	 assert ($neref((r220), ($null))==1);
	 //  @line: 150
	 call $r426 := java.lang.Object$javaUtilEx.Iterator$next$2255((r220));
	 goto Block56;
	 //  @line: 149
Block53:
	 assume ($eqint(($z225), (0))==1);
	 goto Block54;
	 //  @line: 156
Block61:
	 //  @line: 156
	 assume ($negInt(($eqint(($z022), (0))))==1);
	 assert ($neref((r220), ($null))==1);
	 //  @line: 157
	 call $r323 := java.lang.Object$javaUtilEx.Iterator$next$2255((r220));
	 assert ($neref((r121), ($null))==1);
	 //  @line: 157
	 call $z124 := boolean$java.lang.Object$equals$32((r121), ($r323));
	 goto Block62;
	 //  @line: 156
Block60:
	 assume ($eqint(($z022), (0))==1);
	 goto Block54;
	 //  @line: 150
Block56:
	 goto Block58, Block57;
	 //  @line: 163
Block54:
	 //  @line: 163
	__ret := 0;
	 return;
	 //  @line: 157
Block62:
	 goto Block63, Block64;
	 //  @line: 150
Block58:
	 //  @line: 150
	 assume ($negInt(($neref(($r426), ($null))))==1);
	 assert ($neref((r220), ($null))==1);
	 //  @line: 151
	 call void$javaUtilEx.Iterator$remove$2256((r220));
	 //  @line: 152
	__ret := 1;
	 return;
	 //  @line: 150
Block57:
	 assume ($neref(($r426), ($null))==1);
	 goto Block51;
	 //  @line: 157
Block63:
	 assume ($eqint(($z124), (0))==1);
	 goto Block49;
	 //  @line: 157
Block64:
	 //  @line: 157
	 assume ($negInt(($eqint(($z124), (0))))==1);
	 assert ($neref((r220), ($null))==1);
	 //  @line: 158
	 call void$javaUtilEx.Iterator$remove$2256((r220));
	 //  @line: 159
	__ret := 1;
	 return;
}


	 //  @line: 90
// <javaUtilEx.LinkedList: int access$100(javaUtilEx.LinkedList)>
procedure int$javaUtilEx.LinkedList$access$100$2670($param_0 : ref) returns (__ret : int) {
var $i0757 : int;
var r0756 : ref;
Block1133:
	r0756 := $param_0;
	 assert ($neref((r0756), ($null))==1);
	 //  @line: 91
	$i0757 := $HeapVar[r0756, int$javaUtilEx.LinkedList$size0];
	 //  @line: 91
	__ret := $i0757;
	 return;
}


	 //  @line: 44
// <javaUtilEx.NoSuchElementException: void <init>()>
procedure void$javaUtilEx.NoSuchElementException$$la$init$ra$$2572(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0432 : ref;
Block684:
	r0432 := __this;
	 assert ($neref((r0432), ($null))==1);
	 //  @line: 45
	 call void$java.lang.RuntimeException$$la$init$ra$$760((r0432));
	 return;
}


	 //  @line: 214
// <javaUtilEx.LinkedList: boolean add(java.lang.Object)>
procedure boolean$javaUtilEx.LinkedList$add$2639(__this : ref, $param_0 : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var $r2574 : ref;
var r1573 : ref;
var r0572 : ref;

 //temp local variables 
var $freshlocal0 : ref;

Block816:
	r0572 := __this;
	r1573 := $param_0;
	 assert ($neref((r0572), ($null))==1);
	 //  @line: 215
	$r2574 := $HeapVar[r0572, javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$header298];
	 assert ($neref((r0572), ($null))==1);
	 //  @line: 215
	 call $freshlocal0 := javaUtilEx.LinkedList$Entry$javaUtilEx.LinkedList$addBefore$2665((r0572), (r1573), ($r2574));
	 //  @line: 216
	__ret := 1;
	 return;
}


