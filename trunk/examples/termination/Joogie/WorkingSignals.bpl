type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var int$Transition$time0 : Field int;
var java.lang.String$lp$$rp$$Random$args256 : [int]ref;
var Transition$Transition$next255 : Field ref;
var Transition$Signal$transitions254 : Field ref;
var int$Random$index0 : int;
var boolean$Signal$initialValue0 : Field int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 59
// <WorkingSignals: Transition xorTransitions(Transition,Transition)>
procedure Transition$WorkingSignals$xorTransitions$2236($param_0 : ref, $param_1 : ref) returns (__ret : ref) {
var $r354 : ref;
var i152 : int;
var $r859 : ref;
var $r657 : ref;
var $r1061 : ref;
var $r758 : ref;
var r150 : ref;
var $r556 : ref;
var r049 : ref;
var $r960 : ref;
var $r455 : ref;
var $r253 : ref;
var i051 : int;
Block79:
	r049 := $param_0;
	r150 := $param_1;
	 goto Block80;
	 //  @line: 60
Block80:
	 goto Block81, Block83;
	 //  @line: 60
Block81:
	 assume ($neref((r049), ($null))==1);
	 goto Block82;
	 //  @line: 60
Block83:
	 //  @line: 60
	 assume ($negInt(($neref((r049), ($null))))==1);
	 //  @line: 61
	__ret := r150;
	 return;
	 //  @line: 62
Block82:
	 goto Block86, Block84;
	 //  @line: 62
Block86:
	 //  @line: 62
	 assume ($negInt(($neref((r150), ($null))))==1);
	 goto Block87;
	 //  @line: 62
Block84:
	 assume ($neref((r150), ($null))==1);
	 goto Block85;
	 //  @line: 63
Block87:
	 //  @line: 63
	__ret := r049;
	 return;
	 //  @line: 65
Block85:
	 assert ($neref((r049), ($null))==1);
	 //  @line: 65
	i051 := $HeapVar[r049, int$Transition$time0];
	 goto Block88;
	 //  @line: 66
Block88:
	 assert ($neref((r150), ($null))==1);
	 //  @line: 66
	i152 := $HeapVar[r150, int$Transition$time0];
	 goto Block89;
	 //  @line: 67
Block89:
	 goto Block90, Block92;
	 //  @line: 67
Block90:
	 assume ($geint((i051), (i152))==1);
	 goto Block91;
	 //  @line: 67
Block92:
	 //  @line: 67
	 assume ($negInt(($geint((i051), (i152))))==1);
	 //  @line: 68
	$r859 := $newvariable((93));
	 assume ($neref(($newvariable((93))), ($null))==1);
	 assert ($neref((r049), ($null))==1);
	 //  @line: 68
	$r960 := $HeapVar[r049, Transition$Transition$next255];
	 //  @line: 68
	 call $r1061 := Transition$WorkingSignals$xorTransitions$2236(($r960), (r150));
	 assert ($neref(($r859), ($null))==1);
	 //  @line: 68
	 call void$Transition$$la$init$ra$$2246(($r859), (i051), ($r1061));
	 //  @line: 68
	__ret := $r859;
	 return;
	 //  @line: 70
Block91:
	 goto Block96, Block94;
	 //  @line: 70
Block96:
	 //  @line: 70
	 assume ($negInt(($geint((i152), (i051))))==1);
	 goto Block97;
	 //  @line: 70
Block94:
	 assume ($geint((i152), (i051))==1);
	 goto Block95;
	 //  @line: 71
Block97:
	 //  @line: 71
	$r556 := $newvariable((98));
	 assume ($neref(($newvariable((98))), ($null))==1);
	 assert ($neref((r150), ($null))==1);
	 //  @line: 71
	$r657 := $HeapVar[r150, Transition$Transition$next255];
	 //  @line: 71
	 call $r758 := Transition$WorkingSignals$xorTransitions$2236((r049), ($r657));
	 assert ($neref(($r556), ($null))==1);
	 //  @line: 71
	 call void$Transition$$la$init$ra$$2246(($r556), (i152), ($r758));
	 //  @line: 71
	__ret := $r556;
	 return;
	 //  @line: 74
Block95:
	 assert ($neref((r049), ($null))==1);
	 //  @line: 74
	$r354 := $HeapVar[r049, Transition$Transition$next255];
	 goto Block99;
	 //  @line: 74
Block99:
	 assert ($neref((r150), ($null))==1);
	 //  @line: 74
	$r253 := $HeapVar[r150, Transition$Transition$next255];
	 //  @line: 74
	 call $r455 := Transition$WorkingSignals$xorTransitions$2236(($r354), ($r253));
	 //  @line: 74
	__ret := $r455;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 110
// <WorkingSignals: void testValues(Signal)>
procedure void$WorkingSignals$testValues$2241($param_0 : ref)
  modifies $intArrSize;
 {
var r1100 : [int]int;
var $i0102 : int;
var r0103 : ref;
var i1104 : int;
var $r299 : [int]int;
Block138:
	r0103 := $param_0;
	 //  @line: 111
	$r299 := $reftointarr(($newvariable((139))));
	$intArrSize[$reftointarr(($newvariable((139))))[$arrSizeIdx]] := 6;
	 assume ($negInt(($eqintarray(($reftointarr(($newvariable((139))))), ($intArrNull))))==1);
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($intArrSize[$r299[$arrSizeIdx]]))==1);
	 //  @line: 111
	$r299[0] := -1;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($intArrSize[$r299[$arrSizeIdx]]))==1);
	 //  @line: 111
	$r299[1] := 0;
	 assert ($geint((2), (0))==1);
	 assert ($ltint((2), ($intArrSize[$r299[$arrSizeIdx]]))==1);
	 //  @line: 111
	$r299[2] := 1;
	 assert ($geint((3), (0))==1);
	 assert ($ltint((3), ($intArrSize[$r299[$arrSizeIdx]]))==1);
	 //  @line: 111
	$r299[3] := 2;
	 assert ($geint((4), (0))==1);
	 assert ($ltint((4), ($intArrSize[$r299[$arrSizeIdx]]))==1);
	 //  @line: 111
	$r299[4] := 4;
	 assert ($geint((5), (0))==1);
	 assert ($ltint((5), ($intArrSize[$r299[$arrSizeIdx]]))==1);
	 //  @line: 111
	$r299[5] := 6;
	 //  @line: 111
	r1100 := $r299;
	 //  @line: 112
	i1104 := 0;
	 goto Block140;
	 //  @line: 112
Block140:
	 //  @line: 112
	$i0102 := $intArrSize[r1100[$arrSizeIdx]];
	 goto Block141;
	 //  @line: 112
Block141:
	 goto Block142, Block144;
	 //  @line: 112
Block142:
	 assume ($geint((i1104), ($i0102))==1);
	 goto Block143;
	 //  @line: 112
Block144:
	 //  @line: 112
	 assume ($negInt(($geint((i1104), ($i0102))))==1);
	 //  @line: 115
	i1104 := $addint((i1104), (1));
	 goto Block140;
	 //  @line: 115
Block143:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 7
// <WorkingSignals: boolean valueAt(Signal,int)>
procedure boolean$WorkingSignals$valueAt$2230($param_0 : ref, $param_1 : int) returns (__ret : int) {
var r08 : ref;
var z014 : int;
var $i112 : int;
var $z116 : int;
var r115 : ref;
var i011 : int;
Block25:
	r08 := $param_0;
	i011 := $param_1;
	 assert ($neref((r08), ($null))==1);
	 //  @line: 8
	z014 := $HeapVar[r08, boolean$Signal$initialValue0];
	 assert ($neref((r08), ($null))==1);
	 //  @line: 9
	r115 := $HeapVar[r08, Transition$Signal$transitions254];
	 goto Block26;
	 //  @line: 10
Block26:
	 goto Block27, Block29;
	 //  @line: 10
Block27:
	 assume ($eqref((r115), ($null))==1);
	 goto Block28;
	 //  @line: 10
Block29:
	 //  @line: 10
	 assume ($negInt(($eqref((r115), ($null))))==1);
	 assert ($neref((r115), ($null))==1);
	 //  @line: 11
	$i112 := $HeapVar[r115, int$Transition$time0];
	 goto Block30;
	 //  @line: 16
Block28:
	 //  @line: 16
	__ret := z014;
	 return;
	 //  @line: 11
Block30:
	 goto Block33, Block31;
	 //  @line: 11
Block33:
	 //  @line: 11
	 assume ($negInt(($geint((i011), ($i112))))==1);
	 //  @line: 12
	__ret := z014;
	 return;
	 //  @line: 11
Block31:
	 assume ($geint((i011), ($i112))==1);
	 goto Block32;
	 //  @line: 13
Block32:
	 goto Block36, Block34;
	 //  @line: 13
Block36:
	 //  @line: 13
	 assume ($negInt(($neint((z014), (0))))==1);
	 goto Block37;
	 //  @line: 13
Block34:
	 assume ($neint((z014), (0))==1);
	 goto Block35;
	 //  @line: 10
Block37:
	 //  @line: 10
	$z116 := 1;
	 goto Block38;
	 //  @line: 10
Block35:
	 //  @line: 10
	$z116 := 0;
	 goto Block38;
	 //  @line: 13
Block38:
	 //  @line: 13
	z014 := $z116;
	 goto Block39;
	 //  @line: 14
Block39:
	 assert ($neref((r115), ($null))==1);
	 //  @line: 14
	r115 := $HeapVar[r115, Transition$Transition$next255];
	 goto Block26;
}


// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 140
// <WorkingSignals: void main(java.lang.String[])>
procedure void$WorkingSignals$main$2244($param_0 : [int]ref)
  modifies $stringSize, java.lang.String$lp$$rp$$Random$args256;
 {
var $i11150 : int;
var $i8141 : int;
var r2128 : ref;
var $r14145 : ref;
var $i2126 : int;
var $r17159 : ref;
var $r13144 : ref;
var r4158 : ref;
var $i5135 : int;
var r3143 : ref;
var $r5116 : ref;
var $r8123 : ref;
var $i3127 : int;
var $i12152 : int;
var $i15157 : int;
var $r12138 : ref;
var $r15149 : ref;
var $i13154 : int;
var $r16153 : ref;
var $i0122 : int;
var $i1124 : int;
var $r11134 : ref;
var r0115 : [int]ref;
var $i4133 : int;
var r1117 : ref;
var $i14156 : int;
var $r10130 : ref;
var $r6118 : ref;
var $r7119 : ref;
var $i6137 : int;
var $i10148 : int;
var $i9142 : int;
var $r9129 : ref;
var $i7139 : int;
Block147:
	r0115 := $param_0;
	 //  @line: 141
	java.lang.String$lp$$rp$$Random$args256 := r0115;
	 //  @line: 143
	$r5116 := $newvariable((148));
	 assume ($neref(($newvariable((148))), ($null))==1);
	 assert ($neref(($r5116), ($null))==1);
	 //  @line: 143
	 call void$Signal$$la$init$ra$$2245(($r5116), (0), ($null));
	 //  @line: 143
	r1117 := $r5116;
	 //  @line: 144
	$r6118 := $newvariable((149));
	 assume ($neref(($newvariable((149))), ($null))==1);
	 //  @line: 144
	$r7119 := $newvariable((150));
	 assume ($neref(($newvariable((150))), ($null))==1);
	 //  @line: 144
	 call $i0122 := int$Random$random$2248();
	 //  @line: 144
	$i1124 := $mulint((10), ($i0122));
	 //  @line: 144
	$r8123 := $newvariable((151));
	 assume ($neref(($newvariable((151))), ($null))==1);
	 //  @line: 144
	 call $i2126 := int$Random$random$2248();
	 //  @line: 144
	$i3127 := $mulint((50), ($i2126));
	 assert ($neref(($r8123), ($null))==1);
	 //  @line: 144
	 call void$Transition$$la$init$ra$$2246(($r8123), ($i3127), ($null));
	 assert ($neref(($r7119), ($null))==1);
	 //  @line: 144
	 call void$Transition$$la$init$ra$$2246(($r7119), ($i1124), ($r8123));
	 assert ($neref(($r6118), ($null))==1);
	 //  @line: 144
	 call void$Signal$$la$init$ra$$2245(($r6118), (0), ($r7119));
	 //  @line: 144
	r2128 := $r6118;
	 //  @line: 146
	$r9129 := $newvariable((152));
	 assume ($neref(($newvariable((152))), ($null))==1);
	 //  @line: 146
	$r10130 := $newvariable((153));
	 assume ($neref(($newvariable((153))), ($null))==1);
	 //  @line: 146
	 call $i4133 := int$Random$random$2248();
	 //  @line: 146
	$i5135 := $mulint((10), ($i4133));
	 //  @line: 146
	$r11134 := $newvariable((154));
	 assume ($neref(($newvariable((154))), ($null))==1);
	 //  @line: 146
	 call $i6137 := int$Random$random$2248();
	 //  @line: 146
	$i7139 := $mulint((15), ($i6137));
	 //  @line: 146
	$r12138 := $newvariable((155));
	 assume ($neref(($newvariable((155))), ($null))==1);
	 //  @line: 146
	 call $i8141 := int$Random$random$2248();
	 //  @line: 146
	$i9142 := $mulint((30), ($i8141));
	 assert ($neref(($r12138), ($null))==1);
	 //  @line: 146
	 call void$Transition$$la$init$ra$$2246(($r12138), ($i9142), ($null));
	 assert ($neref(($r11134), ($null))==1);
	 //  @line: 146
	 call void$Transition$$la$init$ra$$2246(($r11134), ($i7139), ($r12138));
	 assert ($neref(($r10130), ($null))==1);
	 //  @line: 146
	 call void$Transition$$la$init$ra$$2246(($r10130), ($i5135), ($r11134));
	 assert ($neref(($r9129), ($null))==1);
	 //  @line: 146
	 call void$Signal$$la$init$ra$$2245(($r9129), (1), ($r10130));
	 //  @line: 146
	r3143 := $r9129;
	 //  @line: 148
	$r13144 := $newvariable((156));
	 assume ($neref(($newvariable((156))), ($null))==1);
	 //  @line: 148
	$r14145 := $newvariable((157));
	 assume ($neref(($newvariable((157))), ($null))==1);
	 //  @line: 148
	 call $i10148 := int$Random$random$2248();
	 //  @line: 148
	$i11150 := $mulint((1), ($i10148));
	 //  @line: 148
	$r15149 := $newvariable((158));
	 assume ($neref(($newvariable((158))), ($null))==1);
	 //  @line: 148
	 call $i12152 := int$Random$random$2248();
	 //  @line: 148
	$i13154 := $mulint((3), ($i12152));
	 //  @line: 148
	$r16153 := $newvariable((159));
	 assume ($neref(($newvariable((159))), ($null))==1);
	 //  @line: 148
	 call $i14156 := int$Random$random$2248();
	 //  @line: 148
	$i15157 := $mulint((4), ($i14156));
	 assert ($neref(($r16153), ($null))==1);
	 //  @line: 148
	 call void$Transition$$la$init$ra$$2246(($r16153), ($i15157), ($null));
	 assert ($neref(($r15149), ($null))==1);
	 //  @line: 148
	 call void$Transition$$la$init$ra$$2246(($r15149), ($i13154), ($r16153));
	 assert ($neref(($r14145), ($null))==1);
	 //  @line: 148
	 call void$Transition$$la$init$ra$$2246(($r14145), ($i11150), ($r15149));
	 assert ($neref(($r13144), ($null))==1);
	 //  @line: 148
	 call void$Signal$$la$init$ra$$2245(($r13144), (0), ($r14145));
	 //  @line: 148
	r4158 := $r13144;
	 //  @line: 153
	 call void$WorkingSignals$testAll$2243((r1117));
	 //  @line: 155
	 call void$WorkingSignals$testAll$2243((r2128));
	 //  @line: 157
	 call void$WorkingSignals$testAll$2243((r3143));
	 //  @line: 160
	 call $r17159 := Signal$WorkingSignals$xorSignals$2237((r2128), (r3143));
	 //  @line: 160
	 call void$WorkingSignals$print$2231(($r17159));
	 //  @line: 163
	 call void$WorkingSignals$testAll$2243((r4158));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 33
// <WorkingSignals: Transition shift(Transition,int)>
procedure Transition$WorkingSignals$shift$2232($param_0 : ref, $param_1 : int) returns (__ret : ref) {
var r024 : ref;
var $r228 : ref;
var $r125 : ref;
var i026 : int;
var $i127 : int;
var $i229 : int;
var $r330 : ref;
Block51:
	r024 := $param_0;
	i026 := $param_1;
	 goto Block52;
	 //  @line: 34
Block52:
	 goto Block55, Block53;
	 //  @line: 34
Block55:
	 //  @line: 34
	 assume ($negInt(($neref((r024), ($null))))==1);
	 //  @line: 35
	__ret := $null;
	 return;
	 //  @line: 34
Block53:
	 assume ($neref((r024), ($null))==1);
	 goto Block54;
	 //  @line: 37
Block54:
	 //  @line: 37
	$r125 := $newvariable((56));
	 assume ($neref(($newvariable((56))), ($null))==1);
	 goto Block57;
	 //  @line: 37
Block57:
	 assert ($neref((r024), ($null))==1);
	 //  @line: 37
	$i127 := $HeapVar[r024, int$Transition$time0];
	 //  @line: 37
	$i229 := $addint(($i127), (i026));
	 assert ($neref((r024), ($null))==1);
	 //  @line: 37
	$r228 := $HeapVar[r024, Transition$Transition$next255];
	 //  @line: 37
	 call $r330 := Transition$WorkingSignals$shift$2232(($r228), (i026));
	 assert ($neref(($r125), ($null))==1);
	 //  @line: 37
	 call void$Transition$$la$init$ra$$2246(($r125), ($i229), ($r330));
	 //  @line: 37
	__ret := $r125;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 54
// <WorkingSignals: boolean isWellFormed(Signal)>
procedure boolean$WorkingSignals$isWellFormed$2235($param_0 : ref) returns (__ret : int) {
var r046 : ref;
var $z048 : int;
var $r147 : ref;
Block78:
	r046 := $param_0;
	 assert ($neref((r046), ($null))==1);
	 //  @line: 55
	$r147 := $HeapVar[r046, Transition$Signal$transitions254];
	 //  @line: 55
	 call $z048 := boolean$WorkingSignals$isWellFormed$2234(($r147));
	 //  @line: 55
	__ret := $z048;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2249()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block169:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



	 //  @line: 19
// <WorkingSignals: void print(Signal)>
procedure void$WorkingSignals$print$2231($param_0 : ref) {
var r122 : ref;
var z021 : int;
var r017 : ref;
var $z123 : int;
Block40:
	r017 := $param_0;
	 assert ($neref((r017), ($null))==1);
	 //  @line: 20
	z021 := $HeapVar[r017, boolean$Signal$initialValue0];
	 assert ($neref((r017), ($null))==1);
	 //  @line: 21
	r122 := $HeapVar[r017, Transition$Signal$transitions254];
	 goto Block41;
	 //  @line: 23
Block41:
	 goto Block44, Block42;
	 //  @line: 23
Block44:
	 //  @line: 23
	 assume ($negInt(($eqref((r122), ($null))))==1);
	 goto Block45;
	 //  @line: 23
Block42:
	 assume ($eqref((r122), ($null))==1);
	 goto Block43;
	 //  @line: 26
Block45:
	 goto Block46, Block48;
	 //  @line: 30
Block43:
	 return;
	 //  @line: 26
Block46:
	 assume ($neint((z021), (0))==1);
	 goto Block47;
	 //  @line: 26
Block48:
	 //  @line: 26
	 assume ($negInt(($neint((z021), (0))))==1);
	 //  @line: 23
	$z123 := 1;
	 goto Block49;
	 //  @line: 23
Block47:
	 //  @line: 23
	$z123 := 0;
	 goto Block49;
	 //  @line: 26
Block49:
	 //  @line: 26
	z021 := $z123;
	 goto Block50;
	 //  @line: 27
Block50:
	 assert ($neref((r122), ($null))==1);
	 //  @line: 27
	r122 := $HeapVar[r122, Transition$Transition$next255];
	 goto Block41;
}


// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 41
// <WorkingSignals: Signal shift(Signal,int)>
procedure Signal$WorkingSignals$shift$2233($param_0 : ref, $param_1 : int) returns (__ret : ref) {
var $r234 : ref;
var r032 : ref;
var $r131 : ref;
var i033 : int;
var $z035 : int;
var $r336 : ref;
Block58:
	r032 := $param_0;
	i033 := $param_1;
	 //  @line: 42
	$r131 := $newvariable((59));
	 assume ($neref(($newvariable((59))), ($null))==1);
	 assert ($neref((r032), ($null))==1);
	 //  @line: 42
	$z035 := $HeapVar[r032, boolean$Signal$initialValue0];
	 assert ($neref((r032), ($null))==1);
	 //  @line: 42
	$r234 := $HeapVar[r032, Transition$Signal$transitions254];
	 //  @line: 42
	 call $r336 := Transition$WorkingSignals$shift$2232(($r234), (i033));
	 assert ($neref(($r131), ($null))==1);
	 //  @line: 42
	 call void$Signal$$la$init$ra$$2245(($r131), ($z035), ($r336));
	 //  @line: 42
	__ret := $r131;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2248() returns (__ret : int)
  modifies $stringSize, int$Random$index0;
 {
var $i2170 : int;
var $i1169 : int;
var $i4174 : int;
var $i5175 : int;
var $r2171 : [int]ref;
var r0172 : ref;
var $r1167 : [int]ref;
var $i0168 : int;
var $i3173 : int;
	 //  @line: 6
Block163:
	 //  @line: 6
	$i1169 := int$Random$index0;
	 //  @line: 6
	$r1167 := java.lang.String$lp$$rp$$Random$args256;
	 //  @line: 6
	$i0168 := $refArrSize[$r1167[$arrSizeIdx]];
	 goto Block164;
	 //  @line: 6
Block164:
	 goto Block165, Block167;
	 //  @line: 6
Block165:
	 assume ($ltint(($i1169), ($i0168))==1);
	 goto Block166;
	 //  @line: 6
Block167:
	 //  @line: 6
	 assume ($negInt(($ltint(($i1169), ($i0168))))==1);
	 //  @line: 7
	__ret := 0;
	 return;
	 //  @line: 9
Block166:
	 //  @line: 9
	$r2171 := java.lang.String$lp$$rp$$Random$args256;
	 goto Block168;
	 //  @line: 9
Block168:
	 //  @line: 9
	$i2170 := int$Random$index0;
	 assert ($geint(($i2170), (0))==1);
	 assert ($ltint(($i2170), ($refArrSize[$r2171[$arrSizeIdx]]))==1);
	 //  @line: 9
	r0172 := $r2171[$i2170];
	 //  @line: 10
	$i3173 := int$Random$index0;
	 //  @line: 10
	$i4174 := $addint(($i3173), (1));
	 //  @line: 10
	int$Random$index0 := $i4174;
	$i5175 := $stringSize[r0172];
	 //  @line: 11
	__ret := $i5175;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2247(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r0166 : ref;
Block162:
	r0166 := __this;
	 assert ($neref((r0166), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r0166));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 4
// <Transition: void <init>(int,Transition)>
procedure void$Transition$$la$init$ra$$2246(__this : ref, $param_0 : int, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r1165 : ref;
var r0163 : ref;
var i0164 : int;
Block161:
	r0163 := __this;
	i0164 := $param_0;
	r1165 := $param_1;
	 assert ($neref((r0163), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r0163));
	 assert ($neref((r0163), ($null))==1);
	 //  @line: 6
	$HeapVar[r0163, int$Transition$time0] := i0164;
	 assert ($neref((r0163), ($null))==1);
	 //  @line: 7
	$HeapVar[r0163, Transition$Transition$next255] := r1165;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// <WorkingSignals: void <init>()>
procedure void$WorkingSignals$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 78
// <WorkingSignals: Signal xorSignals(Signal,Signal)>
procedure Signal$WorkingSignals$xorSignals$2237($param_0 : ref, $param_1 : ref) returns (__ret : ref) {
var $r570 : ref;
var $r262 : ref;
var $z166 : int;
var $r468 : ref;
var $z272 : int;
var r164 : ref;
var $r367 : ref;
var r063 : ref;
var $z065 : int;
Block100:
	r063 := $param_0;
	r164 := $param_1;
	 //  @line: 79
	$r262 := $newvariable((101));
	 assume ($neref(($newvariable((101))), ($null))==1);
	 assert ($neref((r063), ($null))==1);
	 //  @line: 79
	$z166 := $HeapVar[r063, boolean$Signal$initialValue0];
	 assert ($neref((r164), ($null))==1);
	 //  @line: 79
	$z065 := $HeapVar[r164, boolean$Signal$initialValue0];
	 goto Block102;
	 //  @line: 79
Block102:
	 goto Block105, Block103;
	 //  @line: 79
Block105:
	 //  @line: 79
	 assume ($negInt(($eqint(($z166), ($z065))))==1);
	 //  @line: 79
	$z272 := 1;
	 goto Block106;
	 //  @line: 79
Block103:
	 assume ($eqint(($z166), ($z065))==1);
	 goto Block104;
	 //  @line: 79
Block106:
	 assert ($neref((r063), ($null))==1);
	 //  @line: 79
	$r468 := $HeapVar[r063, Transition$Signal$transitions254];
	 goto Block107;
	 //  @line: 79
Block104:
	 //  @line: 79
	$z272 := 0;
	 goto Block106;
	 //  @line: 79
Block107:
	 assert ($neref((r164), ($null))==1);
	 //  @line: 79
	$r367 := $HeapVar[r164, Transition$Signal$transitions254];
	 //  @line: 79
	 call $r570 := Transition$WorkingSignals$xorTransitions$2236(($r468), ($r367));
	 assert ($neref(($r262), ($null))==1);
	 //  @line: 79
	 call void$Signal$$la$init$ra$$2245(($r262), ($z272), ($r570));
	 //  @line: 79
	__ret := $r262;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 117
// <WorkingSignals: void test(Signal)>
procedure void$WorkingSignals$test$2242($param_0 : ref) {
var r0105 : ref;
Block145:
	r0105 := $param_0;
	 //  @line: 118
	 call void$WorkingSignals$print$2231((r0105));
	 //  @line: 119
	 call void$WorkingSignals$testValues$2241((r0105));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 46
// <WorkingSignals: boolean isWellFormed(Transition)>
procedure boolean$WorkingSignals$isWellFormed$2234($param_0 : ref) returns (__ret : int) {
var $z043 : int;
var $z145 : int;
var $i040 : int;
var $r138 : ref;
var $i141 : int;
var $r342 : ref;
var r037 : ref;
var $r239 : ref;
Block60:
	r037 := $param_0;
	 goto Block61;
	 //  @line: 47
Block61:
	 goto Block62, Block64;
	 //  @line: 47
Block62:
	 assume ($eqref((r037), ($null))==1);
	 goto Block63;
	 //  @line: 47
Block64:
	 //  @line: 47
	 assume ($negInt(($eqref((r037), ($null))))==1);
	 assert ($neref((r037), ($null))==1);
	 //  @line: 48
	$r138 := $HeapVar[r037, Transition$Transition$next255];
	 goto Block65;
	 //  @line: 48
Block63:
	 //  @line: 48
	__ret := 1;
	 return;
	 //  @line: 48
Block65:
	 goto Block68, Block66;
	 //  @line: 48
Block68:
	 //  @line: 48
	 assume ($negInt(($neref(($r138), ($null))))==1);
	 goto Block63;
	 //  @line: 48
Block66:
	 assume ($neref(($r138), ($null))==1);
	 goto Block67;
	 //  @line: 50
Block67:
	 assert ($neref((r037), ($null))==1);
	 //  @line: 50
	$i141 := $HeapVar[r037, int$Transition$time0];
	 goto Block69;
	 //  @line: 50
Block69:
	 assert ($neref((r037), ($null))==1);
	 //  @line: 50
	$r239 := $HeapVar[r037, Transition$Transition$next255];
	 assert ($neref(($r239), ($null))==1);
	 //  @line: 50
	$i040 := $HeapVar[$r239, int$Transition$time0];
	 goto Block70;
	 //  @line: 50
Block70:
	 goto Block71, Block73;
	 //  @line: 50
Block71:
	 assume ($geint(($i141), ($i040))==1);
	 goto Block72;
	 //  @line: 50
Block73:
	 //  @line: 50
	 assume ($negInt(($geint(($i141), ($i040))))==1);
	 assert ($neref((r037), ($null))==1);
	 //  @line: 50
	$r342 := $HeapVar[r037, Transition$Transition$next255];
	 //  @line: 50
	 call $z043 := boolean$WorkingSignals$isWellFormed$2234(($r342));
	 goto Block74;
	 //  @line: 50
Block72:
	 //  @line: 50
	$z145 := 0;
	 goto Block77;
	 //  @line: 50
Block74:
	 goto Block75, Block76;
	 //  @line: 50
Block77:
	 //  @line: 50
	__ret := $z145;
	 return;
	 //  @line: 50
Block75:
	 assume ($eqint(($z043), (0))==1);
	 goto Block72;
	 //  @line: 50
Block76:
	 //  @line: 50
	 assume ($negInt(($eqint(($z043), (0))))==1);
	 //  @line: 50
	$z145 := 1;
	 goto Block77;
}


	 //  @line: 124
// <WorkingSignals: void testAll(Signal)>
procedure void$WorkingSignals$testAll$2243($param_0 : ref) {
var r3114 : ref;
var r0106 : ref;
var r2111 : ref;
var $r5112 : ref;
var $r4109 : ref;
var r1108 : ref;
Block146:
	r0106 := $param_0;
	 //  @line: 125
	 call void$WorkingSignals$test$2242((r0106));
	 //  @line: 126
	 call r1108 := Signal$WorkingSignals$invert$2229((r0106));
	 //  @line: 127
	 call void$WorkingSignals$test$2242((r1108));
	 //  @line: 129
	 call $r4109 := Signal$WorkingSignals$xorSignals$2237((r0106), (r1108));
	 //  @line: 129
	 call void$WorkingSignals$print$2231(($r4109));
	 //  @line: 131
	 call r2111 := Signal$WorkingSignals$shift$2233((r1108), (1));
	 //  @line: 132
	 call void$WorkingSignals$test$2242((r2111));
	 //  @line: 134
	 call $r5112 := Signal$WorkingSignals$xorSignals$2237((r2111), (r1108));
	 //  @line: 134
	 call void$WorkingSignals$print$2231(($r5112));
	 //  @line: 136
	 call r3114 := Signal$WorkingSignals$renverser$2240((r2111));
	 //  @line: 137
	 call void$WorkingSignals$test$2242((r3114));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 94
// <WorkingSignals: boolean recValueAt(Signal,int)>
procedure boolean$WorkingSignals$recValueAt$2239($param_0 : ref, $param_1 : int) returns (__ret : int) {
var r081 : ref;
var $z084 : int;
var $z185 : int;
var $r183 : ref;
var i082 : int;
Block123:
	r081 := $param_0;
	i082 := $param_1;
	 assert ($neref((r081), ($null))==1);
	 //  @line: 95
	$z084 := $HeapVar[r081, boolean$Signal$initialValue0];
	 assert ($neref((r081), ($null))==1);
	 //  @line: 95
	$r183 := $HeapVar[r081, Transition$Signal$transitions254];
	 //  @line: 95
	 call $z185 := boolean$WorkingSignals$recValueAt$2238(($z084), ($r183), (i082));
	 //  @line: 95
	__ret := $z185;
	 return;
}


	 //  @line: 85
// <WorkingSignals: boolean recValueAt(boolean,Transition,int)>
procedure boolean$WorkingSignals$recValueAt$2238($param_0 : int, $param_1 : ref, $param_2 : int) returns (__ret : int) {
var i074 : int;
var $z178 : int;
var $i175 : int;
var $r177 : ref;
var z076 : int;
var r073 : ref;
var $z280 : int;
Block108:
	z076 := $param_0;
	r073 := $param_1;
	i074 := $param_2;
	 goto Block109;
	 //  @line: 86
Block109:
	 goto Block110, Block112;
	 //  @line: 86
Block110:
	 assume ($neref((r073), ($null))==1);
	 goto Block111;
	 //  @line: 86
Block112:
	 //  @line: 86
	 assume ($negInt(($neref((r073), ($null))))==1);
	 //  @line: 87
	__ret := z076;
	 return;
	 //  @line: 88
Block111:
	 assert ($neref((r073), ($null))==1);
	 //  @line: 88
	$i175 := $HeapVar[r073, int$Transition$time0];
	 goto Block113;
	 //  @line: 88
Block113:
	 goto Block114, Block116;
	 //  @line: 88
Block114:
	 assume ($geint((i074), ($i175))==1);
	 goto Block115;
	 //  @line: 88
Block116:
	 //  @line: 88
	 assume ($negInt(($geint((i074), ($i175))))==1);
	 //  @line: 89
	__ret := z076;
	 return;
	 //  @line: 91
Block115:
	 goto Block117, Block119;
	 //  @line: 91
Block117:
	 assume ($neint((z076), (0))==1);
	 goto Block118;
	 //  @line: 91
Block119:
	 //  @line: 91
	 assume ($negInt(($neint((z076), (0))))==1);
	 goto Block120;
	 //  @line: 91
Block118:
	 //  @line: 91
	$z280 := 0;
	 goto Block121;
	 //  @line: 91
Block120:
	 //  @line: 91
	$z280 := 1;
	 goto Block121;
	 //  @line: 91
Block121:
	 assert ($neref((r073), ($null))==1);
	 //  @line: 91
	$r177 := $HeapVar[r073, Transition$Transition$next255];
	 goto Block122;
	 //  @line: 91
Block122:
	 //  @line: 91
	 call $z178 := boolean$WorkingSignals$recValueAt$2238(($z280), ($r177), (i074));
	 //  @line: 91
	__ret := $z178;
	 return;
}


	 //  @line: 3
// <WorkingSignals: Signal invert(Signal)>
procedure Signal$WorkingSignals$invert$2229($param_0 : ref) returns (__ret : ref) {
var $z04 : int;
var r03 : ref;
var $r12 : ref;
var $z17 : int;
var $r25 : ref;
Block17:
	r03 := $param_0;
	 //  @line: 4
	$r12 := $newvariable((18));
	 assume ($neref(($newvariable((18))), ($null))==1);
	 assert ($neref((r03), ($null))==1);
	 //  @line: 4
	$z04 := $HeapVar[r03, boolean$Signal$initialValue0];
	 goto Block19;
	 //  @line: 4
Block19:
	 goto Block20, Block22;
	 //  @line: 4
Block20:
	 assume ($neint(($z04), (0))==1);
	 goto Block21;
	 //  @line: 4
Block22:
	 //  @line: 4
	 assume ($negInt(($neint(($z04), (0))))==1);
	 //  @line: 4
	$z17 := 1;
	 goto Block23;
	 //  @line: 4
Block21:
	 //  @line: 4
	$z17 := 0;
	 goto Block23;
	 //  @line: 4
Block23:
	 assert ($neref((r03), ($null))==1);
	 //  @line: 4
	$r25 := $HeapVar[r03, Transition$Signal$transitions254];
	 goto Block24;
	 //  @line: 4
Block24:
	 assert ($neref(($r12), ($null))==1);
	 //  @line: 4
	 call void$Signal$$la$init$ra$$2245(($r12), ($z17), ($r25));
	 //  @line: 4
	__ret := $r12;
	 return;
}


	 //  @line: 98
// <WorkingSignals: Signal renverser(Signal)>
procedure Signal$WorkingSignals$renverser$2240($param_0 : ref) returns (__ret : ref) {
var z095 : int;
var r396 : ref;
var $i092 : int;
var $r291 : ref;
var r497 : ref;
var $r190 : ref;
var $z198 : int;
var $i193 : int;
var r086 : ref;
Block124:
	r086 := $param_0;
	 assert ($neref((r086), ($null))==1);
	 //  @line: 99
	z095 := $HeapVar[r086, boolean$Signal$initialValue0];
	 assert ($neref((r086), ($null))==1);
	 //  @line: 100
	r396 := $HeapVar[r086, Transition$Signal$transitions254];
	 //  @line: 101
	r497 := $null;
	 goto Block125;
	 //  @line: 102
Block125:
	 goto Block126, Block128;
	 //  @line: 102
Block126:
	 assume ($eqref((r396), ($null))==1);
	 goto Block127;
	 //  @line: 102
Block128:
	 //  @line: 102
	 assume ($negInt(($eqref((r396), ($null))))==1);
	 //  @line: 103
	$r291 := $newvariable((129));
	 assume ($neref(($newvariable((129))), ($null))==1);
	 assert ($neref((r396), ($null))==1);
	 //  @line: 103
	$i092 := $HeapVar[r396, int$Transition$time0];
	 //  @line: 103
	$i193 := $negInt(($i092));
	 assert ($neref(($r291), ($null))==1);
	 //  @line: 103
	 call void$Transition$$la$init$ra$$2246(($r291), ($i193), (r497));
	 //  @line: 103
	r497 := $r291;
	 goto Block130;
	 //  @line: 107
Block127:
	 //  @line: 107
	$r190 := $newvariable((136));
	 assume ($neref(($newvariable((136))), ($null))==1);
	 goto Block137;
	 //  @line: 104
Block130:
	 goto Block131, Block133;
	 //  @line: 107
Block137:
	 assert ($neref(($r190), ($null))==1);
	 //  @line: 107
	 call void$Signal$$la$init$ra$$2245(($r190), (z095), (r497));
	 //  @line: 107
	__ret := $r190;
	 return;
	 //  @line: 104
Block131:
	 assume ($neint((z095), (0))==1);
	 goto Block132;
	 //  @line: 104
Block133:
	 //  @line: 104
	 assume ($negInt(($neint((z095), (0))))==1);
	 //  @line: 102
	$z198 := 1;
	 goto Block134;
	 //  @line: 102
Block132:
	 //  @line: 102
	$z198 := 0;
	 goto Block134;
	 //  @line: 104
Block134:
	 //  @line: 104
	z095 := $z198;
	 goto Block135;
	 //  @line: 105
Block135:
	 assert ($neref((r396), ($null))==1);
	 //  @line: 105
	r396 := $HeapVar[r396, Transition$Transition$next255];
	 goto Block125;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 4
// <Signal: void <init>(boolean,Transition)>
procedure void$Signal$$la$init$ra$$2245(__this : ref, $param_0 : int, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r1162 : ref;
var r0160 : ref;
var z0161 : int;
Block160:
	r0160 := __this;
	z0161 := $param_0;
	r1162 := $param_1;
	 assert ($neref((r0160), ($null))==1);
	 //  @line: 5
	 call void$java.lang.Object$$la$init$ra$$28((r0160));
	 assert ($neref((r0160), ($null))==1);
	 //  @line: 6
	$HeapVar[r0160, boolean$Signal$initialValue0] := z0161;
	 assert ($neref((r0160), ($null))==1);
	 //  @line: 7
	$HeapVar[r0160, Transition$Signal$transitions254] := r1162;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


