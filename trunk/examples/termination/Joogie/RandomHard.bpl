type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var int$RandomHard$source0 : Field int;
var int$RandomHard$nextPrimeIndex0 : Field int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



	 //  @line: 16
// <RandomHard: void <init>(int)>
procedure void$RandomHard$$la$init$ra$$2228(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i02 : int;
var r01 : ref;
Block16:
	r01 := __this;
	i02 := $param_0;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 17
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 assert ($neref((r01), ($null))==1);
	 //  @line: 18
	$HeapVar[r01, int$RandomHard$source0] := i02;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 19
	$HeapVar[r01, int$RandomHard$nextPrimeIndex0] := 1;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 74
// <RandomHard: boolean checkPrime(int)>
procedure boolean$RandomHard$checkPrime$2233($param_0 : int) returns (__ret : int) {
var i241 : int;
var $i140 : int;
var i038 : int;
Block44:
	i038 := $param_0;
	 goto Block45;
	 //  @line: 75
Block45:
	 goto Block46, Block48;
	 //  @line: 75
Block46:
	 assume ($geint((i038), (2))==1);
	 goto Block47;
	 //  @line: 75
Block48:
	 //  @line: 75
	 assume ($negInt(($geint((i038), (2))))==1);
	 //  @line: 76
	__ret := 0;
	 return;
	 //  @line: 78
Block47:
	 //  @line: 78
	i241 := 2;
	 goto Block49;
	 //  @line: 78
Block49:
	 goto Block52, Block50;
	 //  @line: 78
Block52:
	 //  @line: 78
	 assume ($negInt(($geint((i241), (i038))))==1);
	 //  @line: 79
	$i140 := $modint((i038), (i241));
	 goto Block53;
	 //  @line: 78
Block50:
	 assume ($geint((i241), (i038))==1);
	 goto Block51;
	 //  @line: 79
Block53:
	 goto Block54, Block56;
	 //  @line: 83
Block51:
	 //  @line: 83
	__ret := 1;
	 return;
	 //  @line: 79
Block54:
	 assume ($neint(($i140), (0))==1);
	 goto Block55;
	 //  @line: 79
Block56:
	 //  @line: 79
	 assume ($negInt(($neint(($i140), (0))))==1);
	 //  @line: 80
	__ret := 0;
	 return;
	 //  @line: 78
Block55:
	 //  @line: 78
	i241 := $addint((i241), (1));
	 goto Block57;
	 //  @line: 78
Block57:
	 goto Block49;
}


// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 47
// <RandomHard: int getPowerOfKInSource(int)>
procedure int$RandomHard$getPowerOfKInSource$2231(__this : ref, $param_0 : int) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var r023 : ref;
var i329 : int;
var i228 : int;
var $i127 : int;
var i026 : int;
Block29:
	r023 := __this;
	i026 := $param_0;
	 assert ($neref((r023), ($null))==1);
	 //  @line: 48
	i228 := $HeapVar[r023, int$RandomHard$source0];
	 //  @line: 49
	i329 := 0;
	 goto Block30;
	 //  @line: 50
Block30:
	 //  @line: 50
	$i127 := $modint((i228), (i026));
	 goto Block31;
	 //  @line: 50
Block31:
	 goto Block34, Block32;
	 //  @line: 50
Block34:
	 //  @line: 50
	 assume ($negInt(($neint(($i127), (0))))==1);
	 assert ($neint((i026), (0))==1);
	 //  @line: 51
	i228 := $divint((i228), (i026));
	 //  @line: 52
	i329 := $addint((i329), (1));
	 goto Block30;
	 //  @line: 50
Block32:
	 assume ($neint(($i127), (0))==1);
	 goto Block33;
	 //  @line: 54
Block33:
	 //  @line: 54
	__ret := i329;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



	 //  @line: 36
// <RandomHard: int getNext()>
procedure int$RandomHard$getNext$2230(__this : ref) returns (__ret : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i122 : int;
var $i420 : int;
var r015 : ref;
var $i319 : int;
var $i216 : int;
var i018 : int;
Block28:
	r015 := __this;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 37
	$i216 := $HeapVar[r015, int$RandomHard$nextPrimeIndex0];
	 assert ($neref((r015), ($null))==1);
	 //  @line: 37
	 call i018 := int$RandomHard$findKthPrime$2232((r015), ($i216));
	 assert ($neref((r015), ($null))==1);
	 //  @line: 38
	$i319 := $HeapVar[r015, int$RandomHard$nextPrimeIndex0];
	 //  @line: 38
	$i420 := $addint(($i319), (1));
	 assert ($neref((r015), ($null))==1);
	 //  @line: 38
	$HeapVar[r015, int$RandomHard$nextPrimeIndex0] := $i420;
	 assert ($neref((r015), ($null))==1);
	 //  @line: 39
	 call i122 := int$RandomHard$getPowerOfKInSource$2231((r015), (i018));
	 //  @line: 40
	__ret := i122;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


	 //  @line: 22
// <RandomHard: void main(java.lang.String[])>
procedure void$RandomHard$main$2229($param_0 : [int]ref)
  modifies $stringSize;
 {
var i06 : int;
var $r37 : ref;
var r18 : ref;
var i111 : int;
var r03 : [int]ref;
var $r24 : ref;
var i314 : int;
var $r49 : ref;

 //temp local variables 
var $freshlocal0 : int;

Block17:
	r03 := $param_0;
	 assert ($geint((0), (0))==1);
	 assert ($ltint((0), ($refArrSize[r03[$arrSizeIdx]]))==1);
	 //  @line: 23
	$r24 := r03[0];
	i06 := $stringSize[$r24];
	 goto Block18;
	 //  @line: 25
Block18:
	 goto Block21, Block19;
	 //  @line: 25
Block21:
	 //  @line: 25
	 assume ($negInt(($geint((i06), (1))))==1);
	 return;
	 //  @line: 25
Block19:
	 assume ($geint((i06), (1))==1);
	 goto Block20;
	 //  @line: 28
Block20:
	 //  @line: 28
	$r37 := $newvariable((22));
	 assume ($neref(($newvariable((22))), ($null))==1);
	 goto Block23;
	 //  @line: 28
Block23:
	 assert ($neref(($r37), ($null))==1);
	 //  @line: 28
	 call void$RandomHard$$la$init$ra$$2228(($r37), (i06));
	 //  @line: 28
	r18 := $r37;
	 assert ($geint((1), (0))==1);
	 assert ($ltint((1), ($refArrSize[r03[$arrSizeIdx]]))==1);
	 //  @line: 29
	$r49 := r03[1];
	i111 := $stringSize[$r49];
	 //  @line: 30
	i314 := 0;
	 goto Block24;
	 //  @line: 30
Block24:
	 goto Block27, Block25;
	 //  @line: 30
Block27:
	 //  @line: 30
	 assume ($negInt(($geint((i314), (i111))))==1);
	 assert ($neref((r18), ($null))==1);
	 //  @line: 31
	 call $freshlocal0 := int$RandomHard$getNext$2230((r18));
	 //  @line: 30
	i314 := $addint((i314), (1));
	 goto Block24;
	 //  @line: 30
Block25:
	 assume ($geint((i314), (i111))==1);
	 goto Block26;
	 //  @line: 33
Block26:
	 return;
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 58
// <RandomHard: int findKthPrime(int)>
procedure int$RandomHard$findKthPrime$2232(__this : ref, $param_0 : int) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var i032 : int;
var i136 : int;
var r035 : ref;
var z034 : int;
var i237 : int;
Block35:
	r035 := __this;
	i032 := $param_0;
	 //  @line: 59
	i136 := 0;
	 //  @line: 60
	i237 := 1;
	 goto Block36;
	 //  @line: 63
Block36:
	 goto Block39, Block37;
	 //  @line: 63
Block39:
	 //  @line: 63
	 assume ($negInt(($geint((i136), (i032))))==1);
	 //  @line: 64
	i237 := $addint((i237), (1));
	 //  @line: 65
	 call z034 := boolean$RandomHard$checkPrime$2233((i237));
	 goto Block40;
	 //  @line: 63
Block37:
	 assume ($geint((i136), (i032))==1);
	 goto Block38;
	 //  @line: 66
Block40:
	 goto Block43, Block41;
	 //  @line: 70
Block38:
	 //  @line: 70
	__ret := i237;
	 return;
	 //  @line: 66
Block43:
	 //  @line: 66
	 assume ($negInt(($eqint((z034), (0))))==1);
	 //  @line: 67
	i136 := $addint((i136), (1));
	 goto Block42;
	 //  @line: 66
Block41:
	 assume ($eqint((z034), (0))==1);
	 goto Block42;
	 //  @line: 69
Block42:
	 goto Block36;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


