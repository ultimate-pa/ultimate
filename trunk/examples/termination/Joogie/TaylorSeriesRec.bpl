type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 





// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 13
// <TaylorSeriesRec: int sin(int,int)>
procedure int$TaylorSeriesRec$sin$2231($param_0 : int, $param_1 : int) returns (__ret : int) {
var $i718 : int;
var $i1122 : int;
var $i1223 : int;
var $i1324 : int;
var $i516 : int;
var $i617 : int;
var $i415 : int;
var $i212 : int;
var $i1021 : int;
var $i819 : int;
var $i920 : int;
var $i314 : int;
var i013 : int;
var i111 : int;
Block29:
	i013 := $param_0;
	i111 := $param_1;
	 goto Block30;
	 //  @line: 14
Block30:
	 goto Block33, Block31;
	 //  @line: 14
Block33:
	 //  @line: 14
	 assume ($negInt(($gtint((i111), (0))))==1);
	 //  @line: 15
	__ret := i013;
	 return;
	 //  @line: 14
Block31:
	 assume ($gtint((i111), (0))==1);
	 goto Block32;
	 //  @line: 15
Block32:
	 //  @line: 15
	 call $i212 := int$TaylorSeriesRec$power$2229((-1), (i111));
	 goto Block34;
	 //  @line: 15
Block34:
	 //  @line: 15
	$i314 := $mulint((2), (i111));
	 //  @line: 15
	$i415 := $addint(($i314), (1));
	 //  @line: 15
	 call $i516 := int$TaylorSeriesRec$power$2229((i013), ($i415));
	 //  @line: 15
	$i819 := $mulint(($i212), ($i516));
	 //  @line: 15
	$i617 := $mulint((2), (i111));
	 //  @line: 15
	$i718 := $addint(($i617), (1));
	 //  @line: 15
	 call $i920 := int$TaylorSeriesRec$fact$2230(($i718));
	 assert ($neint(($i920), (0))==1);
	 //  @line: 15
	$i1122 := $divint(($i819), ($i920));
	 //  @line: 15
	$i1021 := $subint((i111), (1));
	 //  @line: 15
	 call $i1223 := int$TaylorSeriesRec$sin$2231((i013), ($i1021));
	 //  @line: 15
	$i1324 := $addint(($i1122), ($i1223));
	 //  @line: 15
	__ret := $i1324;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 23
// <TaylorSeriesRec: int exp(int,int)>
procedure int$TaylorSeriesRec$exp$2233($param_0 : int, $param_1 : int) returns (__ret : int) {
var $i542 : int;
var i137 : int;
var $i744 : int;
var i038 : int;
var $i643 : int;
var $i239 : int;
var $i340 : int;
var $i441 : int;
Block41:
	i038 := $param_0;
	i137 := $param_1;
	 goto Block42;
	 //  @line: 24
Block42:
	 goto Block43, Block45;
	 //  @line: 24
Block43:
	 assume ($gtint((i137), (0))==1);
	 goto Block44;
	 //  @line: 24
Block45:
	 //  @line: 24
	 assume ($negInt(($gtint((i137), (0))))==1);
	 //  @line: 25
	__ret := 1;
	 return;
	 //  @line: 25
Block44:
	 //  @line: 25
	 call $i239 := int$TaylorSeriesRec$power$2229((i038), (i137));
	 goto Block46;
	 //  @line: 25
Block46:
	 //  @line: 25
	 call $i340 := int$TaylorSeriesRec$fact$2230((i137));
	 assert ($neint(($i340), (0))==1);
	 //  @line: 25
	$i542 := $divint(($i239), ($i340));
	 //  @line: 25
	$i441 := $subint((i137), (1));
	 //  @line: 25
	 call $i643 := int$TaylorSeriesRec$exp$2233((i038), ($i441));
	 //  @line: 25
	$i744 := $addint(($i542), ($i643));
	 //  @line: 25
	__ret := $i744;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 28
// <TaylorSeriesRec: void main(java.lang.String[])>
procedure void$TaylorSeriesRec$main$2234($param_0 : [int]ref) {
var r046 : [int]ref;
var $i654 : int;
var i1058 : int;
var i1159 : int;
var $i047 : int;
var $i148 : int;
var $i350 : int;
var $i452 : int;
var $i856 : int;
var $i249 : int;

 //temp local variables 
var $freshlocal2 : int;
var $freshlocal1 : int;
var $freshlocal0 : int;

Block47:
	r046 := $param_0;
	 //  @line: 29
	i1058 := 0;
	 goto Block48;
	 //  @line: 29
Block48:
	 //  @line: 29
	$i047 := $refArrSize[r046[$arrSizeIdx]];
	 goto Block49;
	 //  @line: 29
Block49:
	 goto Block50, Block52;
	 //  @line: 29
Block50:
	 assume ($geint((i1058), ($i047))==1);
	 goto Block51;
	 //  @line: 29
Block52:
	 //  @line: 29
	 assume ($negInt(($geint((i1058), ($i047))))==1);
	 //  @line: 30
	$i148 := $modint((i1058), (2));
	 goto Block53;
	 //  @line: 34
Block51:
	 return;
	 //  @line: 30
Block53:
	 goto Block54, Block56;
	 //  @line: 30
Block54:
	 assume ($neint(($i148), (0))==1);
	 goto Block55;
	 //  @line: 30
Block56:
	 //  @line: 30
	 assume ($negInt(($neint(($i148), (0))))==1);
	 //  @line: 29
	$i856 := $refArrSize[r046[$arrSizeIdx]];
	 //  @line: 29
	 call $freshlocal0 := int$TaylorSeriesRec$sin$2231(($i856), (i1058));
	 goto Block57;
	 //  @line: 31
Block55:
	 //  @line: 31
	$i249 := $modint((i1058), (3));
	 goto Block58;
	 //  @line: 29
Block57:
	 //  @line: 29
	i1058 := $addint((i1058), (1));
	 goto Block69;
	 //  @line: 31
Block58:
	 goto Block61, Block59;
	 //  @line: 29
Block69:
	 goto Block48;
	 //  @line: 31
Block61:
	 //  @line: 31
	 assume ($negInt(($neint(($i249), (0))))==1);
	 //  @line: 29
	$i654 := $refArrSize[r046[$arrSizeIdx]];
	 //  @line: 29
	 call $freshlocal1 := int$TaylorSeriesRec$cos$2232(($i654), (i1058));
	 goto Block57;
	 //  @line: 31
Block59:
	 assume ($neint(($i249), (0))==1);
	 goto Block60;
	 //  @line: 32
Block60:
	 //  @line: 32
	$i350 := $modint((i1058), (5));
	 goto Block62;
	 //  @line: 32
Block62:
	 goto Block65, Block63;
	 //  @line: 32
Block65:
	 //  @line: 32
	 assume ($negInt(($neint(($i350), (0))))==1);
	 //  @line: 29
	$i452 := $refArrSize[r046[$arrSizeIdx]];
	 //  @line: 29
	 call $freshlocal2 := int$TaylorSeriesRec$exp$2233(($i452), (i1058));
	 goto Block57;
	 //  @line: 32
Block63:
	 assume ($neint(($i350), (0))==1);
	 goto Block64;
	 //  @line: 33
Block64:
	 //  @line: 33
	i1159 := 0;
	 goto Block66;
	 //  @line: 33
Block66:
	 goto Block68, Block67;
	 //  @line: 33
Block68:
	 //  @line: 33
	 assume ($negInt(($geint((i1159), (100))))==1);
	 //  @line: 29
	i1159 := $addint((i1159), (1));
	 goto Block66;
	 //  @line: 33
Block67:
	 assume ($geint((i1159), (100))==1);
	 goto Block57;
}


// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 18
// <TaylorSeriesRec: int cos(int,int)>
procedure int$TaylorSeriesRec$cos$2232($param_0 : int, $param_1 : int) returns (__ret : int) {
var i125 : int;
var $i328 : int;
var $i1136 : int;
var i027 : int;
var $i530 : int;
var $i429 : int;
var $i226 : int;
var $i934 : int;
var $i732 : int;
var $i1035 : int;
var $i631 : int;
var $i833 : int;
Block35:
	i027 := $param_0;
	i125 := $param_1;
	 goto Block36;
	 //  @line: 19
Block36:
	 goto Block39, Block37;
	 //  @line: 19
Block39:
	 //  @line: 19
	 assume ($negInt(($gtint((i125), (0))))==1);
	 //  @line: 20
	__ret := 1;
	 return;
	 //  @line: 19
Block37:
	 assume ($gtint((i125), (0))==1);
	 goto Block38;
	 //  @line: 20
Block38:
	 //  @line: 20
	 call $i226 := int$TaylorSeriesRec$power$2229((-1), (i125));
	 goto Block40;
	 //  @line: 20
Block40:
	 //  @line: 20
	$i328 := $mulint((2), (i125));
	 //  @line: 20
	 call $i429 := int$TaylorSeriesRec$power$2229((i027), ($i328));
	 //  @line: 20
	$i631 := $mulint(($i226), ($i429));
	 //  @line: 20
	$i530 := $mulint((2), (i125));
	 //  @line: 20
	 call $i732 := int$TaylorSeriesRec$fact$2230(($i530));
	 assert ($neint(($i732), (0))==1);
	 //  @line: 20
	$i934 := $divint(($i631), ($i732));
	 //  @line: 20
	$i833 := $subint((i125), (1));
	 //  @line: 20
	 call $i1035 := int$TaylorSeriesRec$cos$2232((i027), ($i833));
	 //  @line: 20
	$i1136 := $addint(($i934), ($i1035));
	 //  @line: 20
	__ret := $i1136;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 3
// <TaylorSeriesRec: int power(int,int)>
procedure int$TaylorSeriesRec$power$2229($param_0 : int, $param_1 : int) returns (__ret : int) {
var i03 : int;
var $i24 : int;
var $i35 : int;
var i12 : int;
var $i46 : int;
Block17:
	i03 := $param_0;
	i12 := $param_1;
	 goto Block18;
	 //  @line: 4
Block18:
	 goto Block19, Block21;
	 //  @line: 4
Block19:
	 assume ($gtint((i12), (0))==1);
	 goto Block20;
	 //  @line: 4
Block21:
	 //  @line: 4
	 assume ($negInt(($gtint((i12), (0))))==1);
	 //  @line: 5
	__ret := 1;
	 return;
	 //  @line: 5
Block20:
	 //  @line: 5
	$i24 := $subint((i12), (1));
	 goto Block22;
	 //  @line: 5
Block22:
	 //  @line: 5
	 call $i35 := int$TaylorSeriesRec$power$2229((i03), ($i24));
	 //  @line: 5
	$i46 := $mulint((i03), ($i35));
	 //  @line: 5
	__ret := $i46;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// <TaylorSeriesRec: void <init>()>
procedure void$TaylorSeriesRec$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 8
// <TaylorSeriesRec: int fact(int)>
procedure int$TaylorSeriesRec$fact$2230($param_0 : int) returns (__ret : int) {
var $i310 : int;
var i07 : int;
var $i18 : int;
var $i29 : int;
Block23:
	i07 := $param_0;
	 goto Block24;
	 //  @line: 9
Block24:
	 goto Block25, Block27;
	 //  @line: 9
Block25:
	 assume ($gtint((i07), (0))==1);
	 goto Block26;
	 //  @line: 9
Block27:
	 //  @line: 9
	 assume ($negInt(($gtint((i07), (0))))==1);
	 //  @line: 10
	__ret := 1;
	 return;
	 //  @line: 10
Block26:
	 //  @line: 10
	$i18 := $subint((i07), (1));
	 goto Block28;
	 //  @line: 10
Block28:
	 //  @line: 10
	 call $i29 := int$TaylorSeriesRec$fact$2230(($i18));
	 //  @line: 10
	$i310 := $mulint((i07), ($i29));
	 //  @line: 10
	__ret := $i310;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


