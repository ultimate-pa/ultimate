type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.String$lp$$rp$$CyclicAnalysis.Random$args255 : [int]ref;
var CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$field254 : Field ref;
var int$CyclicAnalysis.Random$index0 : int;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <CyclicAnalysis.Random: void <init>()>
procedure void$CyclicAnalysis.Random$$la$init$ra$$2233(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r027 : ref;
Block33:
	r027 := __this;
	 assert ($neref((r027), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r027));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 6
// <CyclicAnalysis.CyclicAnalysis: void main(java.lang.String[])>
procedure void$CyclicAnalysis.CyclicAnalysis$main$2229($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$CyclicAnalysis.Random$args255, $stringSize, $HeapVar;
 {
var $r23 : ref;
var $r35 : ref;
var r14 : ref;
var $i07 : int;
var r02 : [int]ref;
var $r46 : ref;
var $i18 : int;

 //temp local variables 
var $freshlocal0 : ref;
var $freshlocal1 : int;

Block17:
	r02 := $param_0;
	 //  @line: 7
	java.lang.String$lp$$rp$$CyclicAnalysis.Random$args255 := r02;
	 //  @line: 8
	$r23 := $newvariable((18));
	 assume ($neref(($newvariable((18))), ($null))==1);
	 assert ($neref(($r23), ($null))==1);
	 //  @line: 8
	 call void$CyclicAnalysis.CyclicAnalysis$$la$init$ra$$2228(($r23));
	 //  @line: 8
	r14 := $r23;
	 //  @line: 9
	$r35 := $newvariable((19));
	 assume ($neref(($newvariable((19))), ($null))==1);
	 assert ($neref(($r35), ($null))==1);
	 //  @line: 9
	 call void$CyclicAnalysis.CyclicAnalysis$$la$init$ra$$2228(($r35));
	 assert ($neref((r14), ($null))==1);
	 //  @line: 9
	$HeapVar[r14, CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$field254] := $r35;
	 assert ($neref((r14), ($null))==1);
	 //  @line: 10
	$r46 := $HeapVar[r14, CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$field254];
	 //  @line: 10
	 call $i07 := int$CyclicAnalysis.Random$random$2234();
	 assert ($neref(($r46), ($null))==1);
	 //  @line: 10
	 call void$CyclicAnalysis.CyclicAnalysis$appendNewCyclicList$2231(($r46), ($i07));
	 //  @line: 11
	 call $i18 := int$CyclicAnalysis.Random$random$2234();
	 assert ($neref((r14), ($null))==1);
	 //  @line: 11
	 call $freshlocal0 := CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$appendNewList$2232((r14), ($i18));
	 assert ($neref((r14), ($null))==1);
	 //  @line: 12
	 call $freshlocal1 := int$CyclicAnalysis.CyclicAnalysis$length$2230((r14));
	 return;
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



	 //  @line: 15
// <CyclicAnalysis.CyclicAnalysis: int length()>
procedure int$CyclicAnalysis.CyclicAnalysis$length$2230(__this : ref) returns (__ret : int)  requires ($neref((__this), ($null))==1);
 {
var i014 : int;
var r012 : ref;
var r115 : ref;
Block20:
	r012 := __this;
	 //  @line: 16
	i014 := 1;
	 assert ($neref((r012), ($null))==1);
	 //  @line: 17
	r115 := $HeapVar[r012, CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$field254];
	 goto Block21;
	 //  @line: 18
Block21:
	 goto Block22, Block24;
	 //  @line: 18
Block22:
	 assume ($eqref((r115), ($null))==1);
	 goto Block23;
	 //  @line: 18
Block24:
	 //  @line: 18
	 assume ($negInt(($eqref((r115), ($null))))==1);
	 assert ($neref((r115), ($null))==1);
	 //  @line: 19
	r115 := $HeapVar[r115, CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$field254];
	 //  @line: 20
	i014 := $addint((i014), (1));
	 goto Block21;
	 //  @line: 22
Block23:
	 //  @line: 22
	__ret := i014;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



	 //  @line: 34
// <CyclicAnalysis.CyclicAnalysis: CyclicAnalysis.CyclicAnalysis appendNewList(int)>
procedure CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$appendNewList$2232(__this : ref, $param_0 : int) returns (__ret : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var i025 : int;
var r326 : ref;
var $r224 : ref;
var $r121 : ref;
var r020 : ref;
Block26:
	r020 := __this;
	i025 := $param_0;
	 //  @line: 35
	$r121 := $newvariable((27));
	 assume ($neref(($newvariable((27))), ($null))==1);
	 assert ($neref(($r121), ($null))==1);
	 //  @line: 35
	 call void$CyclicAnalysis.CyclicAnalysis$$la$init$ra$$2228(($r121));
	 assert ($neref((r020), ($null))==1);
	 //  @line: 35
	$HeapVar[r020, CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$field254] := $r121;
	 assert ($neref((r020), ($null))==1);
	 //  @line: 36
	r326 := $HeapVar[r020, CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$field254];
	 goto Block28;
	 //  @line: 37
Block28:
	 goto Block31, Block29;
	 //  @line: 37
Block31:
	 //  @line: 37
	 assume ($negInt(($leint((i025), (1))))==1);
	 //  @line: 38
	i025 := $addint((i025), (-1));
	 //  @line: 39
	$r224 := $newvariable((32));
	 assume ($neref(($newvariable((32))), ($null))==1);
	 assert ($neref(($r224), ($null))==1);
	 //  @line: 39
	 call void$CyclicAnalysis.CyclicAnalysis$$la$init$ra$$2228(($r224));
	 assert ($neref((r326), ($null))==1);
	 //  @line: 39
	$HeapVar[r326, CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$field254] := $r224;
	 //  @line: 39
	r326 := $r224;
	 goto Block28;
	 //  @line: 37
Block29:
	 assume ($leint((i025), (1))==1);
	 goto Block30;
	 //  @line: 41
Block30:
	 //  @line: 41
	__ret := r326;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


	 //  @line: 7
// <CyclicAnalysis.Random: int random()>
procedure int$CyclicAnalysis.Random$random$2234() returns (__ret : int)
  modifies $stringSize, int$CyclicAnalysis.Random$index0;
 {
var r030 : ref;
var $i028 : int;
var $r129 : [int]ref;
var $i333 : int;
var $i131 : int;
var $i232 : int;
	 //  @line: 8
Block34:
	 //  @line: 8
	$r129 := java.lang.String$lp$$rp$$CyclicAnalysis.Random$args255;
	 //  @line: 8
	$i028 := int$CyclicAnalysis.Random$index0;
	 assert ($geint(($i028), (0))==1);
	 assert ($ltint(($i028), ($refArrSize[$r129[$arrSizeIdx]]))==1);
	 //  @line: 8
	r030 := $r129[$i028];
	 //  @line: 9
	$i131 := int$CyclicAnalysis.Random$index0;
	 //  @line: 9
	$i232 := $addint(($i131), (1));
	 //  @line: 9
	int$CyclicAnalysis.Random$index0 := $i232;
	$i333 := $stringSize[r030];
	 //  @line: 10
	__ret := $i333;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 2
// <CyclicAnalysis.CyclicAnalysis: void <init>()>
procedure void$CyclicAnalysis.CyclicAnalysis$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 3
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


	 //  @line: 25
// <CyclicAnalysis.CyclicAnalysis: void appendNewCyclicList(int)>
procedure void$CyclicAnalysis.CyclicAnalysis$appendNewCyclicList$2231(__this : ref, $param_0 : int)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r119 : ref;
var i017 : int;
var r016 : ref;
Block25:
	r016 := __this;
	i017 := $param_0;
	 assert ($neref((r016), ($null))==1);
	 //  @line: 26
	 call r119 := CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$appendNewList$2232((r016), (i017));
	 assert ($neref((r119), ($null))==1);
	 //  @line: 27
	$HeapVar[r119, CyclicAnalysis.CyclicAnalysis$CyclicAnalysis.CyclicAnalysis$field254] := r016;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 4
// <CyclicAnalysis.Random: void <clinit>()>
procedure void$CyclicAnalysis.Random$$la$clinit$ra$$2235()
  modifies int$CyclicAnalysis.Random$index0;
 {
	 //  @line: 5
Block35:
	 //  @line: 5
	int$CyclicAnalysis.Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


