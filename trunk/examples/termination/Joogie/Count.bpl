type ref;
type realVar;
type classConst;
// type Field x;
// var $HeapVar : <x>[ref, Field x]x;

const unique $null : ref ;
const unique $intArrNull : [int]int ;
const unique $realArrNull : [int]realVar ;
const unique $refArrNull : [int]ref ;

const unique $arrSizeIdx : int;
var $intArrSize : [int]int;
var $realArrSize : [realVar]int;
var $refArrSize : [ref]int;

var $stringSize : [ref]int;

//built-in axioms 
axiom ($arrSizeIdx == -1);

//note: new version doesn't put helpers in the perlude anymore//Prelude finished 



var java.lang.Object$Tree$value256 : Field ref;
var Tree$Tree$right255 : Field ref;
var int$Random$index0 : int;
var java.lang.String$lp$$rp$$Random$args257 : [int]ref;
var Tree$Tree$left254 : Field ref;


// procedure is generated by joogie.
function {:inline true} $neref(x : ref, y : ref) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $realarrtoref($param00 : [int]realVar) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $modreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $leref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $modint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $gtref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 2
// <Random: void <clinit>()>
procedure void$Random$$la$clinit$ra$$2239()
  modifies int$Random$index0;
 {
	 //  @line: 3
Block74:
	 //  @line: 3
	int$Random$index0 := 0;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $eqrealarray($param00 : [int]realVar, $param11 : [int]realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addint(x : int, y : int) returns (__ret : int) {
(x + y)
}


// procedure is generated by joogie.
function {:inline true} $subref($param00 : ref, $param11 : ref) returns (__ret : ref);



// <Random: void <init>()>
procedure void$Random$$la$init$ra$$2237(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r048 : ref;
Block72:
	r048 := __this;
	 assert ($neref((r048), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r048));
	 return;
}


	 //  @line: 5
// <Tree: void <init>(Tree,Tree)>
procedure void$Tree$$la$init$ra$$2232(__this : ref, $param_0 : ref, $param_1 : ref)
  modifies $HeapVar;
  requires ($neref((__this), ($null))==1);
 {
var r026 : ref;
var r228 : ref;
var r127 : ref;
Block41:
	r026 := __this;
	r127 := $param_0;
	r228 := $param_1;
	 assert ($neref((r026), ($null))==1);
	 //  @line: 6
	 call void$java.lang.Object$$la$init$ra$$28((r026));
	 assert ($neref((r026), ($null))==1);
	 //  @line: 7
	$HeapVar[r026, Tree$Tree$left254] := r127;
	 assert ($neref((r026), ($null))==1);
	 //  @line: 8
	$HeapVar[r026, Tree$Tree$right255] := r228;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $inttoreal($param00 : int) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negReal($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $ushrint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $refarrtoref($param00 : [int]ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $mulref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $neint(x : int, y : int) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorefarr($param00 : ref) returns (__ret : [int]ref);



// procedure is generated by joogie.
function {:inline true} $gtint(x : int, y : int) returns (__ret : int) {
if (x > y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $reftoint($param00 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $addref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $xorreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $cmpreal(x : realVar, y : realVar) returns (__ret : int) {
if ($ltreal((x), (y)) == 1) then 1 else if ($eqreal((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $addreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $gtreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 2
// <Count: void main(java.lang.String[])>
procedure void$Count$main$2229($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$Random$args257, $stringSize;
 {
var r14 : ref;
var r02 : [int]ref;

 //temp local variables 
var $freshlocal0 : int;

Block17:
	r02 := $param_0;
	 //  @line: 3
	java.lang.String$lp$$rp$$Random$args257 := r02;
	 //  @line: 4
	 call r14 := Tree$Tree$createTree$2235();
	 //  @line: 6
	 call $freshlocal0 := int$Count$count$2231((r14));
	 return;
}


	 //  @line: 5
// <Random: int random()>
procedure int$Random$random$2238() returns (__ret : int)
  modifies int$Random$index0, $stringSize;
 {
var r051 : ref;
var $i354 : int;
var $r150 : [int]ref;
var $i253 : int;
var $i049 : int;
var $i152 : int;
	 //  @line: 6
Block73:
	 //  @line: 6
	$r150 := java.lang.String$lp$$rp$$Random$args257;
	 //  @line: 6
	$i049 := int$Random$index0;
	 assert ($geint(($i049), (0))==1);
	 assert ($ltint(($i049), ($refArrSize[$r150[$arrSizeIdx]]))==1);
	 //  @line: 6
	r051 := $r150[$i049];
	 //  @line: 7
	$i152 := int$Random$index0;
	 //  @line: 7
	$i253 := $addint(($i152), (1));
	 //  @line: 7
	int$Random$index0 := $i253;
	$i354 := $stringSize[r051];
	 //  @line: 8
	__ret := $i354;
	 return;
}


// <java.lang.String: int length()>
procedure int$java.lang.String$length$59(__this : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqreal(x : realVar, y : realVar) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ltint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $newvariable($param00 : int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $divint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geint(x : int, y : int) returns (__ret : int) {
if (x >= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $mulint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $leint(x : int, y : int) returns (__ret : int) {
if (x <= y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $shlref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqrefarray($param00 : [int]ref, $param11 : [int]ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftointarr($param00 : ref) returns (__ret : [int]int);



// procedure is generated by joogie.
function {:inline true} $ltref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 10
// <Tree: void <init>()>
procedure void$Tree$$la$init$ra$$2233(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r029 : ref;
Block42:
	r029 := __this;
	 assert ($neref((r029), ($null))==1);
	 //  @line: 11
	 call void$java.lang.Object$$la$init$ra$$28((r029));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $mulreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shrref($param00 : ref, $param11 : ref) returns (__ret : int);



// <java.lang.Object: void <init>()>
procedure void$java.lang.Object$$la$init$ra$$28(__this : ref);



// procedure is generated by joogie.
function {:inline true} $ushrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $shrreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $divreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $orint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $reftorealarr($param00 : ref) returns (__ret : [int]realVar);



// procedure is generated by joogie.
function {:inline true} $cmpref(x : ref, y : ref) returns (__ret : int) {
if ($ltref((x), (y)) == 1) then 1 else if ($eqref((x), (y)) == 1) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $realtoint($param00 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $geref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $eqint(x : int, y : int) returns (__ret : int) {
if (x == y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $ushrref($param00 : ref, $param11 : ref) returns (__ret : int);



	 //  @line: 50
// <Tree: void main(java.lang.String[])>
procedure void$Tree$main$2236($param_0 : [int]ref)
  modifies java.lang.String$lp$$rp$$Random$args257, $stringSize;
 {
var r046 : [int]ref;

 //temp local variables 
var $freshlocal0 : ref;

Block71:
	r046 := $param_0;
	 //  @line: 51
	java.lang.String$lp$$rp$$Random$args257 := r046;
	 //  @line: 52
	 call $freshlocal0 := Tree$Tree$createTree$2235();
	 return;
}


// procedure is generated by joogie.
function {:inline true} $modref($param00 : ref, $param11 : ref) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $eqintarray($param00 : [int]int, $param11 : [int]int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negRef($param00 : ref) returns (__ret : int);



	 //  @line: 36
// <Count: int count(Tree)>
procedure int$Count$count$2231($param_0 : ref) returns (__ret : int) {
var r124 : ref;
var i025 : int;
var $r022 : ref;
Block31:
	r124 := $param_0;
	 //  @line: 37
	i025 := 0;
	 goto Block32;
	 //  @line: 39
Block32:
	 goto Block33, Block35;
	 //  @line: 39
Block33:
	 assume ($eqref((r124), ($null))==1);
	 goto Block34;
	 //  @line: 39
Block35:
	 //  @line: 39
	 assume ($negInt(($eqref((r124), ($null))))==1);
	 assert ($neref((r124), ($null))==1);
	 //  @line: 41
	$r022 := $HeapVar[r124, Tree$Tree$left254];
	 goto Block36;
	 //  @line: 52
Block34:
	 //  @line: 52
	__ret := i025;
	 return;
	 //  @line: 41
Block36:
	 goto Block37, Block39;
	 //  @line: 41
Block37:
	 assume ($neref(($r022), ($null))==1);
	 goto Block38;
	 //  @line: 41
Block39:
	 //  @line: 41
	 assume ($negInt(($neref(($r022), ($null))))==1);
	 //  @line: 43
	i025 := $addint((i025), (1));
	 assert ($neref((r124), ($null))==1);
	 //  @line: 44
	r124 := $HeapVar[r124, Tree$Tree$right255];
	 goto Block32;
	 //  @line: 47
Block38:
	 //  @line: 47
	 call r124 := Tree$Count$flatten$2230((r124));
	 goto Block40;
	 //  @line: 47
Block40:
	 goto Block32;
}


// procedure is generated by joogie.
function {:inline true} $lereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $nereal(x : realVar, y : realVar) returns (__ret : int) {
if (x != y) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $instanceof($param00 : ref, $param11 : classConst) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $orref($param00 : ref, $param11 : ref) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $intarrtoref($param00 : [int]int) returns (__ret : ref);



// procedure is generated by joogie.
function {:inline true} $subreal($param00 : realVar, $param11 : realVar) returns (__ret : realVar);



// procedure is generated by joogie.
function {:inline true} $shlreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $negInt(x : int) returns (__ret : int) {
if (x == 0) then 1 else 0
}


// procedure is generated by joogie.
function {:inline true} $gereal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 9
// <Count: Tree flatten(Tree)>
procedure Tree$Count$flatten$2230($param_0 : ref) returns (__ret : ref) {
var $r410 : ref;
var $r716 : ref;
var $r615 : ref;
var r113 : ref;
var $r39 : ref;
var $r817 : ref;
var $r512 : ref;
var r1019 : ref;
var r011 : ref;
var r918 : ref;
var r214 : ref;
Block18:
	r918 := $param_0;
	 //  @line: 10
	r1019 := $null;
	 goto Block19;
	 //  @line: 13
Block19:
	 goto Block22, Block20;
	 //  @line: 13
Block22:
	 //  @line: 13
	 assume ($negInt(($eqref((r918), ($null))))==1);
	 assert ($neref((r918), ($null))==1);
	 //  @line: 15
	$r39 := $HeapVar[r918, Tree$Tree$left254];
	 goto Block23;
	 //  @line: 13
Block20:
	 assume ($eqref((r918), ($null))==1);
	 goto Block21;
	 //  @line: 15
Block23:
	 goto Block26, Block24;
	 //  @line: 31
Block21:
	 //  @line: 31
	__ret := r1019;
	 return;
	 //  @line: 15
Block26:
	 //  @line: 15
	 assume ($negInt(($neref(($r39), ($null))))==1);
	 //  @line: 17
	$r817 := $newvariable((27));
	 assume ($neref(($newvariable((27))), ($null))==1);
	 assert ($neref(($r817), ($null))==1);
	 //  @line: 17
	 call void$Tree$$la$init$ra$$2232(($r817), ($null), (r1019));
	 //  @line: 17
	r1019 := $r817;
	 assert ($neref((r918), ($null))==1);
	 //  @line: 18
	r918 := $HeapVar[r918, Tree$Tree$right255];
	 goto Block19;
	 //  @line: 15
Block24:
	 assume ($neref(($r39), ($null))==1);
	 goto Block25;
	 //  @line: 21
Block25:
	 assert ($neref((r918), ($null))==1);
	 //  @line: 21
	$r410 := $HeapVar[r918, Tree$Tree$left254];
	 goto Block28;
	 //  @line: 21
Block28:
	 assert ($neref(($r410), ($null))==1);
	 //  @line: 21
	r011 := $HeapVar[$r410, Tree$Tree$left254];
	 assert ($neref((r918), ($null))==1);
	 //  @line: 22
	$r512 := $HeapVar[r918, Tree$Tree$left254];
	 assert ($neref(($r512), ($null))==1);
	 //  @line: 22
	r113 := $HeapVar[$r512, Tree$Tree$right255];
	 assert ($neref((r918), ($null))==1);
	 //  @line: 23
	r214 := $HeapVar[r918, Tree$Tree$right255];
	 //  @line: 24
	$r615 := $newvariable((29));
	 assume ($neref(($newvariable((29))), ($null))==1);
	 //  @line: 24
	$r716 := $newvariable((30));
	 assume ($neref(($newvariable((30))), ($null))==1);
	 assert ($neref(($r716), ($null))==1);
	 //  @line: 24
	 call void$Tree$$la$init$ra$$2232(($r716), (r113), (r214));
	 assert ($neref(($r615), ($null))==1);
	 //  @line: 24
	 call void$Tree$$la$init$ra$$2232(($r615), (r011), ($r716));
	 //  @line: 24
	r918 := $r615;
	 goto Block19;
}


// procedure is generated by joogie.
function {:inline true} $eqref(x : ref, y : ref) returns (__ret : int) {
if (x == y) then 1 else 0
}


	 //  @line: 14
// <Tree: Tree createNode()>
procedure Tree$Tree$createNode$2234() returns (__ret : ref)
  modifies $HeapVar;
 {
var r031 : ref;
var $r232 : ref;
var $r130 : ref;
	 //  @line: 15
Block43:
	 //  @line: 15
	$r130 := $newvariable((44));
	 assume ($neref(($newvariable((44))), ($null))==1);
	 assert ($neref(($r130), ($null))==1);
	 //  @line: 15
	 call void$Tree$$la$init$ra$$2233(($r130));
	 //  @line: 15
	r031 := $r130;
	 //  @line: 16
	$r232 := $newvariable((45));
	 assume ($neref(($newvariable((45))), ($null))==1);
	 assert ($neref(($r232), ($null))==1);
	 //  @line: 16
	 call void$java.lang.Object$$la$init$ra$$28(($r232));
	 assert ($neref((r031), ($null))==1);
	 //  @line: 16
	$HeapVar[r031, java.lang.Object$Tree$value256] := $r232;
	 //  @line: 17
	__ret := r031;
	 return;
}


// procedure is generated by joogie.
function {:inline true} $cmpint(x : int, y : int) returns (__ret : int) {
if (x < y) then 1 else if (x == y) then 0 else -1
}


// procedure is generated by joogie.
function {:inline true} $andint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $andreal($param00 : realVar, $param11 : realVar) returns (__ret : int);



	 //  @line: 20
// <Tree: Tree createTree()>
procedure Tree$Tree$createTree$2235() returns (__ret : ref)
  modifies $HeapVar;
 {
var r036 : ref;
var $r140 : ref;
var r545 : ref;
var $r342 : ref;
var i144 : int;
var $r443 : ref;
var $r241 : ref;
var i039 : int;
	 //  @line: 21
Block46:
	 //  @line: 21
	 call i144 := int$Random$random$2238();
	 goto Block47;
	 //  @line: 22
Block47:
	 goto Block48, Block50;
	 //  @line: 22
Block48:
	 assume ($neint((i144), (0))==1);
	 goto Block49;
	 //  @line: 22
Block50:
	 //  @line: 22
	 assume ($negInt(($neint((i144), (0))))==1);
	 //  @line: 23
	__ret := $null;
	 return;
	 //  @line: 25
Block49:
	 //  @line: 25
	 call r036 := Tree$Tree$createNode$2234();
	 goto Block51;
	 //  @line: 26
Block51:
	 //  @line: 26
	r545 := r036;
	 goto Block52;
	 //  @line: 28
Block52:
	 goto Block55, Block53;
	 //  @line: 28
Block55:
	 //  @line: 28
	 assume ($negInt(($leint((i144), (0))))==1);
	 //  @line: 29
	 call i039 := int$Random$random$2238();
	 goto Block56;
	 //  @line: 28
Block53:
	 assume ($leint((i144), (0))==1);
	 goto Block54;
	 //  @line: 30
Block56:
	 goto Block59, Block57;
	 //  @line: 48
Block54:
	 //  @line: 48
	__ret := r036;
	 return;
	 //  @line: 30
Block59:
	 //  @line: 30
	 assume ($negInt(($leint((i039), (0))))==1);
	 assert ($neref((r545), ($null))==1);
	 //  @line: 31
	$r342 := $HeapVar[r545, Tree$Tree$left254];
	 goto Block60;
	 //  @line: 30
Block57:
	 assume ($leint((i039), (0))==1);
	 goto Block58;
	 //  @line: 31
Block60:
	 goto Block61, Block63;
	 //  @line: 38
Block58:
	 assert ($neref((r545), ($null))==1);
	 //  @line: 38
	$r140 := $HeapVar[r545, Tree$Tree$right255];
	 goto Block66;
	 //  @line: 31
Block61:
	 assume ($neref(($r342), ($null))==1);
	 goto Block62;
	 //  @line: 31
Block63:
	 //  @line: 31
	 assume ($negInt(($neref(($r342), ($null))))==1);
	 //  @line: 32
	 call $r443 := Tree$Tree$createNode$2234();
	 assert ($neref((r545), ($null))==1);
	 //  @line: 32
	$HeapVar[r545, Tree$Tree$left254] := $r443;
	 //  @line: 33
	r545 := r036;
	 goto Block64;
	 //  @line: 38
Block66:
	 goto Block67, Block69;
	 //  @line: 35
Block62:
	 assert ($neref((r545), ($null))==1);
	 //  @line: 35
	r545 := $HeapVar[r545, Tree$Tree$left254];
	 goto Block65;
	 //  @line: 45
Block64:
	 //  @line: 45
	i144 := $addint((i144), (-1));
	 goto Block70;
	 //  @line: 38
Block67:
	 assume ($neref(($r140), ($null))==1);
	 goto Block68;
	 //  @line: 38
Block69:
	 //  @line: 38
	 assume ($negInt(($neref(($r140), ($null))))==1);
	 //  @line: 39
	 call $r241 := Tree$Tree$createNode$2234();
	 assert ($neref((r545), ($null))==1);
	 //  @line: 39
	$HeapVar[r545, Tree$Tree$right255] := $r241;
	 //  @line: 40
	r545 := r036;
	 goto Block64;
	 //  @line: 35
Block65:
	 goto Block64;
	 //  @line: 46
Block70:
	 goto Block52;
	 //  @line: 42
Block68:
	 assert ($neref((r545), ($null))==1);
	 //  @line: 42
	r545 := $HeapVar[r545, Tree$Tree$right255];
	 goto Block64;
}


// procedure is generated by joogie.
function {:inline true} $shlint($param00 : int, $param11 : int) returns (__ret : int);



// procedure is generated by joogie.
function {:inline true} $xorint($param00 : int, $param11 : int) returns (__ret : int);



// <Count: void <init>()>
procedure void$Count$$la$init$ra$$2228(__this : ref)  requires ($neref((__this), ($null))==1);
 {
var r01 : ref;
Block16:
	r01 := __this;
	 assert ($neref((r01), ($null))==1);
	 //  @line: 1
	 call void$java.lang.Object$$la$init$ra$$28((r01));
	 return;
}


// procedure is generated by joogie.
function {:inline true} $subint(x : int, y : int) returns (__ret : int) {
(x - y)
}


