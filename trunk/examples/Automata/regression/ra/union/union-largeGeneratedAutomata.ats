RabinAutomaton automaton1 = (
	alphabet = {t1 t2 t3 t4 t5 t6 t7 t8 t9 t10},
	states = {s1 s30 s7 s8 s14 s15 s16 s17 s23 s26 s3 s19 s25 s12 s2 s24 s4 s18 s28 s27 s5 s11 s6 s10 s29 s21 s20 s22 s13 s9},
	initialStates = {s1},
	acceptingStates = {s30},
	finiteStates = {s1 s7 s8 s14 s15 s16 s17 s23 s26},
	transitions = { (s3 t1 s17) (s8 t1 s19) (s25 t1 s12) (s26 t1 s2) (s3 t2 s24) (s4 t2 s18) (s14 t2 s12) (s23 t2 s28) (s27 t2 s5) (s27 t2 s28) (s28 t2 s7) (s30 t2 s14) (s3 t3 s1) (s4 t3 s11) (s6 t3 s16) (s7 t3 s2) (s7 t3 s4) (s10 t3 s8) (s11 t3 s8) (s11 t3 s24) (s11 t3 s29) (s17 t3 s18) (s21 t3 s25) (s23 t3 s14) (s23 t3 s24) (s25 t3 s10) (s29 t3 s4) (s29 t3 s14) (s30 t3 s12) (s4 t4 s20) (s12 t4 s12) (s15 t4 s21) (s16 t4 s5) (s20 t4 s5) (s21 t4 s14) (s22 t4 s2) (s24 t4 s21) (s29 t4 s22) (s1 t5 s14) (s7 t5 s12) (s7 t5 s30) (s17 t5 s29) (s20 t5 s29) (s23 t5 s2) (s23 t5 s4) (s23 t5 s12) (s2 t6 s30) (s5 t6 s13) (s6 t6 s20) (s14 t6 s6) (s16 t6 s16) (s18 t6 s28) (s21 t6 s14) (s21 t6 s23) (s22 t6 s3) (s28 t6 s28) (s1 t7 s9) (s4 t7 s10) (s10 t7 s7) (s16 t7 s13) (s18 t7 s9) (s26 t7 s8) (s26 t7 s26) (s29 t7 s5) (s8 t8 s27) (s25 t8 s27) (s27 t8 s21) (s28 t8 s3) (s1 t9 s30) (s3 t9 s24) (s6 t9 s14) (s12 t9 s12) (s16 t9 s1) (s17 t9 s15) (s19 t9 s13) (s21 t9 s14) (s30 t9 s21) (s1 t10 s3) (s2 t10 s19) (s5 t10 s19) (s8 t10 s6) (s16 t10 s4) (s18 t10 s24) (s20 t10 s4) (s22 t10 s25) (s23 t10 s20) }
);

RabinAutomaton automaton2 = (
	alphabet = {t1 t2 t3 t4 t5 t6 t7 t8 t9 t10},
	states = {s1 s9 s24 s28 s30 s51 s72 s73 s7 s15 s16 s19 s27 s34 s76 s90 s17 s20 s21 s22 s25 s31 s36 s37 s43 s46 s47 s52 s54 s56 s57 s67 s75 s79 s80 s81 s82 s83 s85 s87 s93 s95 s97 s88 s3 s6 s8 s10 s40 s11 s2 s13 s63 s23 s32 s4 s29 s38 s91 s35 s89 s39 s78 s41 s42 s65 s44 s18 s45 s64 s49 s50 s12 s60 s62 s71 s14 s68 s69 s86 s66 s84 s53 s26 s70 s74 s61 s77 s94 s96 s98 s99 s100 s5 s92 s55 s33 s48 s59 s58},
	initialStates = {s1 s9 s24 s28 s30 s51 s72 s73},
	acceptingStates = {s7 s15 s16 s19 s27 s34 s76 s90},
	finiteStates = {s1 s9 s17 s20 s21 s22 s25 s28 s31 s36 s37 s43 s46 s47 s51 s52 s54 s56 s57 s67 s75 s79 s80 s81 s82 s83 s85 s87 s93 s95 s97},
	transitions = { (s1 t1 s88) (s3 t1 s95) (s6 t1 s20) (s7 t1 s82) (s8 t1 s73) (s9 t1 s8) (s10 t1 s40) (s11 t1 s2) (s11 t1 s31) (s13 t1 s80) (s15 t1 s63) (s16 t1 s43) (s16 t1 s93) (s19 t1 s73) (s19 t1 s88) (s22 t1 s9) (s23 t1 s25) (s23 t1 s30) (s23 t1 s32) (s23 t1 s83) (s28 t1 s4) (s28 t1 s22) (s29 t1 s37) (s30 t1 s8) (s32 t1 s10) (s32 t1 s38) (s34 t1 s91) (s35 t1 s89) (s37 t1 s63) (s37 t1 s97) (s38 t1 s79) (s39 t1 s20) (s39 t1 s78) (s40 t1 s56) (s41 t1 s31) (s41 t1 s37) (s42 t1 s21) (s42 t1 s23) (s42 t1 s65) (s42 t1 s78) (s43 t1 s93) (s44 t1 s18) (s45 t1 s78) (s45 t1 s79) (s46 t1 s67) (s46 t1 s85) (s47 t1 s64) (s47 t1 s95) (s49 t1 s79) (s50 t1 s36) (s51 t1 s30) (s51 t1 s85) (s52 t1 s12) (s54 t1 s50) (s56 t1 s17) (s56 t1 s38) (s56 t1 s39) (s56 t1 s89) (s60 t1 s62) (s60 t1 s71) (s62 t1 s14) (s62 t1 s25) (s62 t1 s68) (s62 t1 s69) (s62 t1 s86) (s63 t1 s28) (s63 t1 s68) (s63 t1 s75) (s64 t1 s2) (s64 t1 s52) (s64 t1 s93) (s65 t1 s10) (s65 t1 s28) (s66 t1 s84) (s67 t1 s53) (s67 t1 s56) (s68 t1 s26) (s68 t1 s41) (s70 t1 s50) (s70 t1 s65) (s70 t1 s70) (s71 t1 s80) (s71 t1 s87) (s73 t1 s84) (s74 t1 s61) (s74 t1 s84) (s76 t1 s17) (s76 t1 s28) (s76 t1 s63) (s77 t1 s29) (s85 t1 s22) (s85 t1 s79) (s85 t1 s95) (s86 t1 s19) (s86 t1 s72) (s94 t1 s78) (s94 t1 s96) (s95 t1 s11) (s95 t1 s45) (s96 t1 s47) (s96 t1 s63) (s98 t1 s56) (s99 t1 s30) (s100 t1 s19) (s100 t1 s32) (s100 t1 s35) (s1 t2 s68) (s2 t2 s85) (s3 t2 s49) (s3 t2 s62) (s4 t2 s91) (s5 t2 s84) (s6 t2 s39) (s6 t2 s66) (s8 t2 s42) (s8 t2 s84) (s10 t2 s99) (s11 t2 s43) (s12 t2 s70) (s12 t2 s72) (s12 t2 s92) (s13 t2 s72) (s15 t2 s5) (s16 t2 s6) (s16 t2 s78) (s17 t2 s27) (s17 t2 s29) (s20 t2 s46) (s21 t2 s55) (s21 t2 s56) (s22 t2 s42) (s23 t2 s96) (s24 t2 s19) (s24 t2 s66) (s27 t2 s11) (s28 t2 s32) (s29 t2 s79) (s30 t2 s40) (s32 t2 s92) (s33 t2 s19) (s33 t2 s23) (s34 t2 s51) (s34 t2 s65) (s35 t2 s46) (s36 t2 s88) (s37 t2 s70) (s39 t2 s9) (s39 t2 s69) (s40 t2 s44) (s44 t2 s74) (s45 t2 s44) (s45 t2 s45) (s45 t2 s67) (s45 t2 s77) (s47 t2 s93) (s48 t2 s6) (s48 t2 s93) (s50 t2 s91) (s52 t2 s8) (s52 t2 s16) (s52 t2 s85) (s55 t2 s67) (s56 t2 s54) (s56 t2 s56) (s61 t2 s94) (s62 t2 s93) (s65 t2 s17) (s65 t2 s59) (s66 t2 s66) (s70 t2 s20) (s70 t2 s86) (s72 t2 s5) (s72 t2 s48) (s73 t2 s17) (s73 t2 s20) (s74 t2 s68) (s74 t2 s79) (s76 t2 s35) (s76 t2 s95) (s77 t2 s27) (s77 t2 s79) (s79 t2 s94) (s80 t2 s4) (s81 t2 s33) (s81 t2 s57) (s82 t2 s5) (s82 t2 s58) (s85 t2 s14) (s86 t2 s30) (s87 t2 s7) (s88 t2 s23) (s90 t2 s42) (s90 t2 s96) (s91 t2 s45) (s92 t2 s65) (s92 t2 s91) (s93 t2 s3) (s93 t2 s31) (s96 t2 s76) (s97 t2 s24) (s98 t2 s3) (s98 t2 s54) (s99 t2 s87) (s99 t2 s100) (s100 t2 s67) (s1 t3 s15) (s1 t3 s18) (s4 t3 s84) (s5 t3 s1) (s7 t3 s7) (s8 t3 s86) (s10 t3 s17) (s10 t3 s45) (s10 t3 s60) (s10 t3 s75) (s10 t3 s84) (s10 t3 s88) (s11 t3 s10) (s11 t3 s84) (s16 t3 s49) (s16 t3 s74) (s18 t3 s65) (s19 t3 s8) (s19 t3 s30) (s19 t3 s36) (s19 t3 s44) (s21 t3 s47) (s21 t3 s84) (s22 t3 s27) (s22 t3 s59) (s23 t3 s20) (s23 t3 s67) (s24 t3 s71) (s24 t3 s87) (s25 t3 s9) (s25 t3 s15) (s25 t3 s28) (s25 t3 s46) (s26 t3 s63) (s28 t3 s19) (s28 t3 s94) (s29 t3 s91) (s29 t3 s98) (s31 t3 s79) (s31 t3 s90) (s32 t3 s97) (s34 t3 s44) (s37 t3 s3) (s37 t3 s9) (s39 t3 s5) (s41 t3 s5) (s41 t3 s56) (s41 t3 s57) (s41 t3 s58) (s41 t3 s63) (s43 t3 s23) (s43 t3 s68) (s44 t3 s48) (s44 t3 s84) (s46 t3 s33) (s46 t3 s51) (s48 t3 s68) (s48 t3 s95) (s49 t3 s48) (s49 t3 s49) (s49 t3 s53) (s51 t3 s41) (s51 t3 s54) (s51 t3 s64) (s53 t3 s11) (s54 t3 s13) (s56 t3 s27) (s56 t3 s50) (s56 t3 s85) (s57 t3 s30) (s58 t3 s20) (s58 t3 s58) (s59 t3 s42) (s59 t3 s83) (s60 t3 s28) (s60 t3 s37) (s60 t3 s96) (s62 t3 s77) (s62 t3 s82) (s62 t3 s84) (s63 t3 s28) (s65 t3 s45) (s65 t3 s64) (s65 t3 s76) (s70 t3 s21) (s70 t3 s86) (s71 t3 s54) (s71 t3 s95) (s72 t3 s68) (s73 t3 s1) (s73 t3 s22) (s73 t3 s66) (s74 t3 s24) (s76 t3 s2) (s76 t3 s16) (s77 t3 s49) (s77 t3 s90) (s78 t3 s64) (s80 t3 s92) (s81 t3 s15) (s81 t3 s43) (s83 t3 s39) (s83 t3 s50) (s85 t3 s52) (s85 t3 s89) (s86 t3 s37) (s89 t3 s6) (s89 t3 s53) (s91 t3 s68) (s92 t3 s34) (s93 t3 s2) (s94 t3 s73) (s95 t3 s78) (s97 t3 s43) (s99 t3 s50) (s99 t3 s51) (s100 t3 s38) (s3 t4 s2) (s4 t4 s93) (s5 t4 s94) (s6 t4 s95) (s7 t4 s70) (s10 t4 s64) (s11 t4 s26) (s11 t4 s97) (s14 t4 s75) (s14 t4 s91) (s15 t4 s38) (s15 t4 s68) (s17 t4 s14) (s17 t4 s36) (s17 t4 s85) (s18 t4 s75) (s19 t4 s90) (s21 t4 s9) (s21 t4 s98) (s22 t4 s9) (s22 t4 s67) (s23 t4 s35) (s23 t4 s86) (s25 t4 s27) (s28 t4 s27) (s29 t4 s13) (s29 t4 s70) (s30 t4 s34) (s30 t4 s95) (s31 t4 s39) (s32 t4 s1) (s32 t4 s25) (s32 t4 s61) (s33 t4 s48) (s33 t4 s49) (s36 t4 s22) (s36 t4 s90) (s37 t4 s61) (s42 t4 s18) (s42 t4 s49) (s45 t4 s35) (s47 t4 s12) (s47 t4 s13) (s48 t4 s34) (s49 t4 s66) (s49 t4 s99) (s50 t4 s23) (s51 t4 s21) (s51 t4 s75) (s52 t4 s60) (s53 t4 s96) (s54 t4 s31) (s54 t4 s76) (s55 t4 s86) (s56 t4 s62) (s57 t4 s62) (s58 t4 s8) (s58 t4 s79) (s60 t4 s13) (s60 t4 s80) (s61 t4 s77) (s61 t4 s91) (s63 t4 s80) (s64 t4 s29) (s64 t4 s33) (s65 t4 s41) (s65 t4 s47) (s65 t4 s100) (s67 t4 s89) (s71 t4 s3) (s71 t4 s63) (s72 t4 s58) (s73 t4 s47) (s73 t4 s51) (s74 t4 s9) (s74 t4 s31) (s75 t4 s91) (s79 t4 s3) (s79 t4 s31) (s79 t4 s64) (s81 t4 s61) (s82 t4 s63) (s83 t4 s7) (s83 t4 s32) (s84 t4 s7) (s86 t4 s14) (s86 t4 s69) (s88 t4 s97) (s90 t4 s41) (s90 t4 s64) (s92 t4 s8) (s95 t4 s97) (s97 t4 s71) (s98 t4 s74) (s100 t4 s32) (s100 t4 s79) (s1 t5 s33) (s2 t5 s20) (s2 t5 s26) (s2 t5 s84) (s3 t5 s26) (s3 t5 s92) (s4 t5 s33) (s5 t5 s2) (s5 t5 s8) (s6 t5 s49) (s7 t5 s40) (s7 t5 s62) (s10 t5 s59) (s12 t5 s3) (s13 t5 s18) (s16 t5 s4) (s16 t5 s15) (s16 t5 s88) (s17 t5 s53) (s17 t5 s62) (s19 t5 s18) (s19 t5 s30) (s19 t5 s80) (s20 t5 s3) (s20 t5 s96) (s22 t5 s2) (s22 t5 s72) (s23 t5 s51) (s24 t5 s57) (s25 t5 s3) (s25 t5 s20) (s26 t5 s20) (s26 t5 s92) (s27 t5 s55) (s31 t5 s25) (s32 t5 s75) (s33 t5 s80) (s33 t5 s99) (s36 t5 s45) (s37 t5 s68) (s42 t5 s85) (s42 t5 s94) (s43 t5 s85) (s44 t5 s59) (s44 t5 s85) (s45 t5 s36) (s45 t5 s43) (s46 t5 s44) (s47 t5 s66) (s47 t5 s93) (s49 t5 s71) (s49 t5 s95) (s50 t5 s31) (s50 t5 s54) (s51 t5 s31) (s53 t5 s18) (s53 t5 s65) (s55 t5 s98) (s56 t5 s22) (s56 t5 s81) (s57 t5 s32) (s58 t5 s55) (s59 t5 s63) (s64 t5 s92) (s66 t5 s48) (s66 t5 s64) (s67 t5 s60) (s67 t5 s86) (s69 t5 s48) (s69 t5 s95) (s70 t5 s19) (s72 t5 s70) (s73 t5 s7) (s73 t5 s29) (s74 t5 s34) (s75 t5 s23) (s77 t5 s22) (s78 t5 s41) (s78 t5 s78) (s79 t5 s20) (s79 t5 s31) (s80 t5 s29) (s80 t5 s38) (s80 t5 s44) (s80 t5 s88) (s81 t5 s8) (s81 t5 s66) (s84 t5 s11) (s84 t5 s15) (s84 t5 s55) (s85 t5 s21) (s86 t5 s12) (s86 t5 s87) (s86 t5 s94) (s87 t5 s28) (s87 t5 s99) (s87 t5 s100) (s88 t5 s100) (s89 t5 s86) (s90 t5 s11) (s93 t5 s55) (s95 t5 s37) (s95 t5 s74) (s95 t5 s95) (s99 t5 s40) }
);

assert(isEmpty(union(automaton1, automaton1)));
assert(!isEmpty(union(automaton2, automaton2)));
assert(!isEmpty(union(automaton1, automaton2)));

assert(accepts(union(automaton1, automaton2), [t3 t4, t3 t3 t5 t2 t3]));
assert(accepts(union(automaton2, automaton1), [t3 t4, t3 t3 t5 t2 t3]));