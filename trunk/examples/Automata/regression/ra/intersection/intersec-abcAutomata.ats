RabinAutomaton abcAutomaton = (
	alphabet = {a b c},
	states = {s1 s2 s3 s4 s5},
	initialStates = {s1 s2 s3 s4 s5},
	acceptingStates = {s1 s3 s5},
	finiteStates = {s2 s4},
	transitions = { (s1 a s2) (s1 a s3) (s2 b s3) (s3 c s4) (s3 b s5) (s4 a s4) (s4 b s5) (s5 c s1) }
);
RabinAutomaton abc2Automaton = (
	alphabet = {a b c},
	states = {s1 s2 s3 s4 s5},
	initialStates = {s2},
	acceptingStates = {s1 s3 s5},
	finiteStates = {s2 s4},
	transitions = { (s1 a s2) (s1 a s3) (s2 b s3) (s3 c s4) (s3 b s5) (s4 a s4) (s4 b s5) (s5 c s1) }
);

RabinAutomaton abc4Automaton = (
	alphabet = {a b c},
	states = {s1 s2 s3 s4 s5},
	initialStates = {s4},
	acceptingStates = {s1 s3 s5},
	finiteStates = {s2 s4},
	transitions = { (s1 a s2) (s1 a s3) (s2 b s3) (s3 c s4) (s3 b s5) (s4 a s4) (s4 b s5) (s5 c s1) }
);


assert(!isEmpty(intersection(abcAutomaton, abc2Automaton)));
assert(!isEmpty(intersection(abc4Automaton, abcAutomaton)));
assert(!isEmpty(intersection(abc4Automaton, abc2Automaton)));
assert(!isEmpty(intersection(abc2Automaton, abc4Automaton)));
assert(!isEmpty(intersection(abc2Automaton, abcAutomaton)));
assert(!isEmpty(intersection(abcAutomaton, abc4Automaton)));

assert(!accepts(intersection(abc4Automaton, abc2Automaton), [a , b c a]));
assert(!accepts(intersection(abc4Automaton, abc2Automaton), [c, b c a]));
assert(!accepts(intersection(abc4Automaton, abc2Automaton), [, a b c]));
assert(accepts(intersection(abc4Automaton, abc2Automaton), [, b c a]));
assert(!accepts(intersection(abc4Automaton, abc2Automaton), [, c a b]));
assert(!accepts(intersection(abc4Automaton, abc2Automaton), [, c b a]));
assert(!accepts(intersection(abc4Automaton, abc2Automaton), [, c a b b]));
assert(!accepts(intersection(abc4Automaton, abc2Automaton), [b, c a b b]));
assert(!accepts(intersection(abc4Automaton, abc2Automaton), [b b b b b b b, b c a]));
