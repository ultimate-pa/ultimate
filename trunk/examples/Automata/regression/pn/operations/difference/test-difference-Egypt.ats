// Author: heizmann@informatik.uni-freiburg.de
// Date: 5.6.2011


// Contains applications of in filename mentioned operation on several
// automata.
//
// Correctness of these operations is not tested here. But you can use this
// file to test correctness of intersection by enabling the automatic
// correctness test for automaton operations is Ultimate.
//
// This file contains some automaton definitions which have been available in 
// other files in the weeks of the revolution in Egypt


assert(!isEmpty(difference(se7en, atLeastOneA)));
assert(isEmpty(difference(se7en, all)));
assert(!isEmpty(difference(NonEmptyNetWithoutTransitions, atLeastOneA)));
assert(isEmpty(difference(NonEmptyNetWithoutTransitions, all)));

assert(!isEmpty(differencePairwiseOnDemand(se7en, atLeastOneA)));
assert(isEmpty(differencePairwiseOnDemand(se7en, all)));
assert(!isEmpty(differencePairwiseOnDemand(NonEmptyNetWithoutTransitions, atLeastOneA)));
assert(isEmpty(differencePairwiseOnDemand(NonEmptyNetWithoutTransitions, all)));

// print(difference(se7en, atLeastOneA));

PetriNet se7en = (
  alphabet = {a b c},
  places = {p0 p1 p2 q0 q1 q2 q3},
  transitions = {
    ({p0 q0} c {p0 q0}) 
    ({p0} a {p1}) 
    ({p1} a {p2}) 
    ({p2} a {p0}) 
    ({q0} b {q1}) 
    ({q1} b {q2}) 
    ({q2} b {q3}) 
    ({q3} b {q0})},
  initialMarking = {p0 q0},
  acceptingPlaces = {p0 q0}
);

NestedWordAutomaton atLeastOneA = (
  callAlphabet = { },
  internalAlphabet = {a b c},
  returnAlphabet = { },
  states = {s t},
  initialStates = {s},
  finalStates = {t},
  callTransitions = { },
  internalTransitions = {(s b s) (s c s) (s a t) (t a t) (t b t) (t c t)}, 
  returnTransitions = {}
);


NestedWordAutomaton all = (
  callAlphabet = { },
  internalAlphabet = {a b c},
  returnAlphabet = { },
  states = {s},
  initialStates = {s},
  finalStates = {s},
  callTransitions = { },
  internalTransitions = { (s a s) (s b s) (s c s)}, 
  returnTransitions = {}
);


PetriNet NonEmptyNetWithoutTransitions = (
  alphabet = {a b c},
  places = {p0},
  transitions = { },
  initialMarking = {p0},
  acceptingPlaces = {p0}
);
