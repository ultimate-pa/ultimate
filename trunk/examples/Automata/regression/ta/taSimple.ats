

TreeAutomaton taEvenIntList = TreeAutomaton(
    alphabet = { nil "0" cons succ },
    states = { OddNum EvenNum List },
    finalStates = { List },
    transitionTable = {
        ((OddNum) succ EvenNum)
        ((EvenNum) succ OddNum)
        (() "0" EvenNum)
        ((EvenNum List) cons List)
        (() nil List)
    }
);



// [[]]
Tree list0 = Tree [cons(nil,nil)];
// [2, 1]
Tree listA = Tree [cons(succ(succ("0")),cons(succ("0"),nil))];
// [2, 0]
Tree listB = Tree [cons(succ(succ("0")),cons("0",nil))];
// [2, 4]
Tree listC = Tree [cons(succ(succ("0")),cons(succ(succ(succ(succ("0")))),nil))];
// [3, 0]
Tree listD = Tree [cons(succ(succ(succ("0"))),cons("0",nil))];
// [6, 12]
Tree listE = Tree [cons(succ(succ(succ(succ(succ(succ("0")))))),cons(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ("0")))))))))))),nil))];


// Not lists of integers
assert(!accepts(taEvenIntList, list0));
// taEvenList accepts only lists of even numbers
assert(!accepts(taEvenIntList, listA));
assert(accepts(taEvenIntList, listB));
assert(accepts(taEvenIntList, listC));
assert(!accepts(taEvenIntList, listD));
assert(accepts(taEvenIntList, listE));
