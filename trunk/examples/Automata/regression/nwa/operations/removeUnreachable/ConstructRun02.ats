// Example where on run reconstruction two summaries with the same call 
// predecessor and the same return successors are used.
// Here: summary (q1 sEx s1) and summary (q1 q4 q3)
// we use the triple (hierPred, linPred, succ) to denote a summary
//
// We assume that we want to construct the following run 
// q0 a1 q1 c1< sEn a2 q1 c1< sEn a2 q1 c1< sEn a3 sEx >r s1 >r1 sEx >r q3 a4 qFin 
//
// To ensure that this run is found, we need that s1 is an initial
// state. In algorithm the run is reconstucted in a backward depth first
// search where the node with the lowest serial number is explored first.
// By making s1 initial we ensure that s1 has a lower serial number than
// sEx.
// 
// Author: heizmann@informatik.uni-freiburg.de
// Date: 18.9.2013

isEmpty(nwa);
NestedWordAutomaton result = removeUnreachable(nwa);
//print(numberOfStates(result));

NestedWordAutomaton nwa = (
	callAlphabet = {c1 },
	internalAlphabet = {a1 a2 a3 a4 a5 },
	returnAlphabet = {r r1},
	states = {q0 q1 q2 sEn sEx s1 q3 qFin },
	initialStates = {q0 s1 },
	finalStates = {qFin },
	callTransitions = {
		 (q1 c1 sEn)
	},
	internalTransitions = {
		 (q0 a1 q1)
		 (sEn a2 q1)
		 (sEn a3 sEx)
		 (q3 a4 qFin)
	},
	returnTransitions = {
		 (sEx q1 r s1)
		 (sEx q1 r q3)
		 (s1 q1 r1 sEx)
	}
);
