// heizmann@informatik.uni-freiburg.de 2010
// Running example of POPL2010 Heizmann,Hoenicke,Podelski Nested Interpolants


//assert(!buchiIsEmpty(ControlAutomaton));

//assert(buchiAccepts(ControlAutomaton, [ , Xleq100 callXisXplus11< ]));
assert(buchiAccepts(ControlAutomaton, [ , Xleq100 callXisXplus11< Xg100 RESisXminus10 >returnRES callXisRES<]));


//assert(!buchiAccepts(buchiComplementFKV(BuchiInterpolantAutomatonForPi1), [ , Xleq100 callXisXplus11< ]));
//assert(!buchiAccepts(buchiComplementDeterministic(BuchiInterpolantAutomatonForPi1), [ , Xleq100 callXisXplus11< ]));


print(buchiComplementFKV(BuchiInterpolantAutomatonForPi1));
//print(buchiComplementDeterministic(BuchiInterpolantAutomatonForPi1));

//print(buchiIntersect(ControlAutomaton buchiComplementFKV(BuchiInterpolantAutomatonForPi1)));

assert(!buchiAccepts(BuchiInterpolantAutomatonForPi1, [ , Xleq100 callXisXplus11< Xg100 RESisXminus10 >returnRES callXisRES<]));
assert(buchiAccepts(buchiComplementFKV(BuchiInterpolantAutomatonForPi1), [ , Xleq100 callXisXplus11< Xg100 RESisXminus10 >returnRES callXisRES<]));
//assert(buchiAccepts(buchiComplementDeterministic(BuchiInterpolantAutomatonForPi1), [ , Xleq100 callXisXplus11< Xg100 RESisXminus10 >returnRES callXisRES<]));

//print(BuchiInterpolantAutomatonForPi1);
//print(ControlAutomaton);

NestedWordAutomaton ControlAutomaton = (
	callAlphabet = {callXisXplus11 callXisRES},
	internalAlphabet = {Xleq100 Xg100 RESisXminus10 },
	returnAlphabet = {returnRES},
	states = {l0 l1 l2 l4 l7},
	initialStates = {l0},
	finalStates = {l0 l1 l2 l4 l7},
	callTransitions = {
		(l2 callXisXplus11 l0)
		(l4 callXisRES l0)
	},
	internalTransitions = { 
		(l0 Xleq100 l2) 
		(l0 Xg100 l1)
		(l1 RESisXminus10 l7)
	},
	returnTransitions = {
		(l7 l2 returnRES l4)
		(l7 l4 returnRES l7)
	}
);



NestedWordAutomaton BuchiInterpolantAutomatonForPi1 = (
	callAlphabet = {callXisXplus11 callXisRES},
	internalAlphabet = {Xleq100 Xg100 RESisXminus10 },
	returnAlphabet = {returnRES},
//   s0 is {x<100 and x'>x}, s1 is {x<100 and x'>=x}
	states = {s0 s1},
	initialStates = {s0},
	finalStates = {s0},
	callTransitions = {
		(s1 callXisXplus11 s0)
	},
	internalTransitions = { 
		(s0 Xleq100 s1) 
	},
	returnTransitions = {
	}
);





NestedWordAutomaton InterpolantAutomatonForPi4 = (
	callAlphabet = {callM},
	internalAlphabet = {Xleq100 Xg100 RES2Xminus10 XM2Xplus11 XM2RESM RES2RESM Xleq101andRESneq91 },
	returnAlphabet = {returnM},
	states = {q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13},
	initialStates = {q0},
	finalStates = {q13},
	callTransitions = {
		(q2 callM q3)
		(q7 callM q8)
	},
	internalTransitions = { 
		(q0 Xleq100 q1)
		(q1 XM2Xplus11 q2)
		(q3 Xleq100 q1)
		(q3 Xg100 q4)
		(q4 RES2Xminus10 q5)
		(q6 XM2RESM q7)
		(q8 Xleq100 q1)
		(q8 Xg100 q9)
		(q9 RES2Xminus10 q10)
		(q11 RES2RESM q12)
		(q12 Xleq101andRESneq91 q13)
	},
	returnTransitions = {
		(q5 q2 returnM q6)
		(q10 q7 returnM q11)
		(q12 q7 returnM q11)
		(q12 q2 returnM q6)
	}
);


NestedWordAutomaton InterpolantAutomatonForPi3 = (
	callAlphabet = {callM},
	internalAlphabet = {Xleq100 Xg100 RES2Xminus10 XM2Xplus11 XM2RESM RES2RESM Xleq101andRESneq91 },
	returnAlphabet = {returnM},
	states = {q0 q1 q2 q3},
	initialStates = {q0},
	finalStates = {q3},
	callTransitions = {
		(q0 callM q0)
	},
	internalTransitions = { 
		(q0 Xleq100 q0)
		(q0 Xg100 q0)
		(q0 RES2Xminus10 q0)
		(q0 XM2Xplus11 q0)
		(q0 XM2RESM q0)
		(q0 RES2RESM q0)
		(q0 Xleq101andRESneq91 q0)
		(q0 Xg100 q1)
		(q1 RES2Xminus10 q2)
		(q2 Xleq101andRESneq91 q3)
	},
	returnTransitions = {
		(q0 q0 returnM q0)
	}
);
