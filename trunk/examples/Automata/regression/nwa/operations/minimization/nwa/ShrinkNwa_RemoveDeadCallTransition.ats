// Author: heizmann@informatik.uni-freiburg.de
// Date: 2014-08-20
//
// Example where there is a difference between removeDeadEnds() and the old
// dead end removal operation reachableStatesCopy(nwa, false, false, true, false)
// The new removeDeadEnds() also removes the call transition ("q1" "c1" "t").
// Therefor (t,q1) is no longer a DoubleDecker and we may merge the states
// "s" and "t".
//
// Contains a dead end state.

NestedWordAutomaton preprocessed = removeUnreachable(nwa);

int minimizeSevpaSize = numberOfStates(minimizeSevpa(preprocessed));
int shrinkNwaSize = numberOfStates(shrinkNwa(preprocessed));
int minimizeNwaPmaxSatDirectBiSize = numberOfStates(minimizeNwaPmaxSatDirectBi(preprocessed));
int minimizeNwaPmaxSatDirectSize = numberOfStates(minimizeNwaPmaxSatDirect(preprocessed));
int reduceNwaDirectSimulationSize = numberOfStates(reduceNwaDirectSimulation(preprocessed));
int reduceNwaDirectSimulationBSize = numberOfStates(reduceNwaDirectSimulationB(preprocessed));
int reduceNwaDirectFullMultipebbleSimulationSize = numberOfStates(reduceNwaDirectFullMultipebbleSimulation(preprocessed));
// int reduceNwaDelayedSimulationSize = numberOfStates(reduceNwaDelayedSimulation(preprocessed));
// int reduceNwaDelayedSimulationBSize = numberOfStates(reduceNwaDelayedSimulationB(preprocessed));
// int reduceNwaDelayedFullMultipebbleSimulationSize = numberOfStates(reduceNwaDelayedFullMultipebbleSimulation(preprocessed));

assert(minimizeSevpaSize == 6);
assert(shrinkNwaSize == 5);
assert(minimizeNwaPmaxSatDirectBiSize == 5);
assert(minimizeNwaPmaxSatDirectSize == 6);
assert(reduceNwaDirectSimulationSize == 5);
assert(reduceNwaDirectSimulationBSize == 6);
assert(reduceNwaDirectFullMultipebbleSimulationSize == 6);
// assert(reduceNwaDelayedSimulationSize == 5);
// assert(reduceNwaDelayedSimulationBSize == 5);
// assert(reduceNwaDelayedFullMultipebbleSimulationSize == 5);

NestedWordAutomaton nwa = (
	callAlphabet = {"c" "c1" "c2"},
	internalAlphabet = {"a" "b"},
	returnAlphabet = {"r" "r2"},
	states = {"q0" "q1" "qE" "qS" "t" "s"},
	initialStates = {"q0"},
	finalStates = {"qE"},
	callTransitions = {
		 ("q0" "c" "t")
		 ("q0" "c" "s")
		 ("q1" "c1" "t")
		 ("q1" "c2" "s")
	},
	internalTransitions = {
		 ("q0" "a" "q1")
	},
	returnTransitions = {
		 ("t" "q0" "r" "qE")
		 ("s" "q0" "r" "qE")
		 ("s" "q1" "r2" "qE")
		 ("t" "q1" "r2" "qS")
	}
);
