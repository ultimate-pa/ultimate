// Author: Matthias Heizmann (heizmann@informatik.uni-freiburg.de)
// Date: 2016-07-09
// Spoiler can force Duplicator to move to s7 which is non-accepting.
// Our implementation does not detect this.
// The last days I presumed that this is a bug of our approach.
// However, I am starting to realize that there is some hope that it is not
// a bug, but a feature.

NestedWordAutomaton preprocessed = removeUnreachable(nwa);

int minimizeSevpaSize = numberOfStates(minimizeSevpa(preprocessed));
int shrinkNwaSize = numberOfStates(shrinkNwa(preprocessed));
int minimizeNwaPmaxSatDirectBiSize = numberOfStates(minimizeNwaPmaxSatDirectBi(preprocessed));
int minimizeNwaPmaxSatDirectSize = numberOfStates(minimizeNwaPmaxSatDirect(preprocessed));
int reduceNwaDirectSimulationSize = numberOfStates(reduceNwaDirectSimulation(preprocessed));
int reduceNwaDirectSimulationBSize = numberOfStates(reduceNwaDirectSimulationB(preprocessed));
int reduceNwaDirectFullMultipebbleSimulationSize = numberOfStates(reduceNwaDirectFullMultipebbleSimulation(preprocessed));
// int reduceNwaDelayedSimulationSize = numberOfStates(reduceNwaDelayedSimulation(preprocessed));
// int reduceNwaDelayedSimulationBSize = numberOfStates(reduceNwaDelayedSimulationB(preprocessed));
// int reduceNwaDelayedFullMultipebbleSimulationSize = numberOfStates(reduceNwaDelayedFullMultipebbleSimulation(preprocessed));

assert(minimizeSevpaSize == 13);
assert(shrinkNwaSize == 12);
assert(minimizeNwaPmaxSatDirectBiSize == 12);
assert(minimizeNwaPmaxSatDirectSize == 13);
assert(reduceNwaDirectSimulationSize == 12);
assert(reduceNwaDirectSimulationBSize == 13);
assert(reduceNwaDirectFullMultipebbleSimulationSize == 13);
// assert(reduceNwaDelayedSimulationSize == 5);
// assert(reduceNwaDelayedSimulationBSize == 5);
// assert(reduceNwaDelayedFullMultipebbleSimulationSize == 7);

NestedWordAutomaton nwa = (
	callAlphabet = {"c"},
	internalAlphabet = {"a" "b"},
	returnAlphabet = {"r"},
	states = {"atv0" "atv1" "polizei1" "polizei2" "polizei3" "s0" "m1" "m2" "m3" "m4" "m5" "s6" "s7"},
	initialStates = {"atv0" "s0" },
	finalStates = {"atv1" "s6"},
	callTransitions = {
		 ("atv0" "c" "polizei1")
		 ("s0" "c" "m1")
	},
	internalTransitions = {
		 ("polizei1" "a" "polizei2")
		 ("polizei2" "a" "polizei3")
		 ("polizei2" "b" "polizei3")
		 ("m1" "a" "m2")
		 ("m1" "a" "m3")
 		 ("m2" "a" "m4")
		 ("m2" "b" "m5")
  		 ("m3" "b" "m4")
		 ("m3" "a" "m5")
		 
		 ("atv1" "a" "atv0")
  		 ("s6" "a" "s0")
		 ("s7" "a" "s0")
	},
	returnTransitions = {
		 ("polizei3" "atv0" "r" "atv1")
		 ("m4" "s0" "r" "s6")
		 ("m5" "s0" "r" "s7")
	}
);
