//

NestedWordAutomaton preprocessed = removeUnreachable(nwa);

int minimizeSevpaSize = numberOfStates(minimizeSevpa(preprocessed));
int shrinkNwaSize = numberOfStates(shrinkNwa(preprocessed));
int minimizeNwaPmaxSatDirectSize = numberOfStates(minimizeNwaPmaxSatDirect(preprocessed));
int minimizeNwaPmaxSatDirectSize = numberOfStates(minimizeNwaPmaxSatDirect(preprocessed));
int reduceNwaDirectSimulationSize = numberOfStates(reduceNwaDirectSimulation(preprocessed));
int reduceNwaDirectSimulationBSize = numberOfStates(reduceNwaDirectSimulationB(preprocessed));
int reduceNwaDirectFullMultipebbleSimulationSize = numberOfStates(reduceNwaDirectFullMultipebbleSimulation(preprocessed));
// int reduceNwaDelayedSimulationSize = numberOfStates(reduceNwaDelayedSimulation(preprocessed));
// int reduceNwaDelayedSimulationBSize = numberOfStates(reduceNwaDelayedSimulationB(preprocessed));
// int reduceNwaDelayedFullMultipebbleSimulationSize = numberOfStates(reduceNwaDelayedFullMultipebbleSimulation(preprocessed));
int minimizeNwaPmaxSatDelayedBiSize = numberOfStates(minimizeNwaPmaxSatDelayedBi(preprocessed));

assert(minimizeSevpaSize == 1);
assert(shrinkNwaSize == 1);
assert(minimizeNwaPmaxSatDirectSize == 1);
assert(minimizeNwaPmaxSatDirectSize == 1);
assert(reduceNwaDirectSimulationSize == 1);
assert(reduceNwaDirectSimulationBSize == 1);
assert(reduceNwaDirectFullMultipebbleSimulationSize == 1);
// assert(reduceNwaDelayedSimulationSize == 1);
// assert(reduceNwaDelayedSimulationBSize == 1);
// assert(reduceNwaDelayedFullMultipebbleSimulationSize == 1);
assert(minimizeNwaPmaxSatDelayedBiSize == 1);

NestedWordAutomaton nwa = (
	callAlphabet = { c },
	internalAlphabet = { a },
	returnAlphabet = { r },
	states = { q0 q1 q2 q3 },
	initialStates = { q0 },
	finalStates = { q0 },
	callTransitions = {
		(q1 c q3)
	},
	internalTransitions = {
		(q1 a q0)
	},
	returnTransitions = {
		(q1 q3 r q3)
	}
);
