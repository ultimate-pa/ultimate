// Reveals Bug in r7441 in DoubleDeckerAutomaton.
// Return true for each reachable DoubleDecker not only for DoubleDeckers
// which can reach a final state.
// Date: 28.10.2012
// Author: heizmann@informatik.uni-freiburg.de

NestedWordAutomaton preprocessed = removeUnreachable(nwa);

int minimizeSevpaSize = numberOfStates(minimizeSevpa(preprocessed));
int shrinkNwaSize = numberOfStates(shrinkNwa(preprocessed));
int minimizeNwaPmaxSatDirectBiSize = numberOfStates(minimizeNwaPmaxSatDirectBi(preprocessed));
int minimizeNwaPmaxSatDirectSize = numberOfStates(minimizeNwaPmaxSatDirect(preprocessed));
int reduceNwaDirectSimulationSize = numberOfStates(reduceNwaDirectSimulation(preprocessed));
int reduceNwaDirectSimulationBSize = numberOfStates(reduceNwaDirectSimulationB(preprocessed));
int reduceNwaDirectFullMultipebbleSimulationSize = numberOfStates(reduceNwaDirectFullMultipebbleSimulation(preprocessed));
// int reduceNwaDelayedSimulationSize = numberOfStates(reduceNwaDelayedSimulation(preprocessed));
// int reduceNwaDelayedSimulationBSize = numberOfStates(reduceNwaDelayedSimulationB(preprocessed));
// int reduceNwaDelayedFullMultipebbleSimulationSize = numberOfStates(reduceNwaDelayedFullMultipebbleSimulation(preprocessed));

assert(minimizeSevpaSize == 12);
assert(shrinkNwaSize == 10);
assert(minimizeNwaPmaxSatDirectBiSize == 10);
assert(minimizeNwaPmaxSatDirectSize == 11);
assert(reduceNwaDirectSimulationSize == 10);
assert(reduceNwaDirectSimulationBSize == 11);
assert(reduceNwaDirectFullMultipebbleSimulationSize == 11);
// assert(reduceNwaDelayedSimulationSize == 10);
// assert(reduceNwaDelayedSimulationBSize == 10);
// assert(reduceNwaDelayedFullMultipebbleSimulationSize == 10);

NestedWordAutomaton nwa = (
	callAlphabet = {"c2" "call100" "cqr" "cqs" "c4" },
	internalAlphabet = {"ins1" "end" "assume b == c;65" "assume true;67" "inr2" "assume x <= 101;res ...79" "ins2" "z = x;84" "assume z > 150;z = ...87" "assume !(x <= 101);r...81" "inr1" "assume z < 100;z = ...92" "assume true;95" "assume !(z < 100);re...94" "assume !(z > 150);88" },
	returnAlphabet = {"return103" "return101" "rEnd" "sEnd" "return105" },
	states = {"rEn" "q0" "s1" "s2" "r1" "sExit1" "r2" "rEx2" "rEx1" "qFin2" "s5" "q2" "s4" "MainErr0AssertViolation335" "qFin1" "sExit2" "q1" "sEntry" "MainErr0AssertViolation329" },
	initialStates = {"q0" },
	finalStates = {"qFin1" "qFin2" },
	callTransitions = {
		 ("q2" "cqr" "rEn")
		 ("s4" "c4" "sEntry")
		 ("q1" "cqr" "rEn")
		 ("q0" "cqs" "sEntry")
		 ("s2" "c2" "sEntry")
	},
	internalTransitions = {
		 ("rEn" "inr1" "rEx1")
		 ("rEn" "inr2" "rEx2")
		 ("sEntry" "ins1" "sExit1")
		 ("sEntry" "ins2" "s2")
	},
	returnTransitions = {
		 ("sExit2" "q0" "sEnd" "q1")
		 ("sExit1" "s2" "return103" "s4")
		 ("sExit1" "q0" "sEnd" "q2")
		 ("sExit1" "s4" "return105" "sExit2")
		 ("rEx2" "q2" "rEnd" "qFin2")
		 ("rEx1" "q1" "rEnd" "qFin1")
	}
);
