// Testfile dumped by Ultimate at 2012/09/04 13:34:19

NestedWordAutomaton preprocessed = removeUnreachable(nwa);

int minimizeSevpaSize = numberOfStates(minimizeSevpa(preprocessed));
int shrinkNwaSize = numberOfStates(shrinkNwa(preprocessed));
int minimizeNwaPmaxSatDirectBiSize = numberOfStates(minimizeNwaPmaxSatDirectBi(preprocessed));
int minimizeNwaPmaxSatDirectSize = numberOfStates(minimizeNwaPmaxSatDirect(preprocessed));
int minimizeDfaSimulationSize = numberOfStates(minimizeDfaSimulation(preprocessed));
int reduceNwaDirectSimulationSize = numberOfStates(reduceNwaDirectSimulation(preprocessed));
int reduceNwaDirectSimulationBSize = numberOfStates(reduceNwaDirectSimulationB(preprocessed));
int reduceNwaDirectFullMultipebbleSimulationSize = numberOfStates(reduceNwaDirectFullMultipebbleSimulation(preprocessed));
int buchiReduceSize = numberOfStates(buchiReduce(preprocessed));
int reduceNwaDelayedSimulationSize = numberOfStates(reduceNwaDelayedSimulation(preprocessed));
int reduceNwaDelayedSimulationBSize = numberOfStates(reduceNwaDelayedSimulationB(preprocessed));
// int reduceNwaDelayedFullMultipebbleSimulationSize = numberOfStates(reduceNwaDelayedFullMultipebbleSimulation(preprocessed));
int reduceBuchiFairDirectSimulationSize = numberOfStates(reduceBuchiFairDirectSimulation(preprocessed));
int reduceBuchiFairSimulationSize = numberOfStates(reduceBuchiFairSimulation(preprocessed));

assert(minimizeSevpaSize == 6);
assert(shrinkNwaSize == 6);
assert(minimizeNwaPmaxSatDirectBiSize == 6);
assert(minimizeNwaPmaxSatDirectSize == 6);
assert(minimizeDfaSimulationSize == 6);
assert(reduceNwaDirectSimulationSize == 6);
assert(reduceNwaDirectSimulationBSize == 6);
assert(reduceNwaDirectFullMultipebbleSimulationSize == 6);
assert(buchiReduceSize == 6);
assert(reduceNwaDelayedSimulationSize == 6);
assert(reduceNwaDelayedSimulationBSize == 6);
// assert(reduceNwaDelayedFullMultipebbleSimulationSize == 6);
assert(reduceBuchiFairDirectSimulationSize == 6);
assert(reduceBuchiFairSimulationSize == 6);

NestedWordAutomaton nwa = (
	callAlphabet = {},
	internalAlphabet = {a2 a0 a1 },
	returnAlphabet = {},
	states = {q2 q1 q5 q4 q3 qf},
	initialStates = {q1 },
	finalStates = {qf },
	callTransitions = {
	},
	internalTransitions = {
		 (q2 a1 qf)
		 (q1 a0 q4)
		 (q1 a1 qf)
		 (q5 a1 q3)
		 (q4 a2 q4)
		 (q4 a1 q5)
		 (q3 a1 q2)
	},
	returnTransitions = {
	}
);
