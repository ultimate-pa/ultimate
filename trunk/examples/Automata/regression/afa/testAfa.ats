AlternatingAutomaton aa1 = (
	alphabet = {a b},
	states = {q0 q1},
	finalStates = {q1},
	transitionTable = { 
		(q0 a q0|~q1)
		(q0 b q0&~q1)
		(q1 a ~q0&~q1)
		(q1 b ~q0|~q1)
	},
	acceptingFunction = q0&~q1,
	isReversed = true
);
assert(aA_Accepts(aa1, [b a a a]));
assert(!aA_Accepts(aa1, [a b b b]));

AlternatingAutomaton aa2 = (
	alphabet = {a b},
	states = {s0 s1 s2},
	finalStates = {},
	transitionTable = { 
		(s0 a s1&s2)
		(s0 b s1)
		(s1 a s1&s2)
		(s1 b s1|s2)
		(s2 a true)
		(s2 b s1)
	},
	acceptingFunction = s0,
	isReversed = true
);
assert(aA_Accepts(aa2, [a b b]));
assert(aA_Accepts(aa2, [a b b b b b b a]));
assert(!aA_Accepts(aa2, [a b a b]));
assert(aA_Accepts(aa2, [a a a b a b b]));
assert(aA_Accepts(aa2, [a b b a a a a a a]));

AlternatingAutomaton aaMergedUnion = aA_MergedUnion(aa1, aa2);
//TestCases aa1
assert(aA_Accepts(aaMergedUnion, [b a a a]));
assert(aA_Accepts(aaMergedUnion, [a b b b]));
//TestCases aa2
assert(aA_Accepts(aaMergedUnion, [a b b]));
assert(aA_Accepts(aaMergedUnion, [a b b b b b b a]));
assert(!aA_Accepts(aaMergedUnion, [a b a b]));
assert(aA_Accepts(aaMergedUnion, [a a a b a b b]));
assert(aA_Accepts(aaMergedUnion, [a b b a a a a a a]));

NestedWordAutomaton nwa1 = aA_DeterminizeReversed(aa1);
//TestCases aa1
assert(accepts(nwa1, [b a a a]));
assert(!accepts(nwa1, [a b b b]));

NestedWordAutomaton nwa2 = aA_DeterminizeReversed(aa2);
//TestCases aa2
assert(accepts(nwa2, [a b b]));
assert(accepts(nwa2, [a b b b b b b a]));
assert(!accepts(nwa2, [a b a b]));
assert(accepts(nwa2, [a a a b a b b]));
assert(accepts(nwa2, [a b b a a a a a a]));
