// Example file that applies loop complexity operation to a few finite automata
// Author: heizmann@informatik.uni-freiburg.de
// Date: 2015-09-15

// An automaton without any loops has loop complexity 0.
print(loopComplexity(a0));

NestedWordAutomaton a0 = (
	callAlphabet = { },
	internalAlphabet = { "0" "1" },
	returnAlphabet = { },
	states = {q0 q1 },
	initialStates = {q0},
	finalStates = {q0},
	callTransitions = {},
	internalTransitions = {
		(q0 "0" q1)
		(q0 "1" q1)
	},
	returnTransitions = {}
);

// An automaton with two non-nested loops has loop complexity 1.
print(loopComplexity(a1));

NestedWordAutomaton a1 = (
	callAlphabet = { },
	internalAlphabet = { "0" "1" },
	returnAlphabet = { },
	states = {q0 q1 },
	initialStates = {q0},
	finalStates = {q1},
	callTransitions = {},
	internalTransitions = {
		(q0 "0" q0)
		(q0 "1" q1)
		(q1 "0" q1)
	},
	returnTransitions = {}
);


// An automaton with two nested loops has also loop complexity 1.
print(loopComplexity(a2));

NestedWordAutomaton a2 = (
	callAlphabet = { },
	internalAlphabet = { "0" "1" },
	returnAlphabet = { },
	states = {q0 q1 q2},
	initialStates = {q0},
	finalStates = {q1},
	callTransitions = {},
	internalTransitions = {
		(q0 "0" q1)
		(q1 "1" q2)
		(q2 "0" q1)
		(q1 "0" q0)
	},
	returnTransitions = {}
);


// An automaton whose state diagram is a totally connected graph has 
// loop coplexity 3 (even if there are not final states).
print(loopComplexity(a3));

NestedWordAutomaton a3 = (
	callAlphabet = { },
	internalAlphabet = { "0" "1" },
	returnAlphabet = { },
	states = {q0 q1 q2},
	initialStates = {q0},
	finalStates = {},
	callTransitions = {},
	internalTransitions = {
		(q0 "1" q0)
		(q0 "0" q1)
		(q0 "0" q2)
		(q1 "1" q0)
		(q1 "0" q1)
		(q1 "0" q2)
		(q2 "1" q0)
		(q2 "0" q1)
		(q2 "0" q2)
	},
	returnTransitions = {}
);