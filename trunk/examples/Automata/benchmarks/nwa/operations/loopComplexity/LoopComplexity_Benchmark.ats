// Author: Thomas Lang, heizmann@informatik.uni-freiburg.de
// Date: 2015-06-08
//

NestedWordAutomaton lcbautomaton00 = (
	callAlphabet = {},
	internalAlphabet = {"a0" },
	returnAlphabet = {},
	states = {"q6" "q5" "q8" "q10" "q7" "q11" "q2" "q1" "q4" "q3" "q0" "q9" },
	initialStates = {"q0" },
	finalStates = {},
	callTransitions = {
	},
	internalTransitions = {
		 ("q6" "a0" "q5")
		 ("q6" "a0" "q7")
		 ("q6" "a0" "q4")
		 ("q6" "a0" "q3")
		 ("q5" "a0" "q5")
		 ("q5" "a0" "q8")
		 ("q5" "a0" "q10")
		 ("q5" "a0" "q7")
		 ("q5" "a0" "q11")
		 ("q5" "a0" "q2")
		 ("q5" "a0" "q4")
		 ("q5" "a0" "q0")
		 ("q10" "a0" "q7")
		 ("q10" "a0" "q11")
		 ("q10" "a0" "q4")
		 ("q10" "a0" "q0")
		 ("q8" "a0" "q8")
		 ("q8" "a0" "q10")
		 ("q8" "a0" "q7")
		 ("q8" "a0" "q2")
		 ("q8" "a0" "q3")
		 ("q11" "a0" "q6")
		 ("q11" "a0" "q11")
		 ("q11" "a0" "q4")
		 ("q11" "a0" "q0")
		 ("q7" "a0" "q6")
		 ("q7" "a0" "q5")
		 ("q7" "a0" "q8")
		 ("q7" "a0" "q7")
		 ("q7" "a0" "q2")
		 ("q7" "a0" "q0")
		 ("q2" "a0" "q8")
		 ("q2" "a0" "q11")
		 ("q2" "a0" "q1")
		 ("q2" "a0" "q3")
		 ("q2" "a0" "q0")
		 ("q2" "a0" "q9")
		 ("q1" "a0" "q6")
		 ("q1" "a0" "q5")
		 ("q1" "a0" "q8")
		 ("q1" "a0" "q1")
		 ("q1" "a0" "q4")
		 ("q1" "a0" "q9")
		 ("q4" "a0" "q5")
		 ("q4" "a0" "q8")
		 ("q4" "a0" "q11")
		 ("q4" "a0" "q1")
		 ("q4" "a0" "q4")
		 ("q4" "a0" "q3")
		 ("q4" "a0" "q0")
		 ("q3" "a0" "q6")
		 ("q3" "a0" "q5")
		 ("q3" "a0" "q7")
		 ("q3" "a0" "q11")
		 ("q3" "a0" "q2")
		 ("q3" "a0" "q4")
		 ("q3" "a0" "q3")
		 ("q3" "a0" "q9")
		 ("q0" "a0" "q6")
		 ("q0" "a0" "q8")
		 ("q0" "a0" "q7")
		 ("q0" "a0" "q2")
		 ("q0" "a0" "q1")
		 ("q0" "a0" "q4")
		 ("q0" "a0" "q3")
		 ("q0" "a0" "q9")
		 ("q9" "a0" "q6")
		 ("q9" "a0" "q5")
		 ("q9" "a0" "q10")
		 ("q9" "a0" "q2")
		 ("q9" "a0" "q1")
		 ("q9" "a0" "q4")
	},
	returnTransitions = {
	}
);

assert(loopComplexity(lcbautomaton00) == 7);


NestedWordAutomaton lcbautomaton01 = (
	callAlphabet = {},
	internalAlphabet = {"a0" },
	returnAlphabet = {},
	states = {"q12" "q6" "q5" "q10" "q8" "q11" "q7" "q2" "q1" "q4" "q3" "q0" "q9" },
	initialStates = {"q0" },
	finalStates = {},
	callTransitions = {
	},
	internalTransitions = {
		 ("q6" "a0" "q12")
		 ("q6" "a0" "q6")
		 ("q6" "a0" "q8")
		 ("q6" "a0" "q10")
		 ("q6" "a0" "q11")
		 ("q6" "a0" "q4")
		 ("q5" "a0" "q6")
		 ("q5" "a0" "q11")
		 ("q5" "a0" "q2")
		 ("q5" "a0" "q1")
		 ("q5" "a0" "q4")
		 ("q5" "a0" "q3")
		 ("q5" "a0" "q0")
		 ("q5" "a0" "q9")
		 ("q8" "a0" "q6")
		 ("q8" "a0" "q8")
		 ("q8" "a0" "q7")
		 ("q8" "a0" "q11")
		 ("q8" "a0" "q2")
		 ("q8" "a0" "q1")
		 ("q8" "a0" "q4")
		 ("q8" "a0" "q3")
		 ("q7" "a0" "q5")
		 ("q7" "a0" "q1")
		 ("q7" "a0" "q4")
		 ("q7" "a0" "q3")
		 ("q7" "a0" "q9")
		 ("q2" "a0" "q10")
		 ("q2" "a0" "q7")
		 ("q2" "a0" "q2")
		 ("q2" "a0" "q1")
		 ("q2" "a0" "q4")
		 ("q2" "a0" "q3")
		 ("q1" "a0" "q6")
		 ("q1" "a0" "q5")
		 ("q1" "a0" "q8")
		 ("q1" "a0" "q7")
		 ("q4" "a0" "q12")
		 ("q4" "a0" "q5")
		 ("q4" "a0" "q8")
		 ("q4" "a0" "q10")
		 ("q4" "a0" "q7")
		 ("q4" "a0" "q2")
		 ("q4" "a0" "q1")
		 ("q4" "a0" "q9")
		 ("q3" "a0" "q6")
		 ("q3" "a0" "q5")
		 ("q3" "a0" "q8")
		 ("q3" "a0" "q10")
		 ("q3" "a0" "q11")
		 ("q3" "a0" "q1")
		 ("q3" "a0" "q4")
		 ("q3" "a0" "q0")
		 ("q9" "a0" "q6")
		 ("q9" "a0" "q12")
		 ("q9" "a0" "q1")
		 ("q9" "a0" "q4")
		 ("q9" "a0" "q3")
		 ("q9" "a0" "q0")
		 ("q9" "a0" "q9")
		 ("q12" "a0" "q12")
		 ("q12" "a0" "q10")
		 ("q12" "a0" "q11")
		 ("q12" "a0" "q1")
		 ("q12" "a0" "q4")
		 ("q12" "a0" "q3")
		 ("q12" "a0" "q9")
		 ("q10" "a0" "q6")
		 ("q10" "a0" "q10")
		 ("q10" "a0" "q2")
		 ("q10" "a0" "q4")
		 ("q10" "a0" "q3")
		 ("q11" "a0" "q12")
		 ("q11" "a0" "q8")
		 ("q11" "a0" "q7")
		 ("q11" "a0" "q11")
		 ("q11" "a0" "q3")
		 ("q11" "a0" "q0")
		 ("q11" "a0" "q9")
		 ("q0" "a0" "q5")
		 ("q0" "a0" "q8")
		 ("q0" "a0" "q11")
		 ("q0" "a0" "q7")
		 ("q0" "a0" "q4")
		 ("q0" "a0" "q3")
	},
	returnTransitions = {
	}
);

assert(loopComplexity(lcbautomaton01) == 8);


NestedWordAutomaton lcbautomaton02 = (
	callAlphabet = {},
	internalAlphabet = {"a0" },
	returnAlphabet = {},
	states = {"q12" "q6" "q5" "q10" "q8" "q11" "q7" "q2" "q1" "q4" "q3" "q0" "q9" },
	initialStates = {"q0" },
	finalStates = {},
	callTransitions = {
	},
	internalTransitions = {
		 ("q6" "a0" "q6")
		 ("q6" "a0" "q5")
		 ("q6" "a0" "q8")
		 ("q6" "a0" "q7")
		 ("q6" "a0" "q2")
		 ("q6" "a0" "q4")
		 ("q6" "a0" "q3")
		 ("q6" "a0" "q9")
		 ("q5" "a0" "q5")
		 ("q5" "a0" "q10")
		 ("q5" "a0" "q7")
		 ("q5" "a0" "q11")
		 ("q5" "a0" "q2")
		 ("q5" "a0" "q1")
		 ("q5" "a0" "q3")
		 ("q8" "a0" "q12")
		 ("q8" "a0" "q5")
		 ("q8" "a0" "q8")
		 ("q8" "a0" "q10")
		 ("q8" "a0" "q11")
		 ("q8" "a0" "q2")
		 ("q8" "a0" "q1")
		 ("q8" "a0" "q4")
		 ("q8" "a0" "q3")
		 ("q8" "a0" "q0")
		 ("q7" "a0" "q10")
		 ("q7" "a0" "q7")
		 ("q7" "a0" "q4")
		 ("q7" "a0" "q3")
		 ("q7" "a0" "q0")
		 ("q2" "a0" "q6")
		 ("q2" "a0" "q12")
		 ("q2" "a0" "q5")
		 ("q2" "a0" "q10")
		 ("q2" "a0" "q8")
		 ("q2" "a0" "q2")
		 ("q2" "a0" "q4")
		 ("q2" "a0" "q0")
		 ("q1" "a0" "q6")
		 ("q1" "a0" "q8")
		 ("q1" "a0" "q10")
		 ("q1" "a0" "q11")
		 ("q1" "a0" "q2")
		 ("q1" "a0" "q1")
		 ("q4" "a0" "q12")
		 ("q4" "a0" "q10")
		 ("q4" "a0" "q2")
		 ("q4" "a0" "q0")
		 ("q4" "a0" "q9")
		 ("q3" "a0" "q6")
		 ("q3" "a0" "q10")
		 ("q3" "a0" "q7")
		 ("q3" "a0" "q4")
		 ("q3" "a0" "q0")
		 ("q3" "a0" "q9")
		 ("q9" "a0" "q6")
		 ("q9" "a0" "q12")
		 ("q9" "a0" "q7")
		 ("q9" "a0" "q2")
		 ("q9" "a0" "q1")
		 ("q9" "a0" "q4")
		 ("q12" "a0" "q12")
		 ("q12" "a0" "q5")
		 ("q12" "a0" "q10")
		 ("q12" "a0" "q8")
		 ("q12" "a0" "q7")
		 ("q12" "a0" "q2")
		 ("q12" "a0" "q3")
		 ("q12" "a0" "q0")
		 ("q12" "a0" "q9")
		 ("q10" "a0" "q10")
		 ("q10" "a0" "q11")
		 ("q10" "a0" "q2")
		 ("q10" "a0" "q3")
		 ("q11" "a0" "q5")
		 ("q11" "a0" "q2")
		 ("q11" "a0" "q4")
		 ("q11" "a0" "q3")
		 ("q11" "a0" "q9")
		 ("q0" "a0" "q6")
		 ("q0" "a0" "q12")
		 ("q0" "a0" "q8")
		 ("q0" "a0" "q10")
		 ("q0" "a0" "q4")
		 ("q0" "a0" "q0")
	},
	returnTransitions = {
	}
);

assert(loopComplexity(lcbautomaton02) == 8);


NestedWordAutomaton lcbautomaton03 = (
	callAlphabet = {},
	internalAlphabet = {"a0" },
	returnAlphabet = {},
	states = {"q6" "q5" "q8" "q7" "q2" "q1" "q4" "q3" "q9" "q12" "q13" "q10" "q11" "q16" "q14" "q15" "q0" },
	initialStates = {"q0" },
	finalStates = {"q1" },
	callTransitions = {
	},
	internalTransitions = {
		 ("q6" "a0" "q13")
		 ("q6" "a0" "q5")
		 ("q6" "a0" "q15")
		 ("q6" "a0" "q9")
		 ("q5" "a0" "q5")
		 ("q5" "a0" "q8")
		 ("q5" "a0" "q2")
		 ("q5" "a0" "q1")
		 ("q8" "a0" "q8")
		 ("q8" "a0" "q10")
		 ("q8" "a0" "q11")
		 ("q8" "a0" "q2")
		 ("q8" "a0" "q9")
		 ("q7" "a0" "q13")
		 ("q7" "a0" "q7")
		 ("q7" "a0" "q15")
		 ("q7" "a0" "q9")
		 ("q2" "a0" "q6")
		 ("q2" "a0" "q5")
		 ("q2" "a0" "q7")
		 ("q2" "a0" "q15")
		 ("q2" "a0" "q9")
		 ("q1" "a0" "q10")
		 ("q1" "a0" "q8")
		 ("q1" "a0" "q14")
		 ("q1" "a0" "q4")
		 ("q4" "a0" "q7")
		 ("q4" "a0" "q3")
		 ("q3" "a0" "q7")
		 ("q3" "a0" "q16")
		 ("q3" "a0" "q3")
		 ("q9" "a0" "q8")
		 ("q9" "a0" "q7")
		 ("q9" "a0" "q16")
		 ("q12" "a0" "q16")
		 ("q12" "a0" "q1")
		 ("q12" "a0" "q14")
		 ("q10" "a0" "q13")
		 ("q10" "a0" "q10")
		 ("q10" "a0" "q0")
		 ("q11" "a0" "q6")
		 ("q11" "a0" "q1")
		 ("q11" "a0" "q15")
		 ("q16" "a0" "q13")
		 ("q16" "a0" "q11")
		 ("q16" "a0" "q14")
		 ("q14" "a0" "q6")
		 ("q14" "a0" "q8")
		 ("q14" "a0" "q7")
		 ("q14" "a0" "q16")
		 ("q14" "a0" "q0")
		 ("q15" "a0" "q5")
		 ("q0" "a0" "q12")
		 ("q0" "a0" "q11")
		 ("q0" "a0" "q16")
		 ("q0" "a0" "q2")
		 ("q0" "a0" "q14")
		 ("q0" "a0" "q9")
	},
	returnTransitions = {
	}
);

assert(loopComplexity(lcbautomaton03) == 5);



NestedWordAutomaton lcbautomaton04 = (
	callAlphabet = {},
	internalAlphabet = {"a0" },
	returnAlphabet = {},
	states = {"q6" "q5" "q8" "q7" "q2" "q1" "q4" "q3" "q9" "q12" "q13" "q10" "q11" "q14" "q0" },
	initialStates = {"q0" },
	finalStates = {"q9" },
	callTransitions = {
	},
	internalTransitions = {
		 ("q5" "a0" "q13")
		 ("q8" "a0" "q9")
		 ("q7" "a0" "q1")
		 ("q7" "a0" "q14")
		 ("q7" "a0" "q3")
		 ("q2" "a0" "q8")
		 ("q1" "a0" "q10")
		 ("q4" "a0" "q5")
		 ("q4" "a0" "q8")
		 ("q4" "a0" "q11")
		 ("q3" "a0" "q12")
		 ("q3" "a0" "q6")
		 ("q9" "a0" "q10")
		 ("q13" "a0" "q13")
		 ("q13" "a0" "q7")
		 ("q13" "a0" "q2")
		 ("q13" "a0" "q4")
		 ("q10" "a0" "q0")
		 ("q14" "a0" "q0")
		 ("q14" "a0" "q9")
		 ("q0" "a0" "q13")
		 ("q0" "a0" "q7")
		 ("q0" "a0" "q4")
	},
	returnTransitions = {
	}
);

assert(loopComplexity(lcbautomaton04) == 2);
