// 2015-07-30, Matthias Heizmann
// reveals bug in automata library. 
// obtained from termination analysis of CostaDouble.bpl

NestedLassoWord nlw = [  "y := 0;" "assume y < k;" "call rec(y);"< "y := 0;" "assume y >= k;assume true;" >"return;" "y := y + 1;" "assume y < k;" "call rec(y);"< "y := 0;" "assume y < k;" "call rec(y);"< "y := 0;" "assume y >= k;assume true;" >"return;" "y := y + 1;" "assume y < k;" "call rec(y);"< "y := 0;" "assume y < k;" "call rec(y);"< "y := 0;" "assume y >= k;assume true;" >"return;" "y := y + 1;" "assume y >= k;assume true;" >"return;" "y := y + 1;" "assume y < k;" "call rec(y);"<  , "y := 0;" "assume y < k;" "call rec(y);"< "y := 0;" "assume y >= k;assume true;" >"return;" "y := y + 1;" "assume y < k;" "call rec(y);"< "y := 0;" "assume y < k;" "call rec(y);"< "y := 0;" "assume y >= k;assume true;" >"return;" "y := y + 1;" "assume y >= k;assume true;" >"return;" "y := y + 1;" "assume y < k;" "call rec(y);"<  ];
boolean accepted = buchiAccepts(ia, nlw);
NestedWordAutomaton complementNCSB = buchiComplementNCSB(ia);
boolean acceptedComplementNCSB = buchiAccepts(complementNCSB, nlw);
NestedWordAutomaton complementFKV = buchiComplementFKV(ia);
boolean acceptedComplementFKV = buchiAccepts(complementFKV, nlw);
assert(!accepted);
assert(acceptedComplementNCSB);
assert(acceptedComplementFKV);



NestedWordAutomaton ia = (
	callAlphabet = {"call rec(y);" },
	internalAlphabet = {"assume y >= k;assume true;" "assume y < k;" "y := y + 1;" "y := 0;" },
	returnAlphabet = {"return;" },
	states = {"s0" "s2" "s3" "q0" "s1" "q1" },
	initialStates = {"q0" },
	finalStates = {"s0" },
	callTransitions = {
		 ("s0" "call rec(y);" "s1")
		 ("q0" "call rec(y);" "q1")
		 ("s1" "call rec(y);" "s1")
		 ("q1" "call rec(y);" "q1")
	},
	internalTransitions = {
		 ("s0" "y := y + 1;" "s3")
		 ("s2" "y := y + 1;" "s3")
		 ("s3" "assume y < k;" "s0")
		 ("q0" "assume y < k;" "q0")
		 ("q0" "y := y + 1;" "q0")
		 ("q0" "y := 0;" "q0")
		 ("s1" "assume y >= k;assume true;" "s1")
		 ("s1" "assume y < k;" "s1")
		 ("s1" "y := y + 1;" "s1")
		 ("s1" "y := 0;" "s1")
		 ("q1" "assume y >= k;assume true;" "q1")
		 ("q1" "assume y < k;" "q1")
		 ("q1" "y := y + 1;" "q1")
		 ("q1" "y := 0;" "q1")
	},
	returnTransitions = {
		 ("s1" "s0" "return;" "s2")
		 ("s1" "s1" "return;" "s1")
		 ("q1" "q0" "return;" "q0")
		 ("q1" "q1" "return;" "s0")
		 ("q1" "q1" "return;" "q1")
	}
);
