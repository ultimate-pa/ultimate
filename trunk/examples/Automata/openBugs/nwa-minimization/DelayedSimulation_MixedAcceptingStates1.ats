// Author: Christian Schilling
// Date: 2017-01-31
// 
// Example that shows difficulties for delayed simulation-based minimization of
// NWA. It is important to not merge q1 and p1 because only p1 is accepting.

NestedWordAutomaton preprocessed = removeUnreachable(nwa);

int minimizeSevpaSize = numberOfStates(minimizeSevpa(preprocessed));
int shrinkNwaSize = numberOfStates(shrinkNwa(preprocessed));
int minimizeNwaPmaxSatDirectBiSize = numberOfStates(minimizeNwaPmaxSatDirectBi(preprocessed));
int minimizeNwaPmaxSatDirectSize = numberOfStates(minimizeNwaPmaxSatDirect(preprocessed));
int reduceNwaDirectSimulationSize = numberOfStates(reduceNwaDirectSimulation(preprocessed));
int reduceNwaDirectSimulationBSize = numberOfStates(reduceNwaDirectSimulationB(preprocessed));
int reduceNwaDirectFullMultipebbleSimulationSize = numberOfStates(reduceNwaDirectFullMultipebbleSimulation(preprocessed));
// int reduceNwaDelayedSimulationSize = numberOfStates(reduceNwaDelayedSimulation(preprocessed));
// int reduceNwaDelayedSimulationBSize = numberOfStates(reduceNwaDelayedSimulationB(preprocessed));
// int reduceNwaDelayedFullMultipebbleSimulationSize = numberOfStates(reduceNwaDelayedFullMultipebbleSimulation(preprocessed));
int minimizeNwaPmaxSatDelayedBiSize = numberOfStates(minimizeNwaPmaxSatDelayedBi(preprocessed));
int minimizeNwaPmaxSatDelayedSize = numberOfStates(minimizeNwaPmaxSatDelayed(preprocessed));

assert(minimizeSevpaSize == 6);
assert(shrinkNwaSize == 6);
assert(minimizeNwaPmaxSatDirectBiSize == 6);
assert(minimizeNwaPmaxSatDirectSize == 6);
assert(reduceNwaDirectSimulationSize == 6);
assert(reduceNwaDirectSimulationBSize == 6);
assert(reduceNwaDirectFullMultipebbleSimulationSize == 6);
// assert(reduceNwaDelayedSimulationSize == 6);
// assert(reduceNwaDelayedSimulationBSize == 6);
// assert(reduceNwaDelayedFullMultipebbleSimulationSize == 6);
// assert(minimizeNwaPmaxSatDelayedBiSize == 6);
assert(minimizeNwaPmaxSatDelayedSize == 6);

NestedWordAutomaton nwa = (
	callAlphabet = {c},
	internalAlphabet = {a},
	returnAlphabet = {r},
	states = {q0 q1 q2 p0 p1 p2},
	initialStates = {q0},
	finalStates = {p1},
	callTransitions = {
		(q0 c q1)
 		(p0 c p1)
	},
	internalTransitions = {
		(q0 a p0)
		(q2 a q0)
		(p0 a q0)
		(p2 a p0)
	},
	returnTransitions = {
		(q1 q0 r q2)
		(p1 p0 r p2)
	}
);
