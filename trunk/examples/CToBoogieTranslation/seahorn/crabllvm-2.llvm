; ModuleID = '/var/folders/rd/wyr_48nj7qj5jy6nx62ftjlm0000gq/T/crabllvm-4Povii/test-arr-4.pp.bc'
target datalayout = "e-m:o-p:32:32-f64:32:64-f80:128-n8:16:32-S128"
target triple = "i386-apple-macosx10.11.0"

@x = internal unnamed_addr global i32 5, align 4
@y = internal unnamed_addr global i32 3, align 4
@a = internal unnamed_addr global [10 x i32] zeroinitializer, align 4

; Function Attrs: nounwind ssp
define internal fastcc void @foo() #0 {
_1:
  %_2 = load i32* @x, align 4
  %_store = add nsw i32 %_2, 1
  store i32 %_store, i32* @x, align 4
  ret void
}

; Function Attrs: nounwind ssp
define internal fastcc void @bar() #0 {
_1:
  %_2 = load i32* @y, align 4
  %_store = add nsw i32 %_2, 1
  store i32 %_store, i32* @y, align 4
  ret void
}

; Function Attrs: nounwind ssp
define i32 @main() #0 {
_call:
  call void @verifier.int_initializer(i32* @x, i32 5)
  call void @verifier.int_initializer(i32* @y, i32 3)
  call void @verifier.zero_initializer.1([10 x i32]* @a)
  call fastcc void @foo()
  br label %_i.0

_i.0:                                             ; preds = %_14, %_call
  %i.0 = phi i32 [ 0, %_call ], [ %_br3, %_14 ]
  %_br = icmp slt i32 %i.0, 10
  br i1 %_br, label %_4, label %PHILowerICmp

_4:                                               ; preds = %_i.0
  %_5 = bitcast i32 (...)* @nd to i32 ()*
  %_6 = call i32 %_5() #3
  %_br1 = icmp eq i32 %_6, 0
  br i1 %_br1, label %_11, label %_8

_8:                                               ; preds = %_4
  %_9 = load i32* @y, align 4
  %_store = getelementptr inbounds [10 x i32]* @a, i32 0, i32 %i.0
  store i32 %_9, i32* %_store, align 4
  br label %_14

_11:                                              ; preds = %_4
  %_12 = load i32* @x, align 4
  %_store2 = getelementptr inbounds [10 x i32]* @a, i32 0, i32 %i.0
  store i32 %_12, i32* %_store2, align 4
  br label %_14

_14:                                              ; preds = %_11, %_8
  %_br3 = add nsw i32 %i.0, 1
  br label %_i.0

PHILowerICmp:                                     ; preds = %_i.0
  %i.0.lcssa = phi i32 [ %i.0, %_i.0 ]
  call fastcc void @bar()
  %_16 = add nsw i32 %i.0.lcssa, -1
  %_17 = getelementptr inbounds [10 x i32]* @a, i32 0, i32 %_16
  %_check_SGE_0 = load i32* %_17, align 4
  %check_SGE_0 = icmp sle i32 0, %_check_SGE_0
  %_19 = icmp slt i32 %_check_SGE_0, 7
  %_20 = select i1 %check_SGE_0, i1 %_19, i1 true
  %_call4 = zext i1 %_20 to i32
  call void @__CRAB_assert(i32 %_call4) #3
  ret i32 %_check_SGE_0
}

declare i32 @nd(...) #1

declare void @__CRAB_assert(i32) #1

; Function Attrs: readnone
declare void @verifier.int_initializer(i32*, i32) #2

; Function Attrs: readnone
declare void @verifier.zero_initializer.1([10 x i32]*) #2

attributes #0 = { nounwind ssp "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 3.6.0 (tags/RELEASE_360/final)"}
