(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-fun po_ ( Int Int) Bool)
(declare-fun v_x_0 () Int)
(declare-fun v_x_1 () Int)
(declare-fun v_x_2 () Int)
(declare-fun mod$ ( Int Int) Int)
(declare-fun div$ ( Int Int) Int)
(declare-fun v_y_0 () Int)
(declare-fun v_y_1 () Int)
(declare-fun v_y_2 () Int)
(declare-fun v_i_init () Int)
(declare-fun v__y () Int)
(declare-fun v__x () Int)
(declare-fun v__j () Int)
(declare-fun v__i () Int)
(declare-fun v_j_init () Int)
(assert (! (let ((v_x_2 v_x_0)) (let ((v_y_1 v_y_0)) (let ((v_i_3 v_i_init)) (let ((v_j_2 v_j_init)) (and (= v_x_2 v_i_3) (= v_y_1 v_j_2)))))) :named IP_0))
(assert (! (let ((v_x_6 v_x_1)) (let ((v_y_5 v_y_1)) (let ((v_x_7 v_x_0)) (let ((v_y_6 v_y_0)) (and (not (= v_x_7 0)) (= v_x_6 (- v_x_7 1)) (= v_y_5 (- v_y_6 1))))))) :named IP_1))
(assert (! (let ((v_x_6 v_x_2)) (let ((v_y_5 v_y_2)) (let ((v_x_7 v_x_1)) (let ((v_y_6 v_y_1)) (and (not (= v_x_7 0)) (= v_x_6 (- v_x_7 1)) (= v_y_5 (- v_y_6 1))))))) :named IP_2))
(assert (! (and (let ((v_x_9 v_x_2)) (= v_x_9 0)) (let ((v_i_11 v_i_init)) (let ((v_j_11 v_j_init)) (= v_i_11 v_j_11))) (let ((v_y_14 v_y_2)) (not (= v_y_14 0)))) :named IP_3))
(check-sat)
(get-interpolants IP_0 IP_1 IP_2 IP_3)
(exit)
