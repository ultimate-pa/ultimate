(set-option :produce-proofs true)
(set-info :source "{

}")
(set-info :status unsat)
(set-info :difficulty "{ 2 }")
(set-logic QF_LIA)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun i8 () Int)
(declare-fun i9 () Int)
(declare-fun i10 () Int)
(assert (! (distinct i1 i2 i3 i4 i5 i6 i7 i8 i9 i10) :named IP_0))
(assert (! (and (<= 1 i1) (<= i1 9) (<= 1 i2) (<= i2 9) (<= 1 i3) (<= i3 9) (<= 1 i4) (<= i4 9) (<= 1 i5) (<= i5 9) (<= 1 i6) (<= i6 9) (<= 1 i7) (<= i7 9) (<= 1 i8) (<= i8 9) (<= 1 i9) (<= i9 9) (<= 1 i10) (<= i10 9)) :named IP_1))
(check-sat)
(get-interpolants IP_0 IP_1)
(exit)
