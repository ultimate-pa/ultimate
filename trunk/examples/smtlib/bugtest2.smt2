(set-option :produce-proofs true)
(set-info :status unsat)
(set-info :difficulty "{ 0 }")
(set-logic AUFLIRA)
(declare-fun P () Bool)
(declare-fun Q () Bool)
(declare-fun f ( Int) Int)
(declare-fun g ( Int) Int)
(declare-fun a () Int)
(declare-fun z () Int)
(assert (! P :named IP_0))
(assert (! (= (f a) z) :named IP_1))
(assert (! (= (f a) (g a)) :named IP_2))
(assert (! (or (forall ((x Int)) (not (= (g x) z))) (not P)) :named IP_3))
(assert (! Q :named IP_4))
(check-sat)
(get-interpolants IP_0 IP_1 IP_2 IP_3 IP_4)
(exit)
