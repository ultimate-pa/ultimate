(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-fun quant0 ( Int Int Int Int) Bool)
(declare-fun po_ ( Int Int) Bool)
(declare-fun bv_j_11_b34_const () Int)
(declare-fun bv_n_9_b22_const () Int)
(declare-fun v_i_8_const () Int)
(declare-fun v_i_2_const () Int)
(declare-fun bv_x_6_b18_const () Int)
(declare-fun div$ ( Int Int) Int)
(declare-fun v_x_6_const () Int)
(declare-fun sselect ( Int Int) Int)
(declare-fun v_x_9_const () Int)
(declare-fun bv_n_8_b19_const () Int)
(declare-fun bv_n_11_b32_const () Int)
(declare-fun v_j_11_const () Int)
(declare-fun bv_i_5_b30_const () Int)
(declare-fun bv_n_11_b17_const () Int)
(declare-fun v_j_old_const () Int)
(declare-fun v_n_old_const () Int)
(declare-fun bv_n_8_b33_const () Int)
(declare-fun bv_x_6_b31_const () Int)
(declare-fun ite_b10 () Int)
(declare-fun v_n_11_const () Int)
(declare-fun ite_b9 () Int)
(declare-fun v_x_old_const () Int)
(declare-fun mod$ ( Int Int) Int)
(declare-fun bv_i_8_b23_const () Int)
(declare-fun bv_x_9_b36_const () Int)
(declare-fun v_i_old_const () Int)
(declare-fun v_i_5_const () Int)
(declare-fun bv_i_5_b16_const () Int)
(declare-fun bv_x_9_b21_const () Int)
(declare-fun sstore ( Int Int Int) Int)
(declare-fun bv_i_8_b37_const () Int)
(declare-fun bv_j_11_b20_const () Int)
(declare-fun bv_n_9_b35_const () Int)
(declare-fun v_n_9_const () Int)
(declare-fun v_n_8_const () Int)
(assert (forall ((a Int) (x0 Int) (y0 Int) (v Int)) (! (= (sselect (sstore a x0 v) y0) (ite (= x0 y0) v (sselect a y0))) :pattern ((sselect (sstore a x0 v) y0)))))
(assert (! (= v_i_2_const 0) :named IP_0))
(assert (! (and (=> (and (not (< v_i_2_const v_n_old_const)) (<= 0 v_j_old_const) (< v_j_old_const v_n_old_const)) (= (sselect v_x_old_const v_j_old_const) v_j_old_const)) (forall ((bipure_b25 Int)) (forall ((bipure_b24 Int)) (= v_i_2_const 0))) (< v_i_2_const v_n_old_const) (= v_x_6_const (sstore v_x_old_const v_i_2_const v_i_2_const)) (= v_i_5_const (+ v_i_2_const 1))) :named IP_1))
(assert (! (and (=> (and (not (< v_i_5_const v_n_old_const)) (<= 0 v_j_old_const) (< v_j_old_const v_n_old_const)) (= (sselect v_x_6_const v_j_old_const) v_j_old_const)) (not (forall ((bipure_b25 Int)) (forall ((bipure_b24 Int)) (= v_i_5_const 0)))) (< v_i_5_const v_n_old_const) (= bv_x_6_b31_const (sstore v_x_6_const v_i_5_const v_i_5_const)) (= bv_i_5_b30_const (+ v_i_5_const 1))) :named IP_2))
(assert (! (not (=> (and (not (< bv_i_5_b30_const v_n_old_const)) (<= 0 v_j_old_const) (< v_j_old_const v_n_old_const)) (= (sselect bv_x_6_b31_const v_j_old_const) v_j_old_const))) :named IP_3))
(check-sat)
(get-interpolants IP_0 IP_1 IP_2 IP_3)
(exit)
