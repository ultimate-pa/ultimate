<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<key id="programfile" attr.name="programfile" for="graph"/>
<key id="sourcecodelang" attr.name="sourcecodelang" for="graph"/>
<key id="creationtime" attr.name="creationtime" for="graph"/>
<key id="witness-type" attr.name="witness-type" for="graph"/>
<key id="entry" attr.name="entry" for="node">
<default>false</default>
</key>
<key id="nodetype" attr.name="nodetype" for="node">
<default>path</default>
</key>
<key id="violation" attr.name="violation" for="node">
<default>false</default>
</key>
<key id="invariant" attr.name="invariant" for="node">
<default>true</default>
</key>
<key id="endline" attr.name="endline" for="edge"/>
<key id="enterLoopHead" attr.name="enterLoopHead" for="edge">
<default>false</default>
</key>
<key id="enterFunction" attr.name="enterFunction" for="edge"/>
<key id="startline" attr.name="startline" for="edge"/>
<key id="returnFrom" attr.name="returnFrom" for="edge"/>
<key id="assumption" attr.name="assumption" for="edge"/>
<key id="tokens" attr.name="tokens" for="edge"/>
<key id="originfile" attr.name="originfile" for="edge">
<default>C:\ultimate\trunk\examples\witness-checking\regression\correctness\sqrt1-ll_valuebound20.c</default>
</key>
<key id="sourcecode" attr.name="sourcecode" for="edge"/>
<graph edgedefault="directed">
<data key="programfile">C:\ultimate\trunk\examples\witness-checking\regression\correctness\sqrt1-ll_valuebound20.c</data>
<data key="sourcecodelang">C</data>
<data key="creationtime">2023-10-31T12:37:42Z</data>
<data key="witness-type">correctness_witness</data>
<node id="N0">
<data key="entry">true</data>
</node>
<node id="N1"/>
<node id="N2"/>
<node id="N3"/>
<node id="N4"/>
<node id="N5"/>
<node id="N6"/>
<node id="N7"/>
<node id="N8"/>
<node id="N9"/>
<node id="N10"/>
<node id="N11"/>
<node id="N12">
<data key="invariant">(((((t * 2) + (t * t)) + 1) == (s * 4)) &amp;&amp; (t == ((a * 2) + 1)))</data>
</node>
<node id="N13"/>
<node id="N14"/>
<node id="N15"/>
<node id="N16"/>
<node id="N17"/>
<node id="N18"/>
<node id="N19"/>
<node id="N20"/>
<node id="N21"/>
<node id="N22"/>
<node id="N23"/>
<node id="N24"/>
<node id="N25"/>
<node id="N26"/>
<node id="N27"/>
<node id="N28"/>
<edge id="E0" source="N0" target="N1">
<data key="endline">21</data>
<data key="startline">21</data>
<data key="sourcecode">int n;</data>
</edge>
<edge id="E1" source="N1" target="N2">
<data key="endline">22</data>
<data key="startline">22</data>
<data key="sourcecode">long long a, s, t;</data>
</edge>
<edge id="E2" source="N2" target="N3">
<data key="endline">23</data>
<data key="startline">23</data>
<data key="sourcecode">__VERIFIER_nondet_int()</data>
</edge>
<edge id="E3" source="N3" target="N4">
<data key="endline">23</data>
<data key="startline">23</data>
<data key="sourcecode">n = __VERIFIER_nondet_int()</data>
</edge>
<edge id="E4" source="N4" target="N5">
<data key="endline">23</data>
<data key="startline">23</data>
<data key="sourcecode">__VERIFIER_nondet_int()</data>
</edge>
<edge id="E5" source="N5" target="N6">
<data key="endline">24</data>
<data key="startline">24</data>
<data key="sourcecode">assume_abort_if_not(n&gt;=0 &amp;&amp; n&lt;=20)</data>
</edge>
<edge id="E6" source="N5" target="N7">
<data key="endline">24</data>
<data key="startline">24</data>
<data key="sourcecode">assume_abort_if_not(n&gt;=0 &amp;&amp; n&lt;=20)</data>
</edge>
<edge id="E7" source="N6" target="N8">
<data key="endline">26</data>
<data key="startline">26</data>
<data key="sourcecode">a = 0</data>
</edge>
<edge id="E8" source="N7" target="N9">
<data key="endline">9</data>
<data key="startline">9</data>
<data key="sourcecode">[!cond]</data>
</edge>
<edge id="E9" source="N7" target="N10">
<data key="endline">9</data>
<data key="startline">9</data>
<data key="sourcecode">[!(!cond)]</data>
</edge>
<edge id="E10" source="N8" target="N11">
<data key="endline">27</data>
<data key="startline">27</data>
<data key="sourcecode">s = 1</data>
</edge>
<edge id="E11" source="N9" target="N10">
<data key="endline">9</data>
<data key="startline">9</data>
<data key="sourcecode">abort()</data>
</edge>
<edge id="E12" source="N10" target="N6">
<data key="endline">24</data>
<data key="startline">24</data>
<data key="sourcecode">assume_abort_if_not(n&gt;=0 &amp;&amp; n&lt;=20)</data>
</edge>
<edge id="E13" source="N11" target="N12">
<data key="endline">28</data>
<data key="enterLoopHead">true</data>
<data key="startline">28</data>
<data key="sourcecode">t = 1</data>
</edge>
<edge id="E14" source="N12" target="N13">
<data key="endline">30</data>
<data key="startline">30</data>
<data key="sourcecode">[!(1)]</data>
</edge>
<edge id="E15" source="N12" target="N14">
<data key="endline">30</data>
<data key="startline">30</data>
<data key="sourcecode">[1]</data>
</edge>
<edge id="E16" source="N13" target="N15">
<data key="endline">31</data>
<data key="startline">31</data>
<data key="sourcecode">__VERIFIER_assert(t == 2*a + 1)</data>
</edge>
<edge id="E17" source="N13" target="N16">
<data key="endline">31</data>
<data key="startline">31</data>
<data key="sourcecode">__VERIFIER_assert(t == 2*a + 1)</data>
</edge>
<edge id="E18" source="N14" target="N17">
<data key="endline">44</data>
<data key="startline">44</data>
<data key="sourcecode">__VERIFIER_assert(t == 2 * a + 1)</data>
</edge>
<edge id="E19" source="N14" target="N16">
<data key="endline">44</data>
<data key="startline">44</data>
<data key="sourcecode">__VERIFIER_assert(t == 2 * a + 1)</data>
</edge>
<edge id="E20" source="N15" target="N18">
<data key="endline">32</data>
<data key="startline">32</data>
<data key="sourcecode">__VERIFIER_assert(s == (a + 1) * (a + 1))</data>
</edge>
<edge id="E21" source="N15" target="N16">
<data key="endline">32</data>
<data key="startline">32</data>
<data key="sourcecode">__VERIFIER_assert(s == (a + 1) * (a + 1))</data>
</edge>
<edge id="E22" source="N16" target="N19">
<data key="endline">12</data>
<data key="startline">12</data>
<data key="sourcecode">[!(cond)]</data>
</edge>
<edge id="E23" source="N16" target="N20">
<data key="endline">12</data>
<data key="startline">12</data>
<data key="sourcecode">[!(!(cond))]</data>
</edge>
<edge id="E24" source="N17" target="N21">
<data key="endline">45</data>
<data key="startline">45</data>
<data key="sourcecode">__VERIFIER_assert(s == (a + 1) * (a + 1))</data>
</edge>
<edge id="E25" source="N17" target="N16">
<data key="endline">45</data>
<data key="startline">45</data>
<data key="sourcecode">__VERIFIER_assert(s == (a + 1) * (a + 1))</data>
</edge>
<edge id="E26" source="N18" target="N22">
<data key="endline">33</data>
<data key="startline">33</data>
<data key="sourcecode">__VERIFIER_assert(t*t - 4*s + 2*t + 1 == 0)</data>
</edge>
<edge id="E27" source="N18" target="N16">
<data key="endline">33</data>
<data key="startline">33</data>
<data key="sourcecode">__VERIFIER_assert(t*t - 4*s + 2*t + 1 == 0)</data>
</edge>
<edge id="E28" source="N19" target="N23">
<data key="endline">14</data>
<data key="startline">14</data>
<data key="sourcecode">reach_error()</data>
</edge>
<edge id="E29" source="N19" target="N20">
<data key="endline">14</data>
<data key="startline">14</data>
<data key="sourcecode">reach_error()</data>
</edge>
<edge id="E30" source="N20" target="N15">
<data key="endline">31</data>
<data key="startline">31</data>
<data key="sourcecode">__VERIFIER_assert(t == 2*a + 1)</data>
</edge>
<edge id="E31" source="N20" target="N18">
<data key="endline">32</data>
<data key="startline">32</data>
<data key="sourcecode">__VERIFIER_assert(s == (a + 1) * (a + 1))</data>
</edge>
<edge id="E32" source="N20" target="N22">
<data key="endline">33</data>
<data key="startline">33</data>
<data key="sourcecode">__VERIFIER_assert(t*t - 4*s + 2*t + 1 == 0)</data>
</edge>
<edge id="E33" source="N20" target="N17">
<data key="endline">44</data>
<data key="startline">44</data>
<data key="sourcecode">__VERIFIER_assert(t == 2 * a + 1)</data>
</edge>
<edge id="E34" source="N20" target="N21">
<data key="endline">45</data>
<data key="startline">45</data>
<data key="sourcecode">__VERIFIER_assert(s == (a + 1) * (a + 1))</data>
</edge>
<edge id="E35" source="N20" target="N24">
<data key="endline">46</data>
<data key="startline">46</data>
<data key="sourcecode">__VERIFIER_assert(t*t - 4*s + 2*t + 1 == 0)</data>
</edge>
<edge id="E36" source="N21" target="N24">
<data key="endline">46</data>
<data key="startline">46</data>
<data key="sourcecode">__VERIFIER_assert(t*t - 4*s + 2*t + 1 == 0)</data>
</edge>
<edge id="E37" source="N21" target="N16">
<data key="endline">46</data>
<data key="startline">46</data>
<data key="sourcecode">__VERIFIER_assert(t*t - 4*s + 2*t + 1 == 0)</data>
</edge>
<edge id="E38" source="N22" target="N14">
<data key="endline">36</data>
<data key="startline">36</data>
<data key="sourcecode">[!(s &lt;= n)]</data>
</edge>
<edge id="E39" source="N22" target="N25">
<data key="endline">36</data>
<data key="startline">36</data>
<data key="sourcecode">[!(!(s &lt;= n))]</data>
</edge>
<edge id="E40" source="N24" target="N26">
<data key="endline">48</data>
<data key="startline">48</data>
<data key="sourcecode">return 0;</data>
</edge>
<edge id="E41" source="N25" target="N27">
<data key="endline">39</data>
<data key="startline">39</data>
<data key="sourcecode">a = a + 1</data>
</edge>
<edge id="E42" source="N27" target="N28">
<data key="endline">40</data>
<data key="startline">40</data>
<data key="sourcecode">t = t + 2</data>
</edge>
<edge id="E43" source="N28" target="N12">
<data key="endline">41</data>
<data key="enterLoopHead">true</data>
<data key="startline">41</data>
<data key="sourcecode">s = s + t</data>
</edge>
</graph>
</graphml>
