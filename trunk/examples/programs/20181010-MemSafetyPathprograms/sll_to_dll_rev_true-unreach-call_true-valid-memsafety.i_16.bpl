var #memory_$Pointer$.base : [int][int]int;

var #valid : [int]int;

var #NULL.offset : int;

var #length : [int]int;

var #NULL.base : int;

var #memory_$Pointer$.offset : [int][int]int;

procedure ULTIMATE.start() returns ()
modifies #memory_$Pointer$.base, #valid, #NULL.offset, #length, #NULL.base, #memory_$Pointer$.offset;
{
    var read~$Pointer$_#value.offset : int;
    var main_#t~mem29.offset : int;
    var create_sll_#t~nondet7 : int;
    var alloc_node_~ptr~0.base : int;
    var main_#t~mem33.offset : int;
    var create_sll_#t~mem6.offset : int;
    var alloc_node_#res.base : int;
    var alloc_node_~ptr~0.offset : int;
    var create_sll_#in~pp2.offset : int;
    var chain_node_#in~ppnode.offset : int;
    var main_#t~mem21.base : int;
    var main_old_#valid : [int]int;
    var #Ultimate.alloc_old_#length : [int]int;
    var create_sll_#in~pp1.base : int;
    var write~$Pointer$_#ptr.base : int;
    var write~$Pointer$_#ptr.offset : int;
    var main_#t~mem32.offset : int;
    var create_sll_~pp2.base : int;
    var main_~prev~0.base : int;
    var alloc_node_#t~malloc2.offset : int;
    var main_~#p1~0.base : int;
    var chain_node_~ppnode.base : int;
    var #Ultimate.alloc_old_#valid : [int]int;
    var main_#t~mem34.offset : int;
    var main_~#p1~0.offset : int;
    var main_#t~mem31.offset : int;
    var create_sll_~pp1.offset : int;
    var main_#t~mem28.base : int;
    var main_#t~mem27.base : int;
    var main_#t~mem23.base : int;
    var main_#t~mem24.base : int;
    var write~$Pointer$_#value.offset : int;
    var main_~#p2~0.offset : int;
    var write~$Pointer$_old_#memory_$Pointer$.base : [int][int]int;
    var #Ultimate.alloc_~size : int;
    var main_#t~mem20.base : int;
    var main_#t~mem31.base : int;
    var create_sll_~#list~0.offset : int;
    var create_sll_#in~pp2.base : int;
    var main_#t~mem28.offset : int;
    var main_#res : int;
    var write~$Pointer$_old_#memory_$Pointer$.offset : [int][int]int;
    var main_#t~mem23.offset : int;
    var create_sll_~pp1.base : int;
    var write~$Pointer$_#sizeOfWrittenType : int;
    var create_sll_#t~mem6.base : int;
    var create_sll_#t~mem8.base : int;
    var main_#t~mem26.offset : int;
    var create_sll_~pp2.offset : int;
    var create_sll_#t~nondet5 : int;
    var main_#t~mem36.base : int;
    var create_sll_#t~nondet9 : int;
    var chain_node_#in~ppnode.base : int;
    var main_#t~mem34.base : int;
    var main_#t~mem35.base : int;
    var main_~list~1.base : int;
    var chain_node_#t~ret3.offset : int;
    var create_sll_~#list~0.base : int;
    var chain_node_#t~mem4.offset : int;
    var #Ultimate.alloc_#res.base : int;
    var #Ultimate.alloc_#res.offset : int;
    var create_sll_#t~mem10.offset : int;
    var main_#t~mem21.offset : int;
    var main_#t~mem36.offset : int;
    var main_#t~mem30.base : int;
    var main_#t~mem32.base : int;
    var read~$Pointer$_#ptr.offset : int;
    var create_sll_#t~mem8.offset : int;
    var create_sll_#t~mem10.base : int;
    var main_#t~mem25.offset : int;
    var main_~#p2~0.base : int;
    var create_sll_#in~pp1.offset : int;
    var chain_node_#t~ret3.base : int;
    var main_#t~mem20.offset : int;
    var alloc_node_#res.offset : int;
    var chain_node_~node~0.offset : int;
    var read~$Pointer$_#value.base : int;
    var chain_node_~node~0.base : int;
    var main_#t~ret19.base : int;
    var read~$Pointer$_#sizeOfReadType : int;
    var main_~prev~0.offset : int;
    var main_#t~ret19.offset : int;
    var main_#t~mem26.base : int;
    var main_#t~mem22.offset : int;
    var main_~list~1.offset : int;
    var main_#t~mem29.base : int;
    var main_#t~mem25.base : int;
    var main_#t~mem27.offset : int;
    var main_#t~mem24.offset : int;
    var create_sll_#res.offset : int;
    var main_#t~mem22.base : int;
    var main_#t~mem30.offset : int;
    var chain_node_#t~mem4.base : int;
    var main_#t~mem33.base : int;
    var main_#t~mem35.offset : int;
    var chain_node_~ppnode.offset : int;
    var write~$Pointer$_#value.base : int;
    var create_sll_#res.base : int;
    var read~$Pointer$_#ptr.base : int;
    var alloc_node_#t~malloc2.base : int;

  loc0:
    #NULL.offset, #NULL.base := 0, 0;
    #valid := #valid[0 := 0];
    main_old_#valid := #valid;
    havoc main_#res;
    havoc main_~#p1~0.base, main_#t~mem26.offset, main_#t~ret19.base, main_#t~mem29.offset, main_#t~mem34.offset, main_#t~mem36.base, main_~prev~0.offset, main_~#p1~0.offset, main_#t~mem31.offset, main_#t~ret19.offset, main_#t~mem26.base, main_#t~mem34.base, main_#t~mem35.base, main_~list~1.base, main_#t~mem22.offset, main_~list~1.offset, main_#t~mem28.base, main_#t~mem27.base, main_#t~mem29.base, main_#t~mem23.base, main_#t~mem24.base, main_#t~mem25.base, main_#t~mem33.offset, main_~#p2~0.offset, main_#t~mem27.offset, main_#t~mem24.offset, main_#t~mem21.offset, main_#t~mem36.offset, main_#t~mem20.base, main_#t~mem21.base, main_#t~mem22.base, main_#t~mem30.offset, main_#t~mem31.base, main_#t~mem30.base, main_#t~mem32.base, main_#t~mem33.base, main_#t~mem35.offset, main_#t~mem25.offset, main_~#p2~0.base, main_#t~mem28.offset, main_#t~mem32.offset, main_#t~mem20.offset, main_#t~mem23.offset, main_~prev~0.base;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 4;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume 0 == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base];
    assume #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1] == #valid;
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size] == #length;
    main_~#p1~0.base, main_~#p1~0.offset := #Ultimate.alloc_#res.base, #Ultimate.alloc_#res.offset;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 4;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume 0 == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base];
    assume #valid == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1];
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #length == #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size];
    main_~#p2~0.offset, main_~#p2~0.base := #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    create_sll_#in~pp2.offset, create_sll_#in~pp1.offset, create_sll_#in~pp1.base, create_sll_#in~pp2.base := main_~#p2~0.offset, main_~#p1~0.offset, main_~#p1~0.base, main_~#p2~0.base;
    havoc create_sll_#res.offset, create_sll_#res.base;
    havoc create_sll_#t~mem10.offset, create_sll_#t~mem6.base, create_sll_#t~mem8.base, create_sll_~pp2.offset, create_sll_#t~nondet5, create_sll_#t~nondet7, create_sll_#t~nondet9, create_sll_~#list~0.offset, create_sll_#t~mem8.offset, create_sll_#t~mem10.base, create_sll_~pp1.offset, create_sll_~#list~0.base, create_sll_~pp2.base, create_sll_#t~mem6.offset, create_sll_~pp1.base;
    create_sll_~pp1.offset, create_sll_~pp1.base := create_sll_#in~pp1.offset, create_sll_#in~pp1.base;
    create_sll_~pp2.base, create_sll_~pp2.offset := create_sll_#in~pp2.base, create_sll_#in~pp2.offset;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 4;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume 0 == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base];
    assume #valid == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1];
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size] == #length;
    create_sll_~#list~0.base, create_sll_~#list~0.offset := #Ultimate.alloc_#res.base, #Ultimate.alloc_#res.offset;
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset := #memory_$Pointer$.base, #memory_$Pointer$.offset;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := 0, create_sll_~#list~0.offset, 4, 0, create_sll_~#list~0.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base];
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] && #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]];
    goto loc1;
  loc1:
    chain_node_#in~ppnode.offset, chain_node_#in~ppnode.base := create_sll_~#list~0.offset, create_sll_~#list~0.base;
    havoc chain_node_#t~ret3.offset, chain_node_~ppnode.offset, chain_node_~ppnode.base, chain_node_#t~ret3.base, chain_node_~node~0.base, chain_node_#t~mem4.base, chain_node_#t~mem4.offset, chain_node_~node~0.offset;
    chain_node_~ppnode.offset, chain_node_~ppnode.base := chain_node_#in~ppnode.offset, chain_node_#in~ppnode.base;
    havoc alloc_node_#res.offset, alloc_node_#res.base;
    havoc alloc_node_#t~malloc2.offset, alloc_node_~ptr~0.offset, alloc_node_#t~malloc2.base, alloc_node_~ptr~0.base;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 8;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base] == 0;
    assume #valid == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1];
    assume 0 == #Ultimate.alloc_#res.offset;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #length == #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size];
    alloc_node_#t~malloc2.offset, alloc_node_#t~malloc2.base := #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    alloc_node_~ptr~0.offset, alloc_node_~ptr~0.base := alloc_node_#t~malloc2.offset, alloc_node_#t~malloc2.base;
    assume !(alloc_node_~ptr~0.base == 0) || !(0 == alloc_node_~ptr~0.offset);
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset := #memory_$Pointer$.base, #memory_$Pointer$.offset;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := 0, alloc_node_~ptr~0.offset, 4, 0, alloc_node_~ptr~0.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] && #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]];
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset := #memory_$Pointer$.base, #memory_$Pointer$.offset;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := 0, alloc_node_~ptr~0.offset + 4, 4, 0, alloc_node_~ptr~0.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base];
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] && write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] == #memory_$Pointer$.base;
    alloc_node_#res.offset, alloc_node_#res.base := alloc_node_~ptr~0.offset, alloc_node_~ptr~0.base;
    chain_node_#t~ret3.offset, chain_node_#t~ret3.base := alloc_node_#res.offset, alloc_node_#res.base;
    chain_node_~node~0.base, chain_node_~node~0.offset := chain_node_#t~ret3.base, chain_node_#t~ret3.offset;
    havoc chain_node_#t~ret3.offset, chain_node_#t~ret3.base;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := chain_node_~ppnode.base, 4, chain_node_~ppnode.offset;
    goto loc2;
  loc2:
    goto loc2_0, loc2_1;
  loc2_0:
    assume !(#valid[read~$Pointer$_#ptr.base] == 1);
    goto loc3;
  loc2_1:
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    assume #valid[read~$Pointer$_#ptr.base] == 1;
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base];
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume read~$Pointer$_#value.base == #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] && read~$Pointer$_#value.offset == #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset];
    chain_node_#t~mem4.base, chain_node_#t~mem4.offset := read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset := #memory_$Pointer$.base, #memory_$Pointer$.offset;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := chain_node_#t~mem4.base, chain_node_~node~0.offset, 4, chain_node_#t~mem4.offset, chain_node_~node~0.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base];
    assume #valid[write~$Pointer$_#ptr.base] == 1;
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base];
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] == #memory_$Pointer$.offset && write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] == #memory_$Pointer$.base;
    havoc chain_node_#t~mem4.base, chain_node_#t~mem4.offset;
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset := #memory_$Pointer$.base, #memory_$Pointer$.offset;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := chain_node_~node~0.base, chain_node_~ppnode.offset, 4, chain_node_~node~0.offset, chain_node_~ppnode.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base];
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] && #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]];
    assume create_sll_#t~nondet5 <= 2147483647 && 0 <= create_sll_#t~nondet5 + 2147483648;
    assume !(create_sll_#t~nondet5 == 0);
    havoc create_sll_#t~nondet5;
    goto loc1;
  loc3:
    assert false;
}

