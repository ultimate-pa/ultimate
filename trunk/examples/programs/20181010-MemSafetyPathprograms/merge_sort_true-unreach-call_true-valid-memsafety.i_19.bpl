var #memory_$Pointer$.base : [int][int]int;

var #valid : [int]int;

var #memory_int : [int][int]int;

var #NULL.offset : int;

var #length : [int]int;

var #NULL.base : int;

var #memory_$Pointer$.offset : [int][int]int;

procedure ULTIMATE.start() returns ()
modifies #memory_$Pointer$.base, #valid, #memory_int, #NULL.offset, #length, #NULL.base, #memory_$Pointer$.offset;
{
    var inspect_before_#t~mem25.base : int;
    var inspect_before_#t~mem24.base : int;
    var inspect_before_#t~mem26.base : int;
    var inspect_before_~shape.base : int;
    var inspect_before_~shape.offset : int;
    var write~$Pointer$_#sizeOfWrittenType : int;
    var main_#t~nondet36 : int;
    var inspect_before_#t~mem20.offset : int;
    var read~$Pointer$_#value.offset : int;
    var main_~node~1.offset : int;
    var inspect_before_#t~mem23.offset : int;
    var main_#t~ret40.base : int;
    var write~int_#ptr.base : int;
    var write~$Pointer$_old_#memory_int : [int][int]int;
    var inspect_before_#t~mem29.base : int;
    var main_~item~0.base : int;
    var inspect_before_#t~mem26.offset : int;
    var inspect_before_#t~mem28.base : int;
    var inspect_before_#t~mem21.base : int;
    var inspect_before_#t~mem22.base : int;
    var inspect_before_#t~mem23.base : int;
    var inspect_before_#t~mem20.base : int;
    var inspect_before_#t~mem27.base : int;
    var main_#t~mem42.offset : int;
    var inspect_before_#t~mem29.offset : int;
    var #Ultimate.alloc_#res.base : int;
    var #Ultimate.alloc_#res.offset : int;
    var inspect_before_#t~mem22.offset : int;
    var inspect_before_#t~mem28.offset : int;
    var write~int_old_#memory_$Pointer$.offset : [int][int]int;
    var main_#t~malloc39.offset : int;
    var main_~item~0.offset : int;
    var inspect_before_#in~shape.offset : int;
    var write~int_old_#memory_int : [int][int]int;
    var main_old_#valid : [int]int;
    var main_#t~mem41.base : int;
    var #Ultimate.alloc_old_#length : [int]int;
    var read~$Pointer$_#ptr.offset : int;
    var write~$Pointer$_#ptr.base : int;
    var main_#t~mem43.base : int;
    var main_#t~malloc39.base : int;
    var main_~node~1.base : int;
    var inspect_before_#t~mem27.offset : int;
    var write~$Pointer$_#ptr.offset : int;
    var write~int_#sizeOfWrittenType : int;
    var main_~node~2.offset : int;
    var main_#t~nondet38 : int;
    var write~int_#value : int;
    var inspect_before_#in~shape.base : int;
    var main_#t~malloc37.base : int;
    var main_#t~mem43.offset : int;
    var read~$Pointer$_#value.base : int;
    var #Ultimate.alloc_old_#valid : [int]int;
    var main_~data~0.offset : int;
    var read~$Pointer$_#sizeOfReadType : int;
    var main_#t~ret40.offset : int;
    var write~int_#ptr.offset : int;
    var main_~snext~0.offset : int;
    var inspect_before_#t~mem21.offset : int;
    var inspect_before_#t~mem24.offset : int;
    var write~$Pointer$_#value.offset : int;
    var write~$Pointer$_old_#memory_$Pointer$.base : [int][int]int;
    var #Ultimate.alloc_~size : int;
    var main_~data~0.base : int;
    var write~int_old_#memory_$Pointer$.base : [int][int]int;
    var main_~node~2.base : int;
    var main_#t~mem42.base : int;
    var write~$Pointer$_#value.base : int;
    var main_#t~malloc37.offset : int;
    var main_#t~mem41.offset : int;
    var main_#res : int;
    var write~$Pointer$_old_#memory_$Pointer$.offset : [int][int]int;
    var read~$Pointer$_#ptr.base : int;
    var main_~snext~0.base : int;
    var inspect_before_#t~mem25.offset : int;

  loc0:
    #NULL.offset, #NULL.base := 0, 0;
    #valid := #valid[0 := 0];
    main_old_#valid := #valid;
    havoc main_#res;
    havoc main_#t~mem43.offset, main_~data~0.base, main_#t~nondet36, main_#t~malloc39.offset, main_~item~0.offset, main_~data~0.offset, main_~node~1.offset, main_#t~mem41.base, main_#t~ret40.offset, main_#t~ret40.base, main_#t~mem43.base, main_#t~malloc39.base, main_~node~1.base, main_~node~2.base, main_#t~mem42.base, main_~snext~0.offset, main_~node~2.offset, main_#t~malloc37.offset, main_#t~mem41.offset, main_#t~nondet38, main_~item~0.base, main_~snext~0.base, main_#t~mem42.offset, main_#t~malloc37.base;
    main_~data~0.base, main_~data~0.offset := 0, 0;
    goto loc1;
  loc1:
    assume main_#t~nondet36 <= 2147483647 && 0 <= main_#t~nondet36 + 2147483648;
    goto loc2;
  loc2:
    goto loc2_0, loc2_1;
  loc2_0:
    assume main_#t~nondet36 == 0;
    havoc main_#t~nondet36;
    assume !(main_~data~0.offset == 0) || !(0 == main_~data~0.base);
    inspect_before_#in~shape.offset, inspect_before_#in~shape.base := main_~data~0.offset, main_~data~0.base;
    havoc inspect_before_#t~mem25.base, inspect_before_#t~mem24.base, inspect_before_#t~mem26.base, inspect_before_~shape.base, inspect_before_#t~mem22.offset, inspect_before_~shape.offset, inspect_before_#t~mem28.offset, inspect_before_#t~mem20.offset, inspect_before_#t~mem23.offset, inspect_before_#t~mem27.offset, inspect_before_#t~mem21.offset, inspect_before_#t~mem24.offset, inspect_before_#t~mem29.base, inspect_before_#t~mem26.offset, inspect_before_#t~mem28.base, inspect_before_#t~mem21.base, inspect_before_#t~mem22.base, inspect_before_#t~mem23.base, inspect_before_#t~mem20.base, inspect_before_#t~mem25.offset, inspect_before_#t~mem27.base, inspect_before_#t~mem29.offset;
    inspect_before_~shape.base, inspect_before_~shape.offset := inspect_before_#in~shape.base, inspect_before_#in~shape.offset;
    assume !(inspect_before_~shape.base == 0) || !(0 == inspect_before_~shape.offset);
    goto loc3;
  loc2_1:
    assume !(main_#t~nondet36 == 0);
    havoc main_#t~nondet36;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 8;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume 0 == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base];
    assume #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1] == #valid;
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size] == #length;
    main_#t~malloc37.offset, main_#t~malloc37.base := #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    main_~node~1.base, main_~node~1.offset := main_#t~malloc37.base, main_#t~malloc37.offset;
    assume !(main_~node~1.offset == 0) || !(main_~node~1.base == 0);
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset, write~$Pointer$_old_#memory_int := #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := 0, main_~node~1.offset, 4, 0, main_~node~1.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume (#memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] && #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]]) && #memory_int == write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := #memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset]]];
    assume main_#t~nondet38 <= 2147483647 && 0 <= main_#t~nondet38 + 2147483648;
    write~int_old_#memory_$Pointer$.offset, write~int_old_#memory_$Pointer$.base, write~int_old_#memory_int := #memory_$Pointer$.offset, #memory_$Pointer$.base, #memory_int;
    write~int_#sizeOfWrittenType, write~int_#ptr.base, write~int_#value, write~int_#ptr.offset := 4, main_~node~1.base, main_#t~nondet38, main_~node~1.offset + 4;
    assume #valid[write~int_#ptr.base] == 1;
    assume 0 <= write~int_#ptr.offset && write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];
    assume 1 == #valid[write~int_#ptr.base];
    assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base] && 0 <= write~int_#ptr.offset;
    havoc #memory_int;
    assume (#memory_$Pointer$.offset == write~int_old_#memory_$Pointer$.offset[write~int_#ptr.base := write~int_old_#memory_$Pointer$.offset[write~int_#ptr.base][write~int_#ptr.offset := #memory_$Pointer$.offset[write~int_#ptr.base][write~int_#ptr.offset]]] && #memory_int == write~int_old_#memory_int[write~int_#ptr.base := write~int_old_#memory_int[write~int_#ptr.base][write~int_#ptr.offset := write~int_#value]]) && write~int_old_#memory_$Pointer$.base[write~int_#ptr.base := write~int_old_#memory_$Pointer$.base[write~int_#ptr.base][write~int_#ptr.offset := #memory_$Pointer$.base[write~int_#ptr.base][write~int_#ptr.offset]]] == #memory_$Pointer$.base;
    havoc main_#t~nondet38;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 8;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume 0 == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base];
    assume #valid == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1];
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #length == #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size];
    main_#t~malloc39.base, main_#t~malloc39.offset := #Ultimate.alloc_#res.base, #Ultimate.alloc_#res.offset;
    main_~item~0.base, main_~item~0.offset := main_#t~malloc39.base, main_#t~malloc39.offset;
    assume !(main_~item~0.offset == 0) || !(0 == main_~item~0.base);
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset, write~$Pointer$_old_#memory_int := #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := main_~node~1.base, main_~item~0.offset, 4, main_~node~1.offset, main_~item~0.base;
    assume #valid[write~$Pointer$_#ptr.base] == 1;
    assume write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base];
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume (#memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] && #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]]) && #memory_int == write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := #memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset]]];
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset, write~$Pointer$_old_#memory_int := #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := main_~data~0.base, main_~item~0.offset + 4, 4, main_~data~0.offset, main_~item~0.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base];
    assume #valid[write~$Pointer$_#ptr.base] == 1;
    assume write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume (write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := #memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset]]] == #memory_int && write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] == #memory_$Pointer$.base) && write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] == #memory_$Pointer$.offset;
    main_~data~0.base, main_~data~0.offset := main_~item~0.base, main_~item~0.offset;
    goto loc1;
  loc3:
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := inspect_before_~shape.base, 4, inspect_before_~shape.offset + 4;
    goto loc4;
  loc4:
    goto loc4_0, loc4_1;
  loc4_0:
    assume !(#valid[read~$Pointer$_#ptr.base] == 1);
    goto loc5;
  loc4_1:
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base];
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.base && #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.offset;
    inspect_before_#t~mem25.base, inspect_before_#t~mem25.offset := read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume !(inspect_before_#t~mem25.base == 0) || !(inspect_before_#t~mem25.offset == 0);
    havoc inspect_before_#t~mem25.base, inspect_before_#t~mem25.offset;
    assume !(0 == inspect_before_~shape.offset) || !(inspect_before_~shape.base == 0);
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := inspect_before_~shape.base, 4, inspect_before_~shape.offset + 4;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#ptr.offset + read~$Pointer$_#sizeOfReadType <= #length[read~$Pointer$_#ptr.base];
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#ptr.offset + read~$Pointer$_#sizeOfReadType <= #length[read~$Pointer$_#ptr.base];
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.offset && #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.base;
    inspect_before_#t~mem21.offset, inspect_before_#t~mem21.base := read~$Pointer$_#value.offset, read~$Pointer$_#value.base;
    assume !(inspect_before_#t~mem21.offset == 0) || !(0 == inspect_before_#t~mem21.base);
    havoc inspect_before_#t~mem21.offset, inspect_before_#t~mem21.base;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := inspect_before_~shape.base, 4, inspect_before_~shape.offset;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#ptr.offset + read~$Pointer$_#sizeOfReadType <= #length[read~$Pointer$_#ptr.base];
    assume #valid[read~$Pointer$_#ptr.base] == 1;
    assume read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume read~$Pointer$_#value.base == #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] && read~$Pointer$_#value.offset == #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset];
    inspect_before_#t~mem22.offset, inspect_before_#t~mem22.base := read~$Pointer$_#value.offset, read~$Pointer$_#value.base;
    assume !(inspect_before_#t~mem22.offset == 0) || !(0 == inspect_before_#t~mem22.base);
    havoc inspect_before_#t~mem22.offset, inspect_before_#t~mem22.base;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := inspect_before_~shape.base, 4, inspect_before_~shape.offset;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base];
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume read~$Pointer$_#ptr.offset + read~$Pointer$_#sizeOfReadType <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.offset && read~$Pointer$_#value.base == #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset];
    inspect_before_#t~mem23.base, inspect_before_#t~mem23.offset := read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := inspect_before_#t~mem23.base, 4, inspect_before_#t~mem23.offset;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#ptr.offset + read~$Pointer$_#sizeOfReadType <= #length[read~$Pointer$_#ptr.base];
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume read~$Pointer$_#value.base == #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] && #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.offset;
    inspect_before_#t~mem24.base, inspect_before_#t~mem24.offset := read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume inspect_before_#t~mem24.offset == 0 && 0 == inspect_before_#t~mem24.base;
    havoc inspect_before_#t~mem24.base, inspect_before_#t~mem24.offset;
    havoc inspect_before_#t~mem23.base, inspect_before_#t~mem23.offset;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := inspect_before_~shape.base, 4, inspect_before_~shape.offset + 4;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    assume #valid[read~$Pointer$_#ptr.base] == 1;
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base];
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.base && #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.offset;
    inspect_before_#t~mem20.offset, inspect_before_#t~mem20.base := read~$Pointer$_#value.offset, read~$Pointer$_#value.base;
    inspect_before_~shape.base, inspect_before_~shape.offset := inspect_before_#t~mem20.base, inspect_before_#t~mem20.offset;
    havoc inspect_before_#t~mem20.offset, inspect_before_#t~mem20.base;
    goto loc3;
  loc5:
    assert false;
}

