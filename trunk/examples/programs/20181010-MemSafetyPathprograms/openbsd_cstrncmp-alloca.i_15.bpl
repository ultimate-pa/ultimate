var #valid : [int]int;

var #memory_int : [int][int]int;

var #NULL.offset : int;

var #length : [int]int;

var #NULL.base : int;

procedure ULTIMATE.start() returns ()
modifies #valid, #memory_int, #NULL.offset, #length, #NULL.base;
{
    var read~int_#value : int;
    var cstrncmp_#res : int;
    var cstrncmp_#t~mem7 : int;
    var main_#t~nondet11 : int;
    var main_#t~malloc13.base : int;
    var main_#t~malloc14.base : int;
    var cstrncmp_#t~mem5 : int;
    var cstrncmp_#t~post9.offset : int;
    var write~int_#ptr.base : int;
    var cstrncmp_#in~s2.offset : int;
    var main_~nondetString1~0.base : int;
    var cstrncmp_~n : int;
    var main_~length2~0 : int;
    var #Ultimate.alloc_#res.base : int;
    var cstrncmp_#t~post3.offset : int;
    var #Ultimate.alloc_#res.offset : int;
    var main_~length1~0 : int;
    var write~int_old_#memory_int : [int][int]int;
    var cstrncmp_#t~pre2 : int;
    var main_old_#valid : [int]int;
    var main_~nondetString2~0.base : int;
    var cstrncmp_#in~s1.offset : int;
    var #Ultimate.alloc_old_#length : [int]int;
    var write~int_#sizeOfWrittenType : int;
    var cstrncmp_#t~mem10 : int;
    var read~int_#ptr.base : int;
    var cstrncmp_#in~s2.base : int;
    var main_#t~nondet15 : int;
    var write~int_#value : int;
    var cstrncmp_#t~pre6.base : int;
    var cstrncmp_#t~mem8 : int;
    var cstrncmp_~s2.base : int;
    var cstrncmp_#t~mem4 : int;
    var main_#t~nondet12 : int;
    var #Ultimate.alloc_old_#valid : [int]int;
    var cstrncmp_~s1.base : int;
    var write~int_#ptr.offset : int;
    var cstrncmp_#t~post9.base : int;
    var cstrncmp_#t~post3.base : int;
    var cstrncmp_~s1.offset : int;
    var #Ultimate.alloc_~size : int;
    var main_#t~malloc13.offset : int;
    var cstrncmp_#in~n : int;
    var read~int_#sizeOfReadType : int;
    var main_~nondetString2~0.offset : int;
    var cstrncmp_#t~pre6.offset : int;
    var main_#t~ret16 : int;
    var cstrncmp_~s2.offset : int;
    var read~int_#ptr.offset : int;
    var main_#res : int;
    var cstrncmp_#in~s1.base : int;
    var main_~nondetString1~0.offset : int;
    var main_#t~malloc14.offset : int;

  loc0:
    #NULL.offset, #NULL.base := 0, 0;
    #valid := #valid[0 := 0];
    main_old_#valid := #valid;
    havoc main_#res;
    havoc main_#t~nondet11, main_#t~nondet12, main_#t~malloc13.base, main_#t~malloc13.offset, main_#t~malloc14.base, main_~length1~0, main_~nondetString2~0.base, main_~nondetString2~0.offset, main_#t~ret16, main_~nondetString1~0.base, main_#t~nondet15, main_~nondetString1~0.offset, main_#t~malloc14.offset, main_~length2~0;
    assume 0 <= main_#t~nondet11 + 2147483648 && main_#t~nondet11 <= 2147483647;
    main_~length1~0 := main_#t~nondet11;
    havoc main_#t~nondet11;
    assume 0 <= main_#t~nondet12 + 2147483648 && main_#t~nondet12 <= 2147483647;
    main_~length2~0 := main_#t~nondet12;
    havoc main_#t~nondet12;
    assume !(main_~length1~0 < 1);
    assume !(main_~length2~0 < 1);
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := main_~length1~0;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume 0 == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base];
    assume #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1] == #valid;
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size] == #length;
    main_#t~malloc13.base, main_#t~malloc13.offset := #Ultimate.alloc_#res.base, #Ultimate.alloc_#res.offset;
    main_~nondetString1~0.base, main_~nondetString1~0.offset := main_#t~malloc13.base, main_#t~malloc13.offset;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := main_~length2~0;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume 0 == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base];
    assume #valid == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1];
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #length == #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size];
    main_#t~malloc14.base, main_#t~malloc14.offset := #Ultimate.alloc_#res.base, #Ultimate.alloc_#res.offset;
    main_~nondetString2~0.base, main_~nondetString2~0.offset := main_#t~malloc14.base, main_#t~malloc14.offset;
    write~int_old_#memory_int := #memory_int;
    write~int_#sizeOfWrittenType, write~int_#ptr.base, write~int_#value, write~int_#ptr.offset := 1, main_~nondetString1~0.base, 0, main_~nondetString1~0.offset + main_~length1~0 + -1;
    assume #valid[write~int_#ptr.base] == 1;
    assume 0 <= write~int_#ptr.offset && write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];
    assume 1 == #valid[write~int_#ptr.base];
    assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base] && 0 <= write~int_#ptr.offset;
    havoc #memory_int;
    assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base := write~int_old_#memory_int[write~int_#ptr.base][write~int_#ptr.offset := write~int_#value]];
    write~int_old_#memory_int := #memory_int;
    write~int_#sizeOfWrittenType, write~int_#ptr.base, write~int_#value, write~int_#ptr.offset := 1, main_~nondetString2~0.base, 0, main_~length2~0 + main_~nondetString2~0.offset + -1;
    assume #valid[write~int_#ptr.base] == 1;
    assume 0 <= write~int_#ptr.offset && write~int_#ptr.offset + write~int_#sizeOfWrittenType <= #length[write~int_#ptr.base];
    assume #valid[write~int_#ptr.base] == 1;
    assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base] && 0 <= write~int_#ptr.offset;
    havoc #memory_int;
    assume write~int_old_#memory_int[write~int_#ptr.base := write~int_old_#memory_int[write~int_#ptr.base][write~int_#ptr.offset := write~int_#value]] == #memory_int;
    assume 0 <= main_#t~nondet15 + 2147483648 && main_#t~nondet15 <= 2147483647;
    cstrncmp_#in~s2.offset, cstrncmp_#in~n, cstrncmp_#in~s1.base, cstrncmp_#in~s2.base, cstrncmp_#in~s1.offset := main_~nondetString2~0.offset, main_#t~nondet15, main_~nondetString1~0.base, main_~nondetString2~0.base, main_~nondetString1~0.offset;
    havoc cstrncmp_#res;
    havoc cstrncmp_#t~mem8, cstrncmp_#t~mem7, cstrncmp_~s2.base, cstrncmp_#t~mem4, cstrncmp_#t~mem5, cstrncmp_#t~pre2, cstrncmp_~s1.base, cstrncmp_#t~post9.offset, cstrncmp_#t~pre6.offset, cstrncmp_~s2.offset, cstrncmp_#t~mem10, cstrncmp_#t~post9.base, cstrncmp_~n, cstrncmp_#t~post3.base, cstrncmp_#t~pre6.base, cstrncmp_~s1.offset, cstrncmp_#t~post3.offset;
    cstrncmp_~s1.base, cstrncmp_~s1.offset := cstrncmp_#in~s1.base, cstrncmp_#in~s1.offset;
    cstrncmp_~s2.offset, cstrncmp_~s2.base := cstrncmp_#in~s2.offset, cstrncmp_#in~s2.base;
    cstrncmp_~n := cstrncmp_#in~n;
    assume !(cstrncmp_~n % 4294967296 == 0);
    goto loc1;
  loc1:
    read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := cstrncmp_~s1.base, cstrncmp_~s1.offset, 1;
    assume 1 == #valid[read~int_#ptr.base];
    assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base] && 0 <= read~int_#ptr.offset;
    assume 1 == #valid[read~int_#ptr.base];
    assume 0 <= read~int_#ptr.offset && read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];
    havoc read~int_#value;
    assume #memory_int[read~int_#ptr.base][read~int_#ptr.offset] == read~int_#value;
    cstrncmp_#t~mem4 := read~int_#value;
    cstrncmp_#t~post3.base, cstrncmp_#t~post3.offset := cstrncmp_~s2.base, cstrncmp_~s2.offset;
    cstrncmp_~s2.offset, cstrncmp_~s2.base := cstrncmp_#t~post3.offset + 1, cstrncmp_#t~post3.base;
    read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := cstrncmp_#t~post3.base, cstrncmp_#t~post3.offset, 1;
    assume #valid[read~int_#ptr.base] == 1;
    goto loc2;
  loc2:
    goto loc2_0, loc2_1;
  loc2_0:
    assume !(0 <= read~int_#ptr.offset) || !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);
    goto loc3;
  loc2_1:
    assume 0 <= read~int_#ptr.offset && read~int_#ptr.offset + read~int_#sizeOfReadType <= #length[read~int_#ptr.base];
    assume #valid[read~int_#ptr.base] == 1;
    assume read~int_#ptr.offset + read~int_#sizeOfReadType <= #length[read~int_#ptr.base] && 0 <= read~int_#ptr.offset;
    havoc read~int_#value;
    assume read~int_#value == #memory_int[read~int_#ptr.base][read~int_#ptr.offset];
    cstrncmp_#t~mem5 := read~int_#value;
    assume cstrncmp_#t~mem5 == cstrncmp_#t~mem4;
    havoc cstrncmp_#t~mem5;
    havoc cstrncmp_#t~mem4;
    havoc cstrncmp_#t~post3.base, cstrncmp_#t~post3.offset;
    cstrncmp_#t~post9.base, cstrncmp_#t~post9.offset := cstrncmp_~s1.base, cstrncmp_~s1.offset;
    cstrncmp_~s1.base, cstrncmp_~s1.offset := cstrncmp_#t~post9.base, cstrncmp_#t~post9.offset + 1;
    read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := cstrncmp_#t~post9.base, cstrncmp_#t~post9.offset, 1;
    assume 1 == #valid[read~int_#ptr.base];
    assume 0 <= read~int_#ptr.offset && read~int_#ptr.offset + read~int_#sizeOfReadType <= #length[read~int_#ptr.base];
    assume 1 == #valid[read~int_#ptr.base];
    assume 0 <= read~int_#ptr.offset && read~int_#ptr.offset + read~int_#sizeOfReadType <= #length[read~int_#ptr.base];
    havoc read~int_#value;
    assume read~int_#value == #memory_int[read~int_#ptr.base][read~int_#ptr.offset];
    cstrncmp_#t~mem10 := read~int_#value;
    assume !(cstrncmp_#t~mem10 == 0);
    havoc cstrncmp_#t~mem10;
    havoc cstrncmp_#t~post9.base, cstrncmp_#t~post9.offset;
    cstrncmp_#t~pre2 := cstrncmp_~n + -1;
    cstrncmp_~n := cstrncmp_~n + -1;
    assume !(0 == cstrncmp_#t~pre2 % 4294967296);
    havoc cstrncmp_#t~pre2;
    goto loc1;
  loc3:
    assert false;
}

