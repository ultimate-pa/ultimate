var #memory_$Pointer$.base : [int][int]int;

var #valid : [int]int;

var #memory_int : [int][int]int;

var #NULL.offset : int;

var #length : [int]int;

var #NULL.base : int;

var #memory_$Pointer$.offset : [int][int]int;

procedure ULTIMATE.start() returns ()
modifies #memory_$Pointer$.base, #valid, #memory_int, #NULL.offset, #length, #NULL.base, #memory_$Pointer$.offset;
{
    var main_#t~nondet0 : int;
    var main_#t~mem14.offset : int;
    var main_~pdst~0.base : int;
    var read~$Pointer$_#value.offset : int;
    var main_#t~mem29.offset : int;
    var main_~node~4.base : int;
    var main_~node~1.offset : int;
    var main_~#dst~1.offset : int;
    var main_~node~3.base : int;
    var main_#t~mem38.offset : int;
    var main_#t~mem17.base : int;
    var main_#t~mem18.base : int;
    var main_#t~mem19.base : int;
    var main_#t~mem51.offset : int;
    var main_~pdata~0.offset : int;
    var write~int_#ptr.base : int;
    var main_#t~mem47.offset : int;
    var main_#t~mem14.base : int;
    var main_~item~0.base : int;
    var main_#t~mem13.base : int;
    var main_#t~mem15.base : int;
    var main_~next~0.base : int;
    var main_~next~1.base : int;
    var main_#t~mem16.base : int;
    var main_#t~mem33.offset : int;
    var main_#t~mem12.base : int;
    var main_#t~mem42.offset : int;
    var main_~current~3.base : int;
    var main_#t~mem10.base : int;
    var write~int_old_#memory_$Pointer$.offset : [int][int]int;
    var main_#t~mem21.base : int;
    var main_~#iter~0.base : int;
    var main_~pdata~0.base : int;
    var main_old_#valid : [int]int;
    var main_~current~1.base : int;
    var main_#t~mem48.offset : int;
    var main_#t~mem50.offset : int;
    var main_#t~malloc3.offset : int;
    var #Ultimate.alloc_old_#length : [int]int;
    var write~$Pointer$_#ptr.base : int;
    var main_~node~1.base : int;
    var write~$Pointer$_#ptr.offset : int;
    var write~int_#sizeOfWrittenType : int;
    var main_~node~2.offset : int;
    var main_#t~mem32.offset : int;
    var main_#t~mem19.offset : int;
    var main_#t~mem50.base : int;
    var main_#t~mem52.base : int;
    var write~int_#value : int;
    var main_#t~mem37.offset : int;
    var main_#t~mem40.offset : int;
    var main_#t~mem49.base : int;
    var main_~#sub2~0.offset : int;
    var #Ultimate.alloc_old_#valid : [int]int;
    var main_#t~mem34.offset : int;
    var main_~data~0.offset : int;
    var main_#t~mem46.base : int;
    var main_#t~mem45.base : int;
    var write~int_#ptr.offset : int;
    var main_~#sub1~0.base : int;
    var main_#t~malloc3.base : int;
    var main_#t~mem15.offset : int;
    var main_#t~mem27.base : int;
    var main_#t~mem23.base : int;
    var main_#t~mem24.base : int;
    var write~$Pointer$_#value.offset : int;
    var main_~node~0.offset : int;
    var main_~node~3.offset : int;
    var main_#t~mem10.offset : int;
    var main_#t~nondet28 : int;
    var main_#t~mem9.base : int;
    var main_~#dst~1.base : int;
    var main_#t~mem5.base : int;
    var main_#t~mem6.base : int;
    var write~$Pointer$_old_#memory_$Pointer$.base : [int][int]int;
    var main_~list~0.offset : int;
    var #Ultimate.alloc_~size : int;
    var main_~data~0.base : int;
    var main_~dst~0.offset : int;
    var main_#t~mem12.offset : int;
    var main_#t~mem5.offset : int;
    var main_#t~mem39.offset : int;
    var main_~#iter~1.base : int;
    var main_#t~mem53.offset : int;
    var main_~current~0.base : int;
    var main_~node~2.base : int;
    var main_#t~mem42.base : int;
    var main_~pdst~0.offset : int;
    var main_#res : int;
    var write~$Pointer$_old_#memory_$Pointer$.offset : [int][int]int;
    var main_#t~mem53.base : int;
    var main_#t~mem23.offset : int;
    var main_#t~short20 : bool;
    var main_#t~malloc1.offset : int;
    var main_#t~mem11.offset : int;
    var main_~current~2.offset : int;
    var main_~node~4.offset : int;
    var write~$Pointer$_#sizeOfWrittenType : int;
    var main_#t~nondet2 : int;
    var main_#t~mem17.offset : int;
    var main_~#sub2~0.base : int;
    var main_#t~mem38.base : int;
    var main_#t~mem36.base : int;
    var main_#t~mem37.base : int;
    var main_#t~mem39.base : int;
    var main_#t~mem34.base : int;
    var main_#t~mem35.base : int;
    var main_~list~1.base : int;
    var main_~list~2.base : int;
    var main_~list~0.base : int;
    var main_#t~mem45.offset : int;
    var write~$Pointer$_old_#memory_int : [int][int]int;
    var main_#t~mem8.offset : int;
    var #Ultimate.alloc_#res.base : int;
    var #Ultimate.alloc_#res.offset : int;
    var main_#t~short31 : bool;
    var main_#t~mem21.offset : int;
    var main_#t~mem36.offset : int;
    var main_~item~0.offset : int;
    var main_~next~0.offset : int;
    var main_#t~mem32.base : int;
    var write~int_old_#memory_int : [int][int]int;
    var main_#t~mem41.base : int;
    var main_#t~mem44.offset : int;
    var read~$Pointer$_#ptr.offset : int;
    var main_~#sub1~0.offset : int;
    var main_#t~mem43.base : int;
    var main_~next~1.offset : int;
    var main_#t~mem7.offset : int;
    var main_~current~1.offset : int;
    var main_#t~mem25.offset : int;
    var main_~#iter~1.offset : int;
    var main_~list~2.offset : int;
    var main_#t~mem43.offset : int;
    var main_#t~mem49.offset : int;
    var read~$Pointer$_#value.base : int;
    var main_#t~mem6.offset : int;
    var main_#t~mem47.base : int;
    var main_#t~mem48.base : int;
    var read~$Pointer$_#sizeOfReadType : int;
    var main_#t~mem9.offset : int;
    var main_#t~malloc1.base : int;
    var main_#t~mem22.offset : int;
    var main_~snext~0.offset : int;
    var main_~list~1.offset : int;
    var main_#t~mem13.offset : int;
    var main_#t~mem29.base : int;
    var main_#t~mem25.base : int;
    var main_~current~0.offset : int;
    var main_~dst~0.base : int;
    var main_~current~3.offset : int;
    var main_~#iter~0.offset : int;
    var main_#t~mem4.base : int;
    var main_#t~mem7.base : int;
    var main_#t~mem8.base : int;
    var main_#t~mem18.offset : int;
    var main_#t~mem11.base : int;
    var main_#t~short30 : bool;
    var main_#t~mem27.offset : int;
    var main_#t~mem24.offset : int;
    var main_#t~mem22.base : int;
    var write~int_old_#memory_$Pointer$.base : [int][int]int;
    var main_#t~mem40.base : int;
    var main_#t~mem16.offset : int;
    var main_~node~0.base : int;
    var main_#t~mem33.base : int;
    var main_~current~2.base : int;
    var main_#t~mem35.offset : int;
    var main_#t~mem44.base : int;
    var write~$Pointer$_#value.base : int;
    var main_#t~mem4.offset : int;
    var main_#t~mem41.offset : int;
    var main_#t~short26 : bool;
    var main_#t~mem51.base : int;
    var read~$Pointer$_#ptr.base : int;
    var main_~snext~0.base : int;
    var main_#t~mem52.offset : int;
    var main_#t~mem46.offset : int;

  loc0:
    #NULL.offset, #NULL.base := 0, 0;
    #valid := #valid[0 := 0];
    main_old_#valid := #valid;
    havoc main_#res;
    havoc main_#t~nondet0, main_#t~mem14.offset, main_~pdst~0.base, main_#t~mem29.offset, main_~node~4.base, main_~node~1.offset, main_~#dst~1.offset, main_~node~3.base, main_#t~mem38.offset, main_#t~mem17.base, main_#t~mem18.base, main_#t~mem19.base, main_#t~mem51.offset, main_~pdata~0.offset, main_#t~mem47.offset, main_#t~mem14.base, main_~item~0.base, main_#t~mem13.base, main_#t~mem15.base, main_~next~0.base, main_~next~1.base, main_#t~mem16.base, main_#t~mem33.offset, main_#t~mem12.base, main_#t~mem42.offset, main_~current~3.base, main_#t~mem10.base, main_#t~mem21.base, main_~#iter~0.base, main_~pdata~0.base, main_~current~1.base, main_#t~mem48.offset, main_#t~mem50.offset, main_#t~malloc3.offset, main_~node~1.base, main_~node~2.offset, main_#t~mem32.offset, main_#t~mem19.offset, main_#t~mem50.base, main_#t~mem52.base, main_#t~mem37.offset, main_#t~mem40.offset, main_#t~mem49.base, main_~#sub2~0.offset, main_#t~mem34.offset, main_~data~0.offset, main_#t~mem46.base, main_#t~mem45.base, main_~#sub1~0.base, main_#t~malloc3.base, main_#t~mem15.offset, main_#t~mem27.base, main_#t~mem23.base, main_#t~mem24.base, main_~node~0.offset, main_~node~3.offset, main_#t~mem10.offset, main_#t~nondet28, main_#t~mem9.base, main_~#dst~1.base, main_#t~mem5.base, main_#t~mem6.base, main_~list~0.offset, main_~data~0.base, main_~dst~0.offset, main_#t~mem12.offset, main_#t~mem5.offset, main_#t~mem39.offset, main_~#iter~1.base, main_#t~mem53.offset, main_~current~0.base, main_~node~2.base, main_#t~mem42.base, main_~pdst~0.offset, main_#t~mem53.base, main_#t~mem23.offset, main_#t~short20, main_#t~malloc1.offset, main_#t~mem11.offset, main_~current~2.offset, main_~node~4.offset, main_#t~nondet2, main_#t~mem17.offset, main_~#sub2~0.base, main_#t~mem38.base, main_#t~mem36.base, main_#t~mem37.base, main_#t~mem39.base, main_#t~mem34.base, main_#t~mem35.base, main_~list~1.base, main_~list~2.base, main_~list~0.base, main_#t~mem45.offset, main_#t~mem8.offset, main_#t~short31, main_#t~mem21.offset, main_#t~mem36.offset, main_~item~0.offset, main_~next~0.offset, main_#t~mem32.base, main_#t~mem41.base, main_#t~mem44.offset, main_~#sub1~0.offset, main_#t~mem43.base, main_~next~1.offset, main_#t~mem7.offset, main_~current~1.offset, main_#t~mem25.offset, main_~#iter~1.offset, main_~list~2.offset, main_#t~mem43.offset, main_#t~mem49.offset, main_#t~mem6.offset, main_#t~mem47.base, main_#t~mem48.base, main_#t~mem9.offset, main_#t~malloc1.base, main_#t~mem22.offset, main_~snext~0.offset, main_~list~1.offset, main_#t~mem13.offset, main_#t~mem29.base, main_#t~mem25.base, main_~current~0.offset, main_~dst~0.base, main_~current~3.offset, main_~#iter~0.offset, main_#t~mem4.base, main_#t~mem7.base, main_#t~mem8.base, main_#t~mem18.offset, main_#t~mem11.base, main_#t~short30, main_#t~mem27.offset, main_#t~mem24.offset, main_#t~mem22.base, main_#t~mem40.base, main_#t~mem16.offset, main_~node~0.base, main_#t~mem33.base, main_~current~2.base, main_#t~mem35.offset, main_#t~mem44.base, main_#t~mem4.offset, main_#t~mem41.offset, main_#t~short26, main_#t~mem51.base, main_~snext~0.base, main_#t~mem52.offset, main_#t~mem46.offset;
    main_~data~0.base, main_~data~0.offset := 0, 0;
    goto loc1;
  loc1:
    assume 0 <= main_#t~nondet0 + 2147483648 && main_#t~nondet0 <= 2147483647;
    goto loc2;
  loc2:
    goto loc2_0, loc2_1;
  loc2_0:
    assume 0 == main_#t~nondet0;
    havoc main_#t~nondet0;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 8;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume 0 == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base];
    assume #valid == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1];
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #length == #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size];
    main_~#iter~0.base, main_~#iter~0.offset := #Ultimate.alloc_#res.base, #Ultimate.alloc_#res.offset;
    main_~list~0.offset, main_~list~0.base := main_~data~0.offset, main_~data~0.base;
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset, write~$Pointer$_old_#memory_int := #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := main_~list~0.base, main_~#iter~0.offset, 4, main_~list~0.offset, main_~#iter~0.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base];
    assume #valid[write~$Pointer$_#ptr.base] == 1;
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base];
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume (write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] == #memory_$Pointer$.base && write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] == #memory_$Pointer$.offset) && write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := #memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset]]] == #memory_int;
    assume !(0 == main_~list~0.offset) || !(0 == main_~list~0.base);
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := main_~list~0.base, 4, main_~list~0.offset;
    assume #valid[read~$Pointer$_#ptr.base] == 1;
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base];
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base];
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume read~$Pointer$_#value.base == #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] && read~$Pointer$_#value.offset == #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset];
    main_#t~mem4.offset, main_#t~mem4.base := read~$Pointer$_#value.offset, read~$Pointer$_#value.base;
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset, write~$Pointer$_old_#memory_int := #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := main_#t~mem4.base, main_~#iter~0.offset + 4, 4, main_#t~mem4.offset, main_~#iter~0.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base];
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume (#memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] && #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]]) && write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := #memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset]]] == #memory_int;
    havoc main_#t~mem4.offset, main_#t~mem4.base;
    havoc main_~node~1.base, main_~node~1.offset;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := main_~#iter~0.base, 4, main_~#iter~0.offset;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#ptr.offset + read~$Pointer$_#sizeOfReadType <= #length[read~$Pointer$_#ptr.base];
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#ptr.offset + read~$Pointer$_#sizeOfReadType <= #length[read~$Pointer$_#ptr.base];
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.base && #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.offset;
    main_#t~mem5.offset, main_#t~mem5.base := read~$Pointer$_#value.offset, read~$Pointer$_#value.base;
    assume !(0 == main_#t~mem5.offset) || !(main_#t~mem5.base == 0);
    havoc main_#t~mem5.offset, main_#t~mem5.base;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := main_~#iter~0.base, 4, main_~#iter~0.offset + 4;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#ptr.offset + read~$Pointer$_#sizeOfReadType <= #length[read~$Pointer$_#ptr.base];
    assume #valid[read~$Pointer$_#ptr.base] == 1;
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base];
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume read~$Pointer$_#value.base == #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] && read~$Pointer$_#value.offset == #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset];
    main_#t~mem6.offset, main_#t~mem6.base := read~$Pointer$_#value.offset, read~$Pointer$_#value.base;
    main_~current~0.offset, main_~current~0.base := main_#t~mem6.offset, main_#t~mem6.base;
    havoc main_#t~mem6.offset, main_#t~mem6.base;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := main_~current~0.base, 4, main_~current~0.offset + 4;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    assume #valid[read~$Pointer$_#ptr.base] == 1;
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#ptr.offset + read~$Pointer$_#sizeOfReadType <= #length[read~$Pointer$_#ptr.base];
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.base && #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.offset;
    main_#t~mem7.offset, main_#t~mem7.base := read~$Pointer$_#value.offset, read~$Pointer$_#value.base;
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset, write~$Pointer$_old_#memory_int := #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := main_#t~mem7.base, main_~#iter~0.offset + 4, 4, main_#t~mem7.offset, main_~#iter~0.base;
    assume #valid[write~$Pointer$_#ptr.base] == 1;
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base];
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume (write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] == #memory_$Pointer$.offset && #memory_int == write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := #memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset]]]) && #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]];
    assume 0 == main_#t~mem7.base && 0 == main_#t~mem7.offset;
    havoc main_#t~mem7.offset, main_#t~mem7.base;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := main_~#iter~0.base, 4, main_~#iter~0.offset;
    assume #valid[read~$Pointer$_#ptr.base] == 1;
    assume read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    assume #valid[read~$Pointer$_#ptr.base] == 1;
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#ptr.offset + read~$Pointer$_#sizeOfReadType <= #length[read~$Pointer$_#ptr.base];
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume read~$Pointer$_#value.base == #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] && #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.offset;
    main_#t~mem8.offset, main_#t~mem8.base := read~$Pointer$_#value.offset, read~$Pointer$_#value.base;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := main_#t~mem8.base, 4, main_#t~mem8.offset + 4;
    assume #valid[read~$Pointer$_#ptr.base] == 1;
    assume read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.offset && read~$Pointer$_#value.base == #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset];
    main_#t~mem9.offset, main_#t~mem9.base := read~$Pointer$_#value.offset, read~$Pointer$_#value.base;
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset, write~$Pointer$_old_#memory_int := #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := main_#t~mem9.base, main_~#iter~0.offset, 4, main_#t~mem9.offset, main_~#iter~0.base;
    assume #valid[write~$Pointer$_#ptr.base] == 1;
    assume write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base];
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume (#memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] && #memory_int == write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := #memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset]]]) && #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]];
    assume !(0 == main_#t~mem9.offset) || !(0 == main_#t~mem9.base);
    havoc main_#t~mem9.offset, main_#t~mem9.base;
    havoc main_#t~mem8.offset, main_#t~mem8.base;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := main_~#iter~0.base, 4, main_~#iter~0.offset;
    assume 1 == #valid[read~$Pointer$_#ptr.base];
    assume read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base] && 0 <= read~$Pointer$_#ptr.offset;
    assume #valid[read~$Pointer$_#ptr.base] == 1;
    assume 0 <= read~$Pointer$_#ptr.offset && read~$Pointer$_#sizeOfReadType + read~$Pointer$_#ptr.offset <= #length[read~$Pointer$_#ptr.base];
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.base && #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] == read~$Pointer$_#value.offset;
    main_#t~mem10.base, main_#t~mem10.offset := read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := main_#t~mem10.base, 4, main_#t~mem10.offset;
    assume !(1 == #valid[read~$Pointer$_#ptr.base]);
    goto loc3;
  loc2_1:
    assume !(0 == main_#t~nondet0);
    havoc main_#t~nondet0;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 8;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume 0 == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base];
    assume #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1] == #valid;
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size] == #length;
    main_#t~malloc1.offset, main_#t~malloc1.base := #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    main_~node~0.offset, main_~node~0.base := main_#t~malloc1.offset, main_#t~malloc1.base;
    assume !(0 == main_~node~0.base) || !(main_~node~0.offset == 0);
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset, write~$Pointer$_old_#memory_int := #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := 0, main_~node~0.offset + 4, 4, 0, main_~node~0.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume (#memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] && #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]]) && #memory_int == write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := #memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset]]];
    assume 0 <= main_#t~nondet2 + 2147483648 && main_#t~nondet2 <= 2147483647;
    write~int_old_#memory_$Pointer$.offset, write~int_old_#memory_$Pointer$.base, write~int_old_#memory_int := #memory_$Pointer$.offset, #memory_$Pointer$.base, #memory_int;
    write~int_#sizeOfWrittenType, write~int_#ptr.base, write~int_#value, write~int_#ptr.offset := 4, main_~node~0.base, main_#t~nondet2, main_~node~0.offset;
    assume #valid[write~int_#ptr.base] == 1;
    assume 0 <= write~int_#ptr.offset && write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];
    assume 1 == #valid[write~int_#ptr.base];
    assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base] && 0 <= write~int_#ptr.offset;
    havoc #memory_int;
    assume (#memory_$Pointer$.offset == write~int_old_#memory_$Pointer$.offset[write~int_#ptr.base := write~int_old_#memory_$Pointer$.offset[write~int_#ptr.base][write~int_#ptr.offset := #memory_$Pointer$.offset[write~int_#ptr.base][write~int_#ptr.offset]]] && #memory_int == write~int_old_#memory_int[write~int_#ptr.base := write~int_old_#memory_int[write~int_#ptr.base][write~int_#ptr.offset := write~int_#value]]) && write~int_old_#memory_$Pointer$.base[write~int_#ptr.base := write~int_old_#memory_$Pointer$.base[write~int_#ptr.base][write~int_#ptr.offset := #memory_$Pointer$.base[write~int_#ptr.base][write~int_#ptr.offset]]] == #memory_$Pointer$.base;
    havoc main_#t~nondet2;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 8;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume 0 == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base];
    assume #valid == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1];
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(0 == #Ultimate.alloc_#res.base);
    assume #length == #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size];
    main_#t~malloc3.base, main_#t~malloc3.offset := #Ultimate.alloc_#res.base, #Ultimate.alloc_#res.offset;
    main_~item~0.base, main_~item~0.offset := main_#t~malloc3.base, main_#t~malloc3.offset;
    assume !(main_~item~0.offset == 0) || !(0 == main_~item~0.base);
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset, write~$Pointer$_old_#memory_int := #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := main_~node~0.base, main_~item~0.offset, 4, main_~node~0.offset, main_~item~0.base;
    assume #valid[write~$Pointer$_#ptr.base] == 1;
    assume write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base];
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume (#memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] && #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]]) && #memory_int == write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := #memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset]]];
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset, write~$Pointer$_old_#memory_int := #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := main_~data~0.base, main_~item~0.offset + 4, 4, main_~data~0.offset, main_~item~0.base;
    assume 1 == #valid[write~$Pointer$_#ptr.base];
    assume 0 <= write~$Pointer$_#ptr.offset && write~$Pointer$_#ptr.offset + write~$Pointer$_#sizeOfWrittenType <= #length[write~$Pointer$_#ptr.base];
    assume #valid[write~$Pointer$_#ptr.base] == 1;
    assume write~$Pointer$_#sizeOfWrittenType + write~$Pointer$_#ptr.offset <= #length[write~$Pointer$_#ptr.base] && 0 <= write~$Pointer$_#ptr.offset;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume (write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := #memory_int[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset]]] == #memory_int && write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] == #memory_$Pointer$.base) && write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] == #memory_$Pointer$.offset;
    main_~data~0.base, main_~data~0.offset := main_~item~0.base, main_~item~0.offset;
    goto loc1;
  loc3:
    assert false;
}

