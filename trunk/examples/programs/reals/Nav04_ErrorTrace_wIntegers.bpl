procedure nav01Example() {
	var x1,x1_new,x1_old : int ;
	var x2,x2_new,x2_old : int ;
	var v1,v1_new,v1_old : int ;
	var v2,v2_new,v2_old : int ;
	var t,t_new,t_old : int ;
	var eps : int ;
	
	// initial state
	assume ( 0 <= x1 && x1 <= 100 );
	assume ( 0 <= x2 && x2 <= 100 );
	assume ( 10 <= v1 && v1 <= 50 );
	assume ( 5 <= v2 && v2 <= 25 );
	assume ( t == 0 );
	assume ( eps == 0 );

	x1_old := x1;
	x2_old := x2;
	v1_old := v1;
	v2_old := v2;
	t_old := t;
	
	// invariant
	assume (x1_old >= 0 - eps && x1_old <= 100 + eps);
	assume (x2_old >= 0 - eps && x2_old <= 100 + eps);
	
	havoc x1_new;
	havoc x2_new;
	havoc v1_new;
	havoc v2_new;
	havoc t_new;
	
	// flow
	assume ( 2860000240000005000000000 * x2_new + 200000000000000000000000 * v1_new + 2400000100000000000000000 * v2_new - 200000000000000000000000 * v1_old - 2860000240000005000000000 * x2_old - 2400000100000000000000000 * v2_old - 2022325560505630735533900 * t_new == 0 &&
			2860000240000005000000000 * x1_new + 2400000100000000000000000 * v1_new + 200000000000000000000000 * v2_new - 2860000240000005000000000 * x1_old - 2400000100000000000000000 * v1_old - 200000000000000000000000 * v2_old - 2022325560505630735533900 * t_new == 0 &&
			116000009600000200000000000000000 * v1_new + 19200000800000000000000000000000 * v2_new - 116000009600000200000000000000000 * v1_old - 19200000800000000000000000000000 * v2_old - 254452958874945570259071271068300 * t_new <= 0 &&
			19200000800000000000000000000000 * v1_new + 116000009600000200000000000000000 * v2_new - 19200000800000000000000000000000 * v1_old - 116000009600000200000000000000000 * v2_old - 260744959688945605259071771068300 * t_new <= 0 &&
			4800000200000000000000000 * v1_new + 400000000000000000000000 * v2_new - 4800000200000000000000000 * v1_old - 400000000000000000000000 * v2_old - 10908651983011297471068300 * t_new <= 0 &&
			2400000100000000000000000 * v1_new + 200000000000000000000000 * v2_new - 2860000240000005000000000 * x1_old - 2400000100000000000000000 * v1_old - 200000000000000000000000 * v2_old - 2022325560505630735533900 * t_new <= 0 &&
			400000000000000000000000 * v1_new + 4800000200000000000000000 * v2_new - 400000000000000000000000 * v1_old - 4800000200000000000000000 * v2_old - 11194652007011297971068300 * t_new <= 0 &&
			200000000000000000000000 * v1_new + 2400000100000000000000000 * v2_new - 200000000000000000000000 * v1_old - 2860000240000005000000000 * x2_old - 2400000100000000000000000 * v2_old - 2022325560505630735533900 * t_new <= 0 &&
			20000000000000000 * v1_new - 20000000000000000 * v2_new - 20000000000000000 * v1_old + 20000000000000000 * v2_old - 71500005350000100 * t_new <= 0 &&
			x1_old <= 100 &&
			200 * v1_old <= 100 &&
			x2_old <= 100 &&
			400 * v2_old <= 100 &&
			t_new <= 100 &&
			2000 * v2_old >= 100 &&
			x2_old >= 0 &&
			1000 * v1_old >= 100 &&
			x1_old >= 0 &&
			20000000000000000 * v1_new - 20000000000000000 * v2_new - 20000000000000000 * v1_old + 20000000000000000 * v2_old + 79300005650000100 * t_new >= 0 &&
			200000000000000000000000 * v1_new + 2400000100000000000000000 * v2_new - 200000000000000000000000 * v1_old - 2860000240000005000000000 * x2_old - 2400000100000000000000000 * v2_old - 2022325560505630735533900 * t_new >=0 - 2860000240000005000000000 &&
			2400000100000000000000000 * v1_new + 200000000000000000000000 * v2_new - 2860000240000005000000000 * x1_old - 2400000100000000000000000 * v1_old - 200000000000000000000000 * v2_old - 2022325560505630735533900 * t_new >=0 - 2860000240000005000000000 &&
			4000000000000000000000000000000 * v1_new + 48000002000000000000000000000000 * v2_new - 4000000000000000000000000000000 * v1_old - 48000002000000000000000000000000 * v2_old + 92704663443337216976703535533900 * t_new >= 0 &&
			48000002000000000000000000000000 * v1_new + 4000000000000000000000000000000 * v2_new - 48000002000000000000000000000000 * v1_old - 4000000000000000000000000000000 * v2_old + 107004664643337241976703535533900 * t_new >= 0 &&
			192000008000000000000000000000000000000 * v1_new + 1160000096000002000000000000000000000000 * v2_new - 192000008000000000000000000000000000000 * v1_old - 1160000096000002000000000000000000000000 * v2_old + 2141481308231429654731488900584935533900 * t_new >= 0 &&
			1160000096000002000000000000000000000000 * v1_new + 192000008000000000000000000000000000000 * v2_new - 1160000096000002000000000000000000000000 * v1_old - 192000008000000000000000000000000000000 * v2_old + 2456081348931431404731513900584935533900 * t_new >= 0 );
	
	// invariant
	assume (x1_new >= 0 - eps && x1_new <= 100 + eps);
	assume (x2_new >= 0 - eps && x2_new <= 100 + eps);
	
	x1 := x1_new;
	x2 := x2_new;
	v1 := v1_new;
	v2 := v2_new;
	t := t_new;
	
	x1_old := x1;
	x2_old := x2;
	v1_old := v1;
	v2_old := v2;
	t_old := t;
	
	// invariant
	assume (x1_old >= 0 - eps && x1_old <= 100 + eps);
	assume (x2_old >= 100 - eps && x2_old <= 200 + eps);
	
	havoc x1_new;
	havoc x2_new;
	havoc v1_new;
	havoc v2_new;
	havoc t_new;
	
	// flow
	assume ( 57200004800000100 * x2_new + 4000000000000000 * v1_new + 48000002000000000 * v2_new - 4000000000000000 * v1_old - 57200004800000100 * x2_old - 48000002000000000 * v2_old == 0 &&
			57200004800000100 * x1_new + 48000002000000000 * v1_new + 4000000000000000 * v2_new - 57200004800000100 * x1_old - 48000002000000000 * v1_old - 4000000000000000 * v2_old - 57200004800000100 * t_new == 0 &&
			57200004800000100 * x2_new + 4000000000000000 * v1_new + 48000002000000000 * v2_new - 4000000000000000 * v1_old - 48000002000000000 * v2_old <= 114400009600000200 &&
			x2_new <= 200 &&
			23200001920000040000000000000000 * v1_new + 3840000160000000000000000000000 * v2_new - 23200001920000040000000000000000 * v1_old - 3840000160000000000000000000000 * v2_old - 57314408584800474200011400000100 * t_new <= 0 &&
			3840000160000000000000000000000 * v1_new + 23200001920000040000000000000000 * v2_new - 3840000160000000000000000000000 * v1_old - 23200001920000040000000000000000 * v2_old - 33404805491600341200009500000100 * t_new <= 0 &&
			960000040000000000000000 * v1_new + 80000000000000000000000 * v2_new - 960000040000000000000000 * v1_old - 80000000000000000000000 * v2_old - 2516800268400009200000100 * t_new <= 0 &&
			80000000000000000000000 * v1_new + 960000040000000000000000 * v2_new - 80000000000000000000000 * v1_old - 960000040000000000000000 * v2_old - 1544400186800007500000100 * t_new <= 0 &&
			48000002000000000 * v1_new + 4000000000000000 * v2_new - 57200004800000100 * x1_old - 48000002000000000 * v1_old - 4000000000000000 * v2_old - 57200004800000100 * t_new <= 0 &&
			x1_old <= 100 &&
			200 * v1_old <= 100 &&
			400 * v2_old <= 100 &&
			t_new <= 100 &&
			2000 * v2_old >= 100 &&
			1000 * v1_old >= 100 &&
			x1_old >= 0 &&
			48000002000000000 * v1_new + 4000000000000000 * v2_new - 57200004800000100 * x1_old - 48000002000000000 * v1_old - 4000000000000000 * v2_old - 57200004800000100 * t_new >= 0 - 57200004800000100 &&
			80000000000000000000000 * v1_new + 960000040000000000000000 * v2_new - 80000000000000000000000 * v1_old - 960000040000000000000000 * v2_old + 1773200206000007900000100 * t_new >= 0 &&
			480000020000000000000000 * v1_new + 40000000000000000000000 * v2_new - 480000020000000000000000 * v1_old - 40000000000000000000000 * v2_old + 1144000153200006800000100 * t_new >= 0 &&
			3840000160000000000000000000000 * v1_new + 23200001920000040000000000000000 * v2_new - 3840000160000000000000000000000 * v1_old - 23200001920000040000000000000000 * v2_old + 38438406257200378800010100000100 * t_new >= 0 &&
			11600000960000020000000000000000 * v1_new + 1920000080000000000000000000000 * v2_new - 11600000960000020000000000000000 * v1_old - 1920000080000000000000000000000 * v2_old + 26140404653200309300009100000100 * t_new >= 0 &&
			x2_new >= 100 &&
			57200004800000100 * x2_new + 4000000000000000 * v1_new + 48000002000000000 * v2_new - 4000000000000000 * v1_old - 48000002000000000 * v2_old >= 57200004800000100 );
	
	// invariant
	assume (x1_new >= 0 - eps && x1_new <= 100 + eps);
	assume (x2_new >= 100 - eps && x2_new <= 200 + eps);
			
	x1 := x1_new;
	x2 := x2_new;
	v1 := v1_new;
	v2 := v2_new;
	t := t_new;
	
	assert ( x2 < 200 );
}