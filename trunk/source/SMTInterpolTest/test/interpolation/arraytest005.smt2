(set-option :produce-proofs true)
(set-option :interpolant-check-mode true)

(set-logic QF_AUFLIA)
(declare-fun i () Int)
(declare-fun j () Int)
(declare-fun k1 () Int)
(declare-fun k2 () Int)
(declare-fun k3 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(declare-fun v3 () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun a () (Array Int Int))
(declare-fun b () (Array Int Int))
(declare-fun s1 () (Array Int Int))
(declare-fun s2 () (Array Int Int))
(declare-fun s3 () (Array Int Int))

(assert (! (and (< (select a i) y) (and (= i x) (and (= a (store s1 k1 v1))
(and (not (= i k1)) (and (= s3 (store s2 k2 v2)) (and (not (= i k2))
(and (not (= v1 v2)) (and (not (= v2 v3)) (and (not (= v1 v3))
(not (= i k3))))))))))) :named B))
(assert (! (and (= s1 s2) (and (= (store s3 k3 v3) b)
(and (= x j) (< y (select b j))))) :named A))

(check-sat)
(set-option :print-terms-cse false)
(get-proof)
(get-interpolants A B)
(exit)