(set-option :produce-proofs true)
(set-option :interpolant-check-mode true)

(set-logic QF_AUFLIA)
(declare-sort U 0)
(declare-fun i () Int)
(declare-fun j () Int)
(declare-fun y () Int)
(declare-fun k1 () Int)
(declare-fun k2 () Int)
(declare-fun k3 () Int)
(declare-fun k4 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(declare-fun v3 () Int)
(declare-fun v4 () Int)
(declare-fun a () (Array Int Int))
(declare-fun b () (Array Int Int))
(declare-fun s1 () (Array Int Int))
(declare-fun s2 () (Array Int Int))
(declare-fun s3 () (Array Int Int))

(assert (! (and (< (select a i) 0) (and (= i y) (and (< i 100) (and (< i 100) 
(and (< i 100) (< i 100)))))) :named P0))
(assert (! (and (< 0 (select b j)) (and (= y j) (and (= b (store s3 k4 v4))
(< 100 k4)))) :named P1))
(assert (! (and (= a (store s1 k1 v1)) (and (< 100 k1) (and (< 100 k3)
(= s2 (store s3 k3 v3))))) :named P2))
(assert (! (and (= s1 (store s2 k2 v2)) (< 100 k2)) :named P3))
(assert (! (and (not (= v1 v2)) (and (not (= v1 v3)) (and (not (= v1 v4))
(and (not (= v2 v3)) (and (not (= v2 v4)) (not (= v3 v4))))))) :named P4))

(check-sat)
(set-option :print-terms-cse false)
(get-proof)
(get-interpolants P0 (P1) P2 (P3) P4)
(exit)