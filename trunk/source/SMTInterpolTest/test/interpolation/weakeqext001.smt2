;(set-option :produce-proofs true)
(set-option :produce-interpolants true)
(set-option :proof-transformation LURPI)
(set-option :simplify-interpolants true)
(set-option :interpolant-check-mode true)

(set-logic QF_AUFLIA)
(declare-sort U 0)
(declare-fun i1 () U)
(declare-fun i2 () U)
(declare-fun i3 () U)
(declare-fun k21 () U)
(declare-fun k22 () U)
(declare-fun k31 () U)
(declare-fun v1 () U)
(declare-fun v2 () U)
(declare-fun v3 () U)
(declare-fun v21 () U)
(declare-fun v22 () U)
(declare-fun v31 () U)
(declare-fun a () (Array U U))
(declare-fun b () (Array U U))
(declare-fun s1 () (Array U U))
(declare-fun s2 () (Array U U))
(declare-fun s21 () (Array U U))
(declare-fun s22 () (Array U U))
(declare-fun s31 () (Array U U))
(declare-fun s32 () (Array U U))

(declare-fun p2 (U) Bool)
(declare-fun p3 (U) Bool)

(assert (! (and (= (store s1 i2 v2) s2) (= (select s21 i2) (select s22 i2))
(= (store s31 k31 v31) s32) (p2 i2) (p3 k31)) :named A))
(assert (! (and (= (store a i1 v1) s1) (= (store s2 i3 v3) b)
(= (select a i1) (select b i1)) (= (store a k21 v21) s21)
(= (store s22 k22 v22) b) (= (select a i3) (select s31 i3))
(= (select s32 i3) (select b i3)) (not (p2 k21)) (not (p2 k22))
(not (p3 i3)) (not (= a b))) :named B))

(check-sat)
;(set-option :print-terms-cse false)
(get-proof)
(get-interpolants A B)
(exit)
