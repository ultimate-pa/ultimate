(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-logic QF_AUFLIRA)
(declare-fun ~array_0 () (Array Int Int))
(declare-fun ~n_1 () Int)
(declare-fun ~array_1 () (Array Int Int))
(declare-fun |old(~array)_4| () (Array Int Int))
(declare-fun ~array_4 () (Array Int Int))
(declare-fun |old(~array)_23| () (Array Int Int))
(declare-fun ~array_23 () (Array Int Int))
(declare-fun SelectionSort_~rh~4_26 () Int)
(declare-fun ~array_45 () (Array Int Int))
(declare-fun ~array_63 () (Array Int Int))
(declare-fun ~array_77 () (Array Int Int))
(declare-fun SelectionSort_~lh~4_78 () Int)
(declare-fun SelectionSort_~rh~4_80 () Int)
(declare-fun SelectionSort_~lh~4_88 () Int)
(declare-fun SelectionSort_~lh~4_94 () Int)
(assert (! true :named ssa_postcond))
(assert (and (= (store (store ~array_0 0 0) 3 0) ~array_1) (= ~n_1 5)))
(assert (= ~array_4 |old(~array)_4|))
(assert (= |old(~array)_4| ~array_1))
(assert (= ~array_23 |old(~array)_23|))
(assert (= |old(~array)_23| ~array_4))
(assert (! (= SelectionSort_~rh~4_26 0) :named ssa_26))
(assert (! (= (store ~array_23 0 (select ~array_23 SelectionSort_~rh~4_26)) ~array_45) :named ssa_45))
(assert (= ~array_45 ~array_63))
(assert (= ~array_63 ~array_77))
(assert (= SelectionSort_~rh~4_80 SelectionSort_~lh~4_78))
(assert (< 0 (select ~array_77 SelectionSort_~rh~4_80)))
(assert (= SelectionSort_~lh~4_88 (+ SelectionSort_~lh~4_78 1)))
(assert (< SelectionSort_~lh~4_88 ~n_1))
(assert (= SelectionSort_~lh~4_94 (+ SelectionSort_~lh~4_88 1)))
(assert (not (< SelectionSort_~lh~4_94 ~n_1)))
(check-sat)
(get-interpolants (and ssa_26 ssa_45) ssa_postcond)
