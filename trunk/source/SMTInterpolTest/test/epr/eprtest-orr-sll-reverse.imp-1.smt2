(set-option :print-success false)
(set-option :produce-proofs false)
(set-option :interpolant-check-mode true)

(set-logic UF)
(set-info :source |First push block from orr-sanitized-eeaa/sll-reverse.imp.smt2|)
(set-info :smt-lib-version 2.0)
(set-info :category "crafted")
(set-info :status unsat)

(declare-sort V 0)
(declare-fun n* (V V) Bool)
(declare-fun i () V)
(declare-fun h () V)
(declare-fun k () V)
(declare-fun j () V)
(declare-fun _n* (V V) Bool)
(declare-fun null () V)

(declare-fun EQ (V V) Bool)
(assert (forall ((x V)) (EQ x x)))
(assert (forall ((x V) (y V)) (=> (EQ x y) (EQ y x))))
(assert (forall ((x V) (y V) (z V)) (=> (and (EQ x y) (EQ y z)) (EQ x z))))
(assert (forall ((x0 V) (y0 V) (x1 V) (y1 V)) (=> (and (EQ x0 y0) (EQ x1 y1)) (=> (_n* x0 x1) (_n* y0 y1)))))
(assert (forall ((x0 V) (y0 V) (x1 V) (y1 V)) (=> (and (EQ x0 y0) (EQ x1 y1)) (=> (n* x0 x1) (n* y0 y1)))))

(assert (forall ((u$1$1 V)) (n* u$1$1 u$1$1)))
(assert (forall ((u$2$1 V) (v$1$1 V) (w$1$1 V)) (=> (and (n* u$2$1 v$1$1) (n* v$1$1 w$1$1)) (n* u$2$1 w$1$1))))
(assert (forall ((u$3$1 V) (v$2$1 V) (w$2$1 V)) (=> (and (n* u$3$1 v$2$1) (n* u$3$1 w$2$1)) (or (n* v$2$1 w$2$1) (n* w$2$1 v$2$1)))))
(assert (forall ((u$4$1 V) (v$3$1 V)) (=> (n* u$4$1 v$3$1) (=> (n* v$3$1 u$4$1) (EQ u$4$1 v$3$1)))))
(assert (forall ((v$4$1 V)) (=> (or (n* null v$4$1) (n* v$4$1 null)) (EQ null v$4$1))))
(assert (forall ((u$5$1 V)) (_n* u$5$1 u$5$1)))
(assert (forall ((u$6$1 V) (v$5$1 V) (w$3$1 V)) (=> (and (_n* u$6$1 v$5$1) (_n* v$5$1 w$3$1)) (_n* u$6$1 w$3$1))))
(assert (forall ((u$7$1 V) (v$6$1 V) (w$4$1 V)) (=> (and (_n* u$7$1 v$6$1) (_n* u$7$1 w$4$1)) (or (_n* v$6$1 w$4$1) (_n* w$4$1 v$6$1)))))
(assert (forall ((u$8$1 V) (v$7$1 V)) (=> (_n* u$8$1 v$7$1) (=> (_n* v$7$1 u$8$1) (EQ u$8$1 v$7$1)))))
(assert (forall ((v$8$1 V)) (=> (or (_n* null v$8$1) (_n* v$8$1 null)) (EQ null v$8$1))))

(assert (not (=> (and (forall ((u$9$1 V)) (=> (not (EQ u$9$1 null)) (= (n* i u$9$1) (not (n* j u$9$1))))) (forall ((u$10$1 V)) (=> (not (EQ u$10$1 null)) (_n* h u$10$1))) (forall ((u$11$1 V) (v$9$1 V)) (=> (n* i u$11$1) (= (n* u$11$1 v$9$1) (_n* u$11$1 v$9$1)))) (forall ((u$12$1 V) (v$10$1 V)) (=> (n* j u$12$1) (= (n* u$12$1 v$10$1) (_n* v$10$1 u$12$1))))) (ite (not (EQ i null)) (and (not (EQ i null)) (forall ((z$1$1 V)) (=> (or (and (n* i z$1$1) (not (EQ i z$1$1)) (forall ((w$5$1 V)) (=> (and (n* i w$5$1) (not (EQ i w$5$1))) (n* z$1$1 w$5$1)))) (and (EQ z$1$1 null) (forall ((w$6$1 V)) (not (and (n* i w$6$1) (not (EQ i w$6$1))))))) (and (not (and (n* j i) (or (not (n* j i)) (n* i i)))) (forall ((u$13$1 V)) (=> (not (EQ u$13$1 null)) (= (or (and (n* z$1$1 u$13$1) (or (not (n* z$1$1 i)) (n* u$13$1 i))) (and (not (EQ j null)) (n* z$1$1 i) (or (not (n* z$1$1 i)) (n* i i)) (n* j u$13$1) (or (not (n* j i)) (n* u$13$1 i)))) (not (or (and (n* i u$13$1) (or (not (n* i i)) (n* u$13$1 i))) (and (not (EQ j null)) (n* i i) (or (not (n* i i)) (n* i i)) (n* j u$13$1) (or (not (n* j i)) (n* u$13$1 i)))))))) (forall ((u$14$1 V)) (=> (not (EQ u$14$1 null)) (_n* h u$14$1))) (forall ((u$15$1 V) (v$11$1 V)) (=> (or (and (n* z$1$1 u$15$1) (or (not (n* z$1$1 i)) (n* u$15$1 i))) (and (not (EQ j null)) (n* z$1$1 i) (or (not (n* z$1$1 i)) (n* i i)) (n* j u$15$1) (or (not (n* j i)) (n* u$15$1 i)))) (= (or (and (n* u$15$1 v$11$1) (or (not (n* u$15$1 i)) (n* v$11$1 i))) (and (not (EQ j null)) (n* u$15$1 i) (or (not (n* u$15$1 i)) (n* i i)) (n* j v$11$1) (or (not (n* j i)) (n* v$11$1 i)))) (_n* u$15$1 v$11$1)))) (forall ((u$16$1 V) (v$12$1 V)) (=> (or (and (n* i u$16$1) (or (not (n* i i)) (n* u$16$1 i))) (and (not (EQ j null)) (n* i i) (or (not (n* i i)) (n* i i)) (n* j u$16$1) (or (not (n* j i)) (n* u$16$1 i)))) (= (or (and (n* u$16$1 v$12$1) (or (not (n* u$16$1 i)) (n* v$12$1 i))) (and (not (EQ j null)) (n* u$16$1 i) (or (not (n* u$16$1 i)) (n* i i)) (n* j v$12$1) (or (not (n* j i)) (n* v$12$1 i)))) (_n* v$12$1 u$16$1)))))))) (forall ((u$17$1 V) (v$13$1 V)) (= (n* u$17$1 v$13$1) (_n* v$13$1 u$17$1)))))))
(check-sat)

(exit)
