(set-option :print-success false)
(set-option :produce-proofs false)
(set-option :interpolant-check-mode true)
(set-logic UF)
(set-info :source |First push block from orr/sll-last.imp.smt2|)
(set-info :smt-lib-version 2.0)
(set-info :category "crafted")
(set-info :status unsat)

(declare-sort V 0)
(declare-fun a () V)
(declare-fun c () V)
(declare-fun b () V)
(declare-fun n* (V V) Bool)
(declare-fun q () V)
(declare-fun p () V)
(declare-fun u () V)
(declare-fun v () V)
(declare-fun null () V)

(declare-fun EQ (V V) Bool)
(assert (forall ((x V)) (EQ x x)))
(assert (forall ((x V) (y V)) (=> (EQ x y) (EQ y x))))
(assert (forall ((x V) (y V) (z V)) (=> (and (EQ x y) (EQ y z)) (EQ x z))))
(assert (forall ((x0 V) (y0 V) (x1 V) (y1 V)) (=> (and (EQ x0 y0) (EQ x1 y1)) (=> (n* x0 x1) (n* y0 y1)))))

(assert (forall ((u$1$1 V)) (n* u$1$1 u$1$1)))
(assert (forall ((u$2$1 V) (v$1$1 V) (w$1$1 V)) (=> (and (n* u$2$1 v$1$1) (n* v$1$1 w$1$1)) (n* u$2$1 w$1$1))))
(assert (forall ((u$3$1 V) (v$2$1 V) (w$2$1 V)) (=> (and (n* u$3$1 v$2$1) (n* u$3$1 w$2$1)) (or (n* v$2$1 w$2$1) (n* w$2$1 v$2$1)))))
(assert (forall ((u$4$1 V) (v$3$1 V)) (=> (n* u$4$1 v$3$1) (=> (n* v$3$1 u$4$1) (EQ u$4$1 v$3$1)))))
(assert (forall ((v$4$1 V)) (=> (or (n* null v$4$1) (n* v$4$1 null)) (EQ null v$4$1))))

(assert (not (=> (and (not (EQ a null)) (not (EQ b null)) (n* a c) (n* b c) (not (EQ c null))) (and (n* a c) (n* b c) (ite (EQ null null) (EQ a a) (and (n* a null) (or (and (n* null a) (not (EQ null a)) (forall ((w$29$1 V)) (=> (and (n* null w$29$1) (not (EQ null w$29$1))) (n* a w$29$1)))) (and (EQ a null) (forall ((w$30$1 V)) (not (and (n* null w$30$1) (not (EQ null w$30$1))))))))) (ite (EQ null null) (EQ b b) (and (n* b null) (or (and (n* null b) (not (EQ null b)) (forall ((w$31$1 V)) (=> (and (n* null w$31$1) (not (EQ null w$31$1))) (n* b w$31$1)))) (and (EQ b null) (forall ((w$32$1 V)) (not (and (n* null w$32$1) (not (EQ null w$32$1))))))))) true))))
(check-sat)

(exit)
