package de.uni_freiburg.informatik.ultimate.deltadebugger.core.search;

import java.util.List;

import de.uni_freiburg.informatik.ultimate.deltadebugger.core.IChangeHandle;
import de.uni_freiburg.informatik.ultimate.deltadebugger.core.IVariantGenerator;
import de.uni_freiburg.informatik.ultimate.deltadebugger.core.search.minimizers.IDuplicateVariantTracker;
import de.uni_freiburg.informatik.ultimate.deltadebugger.core.search.minimizers.IMinimizerStep;

/**
 * Holds the state of one search step for the best reduced source code variant.
 * Combines the VariantGenerator and MinimizerStep interfaces into a single iterable search step that supports
 * speculative searching.
 */
public interface IGeneratorSearchStep extends ISearchStep<String, IGeneratorSearchStep> {
	/**
	 * @return The current set of active changes found so far.
	 */
	List<IChangeHandle> getActiveChanges();
	
	/**
	 * @return The utilized duplicate tracker to filter duplicate variants generated by the minimizer.
	 */
	IDuplicateVariantTracker<IChangeHandle> getDuplicateTracker();
	
	/**
	 * @return The current minimizer step, holding the current set of <em>in</em>active changes.
	 */
	IMinimizerStep<IChangeHandle> getMinimizerStep();
	
	/**
	 * @return {@link #getVariantGenerator()}{@code .apply(getActiveChanges())}.
	 */
	@Override
	String getVariant();
	
	/**
	 * @return The current VariantGenerator.
	 */
	IVariantGenerator getVariantGenerator();
	
	/**
	 * Updates the duplicate tracker once the actual test result of this step is known.
	 *
	 * @param keepVariant
	 *            {@code true} iff the variant should be kept
	 */
	default void updateDuplicateTrackerWithTestResult(final boolean keepVariant) {
		if (keepVariant) {
			getDuplicateTracker().removeLargerVariants(getMinimizerStep().getVariant().size());
		} else {
			getDuplicateTracker().add(getMinimizerStep().getVariant());
		}
	}
}
