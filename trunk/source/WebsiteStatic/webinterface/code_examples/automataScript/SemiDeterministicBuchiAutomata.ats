// Example file in which we use the operation buchiComplementNCSB to construct
// the complement of a semi-deterministic Büchi automaton.
//
// Author: heizmann@informatik.uni-freiburg.de
// Date: 2015-10-18

// Consider the automaton aut (below) which accepts all words that eventually
// only repeat the sequence ab.
print(getAcceptedLassoWord(aut));
assert(buchiAccepts(aut, ["a" "b" "a" "a" "a" "a", "a" "b"]));
// This automaton is not deterministic but semi-deterministic.
// A semi-deterministic Büchi automaton is a nondeterministic Büchi automaton
// whose set of states can be partitioned in two sets such that one set
// - contains all accepting states,
// - contains no state with nondeterministic outgoing transitions, and
// - contains no state with a transition that leaves the set.
assert(!isDeterministic(aut));
assert(isSemiDeterministic(aut));
// The operation buchiComplementNCSB constructs a Büchi automaton that
// recognizes the complement of aut's language.
print(buchiComplementNCSB(aut));
// A paper (written by František Blahoudek, Matthias Heizmann, Sven Schewe, 
// Jan Strejček, and Ming-Hsien Tsai) that explains this construction in detail
// has been submitted to TACAS 2016.
// The results of this construction have less than 4^n states and are 
// unambiguous (for each accepted word there is exactly one accepting run).


NestedWordAutomaton aut = (
	callAlphabet = { },
	internalAlphabet = { "a" "b" },
	returnAlphabet = { },
	states = {q0 q1 q2 },
	initialStates = {q0},
	finalStates = {q1},
	callTransitions = {},
	internalTransitions = {
		(q0 "a" q0)
		(q0 "b" q0)
		(q0 "a" q1)
		(q0 "b" q1)
		(q1 "a" q2)
		(q2 "b" q1)
	},
	returnTransitions = {}
);