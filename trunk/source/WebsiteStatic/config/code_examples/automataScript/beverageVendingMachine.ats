// Toy example that illustrates how we can do finite state model checking using
// this automata library.
// Author: heizmann@informatik.uni-freiburg.de
// Date: 2011-08-02



// The system that we analyze is a beverage vending machine modeled using the 
// following automaton. In this model the following four actions are 
// considered.
// "select" - the customer selects his desired beverate
// "paidSufficient" - the customer pais a suffcient amount of money
// "paidInsufficient" - the customer pais not a suffcient amount of money
// "dispence" - the machine dispences a beverage
NestedWordAutomaton beverageVendingMachine = (
	callAlphabet = {},
	internalAlphabet = { select paidSufficient paidInsufficient dispence },
	returnAlphabet = {},
	states = {idle checkPayment paymentChecked},
	initialStates = {idle},
	finalStates = {idle checkPayment paymentChecked},
	callTransitions = {},
	internalTransitions = {
		(idle select checkPayment) 
		(checkPayment paidSufficient paymentChecked)
		(checkPayment paidInsufficient idle)
		(paymentChecked dispence idle)
	}, 
	returnTransitions = {}
);

// A sequence of actions that can happen at this machine is e.g., 
// infintely often "select" followed by "paidSufficient" followed by "dispence"
assert(buchiAccepts(beverageVendingMachine, [, select paidSufficient dispence]));

// A sequence of actions that can happen at this machine is e.g., 
// infintely often "select" followed by "paidInsufficient" followed by "dispence"
assert(buchiAccepts(beverageVendingMachine, [, select paidInsufficient]));


// The following automaton models the specification of a scrooge. He likes only
// machines where you get something dispenced, no matter if you have paid or not.
NestedWordAutomaton scroogeSpecification = (
	callAlphabet = {},
	internalAlphabet = { select paidSufficient paidInsufficient dispence },
	returnAlphabet = {},
	states = {notSelected selected},
	initialStates = {notSelected},
	finalStates = {notSelected},
	callTransitions = {},
	internalTransitions = {
		(notSelected paidSufficient notSelected) 
		(notSelected paidInsufficient notSelected) 
		(notSelected dispence notSelected) 
		(notSelected select selected)
		(selected select selected) 
		(selected paidSufficient selected) 
		(selected paidInsufficient selected) 
		(selected dispence notSelected) 
	}, 
	returnTransitions = {}
);


// A sequence of actions that fulfills the scrooge's specification is e.g., 
// infintely often "select" followed by "dispence"
assert(buchiAccepts(scroogeSpecification, [, select dispence]));

// We take the complement of the language of the scroogeSpecification. We 
// intersect the result with the language of the beverageVendingMachine.
// The resulting language is not empty. This shows that the machine does not 
// fulfill the scroogeSpecification.
assert(!buchiIsEmpty(buchiIntersect(beverageVendingMachine, buchiComplementFKV(scroogeSpecification))));

// E.g., the following lasso word is a sequence of actions that can happen at
// this machine but is not allowed by the scrooge specification.
NestedLassoWord counterexample = getAcceptedLassoWord(buchiIntersect(beverageVendingMachine, buchiComplementFKV(scroogeSpecification)));
print(counterexample);
