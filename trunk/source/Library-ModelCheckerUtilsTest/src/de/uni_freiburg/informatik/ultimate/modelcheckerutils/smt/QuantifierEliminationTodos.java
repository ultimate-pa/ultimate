/*
 * Copyright (C) 2016 Matthias Heizmann (heizmann@informatik.uni-freiburg.de)
 * Copyright (C) 2016 University of Freiburg
 *
 * This file is part of the ULTIMATE ModelCheckerUtilsTest Library.
 *
 * The ULTIMATE ModelCheckerUtilsTest Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The ULTIMATE ModelCheckerUtilsTest Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ULTIMATE ModelCheckerUtilsTest Library. If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional permission under GNU GPL version 3 section 7:
 * If you modify the ULTIMATE ModelCheckerUtilsTest Library, or any covered work, by linking
 * or combining it with Eclipse RCP (or a modified version of Eclipse RCP),
 * containing parts covered by the terms of the Eclipse Public License, the
 * licensors of the ULTIMATE ModelCheckerUtilsTest Library grant you additional permission
 * to convey the resulting work.
 */
package de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt;

import java.io.IOException;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import de.uni_freiburg.informatik.ultimate.core.model.services.ILogger;
import de.uni_freiburg.informatik.ultimate.core.model.services.ILogger.LogLevel;
import de.uni_freiburg.informatik.ultimate.core.model.services.IUltimateServiceProvider;
import de.uni_freiburg.informatik.ultimate.lib.modelcheckerutils.smt.scripttransfer.HistoryRecordingScript;
import de.uni_freiburg.informatik.ultimate.lib.smtlibutils.ManagedScript;
import de.uni_freiburg.informatik.ultimate.lib.smtlibutils.SmtSortUtils;
import de.uni_freiburg.informatik.ultimate.logic.LoggingScript;
import de.uni_freiburg.informatik.ultimate.logic.Logics;
import de.uni_freiburg.informatik.ultimate.logic.Script;
import de.uni_freiburg.informatik.ultimate.test.mocks.UltimateMocks;


/**
 *
 * @author Matthias Heizmann (heizmann@informatik.uni-freiburg.de)
 *
 */
public class QuantifierEliminationTodos {

	/**
	 * Warning: each test will overwrite the SMT script of the preceding test.
	 */
	private static final boolean WRITE_SMT_SCRIPTS_TO_FILE = false;
	private static final boolean WRITE_BENCHMARK_RESULTS_TO_WORKING_DIRECTORY = false;
	private static final boolean CHECK_SIMPLIFICATION_POSSIBILITY = false;
	private static final long TEST_TIMEOUT_MILLISECONDS = 10_000;
	private static final LogLevel LOG_LEVEL = LogLevel.INFO;
	private static final LogLevel LOG_LEVEL_SOLVER = LogLevel.INFO;
	private static final String SOLVER_COMMAND = "z3 SMTLIB2_COMPLIANT=true -t:1000 -memory:2024 -smt2 -in";

	private IUltimateServiceProvider mServices;
	private Script mScript;
	private ManagedScript mMgdScript;
	private ILogger mLogger;
	private static QuantifierEliminationTestCsvWriter mCsvWriter;


	@BeforeClass
	public static void beforeAllTests() {
		mCsvWriter = new QuantifierEliminationTestCsvWriter(QuantifierEliminationTodos.class.getSimpleName());
	}

	@AfterClass
	public static void afterAllTests() {
		if (WRITE_BENCHMARK_RESULTS_TO_WORKING_DIRECTORY) {
			try {
				mCsvWriter.writeCsv();
			} catch (final IOException e) {
				throw new AssertionError(e);
			}
		}
	}

	@Before
	public void setUp() throws IOException {
		mServices = UltimateMocks.createUltimateServiceProviderMock(LOG_LEVEL);
		mServices.getProgressMonitorService().setDeadline(System.currentTimeMillis() + TEST_TIMEOUT_MILLISECONDS);
		mLogger = mServices.getLoggingService().getLogger("lol");

		final Script solverInstance = new HistoryRecordingScript(
				UltimateMocks.createSolver(SOLVER_COMMAND, LOG_LEVEL_SOLVER));
		if (WRITE_SMT_SCRIPTS_TO_FILE) {
			mScript = new LoggingScript(solverInstance, "QuantifierEliminationTest.smt2", true);
		} else {
			mScript = solverInstance;
		}

		mMgdScript = new ManagedScript(mServices, mScript);
		mScript.setLogic(Logics.ALL);
	}

	@After
	public void tearDown() {
		mScript.exit();
		mCsvWriter.reportTestFinished();
	}

	//@formatter:off

	@Test
	public void understandingModulo() {
		final FunDecl[] funDecls = new FunDecl[] { new FunDecl(SmtSortUtils::getIntSort, "y"), };
		final String formulaAsString = "(and (exists ((x Int))	(and (< x 256) (<= 0 x) (= y (mod (* 3 x) 256)))) (< y 256) (<= 0 y))";
		final String expectedResult = "(and (< y 256) (= (mod y 3) 0) (<= 0 y))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResult, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void understandingModulo2() {
		final FunDecl[] funDecls = new FunDecl[] { new FunDecl(SmtSortUtils::getIntSort, "y"), };
		final String formulaAsString = "(and (exists ((x Int))	(and (< x 256) (<= 0 x) (= y (mod (* 3 x) 256)))) (< y 256) (<= 0 y))";
		final String expectedResult = "(and (< y 256) (= (mod y 3) 0) (<= 0 y))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResult, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}


	@Test
	public void plrTest3() {
		final FunDecl[] funDecls = new FunDecl[] {
				new FunDecl(SmtSortUtils::getBoolSort, "HI", "HJ", "HK", "HL", "HM", "HO", "HP", "HQ", "HS", "HT", "HU", "HW", "HX", "HY", "HZ", "IA", "IB", "IC", "ID", "IE", "IF", "IG", "AA", "II", "IJ", "AC", "IK", "IL", "AE", "AF", "IN", "AG", "AI", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AU", "AW", "AX", "AY", "AZ", "BA", "BC", "BD", "C", "BE", "D", "BF", "BG", "E", "F", "BI", "G", "H", "I", "BK", "J", "BL", "K", "BM", "L", "BO", "BP", "N", "O", "BQ", "BR", "P", "BS", "Q", "R", "BT", "BU", "S", "T", "U", "V", "W", "BY", "BZ", "X", "CB", "CC", "CD", "CE", "CI", "CJ", "CK", "CL", "CN", "CO", "CQ", "CS", "CT", "CW", "CX", "CY", "CZ", "DA", "DB", "DD", "DH", "DI", "DJ", "DK", "DO", "DP", "DQ", "DR", "DS", "DU", "DX", "DZ", "EA", "EB", "ED", "EE", "EF", "EG", "EH", "EI", "EJ", "EK", "EM", "EN", "EO", "EP", "ES", "EU", "EV", "EW", "EX", "EZ", "FA", "FB", "FC", "FE", "FF", "FG", "FH", "FI", "FK", "FL", "FM", "FN", "FP", "FR", "FS", "FT", "FW", "FX", "GA", "GB", "GE", "GF", "GH", "GI", "GJ", "GK", "GO", "GP", "GR", "GS", "GT", "GU", "GV", "GW", "GX", "GY", "GZ", "HA", "HB", "HC", "HE", "HF", "HG"),
				new FunDecl(SmtSortUtils::getRealSort, "AB", "DE", "CF", "IM", "CH", "AH", "CM", "FQ", "EQ", "HV", "DV", "T1", "GD", "FD"),
				new FunDecl(SmtSortUtils::getIntSort, "HH", "DF", "DG", "HN", "DL", "DM", "DN", "HR", "DT", "DW", "DY", "EC", "IH", "AD", "EL", "AJ", "ER", "ET", "AT", "EY", "AV", "BB", "A", "B", "FJ", "BH", "BJ", "FO", "BN", "M", "FU", "FV", "FY", "BV", "FZ", "BW", "BX", "Y", "Z", "GC", "CA", "GG", "CG", "GL", "GM", "GN", "GQ", "CP", "CR", "CU", "CV", "HD", "DC"),
		};
		final String formulaAsString = "(exists ((A Int) (B Int) (C Bool) (D Bool) (E Bool) (F Bool) (G Bool) (H Bool) (I Bool) (J Bool) (K Bool) (L Bool) (M Int) (N Bool) (O Bool) (P Bool) (Q Bool) (R Bool) (S Bool) (T Bool) (U Bool) (V Bool) (W Bool) (X Bool) (Y Int) (Z Int) (AA Bool) (AB Real) (AC Bool) (AD Int) (AE Bool) (AF Bool) (AG Bool) (AH Real) (AI Bool) (AJ Int) (AK Bool) (AL Bool) (AM Bool) (AN Bool) (AO Bool) (AP Bool) (AQ Bool) (AR Bool) (AS Bool) (AT Int) (AU Bool) (AV Int) (AW Bool) (AX Bool) (AY Bool) (AZ Bool) (BA Bool) (BB Int) (BC Bool) (BD Bool) (BE Bool) (BF Bool) (BG Bool) (BH Int) (BI Bool) (BJ Int) (BK Bool) (BL Bool) (BM Bool) (BN Int) (BO Bool) (BP Bool) (BQ Bool) (BR Bool) (BS Bool) (BT Bool) (BU Bool) (BV Int) (BW Int) (BX Int) (BY Bool) (BZ Bool) (CA Int) (CB Bool) (CC Bool) (CD Bool) (CE Bool) (CF Real) (CG Int) (CH Real) (CI Bool) (CJ Bool) (CK Bool) (CL Bool) (CM Real) (CN Bool) (CO Bool) (CP Int) (CQ Bool) (CR Int) (CS Bool) (CT Bool) (CU Int) (CV Int) (CW Bool) (CX Bool) (CY Bool) (CZ Bool) (DA Bool) (DB Bool) (DC Int) (DD Bool) (DE Real) (DF Int) (DG Int) (DH Bool) (DI Bool) (DJ Bool) (DK Bool) (DL Int) (DM Int) (DN Int) (DO Bool) (DP Bool) (DQ Bool) (DR Bool) (DS Bool) (DT Int) (DU Bool) (DV Real) (DW Int) (DX Bool) (DY Int) (DZ Bool) (EA Bool) (EB Bool) (EC Int) (ED Bool) (EE Bool) (EF Bool) (EG Bool) (EH Bool) (EI Bool) (EJ Bool) (EK Bool) (EL Int) (EM Bool) (EN Bool) (EO Bool) (EP Bool) (EQ Real) (ER Int) (ES Bool) (ET Int) (EU Bool) (EV Bool) (EW Bool) (EX Bool) (EY Int) (EZ Bool) (FA Bool) (FB Bool) (FC Bool) (FD Real) (FE Bool) (FF Bool) (FG Bool) (FH Bool) (FI Bool) (FJ Int) (FK Bool) (FL Bool) (FM Bool) (FN Bool) (FO Int) (FP Bool) (FQ Real) (FR Bool) (FS Bool) (FT Bool) (FU Int) (FV Int) (FW Bool) (FX Bool) (FY Int) (FZ Int) (GA Bool) (GB Bool) (GC Int) (GD Real) (GE Bool) (GF Bool) (GG Int) (GH Bool) (GI Bool) (GJ Bool) (GK Bool) (GL Int) (GM Int) (GN Int) (GO Bool) (GP Bool) (GQ Int) (GR Bool) (GS Bool) (GT Bool) (GU Bool) (GV Bool) (GW Bool) (GX Bool) (GY Bool) (GZ Bool) (HA Bool) (HB Bool) (HC Bool) (HD Int) (HE Bool) (HF Bool) (HG Bool) (HH Int) (HI Bool) (HJ Bool) (HK Bool) (HL Bool) (HM Bool) (HN Int) (HO Bool) (HP Bool) (HQ Bool) (HR Int) (HS Bool) (HT Bool) (HU Bool) (HV Real) (HW Bool) (HX Bool) (HY Bool) (HZ Bool) (IA Bool) (IB Bool) (IC Bool) (ID Bool) (IE Bool) (IF Bool) (IG Bool) (IH Int) (II Bool) (IJ Bool) (IK Bool) (IL Bool) (IM Real) (IN Bool)) (and (<= 0 DG) (= AZ HX) (= FV BJ) (or (not BT) DK) (<= 0 B) (= HA FE) (or FW (not AM)) (= IJ AX) (<= 0 DW) (<= AV 7) (= EF BA) (= AC CE) (= FN HI) (or (not GI) GZ) (or (not BQ) DB) (<= CV 255) (or (not FS) IL) (= AI HP) (or (not (< 0 DN)) (= DY 1)) (= AB (/ 3.0 2.0)) (= 2 Z) (= AT 19) (= HB V) (= N HE) (= AP EB) (or AE (not EZ)) (= GM 3) (<= 0 ER) (= DH AG) (or AK (not BD)) (= HJ P) (<= EY 3) (<= DT 3) (or (not EU) IN) (<= 0 EC) (= GN DC) (= X GY) (<= 0 DC) (<= B 15) (= GD 800.0) (= CS EX) (= HF EP) (<= 0 BW) (or HM (not GA)) (= BK DS) (or (not CQ) CI) (or (= 15 GQ) (= 14 GQ) (and (<= 0 GQ) (<= GQ 10))) (= FO HR) (<= IH 2) (or (= 14 ET) (and (<= ET 10) (<= 0 ET)) (= 15 ET)) (<= BX 3) (or (not ES) HY) (or (and GX IB FG S U G DX GP DJ AU BZ BO EV FR) (not (= CR FY))) (= GF DU) (= BM DR) (= BY O) (<= 0 EY) (= IG BE) (= CY EI) (or BL (not FC)) (= FD 4000.0) (or (not GT) J) (= BN 19) (<= 0 CG) (or (not CL) AO) (<= DW 6) (or DD (not GB)) (<= 0 BB) (= 2 GC) (= 50.0 FQ) (= EJ GS) (<= BB 2) (= EG FX) (= GR BF) (or (not AN) IK) (= HT AR) (= Q CK) (<= DC 255) (or (not (= 0 DN)) (= DY 0)) (or I (not E)) (= HO AS) (<= A 9) (<= 0 BV) (<= DM 9) (or (and (not HQ) (not GP)) (and GP (not HQ))) (or (= AD 126) (= AD 127) (and (<= AD 100) (<= 0 AD))) (= FM EH) (= ED EW) (<= 0 IH) (<= 0 HH) (<= 0 DT) (= AL BU) (= IM (/ 3.0 2.0)) (or HS (not FF)) (= R CJ) (<= 0 FZ) (= K BR) (or IC (not HG)) (<= 0 M) (or CD (not EE)) (<= FU 255) (= AY ID) (<= BV 7) (= AW CX) (= FA CB) (<= FZ 658) (= Y HN) (<= 0 AJ) (= DV (/ 3.0 2.0)) (<= HH 1023) (<= 0 FU) (or (not EA) II) (or (= 15 DL) (and (<= 0 DL) (<= DL 10)) (= 14 DL)) (<= ER 9) (= CW AQ) (= E GW) (<= CU 15) (= HL FP) (= CM 500.0) (= HC W) (= 2 HR) (= GK C) (<= AJ 3) (= 2 BH) (<= EL 3) (= CN L) (<= DG 7) (<= BW 63) (= FK GH) (<= EC 63) (<= 0 CV) (= 50.0 AH) (<= CP 9) (or DO (not FL)) (= 4000.0 EQ) (= EO GO) (= 20.0 CF) (= HZ FT) (<= 0 BX) (= BP F) (or (and GP HQ) (and (< T1 50.0) (not GP) HQ) (and (<= 50.0 T1) (not GP))) (= FB CC) (= DP BI) (= DZ BC) (<= 0 GG) (<= GG 255) (= DI CT) (or T (not AA)) (= DE 50.0) (or (not CZ) IE) (or BS (not D)) (= 800.0 HV) (= HW FH) (or AF (not GJ)) (or HK (not (= CR FY))) (<= 0 AV) (= CA FJ) (= EM GV) (<= 0 DM) (<= M 1023) (<= 0 EL) (<= 0 HD) (<= CG 2) (<= 0 A) (= CH 20.0) (or (not EN) (= CR FY)) (<= DF 3) (<= 0 CU) (= FI DQ) (= IF BG) (or (not GU) IA) (or DA (not EK)) (<= HD 3) (= HU GE) (<= 0 DF) (= 1 GL) (<= 0 CP) (or CO (not H))))";
		final String expextedResultAsString = "(<= 50.0 T1)";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expextedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}


	@Test
	public void contextInauguration() {
		final FunDecl[] funDecls = { new FunDecl(SmtSortUtils::getIntSort, "k", "i", "x", "y") };
		final String formulaAsString = "(exists ((a (Array Int Int))) (and (= k i) (or (= (+ 0 (select a k)) (+ x (select a i))) (= (+ 1 (select a k)) (+ y (select a i))))))";
		final String expectedResultAsString = "(and (= i k) (or (= y 1) (= x 0)))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}


	@Test
	public void shouldHaveBeenRemovedByDer() {
		final FunDecl[] funDecls = new FunDecl[] {
				new FunDecl(SmtSortUtils::getIntSort,  "ULTIMATE.start_main_~#ldvarg23~0#1.base", "~#vfio~0.base", "~#vfio~0.offset", "ULTIMATE.start_main_~#ldvarg23~0#1.offset"),
				new FunDecl(QuantifierEliminationTest::getArrayIntIntIntSort, "#memory_$Pointer$.offset", "#memory_$Pointer$.base"),
			};
		final String formulaAsString = "(and (= |~#vfio~0.offset| 0) (exists ((|v_#memory_$Pointer$.offset_BEFORE_CALL_68| (Array Int (Array Int Int))) (|ULTIMATE.start_main_~#ldvarg14~0#1.base| Int) (|v_old(#memory_$Pointer$.base)_AFTER_CALL_110| (Array Int (Array Int Int))) (|ldv_memset_#Ultimate.C_memset_#value#1| Int) (|ULTIMATE.start_main_~#ldvarg3~0#1.base| Int) (|ULTIMATE.start_main_~#ldvarg1~0#1.base| Int) (|ULTIMATE.start_main_~#ldvarg25~0#1.base| Int)) (let ((.cse2 (= |~#vfio~0.base| |ULTIMATE.start_main_~#ldvarg14~0#1.base|)) (.cse0 ((as const (Array Int Int)) 0))) (and (= (select (select |v_old(#memory_$Pointer$.base)_AFTER_CALL_110| |ULTIMATE.start_main_~#ldvarg3~0#1.base|) 0) 0) (= |#memory_$Pointer$.offset| (store |v_#memory_$Pointer$.offset_BEFORE_CALL_68| |ULTIMATE.start_main_~#ldvarg25~0#1.base| (store (select |v_#memory_$Pointer$.offset_BEFORE_CALL_68| |ULTIMATE.start_main_~#ldvarg25~0#1.base|) 0 (mod |ldv_memset_#Ultimate.C_memset_#value#1| 256)))) (= (select (select |v_old(#memory_$Pointer$.base)_AFTER_CALL_110| |ULTIMATE.start_main_~#ldvarg14~0#1.base|) 0) 0) (not (= |ULTIMATE.start_main_~#ldvarg25~0#1.base| |ULTIMATE.start_main_~#ldvarg23~0#1.base|)) (not (= |ULTIMATE.start_main_~#ldvarg14~0#1.base| |ULTIMATE.start_main_~#ldvarg1~0#1.base|)) (= .cse0 (select |v_old(#memory_$Pointer$.base)_AFTER_CALL_110| |~#vfio~0.base|)) (= (select (select |v_#memory_$Pointer$.offset_BEFORE_CALL_68| |ULTIMATE.start_main_~#ldvarg1~0#1.base|) 0) 0) (= (select (select |v_old(#memory_$Pointer$.base)_AFTER_CALL_110| |ULTIMATE.start_main_~#ldvarg1~0#1.base|) 0) 0) (= (store |v_old(#memory_$Pointer$.base)_AFTER_CALL_110| |ULTIMATE.start_main_~#ldvarg25~0#1.base| (store (select |v_old(#memory_$Pointer$.base)_AFTER_CALL_110| |ULTIMATE.start_main_~#ldvarg25~0#1.base|) 0 0)) |#memory_$Pointer$.base|) (not (= |ULTIMATE.start_main_~#ldvarg3~0#1.base| |ULTIMATE.start_main_~#ldvarg1~0#1.base|)) (or (exists ((|ldv_memset_#Ultimate.C_memset_#value#1| Int)) (= (select |v_#memory_$Pointer$.offset_BEFORE_CALL_68| |ULTIMATE.start_main_~#ldvarg14~0#1.base|) (store ((as const (Array Int Int)) 0) 0 (mod |ldv_memset_#Ultimate.C_memset_#value#1| 256)))) (let ((.cse1 (select (select |v_#memory_$Pointer$.offset_BEFORE_CALL_68| |ULTIMATE.start_main_~#ldvarg14~0#1.base|) 0))) (and (< .cse1 256) (not .cse2) (<= 0 .cse1)))) (or .cse2 (= .cse0 (select |v_#memory_$Pointer$.offset_BEFORE_CALL_68| |~#vfio~0.base|))) (not (= |ULTIMATE.start_main_~#ldvarg3~0#1.base| |ULTIMATE.start_main_~#ldvarg23~0#1.base|)) (not (= |ULTIMATE.start_main_~#ldvarg14~0#1.base| |ULTIMATE.start_main_~#ldvarg23~0#1.base|)) (= (select (select |v_#memory_$Pointer$.offset_BEFORE_CALL_68| |ULTIMATE.start_main_~#ldvarg3~0#1.base|) 0) 0) (not (= |ULTIMATE.start_main_~#ldvarg1~0#1.base| |ULTIMATE.start_main_~#ldvarg23~0#1.base|)) (not (= |ULTIMATE.start_main_~#ldvarg14~0#1.base| |ULTIMATE.start_main_~#ldvarg3~0#1.base|))))) (= |ULTIMATE.start_main_~#ldvarg23~0#1.offset| 0) (not (= |~#vfio~0.base| 0)))";
		final String expectedResultAsString = formulaAsString;
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}


	@Test
	public void choirNightTrezor04Triathlon() {
		final FunDecl[] funDecls = new FunDecl[] { new FunDecl(SmtSortUtils::getIntSort, "i", "b"), };
		final String formulaAsString = "(forall ((diva Int) (moda Int)) (or (<= 4294967296 (+ (* 4294967296 diva) moda)) (and (< 0 (mod (+ (* b 4294967295) moda) 4294967296)) (<= (mod (+ (* b 4294967295) moda) 4294967296) 1)) (> 0 moda) (>= moda 4294967296) (<= (+ (* 4294967296 diva) moda) (mod i 4294967296)) (< (mod (+ i 1) 4294967296) moda) (< (+ (* 4294967296 diva) moda) 0)))";
		final String expectedResult = "(let ((.cse0 (* b (- 4294967295))) (.cse1 (* b 4294967295)) (.cse2 (mod i 4294967296))) (and (<= (div (+ .cse0 (* (mod (+ i 1) 4294967296) (- 1)) 1) (- 4294967296)) (+ (div (+ .cse1 .cse2 (- 4294967295)) 4294967296) 1)) (<= (div (+ .cse0 (- 4294967296)) (- 4294967296)) (+ (div (+ .cse1 .cse2) 4294967296) 1))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResult, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void choirNightTrezor04Triathlon2() {
		final FunDecl[] funDecls = new FunDecl[] { new FunDecl(SmtSortUtils::getIntSort, "i", "b"), };
		final String formulaAsString = "(forall ((diva Int) (moda Int)) (or (<= 4294967296 (+ (* 4294967296 diva) moda)) (<= (mod (+ (* b 4294967295) moda) 4294967296) 1)  (<= (+ (* 4294967296 diva) moda) (mod i 4294967296)) (< (+ (* 4294967296 diva) moda) 0)))";
		final String expectedResult = "false";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResult, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void choirNightTrezor04Triathlon3() {
		final FunDecl[] funDecls = new FunDecl[] { new FunDecl(SmtSortUtils::getIntSort, "i", "b"), };
		final String formulaAsString = "(forall ((diva Int) (moda Int)) (or (<= 4294967296 (+ (* 4294967296 diva) moda)) (<= (mod (+ (* b 4294967295) moda) 4294967296) 1)  (<= (+ (* 4294967296 diva) moda) (mod i 4294967296)) (< (+ (* 4294967296 diva) moda) 0)))";
		final String expectedResult = "false";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, formulaAsString, !true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void choirNightTrezor04Triathlon4() {
		final FunDecl[] funDecls = new FunDecl[] { new FunDecl(SmtSortUtils::getIntSort, "i", "b"), };
		final String formulaAsString = "(forall ((diva Int) (aux_mod_moda_42 Int) (aux_div_moda_42 Int)) (or (> 0 aux_mod_moda_42) (<= aux_mod_moda_42 1) (<= (+ (* 4294967295 b) 4294967296) (+ (* 4294967296 diva) aux_mod_moda_42 (* 4294967296 aux_div_moda_42))) (>= aux_mod_moda_42 4294967296) (<= (+ (* 4294967296 diva) aux_mod_moda_42 (* 4294967296 aux_div_moda_42)) (+ (* 4294967295 b) (mod i 4294967296))) (< (+ (* 4294967296 diva) aux_mod_moda_42 (* 4294967296 aux_div_moda_42)) (* 4294967295 b))))";
		final String expectedResult = "false";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, formulaAsString, !true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void choirNightTrezor04Triathlon5() {
		final FunDecl[] funDecls = new FunDecl[] { new FunDecl(SmtSortUtils::getIntSort, "b"), };
		final String formulaAsString = "(forall ((x Int)) (<= (+ (* 7 b) 8) (* 8 x))))";
		final String expectedResult = "false";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, formulaAsString, !true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void LIA_psyco_142() {
		final FunDecl[] funDecls = new FunDecl[] {
				new FunDecl(SmtSortUtils::getBoolSort, "W_S1_V4", "W_S1_V2", "W_S1_V1", "R_E1_V4", "R_E1_V2", "R_E1_V3", "R_S1_V1", "DISJ_W_S1_R_E1", "R_S1_V4", "R_S1_V2", "R_S1_V3", "DISJ_W_S1_R_S1", "W_S1_V3", "R_E1_V1"),
			};
		final String formulaAsString = "(and (not R_E1_V1) W_S1_V3 (= DISJ_W_S1_R_E1 (not (or (and W_S1_V2 R_E1_V2) (and W_S1_V4 R_E1_V4) R_E1_V3))) (forall ((V3_0 Int) (V2_0 Int) (V4_0 Int) (MW_S1_V1 Bool) (MW_S1_V3 Bool) (MW_S1_V2 Bool) (MW_S1_V4 Bool) (S1_V3_!152 Int) (S1_V3_!158 Int) (S1_V4_!154 Int) (S1_V4_!160 Int) (S1_V1_!151 Int) (S1_V1_!157 Int) (S1_V2_!153 Int) (S1_V2_!159 Int) (E1_!150 Int) (E1_!155 Int) (E1_!156 Int) (E1_!161 Int)) (or (not (and (not (<= V2_0 E1_!155)) (<= (+ E1_!156 1) V2_0) (not (<= (+ E1_!161 1) (ite MW_S1_V1 S1_V1_!157 (+ V2_0 (- 1))))) (not (<= V2_0 E1_!150)) (<= (ite MW_S1_V2 S1_V2_!153 V2_0) (+ (ite MW_S1_V1 S1_V1_!151 E1_!150) 1)))) (not (and (= E1_!150 E1_!155) (or (not (and (or (not R_E1_V4) (= V4_0 (ite MW_S1_V4 S1_V4_!160 V4_0))) (or (not R_E1_V3) (= V3_0 (ite MW_S1_V3 S1_V3_!158 V3_0))) (or (= (ite MW_S1_V2 S1_V2_!159 V2_0) V2_0) (not R_E1_V2)))) (= E1_!156 E1_!161)) (or (not (and (or (not R_E1_V4) (= V4_0 (ite MW_S1_V4 S1_V4_!160 V4_0))) (or (not R_E1_V3) (= V3_0 (ite MW_S1_V3 S1_V3_!158 V3_0))) (or (= (ite MW_S1_V2 S1_V2_!159 V2_0) V2_0) (not R_E1_V2)))) (= E1_!150 E1_!161)) (or (not MW_S1_V2) W_S1_V2) (or W_S1_V1 (not MW_S1_V1)) (= E1_!156 E1_!155) (= E1_!150 E1_!156) (or (not (or (not R_S1_V1) (= E1_!150 (+ V2_0 (- 1))))) (= S1_V3_!152 S1_V3_!158)) (or (not (or (not R_S1_V1) (= V2_0 (+ E1_!150 1)))) (= S1_V4_!154 S1_V4_!160)) (or (not (or (not R_S1_V1) (= E1_!150 (+ V2_0 (- 1))))) (= S1_V1_!151 S1_V1_!157)) (or (= S1_V2_!159 S1_V2_!153) (not (or (not R_S1_V1) (= V2_0 (+ E1_!150 1))))) (or (not (and (or (not R_E1_V4) (= V4_0 (ite MW_S1_V4 S1_V4_!160 V4_0))) (or (not R_E1_V3) (= V3_0 (ite MW_S1_V3 S1_V3_!158 V3_0))) (or (= (ite MW_S1_V2 S1_V2_!159 V2_0) V2_0) (not R_E1_V2)))) (= E1_!155 E1_!161)) (or W_S1_V4 (not MW_S1_V4)))) (and (= (ite MW_S1_V2 S1_V2_!153 V2_0) (ite MW_S1_V2 S1_V2_!159 V2_0)) (= (+ (ite MW_S1_V2 S1_V2_!159 V2_0) (- 1)) (ite MW_S1_V1 S1_V1_!151 E1_!150)) (= (ite MW_S1_V4 S1_V4_!154 V4_0) (ite MW_S1_V4 S1_V4_!160 V4_0)) (= (ite MW_S1_V3 S1_V3_!152 V3_0) (ite MW_S1_V3 S1_V3_!158 V3_0))))) (= DISJ_W_S1_R_S1 (not (or (and W_S1_V1 R_S1_V1) R_S1_V3 (and W_S1_V4 R_S1_V4) (and R_S1_V2 W_S1_V2)))))";
		final String expectedResultAsString = "(let ((.cse5 (not W_S1_V2)) (.cse20 (not W_S1_V1))) (let ((.cse12 (or .cse5 .cse20)) (.cse0 (not R_S1_V1))) (let ((.cse11 (or .cse0 .cse5 .cse20)) (.cse3 (and .cse5 .cse12)) (.cse34 (or .cse0 .cse5))) (let ((.cse13 (or .cse0 .cse20)) (.cse33 (and .cse0 .cse34)) (.cse31 (or .cse0 .cse3)) (.cse1 (not W_S1_V4)) (.cse37 (and .cse11 .cse34))) (let ((.cse7 (or .cse1 .cse37)) (.cse8 (or .cse0 .cse1 .cse37)) (.cse21 (and .cse31 .cse5 .cse12)) (.cse18 (or .cse0 .cse1 .cse5)) (.cse19 (or .cse0 .cse1 .cse5 .cse20)) (.cse10 (or .cse33 .cse1 .cse20)) (.cse36 (and .cse11 .cse13 .cse5 .cse12 .cse20)) (.cse28 (or (and .cse5 .cse34) .cse0)) (.cse32 (and .cse0 .cse5))) (let ((.cse16 (or .cse32 .cse20)) (.cse23 (and (or .cse0 (and .cse5 .cse20)) .cse5 .cse20)) (.cse26 (or .cse0 (and .cse5 .cse28))) (.cse27 (or .cse36 .cse0)) (.cse29 (or .cse0 (and .cse11 (or .cse0 .cse36) .cse13 .cse5 .cse12 .cse20))) (.cse24 (let ((.cse35 (or .cse0 .cse1 .cse20))) (and .cse18 (or .cse0 (and (or .cse0 (and .cse18 .cse10 .cse19 .cse35)) .cse18 .cse19 .cse10 .cse35)) (or .cse0 (and .cse18 .cse19 .cse10 .cse35)) .cse19 .cse10 .cse35))) (.cse14 (and .cse11 .cse5 .cse12 .cse34)) (.cse6 (not R_E1_V3)) (.cse9 (or .cse0 .cse33 .cse1 .cse20)) (.cse15 (or .cse32 .cse0 .cse20)) (.cse22 (and .cse31 .cse5 (or .cse0 .cse21) .cse12)) (.cse4 (not R_E1_V2)) (.cse25 (and (or .cse0 (and .cse8 .cse7)) .cse7 .cse8)) (.cse2 (not R_E1_V4))) (and (or .cse0 .cse1 .cse2 .cse3) (not R_E1_V1) (or (and (or .cse1 .cse2) (or .cse4 .cse5) DISJ_W_S1_R_E1 .cse6) (and (not DISJ_W_S1_R_E1) (or (and W_S1_V2 R_E1_V2) (and W_S1_V4 R_E1_V4) R_E1_V3))) (or .cse4 (and (or .cse0 (and .cse7 .cse8)) .cse7 .cse8)) (or .cse0 .cse3 .cse6) (or .cse0 (and .cse9 .cse10)) (or .cse0 (and .cse11 .cse12)) (or (and (or (and W_S1_V1 R_S1_V1) R_S1_V3 (and W_S1_V4 R_S1_V4) (and R_S1_V2 W_S1_V2)) (not DISJ_W_S1_R_S1)) (and DISJ_W_S1_R_S1 (or (not R_S1_V4) .cse1) .cse13 (or .cse5 (not R_S1_V2)) (not R_S1_V3))) .cse12 (or .cse0 .cse1 .cse14 .cse2) (or .cse0 (and .cse15 .cse16)) .cse11 (or .cse0 .cse4 .cse14) (or .cse4 (let ((.cse17 (or .cse0 .cse5 .cse1 .cse20))) (and (or .cse0 (and .cse17 .cse18 .cse19)) .cse17 .cse18 (or .cse0 (and (or .cse0 (and .cse18 .cse19)) .cse17 .cse18 .cse19)) .cse19))) W_S1_V3 .cse5 (or .cse0 .cse4 .cse21) (or .cse0 .cse4 .cse3) (or .cse22 .cse6) .cse16 (or .cse0 .cse21 .cse6) (or .cse0 .cse23 .cse6) (or .cse24 .cse6) (or .cse25 .cse6) (or .cse0 .cse1 .cse2 .cse21) (or .cse0 .cse23 .cse1 .cse2) (or (and .cse26 .cse27 .cse5 .cse28 .cse29 .cse20) .cse6) (or .cse4 (let ((.cse30 (or .cse0 (and .cse11 .cse5 .cse12)))) (and .cse26 .cse5 .cse28 .cse12 (or .cse0 (and .cse11 .cse5 .cse12 .cse30)) .cse30))) .cse10 (or (and (or .cse1 (and .cse26 .cse5 .cse28)) (or .cse1 (and .cse27 .cse5 .cse29 .cse20))) .cse2) (or .cse24 .cse2) (or .cse0 .cse14 .cse6) .cse9 (or .cse22 .cse1 .cse2) .cse15 (or .cse22 .cse4) (or .cse25 .cse2))))))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void LRA_schollsmt08_model_model_5_62() {
		final FunDecl[] funDecls = new FunDecl[] {
				new FunDecl(SmtSortUtils::getRealSort, "x3", "x4"),
				new FunDecl(SmtSortUtils::getBoolSort, "bool.b17", "bool.b18", "bool.b19", "bool.b20", "bool.b21", "bool.b22", "bool.b23", "bool.b24"),
			};
		final String formulaAsString = "(forall ((?lambda Real)) (or (< ?lambda 0.0) (and (not (and (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not bool.b18) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) bool.b17 (not (<= (+ x3 209.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4)))) (not bool.b19))) (not (and (not (and (not (and (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (not bool.b23) (not bool.b20) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (not bool.b21) (not bool.b22) (not bool.b17) (not (and (not (and (not bool.b18) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (not bool.b17) (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))) bool.b19)) (not (and (not (and (not (and (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (not (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (not (and (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))) (not (and (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (and (not (and (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))) (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4)))))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) (not (and (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0)) (not (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4)))))) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))))) (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))))))))))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))))) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) bool.b18 (not (and bool.b18 bool.b19)))))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) (not (and (not (and (not bool.b23) (not bool.b20) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (not bool.b23) (not bool.b20) (not bool.b21) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)) (not bool.b22) (not bool.b17) bool.b18 (not (and bool.b18 bool.b19)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0) (not bool.b17) bool.b18 (not (and bool.b18 bool.b19)) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)))) (not (and (not bool.b18) (not bool.b17) (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))) bool.b19)))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))))) (not bool.b21) (not bool.b22))) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not (and (not (and (not (and (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)))))) (not (and (not (and (not bool.b18) (not bool.b19))) (not bool.b23) (not bool.b20) (not bool.b21) (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not bool.b22) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))) (not bool.b17))) (not (and (not bool.b18) (not bool.b17) (not (and (not (and (not bool.b18) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (not bool.b17) (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))) bool.b19)) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))))) (not (and (not (and (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))) bool.b18)))) (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)))))) (not (and (not (and (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (not bool.b17) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)) bool.b18 (not (and bool.b18 bool.b19)))) (not (and (not bool.b18) bool.b19)))))))) (not bool.b17) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (not (and (not (and (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))) (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4)))))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) (not (and (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0)) (not (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4)))))) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))))) (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))))))) (not (and (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (not bool.b17) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (not (and (not (and (not bool.b23) (not bool.b20) (not (and (not (and (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))))) (not bool.b21) (not bool.b22) (not bool.b17) bool.b18 (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (not bool.b23) (not bool.b20) (not bool.b21) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)) (not bool.b22) (not bool.b17) bool.b18 (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))) (<= 4910.0 (+ (* 20.0 ?lambda) x4)))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (not bool.b23) (not bool.b20) (not bool.b21) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)) (not bool.b22) (not bool.b17) bool.b18 (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))))) (not bool.b17))))))) (not (and (not (and (not (and bool.b17 (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not bool.b18) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) bool.b17 (not (<= (+ x3 209.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4)))) (not bool.b19))) (not (and (not (and (not (and (not (and (not (and (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (and (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) bool.b24 (not (and (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))))))) (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (not (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0)) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not bool.b24))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and bool.b24 (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not (and (not (and bool.b24 (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) bool.b24 (not (and (not (and (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0))))) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (and (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))))) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (and bool.b24 (not (and (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))))))) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) (not (and (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (and (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) bool.b24 (not (and (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))))))) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)) (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)))) (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)))) (not bool.b24))))))) (not bool.b18) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not bool.b19) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (not bool.b18))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))))) bool.b17)) (not (and (not (and (not (and (not bool.b23) (not bool.b20) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (not bool.b21) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not bool.b20) (not (and (not bool.b18) (not bool.b17) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) bool.b19)) (not (and bool.b18 (not (and bool.b18 bool.b19)) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ x3 (/ 193.0 2.0)) (* (/ 1.0 40.0) x4))) (<= (+ x3 (/ 185.0 2.0)) (* (/ 1.0 40.0) x4)))) (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)))))))))) (not bool.b22) (not (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)))) (not bool.b17))) (not (and (not (and (not (and (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (not bool.b23) (not bool.b20) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (not bool.b21) (not bool.b22) (not (and (not bool.b20) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (not (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)))) (not (and (not (and (not bool.b18) (not bool.b17) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) bool.b19)) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) bool.b18 (not (and bool.b18 bool.b19)) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (not bool.b17))) (not (and (not (and (not bool.b18) (not bool.b19))) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))))) (not bool.b17) (not (and (not (and (not (and (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (and (not bool.b18) (not bool.b19))) (not bool.b23) (not bool.b20) (not bool.b21) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0)) (not bool.b22) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (and (not (and (not bool.b20) (not (and (not (and (not bool.b18) (not bool.b19))) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))) (not (and (not (and (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))))) (not (and (not bool.b20) (not (and (not (and (not bool.b18) (not bool.b19))) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))) (not (and (not (and (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (not bool.b17))))) (not (and (not (and (not bool.b23) (not bool.b20) (not bool.b21) (not (and (not (and (not (and (not (and (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (and (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))))) (<= 4910.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ x3 (/ 193.0 2.0)) (* (/ 1.0 40.0) x4))) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) (<= (+ x3 (/ 185.0 2.0)) (* (/ 1.0 40.0) x4)))) (not (and (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (and (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not bool.b23) (not bool.b20) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0)) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (and (not bool.b18) (not bool.b19))) (not bool.b21) (not bool.b22) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))))) bool.b18 (not (and bool.b18 bool.b19)))) (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not bool.b20) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))) (not bool.b22) (not bool.b17))) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0))))))) (exists ((?lambdaprime Real)) (and (not (and (not (and bool.b17 (not (and (not (<= 20.0 (+ (* (/ 1.0 2.0) ?lambdaprime) x3))) (not (<= 4100.0 (+ (* 20.0 ?lambdaprime) x4))))))) (not (and (not (and (not (<= 20.0 (+ (* (/ 1.0 2.0) ?lambdaprime) x3))) (not (<= 4910.0 (+ (* 20.0 ?lambdaprime) x4))))) bool.b19)) (not (and (not (and (not (<= 20.0 (+ (* (/ 1.0 2.0) ?lambdaprime) x3))) (not (<= 4500.0 (+ (* 20.0 ?lambdaprime) x4))))) bool.b18)))) (<= 0.0 ?lambdaprime) (<= ?lambdaprime ?lambda)))))";
		final String expectedResultAsString = "(let ((.cse20 (* (/ 1.0 140.0) x4)) (.cse18 (* (/ 12.0 7.0) x3)) (.cse19 (* (/ 2.0 7.0) x3)) (.cse17 (* (/ 3.0 70.0) x4)) (.cse7 (* 2.0 x3)) (.cse23 (* (/ 1.0 40.0) x4)) (.cse8 (* (/ 1.0 20.0) x4))) (let ((.cse6 (<= 205.0 .cse8)) (.cse16 (<= (/ 623.0 4.0) (+ x3 .cse23))) (.cse14 (< .cse8 (+ .cse7 (/ 491.0 2.0)))) (.cse15 (< (/ 2400.0 7.0) (+ .cse19 .cse17))) (.cse10 (<= (/ 731.0 5.0) (+ (* (/ 6.0 5.0) x3) (* (/ 1.0 50.0) x4)))) (.cse11 (not bool.b18)) (.cse12 (not (<= (+ x3 (/ 185.0 2.0)) .cse23))) (.cse13 (<= (+ x3 (/ 193.0 2.0)) .cse23)) (.cse2 (<= .cse17 (+ .cse18 (/ 1166.0 7.0)))) (.cse3 (<= 40.0 .cse7)) (.cse21 (<= 225.0 .cse8)) (.cse22 (<= (+ .cse19 (/ 129.0 7.0)) .cse20)) (.cse0 (<= .cse17 (+ .cse18 (/ 1446.0 7.0)))) (.cse9 (not bool.b20)) (.cse1 (<= (+ .cse19 (/ 545.0 14.0)) .cse20)) (.cse4 (<= (/ 491.0 2.0) .cse8)) (.cse5 (< 0.0 .cse7))) (and (or .cse0 .cse1 .cse2 .cse3 bool.b18 .cse4 bool.b17 .cse5) (or .cse6 bool.b21 bool.b20 bool.b23 (<= (+ .cse7 418.0) (* (/ 1.0 10.0) x4)) bool.b22 (<= .cse8 (+ .cse7 205.0)) bool.b18 (not bool.b17) bool.b19) (or (<= (* (/ 4.0 175.0) x4) (+ (* (/ 32.0 35.0) x3) (/ 6883.0 35.0))) .cse9 .cse10 bool.b18 bool.b17 bool.b19) (or .cse6 .cse11 .cse12 bool.b21 bool.b20 bool.b23 bool.b22 bool.b17 .cse13 bool.b19) (or .cse14 .cse15 .cse9 .cse16 bool.b18 bool.b17 .cse5 bool.b19) (or .cse14 .cse0 .cse9 bool.b18 bool.b17 (<= .cse17 (+ .cse18 (/ 2400.0 7.0))) .cse5 bool.b19) (or .cse6 .cse0 (<= .cse19 (+ .cse20 (/ 11.0 7.0))) .cse2 .cse3 bool.b18 bool.b17 .cse5 bool.b19) (or .cse0 .cse1 .cse2 .cse3 .cse21 .cse22 .cse4 bool.b17 .cse5) (or .cse14 .cse15 .cse9 bool.b18 bool.b17 .cse5 bool.b19) (or .cse0 .cse15 .cse9 .cse16 bool.b18 bool.b17 .cse5 bool.b19) (or .cse0 bool.b18 bool.b17 .cse5 bool.b19) (or .cse14 .cse15 .cse9 .cse10 bool.b18 bool.b17 .cse5 bool.b19) (or .cse11 .cse12 bool.b21 bool.b20 bool.b23 bool.b22 .cse21 bool.b17 .cse13 bool.b19) (or .cse0 .cse9 .cse1 bool.b18 .cse4 bool.b17 .cse5 bool.b19) (or .cse11 .cse12 bool.b21 bool.b20 bool.b23 bool.b22 bool.b17 .cse5 .cse13 bool.b19) (or .cse0 .cse2 .cse3 .cse21 .cse22 bool.b17 .cse5 bool.b19) (or .cse0 .cse9 .cse1 bool.b18 .cse4 bool.b17 .cse5))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}


	/**
	 * Regression test for bug in array PQE. Should maybe be moved to different
	 * file.
	 */
	@Test
	public void heap_data_cart2() {
		final FunDecl[] funDecls = new FunDecl[] {
			new FunDecl(QuantifierEliminationTest::getBitvectorSort32, "idxDim1", "idxDim2"),
			new FunDecl(QuantifierEliminationTest::getArrayBv32Bv32Bv32Sort, "arr"),
		};
		final String formulaAsString = "(and (= idxDim2 (_ bv0 32)) (exists ((x (_ BitVec 32))) (and (exists ((|â| (Array (_ BitVec 32) (Array (_ BitVec 32) (_ BitVec 32)))) (y (_ BitVec 32)) (z Bool)) (and (or (and (not (bvslt (select (select |â| y) (_ bv4 32)) x)) (not z)) (and (bvslt (select (select |â| y) (_ bv4 32)) x) z)) (= (store |â| y (store (store (select |â| y) (_ bv8 32) x) (_ bv4 32) (select (store (select |â| y) (_ bv8 32) x) (_ bv4 32)))) arr) (not (bvslt (select (select |â| idxDim1) (bvadd idxDim2 (_ bv4 32))) (select (select |â| idxDim1) (bvadd idxDim2 (_ bv8 32))))) (not (bvslt (select (select |â| idxDim1) (bvadd idxDim2 (_ bv8 32))) (_ bv0 32))) (not z))) (not (bvslt x (_ bv0 32))))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, null, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void scholl_smt08_RNDPRE_RNDPRE_4_56() {
		final FunDecl[] funDecls = new FunDecl[] {
			new FunDecl(SmtSortUtils::getRealSort, "?x1", "?x2", "?x3"),
		};
		final String formulaAsString = "(exists ((?x4 Real)) (and (< (+ (* 47.0 ?x4) 62.0) (+ (* 21.0 ?x1) (* 39.0 ?x3))) (not (= 0.0 (+ (* ?x1 80.0) (* ?x2 (- 65.0)) (* ?x3 3.0) (* ?x4 16.0)))) (< (* 50.0 ?x3) (+ (* 37.0 ?x1) (* 50.0 ?x2) (* 13.0 ?x4))) (< (+ (* 43.0 ?x1) (* 85.0 ?x2)) (+ (* 91.0 ?x4) 34.0)) (or (= (- 66.0) (+ (* ?x1 28.0) (* ?x2 99.0) (* ?x4 77.0))) (not (= 0.0 (+ (* ?x1 (- 67.0)) (* ?x2 32.0) (* ?x3 37.0))))) (not (= 77.0 (+ (* ?x1 29.0) (* ?x4 (- 59.0))))) (< ?x4 (+ (* 38.0 ?x2) 79.0)) (or (and (< 0.0 (+ (* 78.0 ?x3) 97.0)) (< (+ (* 59.0 ?x2) 65.0) (+ (* 16.0 ?x3) (* 62.0 ?x4)))) (and (<= (* 50.0 ?x2) (+ (* 23.0 ?x1) (* 37.0 ?x3) (* 11.0 ?x4) 80.0)) (<= (+ (* 83.0 ?x1) (* 20.0 ?x3) (* 42.0 ?x4)) (+ (* 41.0 ?x2) 74.0))) (and (< (+ (* 99.0 ?x1) (* 26.0 ?x2) (* 56.0 ?x3)) 28.0) (<= 0.0 (+ (* 31.0 ?x1) (* 48.0 ?x3)))) (and (or (and (not (= 0.0 (+ (* ?x1 (- 79.0)) (* ?x2 72.0) (* ?x3 26.0)))) (< (+ (* 64.0 ?x2) (* 3.0 ?x3) (* 97.0 ?x4)) 25.0)) (< (+ (* 27.0 ?x4) 11.0) (* 50.0 ?x3)) (<= 78.0 (+ (* 27.0 ?x1) (* 98.0 ?x2) (* 61.0 ?x3)))) (< (+ (* 66.0 ?x4) 66.0) (* 21.0 ?x2)) (= 0.0 (+ (* ?x3 89.0) (* ?x4 93.0))))) (< (+ (* 65.0 ?x1) (* 51.0 ?x4) 74.0) (* 27.0 ?x3)) (or (and (or (< (+ (* 28.0 ?x1) (* 7.0 ?x2)) (* 38.0 ?x4)) (< (+ (* 24.0 ?x2) (* 47.0 ?x4)) (+ (* 97.0 ?x1) (* 4.0 ?x3))) (= 41.0 (+ (* ?x1 98.0) (* ?x2 8.0) (* ?x3 (- 15.0)))) (< (* 67.0 ?x1) 0.0)) (= 63.0 (+ (* ?x1 18.0) (* ?x4 54.0))) (or (= 0.0 (+ (* ?x1 13.0) (* ?x2 13.0))) (<= (* 14.0 ?x2) (+ (* 47.0 ?x1) 38.0)) (and (<= (+ (* 11.0 ?x1) (* 57.0 ?x3) 46.0) (* 87.0 ?x4)) (< (+ (* 23.0 ?x2) (* 94.0 ?x3)) (+ (* 93.0 ?x1) (* 21.0 ?x4)))) (not (= 48.0 (+ (* ?x1 88.0) (* ?x2 66.0) (* ?x3 65.0) (* ?x4 20.0))))) (= (- 28.0) (+ (* ?x1 (- 97.0)) (* ?x3 96.0) (* ?x4 31.0))) (not (= 90.0 (+ (* ?x2 86.0) (* ?x3 (- 28.0)) (* ?x4 2.0)))) (or (< (+ (* 81.0 ?x4) 35.0) (+ (* 38.0 ?x1) (* 64.0 ?x2))) (not (= (- 55.0) (+ (* ?x2 (- 24.0)) (* ?x3 (- 96.0)) (* ?x4 40.0))))) (or (and (<= (+ (* 59.0 ?x1) (* 50.0 ?x2) (* 37.0 ?x3)) 80.0) (or (<= (+ (* 3.0 ?x1) (* 46.0 ?x2)) (+ (* 3.0 ?x4) 38.0)) (< (* 98.0 ?x3) (+ (* 95.0 ?x1) (* 2.0 ?x4))))) (< (+ (* 95.0 ?x2) (* 25.0 ?x4)) (+ (* 82.0 ?x1) (* 21.0 ?x3) 79.0)) (= 48.0 (+ (* ?x1 45.0) (* ?x2 49.0)))) (or (<= 0.0 (+ (* 99.0 ?x2) (* 9.0 ?x3) (* 25.0 ?x4) 50.0)) (< (+ (* 27.0 ?x1) (* 97.0 ?x2) (* 97.0 ?x3)) 0.0)) (< (+ (* 60.0 ?x1) (* 73.0 ?x4)) (+ (* 71.0 ?x2) (* 94.0 ?x3) 91.0))) (and (or (and (< (* 27.0 ?x4) (+ (* 29.0 ?x1) 1.0)) (< 12.0 (* 71.0 ?x1))) (and (<= (+ (* 73.0 ?x3) (* 45.0 ?x4) 61.0) 0.0) (or (= 15.0 (+ (* ?x1 97.0) (* ?x4 (- 73.0)))) (< 8.0 (+ (* 3.0 ?x1) (* 99.0 ?x2) (* 25.0 ?x3)))))) (or (= (- 42.0) (+ (* ?x1 2.0) (* ?x3 (- 55.0)) (* ?x4 5.0))) (<= (+ (* 12.0 ?x2) 7.0) (+ (* 73.0 ?x3) (* 70.0 ?x4))) (and (< (+ (* 17.0 ?x2) (* 24.0 ?x3) 32.0) (+ (* 63.0 ?x1) (* 14.0 ?x4))) (not (= 0.0 (+ (* ?x1 (- 21.0)) (* ?x2 (- 14.0)) (* ?x3 (- 48.0)) (* ?x4 83.0))))) (< (+ (* 68.0 ?x1) (* 64.0 ?x2) 47.0) (* 14.0 ?x3))))) (<= (* 17.0 ?x2) (+ (* 24.0 ?x3) (* 82.0 ?x4) 35.0)) (<= 0.0 (* 35.0 ?x4)) (or (not (= 0.0 (+ (* ?x1 49.0) (* ?x3 42.0) (* ?x4 50.0)))) (and (= 0.0 (+ (* ?x1 (- 1.0)) (* ?x2 (- 97.0)) (* ?x3 33.0) (* ?x4 84.0))) (<= (+ (* 23.0 ?x1) (* 73.0 ?x2) 19.0) 0.0)))))";
		final String expectedResultAsString = "false";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	/**
	 * Regression test for bug in array PQE. Should maybe be moved to different file.
	 */
	@Test
	public void dll_01_2big() {
		final FunDecl[] funDecls = new FunDecl[] {
			new FunDecl(SmtSortUtils::getIntSort, "main_#t~mem20.offset", "main_#t~mem20.base"),
		};
		final String formulaAsString =
				"(exists ((main_~inner~0.offset Int) (|#memory_$Pointer$.base| (Array Int (Array Int Int))) (main_~inner~0.base Int) (|#memory_$Pointer$.offset| (Array Int (Array Int Int)))) (and (= (select (select |#memory_$Pointer$.offset| main_~inner~0.base) (+ main_~inner~0.offset 16)) |main_#t~mem20.offset|) (or (exists ((main_~end~0.base Int) (v_prenex_12 Int)) (and (not (= (select (select |#memory_$Pointer$.base| v_prenex_12) 16) v_prenex_12)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_12) 16)) 16)) (= 0 (select (select |#memory_$Pointer$.offset| v_prenex_12) 0)) (not (= (select (select |#memory_$Pointer$.base| main_~end~0.base) 16) v_prenex_12)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_12) 8)) 8)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_12) 8)) (- 8))) (= (select (select |#memory_$Pointer$.offset| main_~end~0.base) 16) main_~inner~0.offset) (not (= (select (select |#memory_$Pointer$.base| v_prenex_12) 8) main_~end~0.base)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_12) 16)) 0)) (= (select (select |#memory_$Pointer$.base| v_prenex_12) 8) (select (select |#memory_$Pointer$.base| main_~end~0.base) 0)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| main_~end~0.base) 16)) 0)) (not (= (select (select |#memory_$Pointer$.base| v_prenex_12) 16) 0)) (not (= (select (select |#memory_$Pointer$.base| v_prenex_12) 16) (select (select |#memory_$Pointer$.base| v_prenex_12) 8))) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| main_~end~0.base) 16)) 16)) (not (= (select (select |#memory_$Pointer$.base| main_~end~0.base) 16) (select (select |#memory_$Pointer$.base| v_prenex_12) 16))) (= 0 (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_12) 16)) 0)) (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_12) 16)) 16) 0) (= 0 (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| main_~end~0.base) 16)) 0)) (not (= (select (select |#memory_$Pointer$.base| main_~end~0.base) 16) (select (select |#memory_$Pointer$.base| v_prenex_12) 8))) (= 0 (select (select |#memory_$Pointer$.offset| main_~end~0.base) 0)) (= (select (select |#memory_$Pointer$.offset| v_prenex_12) 16) 0) (= (select (select |#memory_$Pointer$.offset| main_~end~0.base) 16) 0) (= (select (select |#memory_$Pointer$.base| main_~end~0.base) 16) main_~inner~0.base) (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_12) 8)) (- 8)) v_prenex_12) (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| main_~end~0.base) 16)) 16) 0) (= 0 (select (select |#memory_$Pointer$.base| v_prenex_12) 0)) (= 0 (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_12) 8)) 8)) (= (+ (select (select |#memory_$Pointer$.offset| v_prenex_12) 8) 8) 0))) (exists ((v_prenex_16 Int) (v_prenex_13 Int)) (and (= (select (select |#memory_$Pointer$.offset| v_prenex_13) 8) 8) (= 0 (select (select |#memory_$Pointer$.offset| v_prenex_13) 0)) (= 0 (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_13) 16)) 0)) (not (= (select (select |#memory_$Pointer$.base| v_prenex_16) 16) (select (select |#memory_$Pointer$.base| v_prenex_13) 8))) (not (= (select (select |#memory_$Pointer$.base| v_prenex_16) 16) v_prenex_13)) (not (= (select (select |#memory_$Pointer$.base| v_prenex_13) 16) 0)) (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_13) 16)) 16) 0) (= (select (select |#memory_$Pointer$.base| v_prenex_16) 0) (select (select |#memory_$Pointer$.base| v_prenex_13) 8)) (not (= (select (select |#memory_$Pointer$.base| v_prenex_13) 16) (select (select |#memory_$Pointer$.base| v_prenex_13) 8))) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_16) 16)) 16)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_16) 16)) 0)) (not (= (select (select |#memory_$Pointer$.base| v_prenex_13) 16) v_prenex_13)) (= (select (select |#memory_$Pointer$.offset| v_prenex_13) 16) 0) (= 0 (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_16) 16)) 0)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_13) 8)) 24)) (= (select (select |#memory_$Pointer$.offset| v_prenex_16) 16) main_~inner~0.offset) (= 0 (select (select |#memory_$Pointer$.offset| v_prenex_16) 0)) (not (= (select (select |#memory_$Pointer$.base| v_prenex_16) 16) (select (select |#memory_$Pointer$.base| v_prenex_13) 16))) (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_16) 16)) 16) 0) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_13) 16)) 0)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_13) 8)) 8)) (= 0 (select (select |#memory_$Pointer$.base| v_prenex_13) 0)) (= 0 (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_13) 8)) 24)) (not (= v_prenex_16 (select (select |#memory_$Pointer$.base| v_prenex_13) 8))) (= (select (select |#memory_$Pointer$.base| v_prenex_16) 16) main_~inner~0.base) (= (select (select |#memory_$Pointer$.offset| v_prenex_16) 16) 0) (= v_prenex_13 (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_13) 8)) 8)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_13) 16)) 16)))) (exists ((v_prenex_14 Int)) (and (= (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 16) main_~inner~0.offset) (= (select (select |#memory_$Pointer$.offset| v_prenex_14) 16) 0) (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 16) main_~inner~0.base) (= (select (select |#memory_$Pointer$.base| v_prenex_14) 8) (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 0)) (not (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 16) (select (select |#memory_$Pointer$.base| v_prenex_14) 16))) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 16)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_14) 16)) 16)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 16)) 0)) (= 0 (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 16)) 0)) (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 16)) 16) 0) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_14) 16)) 0)) (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) (select (select |#memory_$Pointer$.offset| v_prenex_14) 8)) v_prenex_14) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 16)) 16)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 0)) (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 16)) 0) 0) (not (= (select (select |#memory_$Pointer$.base| v_prenex_14) 16) v_prenex_14)) (not (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 16) v_prenex_14)) (= 0 (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) (+ (select (select |#memory_$Pointer$.offset| v_prenex_14) 8) 16))) (not (= (select (select |#memory_$Pointer$.base| v_prenex_14) 8) (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8))) (= 0 (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 16)) 16)) (= (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) (select (select |#memory_$Pointer$.offset| v_prenex_14) 8)) 0) (= 0 (select (select |#memory_$Pointer$.base| v_prenex_14) 0)) (= 0 (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) (+ (select (select |#memory_$Pointer$.offset| v_prenex_14) 8) 16))) (not (= (select (select |#memory_$Pointer$.base| v_prenex_14) 16) (select (select |#memory_$Pointer$.base| v_prenex_14) 8))) (not (= (select (select |#memory_$Pointer$.base| v_prenex_14) 16) 0)) (= 0 (select (select |#memory_$Pointer$.offset| v_prenex_14) 0)) (not (= (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8)) 16) (select (select |#memory_$Pointer$.base| v_prenex_14) 8))) (= (select (select |#memory_$Pointer$.offset| (select (select |#memory_$Pointer$.base| v_prenex_14) 8)) 8) 0)))) (= |main_#t~mem20.base| (select (select |#memory_$Pointer$.base| main_~inner~0.base) (+ main_~inner~0.offset 16)))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, null, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}


	@Test
	public void FakeFloatingMountaineer01 () {
		final FunDecl[] funDecls = new FunDecl[] {
				new FunDecl(QuantifierEliminationTest::getBitvectorSort32, "~a~0", "~#f~0.offset", "~g~0"),
				new FunDecl(SmtSortUtils::getRoundingmodeSort, "currentRoundingMode"),
				};
		final String formulaAsString = "(forall ((|~#f~0.base| (_ BitVec 32)) (|v_#memory_int_38| (Array (_ BitVec 32) (Array (_ BitVec 32) (_ BitVec 32)))) (|#memory_int| (Array (_ BitVec 32) (Array (_ BitVec 32) (_ BitVec 32)))) (|v_skolemized_q#valueAsBitvector_3| (_ BitVec 32))) (or (not (= |v_#memory_int_38| (store |#memory_int| |~#f~0.base| (store (select |#memory_int| |~#f~0.base|) (bvadd (bvmul ~a~0 (_ bv4 32)) |~#f~0.offset|) |v_skolemized_q#valueAsBitvector_3|)))) (not (= ((_ to_fp 8 24) currentRoundingMode ~g~0) (fp ((_ extract 31 31) |v_skolemized_q#valueAsBitvector_3|) ((_ extract 30 23) |v_skolemized_q#valueAsBitvector_3|) ((_ extract 22 0) |v_skolemized_q#valueAsBitvector_3|)))) (forall ((|v_skolemized_q#valueAsBitvector_9| (_ BitVec 32)) (|v_skolemized_q#valueAsBitvector_7| (_ BitVec 32)) (|v_skolemized_q#valueAsBitvector_8| (_ BitVec 32)) (|v_skolemized_q#valueAsBitvector_10| (_ BitVec 32)) (|v_skolemized_q#valueAsBitvector_11| (_ BitVec 32)) (|v_skolemized_q#valueAsBitvector_12| (_ BitVec 32)) (|v_skolemized_q#valueAsBitvector_5| (_ BitVec 32)) (|v_skolemized_q#valueAsBitvector_6| (_ BitVec 32)) (|v_skolemized_q#valueAsBitvector_4| (_ BitVec 32))) (= (_ bv0 8) ((_ extract 7 0) (select (let ((.cse0 (bvmul ~a~0 (_ bv4 32)))) (store (store (store (store (store (store (store (store (store (select |v_#memory_int_38| |~#f~0.base|) (bvadd .cse0 |~#f~0.offset| (_ bv4 32)) |v_skolemized_q#valueAsBitvector_4|) (bvadd .cse0 |~#f~0.offset| (_ bv8 32)) |v_skolemized_q#valueAsBitvector_5|) (bvadd .cse0 |~#f~0.offset| (_ bv12 32)) |v_skolemized_q#valueAsBitvector_6|) (bvadd .cse0 |~#f~0.offset| (_ bv16 32)) |v_skolemized_q#valueAsBitvector_7|) (bvadd .cse0 |~#f~0.offset| (_ bv20 32)) |v_skolemized_q#valueAsBitvector_8|) (bvadd .cse0 |~#f~0.offset| (_ bv24 32)) |v_skolemized_q#valueAsBitvector_9|) (bvadd .cse0 |~#f~0.offset| (_ bv28 32)) |v_skolemized_q#valueAsBitvector_10|) (bvadd .cse0 |~#f~0.offset| (_ bv32 32)) |v_skolemized_q#valueAsBitvector_11|) (bvadd .cse0 |~#f~0.offset| (_ bv36 32)) |v_skolemized_q#valueAsBitvector_12|)) |~#f~0.offset|))))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, null, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void forester_heap_dll_01() {
		final FunDecl[] funDecls = new FunDecl[] {
			new FunDecl(QuantifierEliminationTest::getBitvectorSort32, "main_#t~malloc9.base", "main_~end~0.offset", "main_~list~0.base", "main_~end~0.base", "main_~list~0.offset"),
			new FunDecl(QuantifierEliminationTest::getArrayBv32Bv1Sort, "#valid"),
		};
		final String formulaAsString =
				"(forall ((|#memory_$Pointer$.base| (Array (_ BitVec 32) (Array (_ BitVec 32) (_ BitVec 32)))) (|main_#t~mem10.offset| (_ BitVec 32)) (v_subst_7 (_ BitVec 32))) (= (_ bv0 1) (bvadd (select |#valid| (select (select (store (store (store |#memory_$Pointer$.base| main_~end~0.base (store (select |#memory_$Pointer$.base| main_~end~0.base) main_~end~0.offset |main_#t~malloc9.base|)) |main_#t~malloc9.base| (store (select (store |#memory_$Pointer$.base| main_~end~0.base (store (select |#memory_$Pointer$.base| main_~end~0.base) main_~end~0.offset |main_#t~malloc9.base|)) |main_#t~malloc9.base|) (bvadd |main_#t~mem10.offset| (_ bv4 32)) main_~end~0.base)) (select (select (store (store |#memory_$Pointer$.base| main_~end~0.base (store (select |#memory_$Pointer$.base| main_~end~0.base) main_~end~0.offset |main_#t~malloc9.base|)) |main_#t~malloc9.base| (store (select (store |#memory_$Pointer$.base| main_~end~0.base (store (select |#memory_$Pointer$.base| main_~end~0.base) main_~end~0.offset |main_#t~malloc9.base|)) |main_#t~malloc9.base|) (bvadd |main_#t~mem10.offset| (_ bv4 32)) main_~end~0.base)) main_~end~0.base) main_~end~0.offset) (store (store (select (store (store |#memory_$Pointer$.base| main_~end~0.base (store (select |#memory_$Pointer$.base| main_~end~0.base) main_~end~0.offset |main_#t~malloc9.base|)) |main_#t~malloc9.base| (store (select (store |#memory_$Pointer$.base| main_~end~0.base (store (select |#memory_$Pointer$.base| main_~end~0.base) main_~end~0.offset |main_#t~malloc9.base|)) |main_#t~malloc9.base|) (bvadd |main_#t~mem10.offset| (_ bv4 32)) main_~end~0.base)) (select (select (store (store |#memory_$Pointer$.base| main_~end~0.base (store (select |#memory_$Pointer$.base| main_~end~0.base) main_~end~0.offset |main_#t~malloc9.base|)) |main_#t~malloc9.base| (store (select (store |#memory_$Pointer$.base| main_~end~0.base (store (select |#memory_$Pointer$.base| main_~end~0.base) main_~end~0.offset |main_#t~malloc9.base|)) |main_#t~malloc9.base|) (bvadd |main_#t~mem10.offset| (_ bv4 32)) main_~end~0.base)) main_~end~0.base) main_~end~0.offset)) v_subst_7 (_ bv0 32)) (bvadd v_subst_7 (_ bv8 32)) (_ bv0 32))) main_~list~0.base) main_~list~0.offset)) (_ bv1 1))))";
		final String expectedResultAsString =
				"(forall ((|main_#t~mem10.offset| (_ BitVec 32)) (v_arrayElimCell_156 (_ BitVec 32)) (v_subst_7 (_ BitVec 32))) (or (and (= main_~list~0.offset v_subst_7) (= (_ bv0 1) (bvadd (select |#valid| (_ bv0 32)) (_ bv1 1))) (= |main_#t~malloc9.base| main_~list~0.base)) (and (or (not (= |main_#t~malloc9.base| main_~list~0.base)) (not (= main_~list~0.offset v_subst_7))) (or (and (or (not (= |main_#t~malloc9.base| main_~list~0.base)) (not (= main_~list~0.offset (bvadd v_subst_7 (_ bv8 32))))) (or (and (= main_~list~0.base main_~end~0.base) (= (_ bv0 1) (bvadd (select |#valid| |main_#t~malloc9.base|) (_ bv1 1))) (= main_~list~0.offset main_~end~0.offset)) (and (or (and (= main_~list~0.offset (bvadd |main_#t~mem10.offset| (_ bv4 32))) (= (_ bv0 1) (bvadd (select |#valid| main_~end~0.base) (_ bv1 1))) (= |main_#t~malloc9.base| main_~list~0.base)) (and (= (bvadd (select |#valid| v_arrayElimCell_156) (_ bv1 1)) (_ bv0 1)) (or (not (= |main_#t~malloc9.base| main_~list~0.base)) (not (= main_~list~0.offset (bvadd |main_#t~mem10.offset| (_ bv4 32))))))) (or (not (= main_~list~0.base main_~end~0.base)) (not (= main_~list~0.offset main_~end~0.offset)))))) (and (= main_~list~0.offset (bvadd v_subst_7 (_ bv8 32))) (= (_ bv0 1) (bvadd (select |#valid| (_ bv0 32)) (_ bv1 1))) (= |main_#t~malloc9.base| main_~list~0.base))))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResultAsString, false, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	/**
	 * 20190812 Matthias: In the competition we were able to solve this benchmark but now we obtain an AEA term.
	 */
	 @Test
	public void ALIA_piVC_piVC_d91441() {
		final FunDecl[] funDecls = new FunDecl[] {
				new FunDecl(SmtSortUtils::getIntSort, "V_6", "V_5", "t", "ix", "j", "i"),
				new FunDecl(QuantifierEliminationTest::getArrayIntIntSort, "a"),
			};
		final String formulaAsString = "(and (<= 0 j) (= V_5 V_6) (forall ((?V_11 Int)) (=> (and (<= (+ ?V_11 1) i) (<= 0 ?V_11)) (forall ((?V_12 Int)) (=> (and (<= 0 ?V_12) (<= ?V_12 ?V_11)) (<= (select a ?V_12) (select a ?V_11)))))) (< t (select a j)) (<= 0 V_5) (<= 0 (+ j 1)) (<= (+ j 1) i) (or (<= V_6 i) (exists ((?V_8 Int)) (and (exists ((?V_9 Int)) (and (<= ?V_9 ?V_8) (<= 0 ?V_9) (< (select (store a (+ j 1) (select a j)) ?V_8) (select (store a (+ j 1) (select a j)) ?V_9)))) (<= (+ ?V_8 1) i) (<= 0 ?V_8))) (not (= V_5 V_6)) (and (< (select (store a (+ j 1) (select a j)) i) (select (store a (+ j 1) (select a j)) (+ i (- 1)))) (not (= (+ i (- 1)) (+ j (- 1))))) (< i 1) (< j 0) (< i j) (and (exists ((?V_7 Int)) (and (<= ?V_7 i) (<= j ?V_7) (<= (select (store a (+ j 1) (select a j)) ?V_7) t))) (not (= (+ i (- 1)) (+ j (- 1)))))) (<= 1 i) (< i V_6) (or (= (+ i (- 1)) j) (<= (select a (+ i (- 1))) (select a i))) (or (= (+ i (- 1)) j) (forall ((?V_10 Int)) (=> (and (<= ?V_10 i) (<= (+ j 1) ?V_10)) (< t (select a ?V_10))))))";
		final String expectedResultAsString = "(let ((.cse20 (+ i (- 1))) (.cse22 (+ j 1)) (.cse23 (select a j))) (let ((.cse9 (< i j)) (.cse14 (<= V_6 i)) (.cse19 (exists ((?V_7 Int)) (and (<= ?V_7 i) (<= j ?V_7) (<= (select (store a (+ j 1) (select a j)) ?V_7) t)))) (.cse17 (< j 0)) (.cse16 (let ((.cse24 (store a .cse22 .cse23))) (< (select .cse24 i) (select .cse24 .cse20)))) (.cse15 (not (= .cse20 (+ j (- 1))))) (.cse8 (= .cse20 j)) (.cse12 (< i 1)) (.cse0 (<= 0 j)) (.cse11 (forall ((?V_10 Int)) (or (not (<= ?V_10 i)) (< t (select a ?V_10)) (not (<= (+ j 1) ?V_10))))) (.cse1 (= V_5 V_6)) (.cse2 (< t .cse23)) (.cse3 (forall ((?V_11 Int) (?V_12 Int)) (or (not (<= 0 ?V_11)) (not (<= 0 ?V_12)) (not (<= ?V_12 ?V_11)) (<= (select a ?V_12) (select a ?V_11)) (not (<= (+ ?V_11 1) i))))) (.cse4 (<= 0 .cse22)) (.cse5 (<= .cse22 i)) (.cse6 (<= 0 V_5)) (.cse7 (<= 1 i)) (.cse18 (exists ((?V_9 Int) (?V_8 Int)) (and (<= ?V_9 ?V_8) (<= (+ ?V_8 1) i) (<= 0 ?V_8) (<= 0 ?V_9) (let ((.cse21 (store a (+ j 1) (select a j)))) (< (select .cse21 ?V_8) (select .cse21 ?V_9)))))) (.cse13 (<= (select a .cse20) (select a i))) (.cse10 (< i V_6))) (or (and .cse0 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse9 .cse10) (and .cse0 .cse1 .cse11 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse12 .cse13 .cse10) (and .cse0 .cse1 .cse11 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse9 .cse13 .cse10) (and .cse0 .cse14 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse10) (and .cse11 .cse3 .cse4 .cse5 .cse15 .cse0 .cse1 .cse16 .cse2 .cse6 .cse7 .cse13 .cse10) (and .cse0 .cse14 .cse1 .cse11 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse13 .cse10) (and .cse0 .cse1 .cse11 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse17 .cse13 .cse10) (and .cse0 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse18 .cse8 .cse10) (and .cse11 .cse19 .cse3 .cse4 .cse5 .cse15 .cse0 .cse1 .cse2 .cse6 .cse7 .cse13 .cse10) (and .cse0 .cse1 .cse19 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse15 .cse10) (and .cse0 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse17 .cse10) (and .cse0 .cse1 .cse16 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse15 .cse10) (and .cse0 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse12 .cse10) (and .cse0 .cse11 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse18 .cse13 .cse10))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}



	@Test
	public void maybeTooDifficult() {
		final FunDecl[] funDecls = new FunDecl[] {
				new FunDecl(SmtSortUtils::getIntSort, "ULTIMATE.start_save_byte_from_array_~storage.base", "ULTIMATE.start_save_byte_from_array_~storage.offset", "ULTIMATE.start_save_byte_from_array_~array.base", "ULTIMATE.start_save_byte_from_array_~array.offset", "ULTIMATE.start_aws_array_eq_harness_~rhs~0.base", "ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_lhs~0.base", "ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_lhs~0.offset", "ULTIMATE.start_aws_array_eq_harness_~lhs~0.offset", "ULTIMATE.start_aws_array_eq_harness_~lhs~0.base", "#StackHeapBarrier"),
				new FunDecl(QuantifierEliminationTest::getArrayIntIntSort, "#valid"),
			};
		final String formulaAsString = "(forall ((|#memory_int| (Array Int (Array Int Int))) (v_ULTIMATE.start_save_byte_from_array_~array.offset_44 Int) (v_ULTIMATE.start_save_byte_from_array_~storage.offset_46 Int) (|v_ULTIMATE.start_nondet_size_t_#res_14| Int) (|ULTIMATE.start_nondet_size_t_#res| Int) (|v_ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_rhs~0.base_24| Int)) (or (let ((.cse1 (let ((.cse2 (store |#memory_int| ULTIMATE.start_save_byte_from_array_~storage.base (let ((.cse4 (store (select |#memory_int| ULTIMATE.start_save_byte_from_array_~storage.base) ULTIMATE.start_save_byte_from_array_~storage.offset |ULTIMATE.start_nondet_size_t_#res|))) (store .cse4 (+ 8 ULTIMATE.start_save_byte_from_array_~storage.offset) (select (select (store |#memory_int| ULTIMATE.start_save_byte_from_array_~storage.base .cse4) ULTIMATE.start_save_byte_from_array_~array.base) (+ ULTIMATE.start_save_byte_from_array_~array.offset |ULTIMATE.start_nondet_size_t_#res|))))))) (store .cse2 |v_ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_rhs~0.base_24| (let ((.cse3 (store (select .cse2 |v_ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_rhs~0.base_24|) v_ULTIMATE.start_save_byte_from_array_~storage.offset_46 |v_ULTIMATE.start_nondet_size_t_#res_14|))) (store .cse3 (+ 8 v_ULTIMATE.start_save_byte_from_array_~storage.offset_46) (select (select (store .cse2 |v_ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_rhs~0.base_24| .cse3) ULTIMATE.start_aws_array_eq_harness_~rhs~0.base) (+ v_ULTIMATE.start_save_byte_from_array_~array.offset_44 |v_ULTIMATE.start_nondet_size_t_#res_14|)))))))) (let ((.cse0 (select .cse1 |ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_lhs~0.base|))) (= (mod (select .cse0 (+ 8 |ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_lhs~0.offset|)) 256) (mod (select (select .cse1 ULTIMATE.start_aws_array_eq_harness_~lhs~0.base) (+ ULTIMATE.start_aws_array_eq_harness_~lhs~0.offset (select .cse0 |ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_lhs~0.offset|))) 256)))) (not (= (select |#valid| |v_ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_rhs~0.base_24|) 0)) (<= |v_ULTIMATE.start_aws_array_eq_harness_~#old_byte_from_rhs~0.base_24| |#StackHeapBarrier|)))";
		final String expectedResult = null;
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResult, false, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void hiddenArrayEquality_tilia() {
		final FunDecl[] funDecls = new FunDecl[] {
				new FunDecl(QuantifierEliminationTest::getArrayIntIntSort, "valid", "oldValid"),
			};
		final String formulaAsString = "(exists ((a (Array Int Int))) (and (= oldValid (store a 1000 1001)) (= (store (store a 1000 1001) 23 42) valid) (= (select a 23) 42)))";
		final String expectedResultAsString = "(and (= oldValid valid) (= (select valid 1000) 1001) (= (select valid 23) 42))";
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void endless2() {
		final FunDecl[] funDecls = new FunDecl[] {
				new FunDecl(SmtSortUtils::getIntSort, "ULTIMATE.start_aws_byte_buf_secure_zero_~buf#1.base", "ULTIMATE.start_aws_byte_buf_secure_zero_~buf#1.offset"),
				new FunDecl(QuantifierEliminationTest::getArrayIntIntIntSort, "v_arrayElimArr_13", "v_arrayElimArr_12", "#memory_int"),
			};
		final String formulaAsString = "(and (= |ULTIMATE.start_aws_byte_buf_secure_zero_~buf#1.offset| 0) (exists ((|ULTIMATE.start_memset_impl_~sp~0#1.base| Int) (|v_#memory_int_42| (Array Int (Array Int Int))) (|ULTIMATE.start_memset_impl_~c#1| Int) (|ULTIMATE.start_memset_impl_~i~6#1| Int) (|ULTIMATE.start_memset_impl_~sp~0#1.offset| Int)) (let ((.cse6 (mod |ULTIMATE.start_memset_impl_~c#1| 256))) (let ((.cse7 (< 127 .cse6)) (.cse8 (<= .cse6 127))) (and (not (= |ULTIMATE.start_aws_byte_buf_secure_zero_~buf#1.base| |ULTIMATE.start_memset_impl_~sp~0#1.base|)) (let ((.cse9 (mod |ULTIMATE.start_memset_impl_~i~6#1| 18446744073709551616))) (let ((.cse5 (+ |ULTIMATE.start_memset_impl_~sp~0#1.offset| (- 18446744073709551616) .cse9)) (.cse4 (< 9223372036854775807 .cse9)) (.cse0 (select |v_#memory_int_42| |ULTIMATE.start_memset_impl_~sp~0#1.base|)) (.cse1 (+ |ULTIMATE.start_memset_impl_~sp~0#1.offset| .cse9)) (.cse3 (<= .cse9 9223372036854775807))) (or (and (let ((.cse2 (+ (- 256) .cse6))) (or (and (= |#memory_int| (store |v_#memory_int_42| |ULTIMATE.start_memset_impl_~sp~0#1.base| (store .cse0 .cse1 .cse2))) .cse3) (and .cse4 (= |#memory_int| (store |v_#memory_int_42| |ULTIMATE.start_memset_impl_~sp~0#1.base| (store .cse0 .cse5 .cse2)))))) .cse7) (and (or (and (= |#memory_int| (store |v_#memory_int_42| |ULTIMATE.start_memset_impl_~sp~0#1.base| (store .cse0 .cse5 .cse6))) .cse4) (and (= |#memory_int| (store |v_#memory_int_42| |ULTIMATE.start_memset_impl_~sp~0#1.base| (store .cse0 .cse1 .cse6))) .cse3)) .cse8)))) (let ((.cse12 (select (select |v_#memory_int_42| |ULTIMATE.start_aws_byte_buf_secure_zero_~buf#1.base|) 16))) (or (and (let ((.cse10 (let ((.cse11 (* .cse12 (- 1)))) (< (div (+ 18446744073709551615 .cse11) (- 18446744073709551616)) (div .cse11 (- 18446744073709551616)))))) (or (and (exists ((|aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62| Int)) (and (< 9223372036854775807 |aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62|) (= (+ 256 (select (select |v_#memory_int_42| |ULTIMATE.start_memset_impl_~sp~0#1.base|) (+ |ULTIMATE.start_memset_impl_~sp~0#1.offset| (mod |aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62| 18446744073709551616) (- 18446744073709551616)))) (mod |ULTIMATE.start_memset_impl_~c#1| 256)) (< |aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62| 18446744073709551616))) .cse10) (and (exists ((v_prenex_72 Int)) (and (= (mod |ULTIMATE.start_memset_impl_~c#1| 256) (+ 256 (select (select |v_#memory_int_42| |ULTIMATE.start_memset_impl_~sp~0#1.base|) (+ |ULTIMATE.start_memset_impl_~sp~0#1.offset| (mod v_prenex_72 18446744073709551616))))) (<= 0 v_prenex_72) (<= v_prenex_72 9223372036854775807))) .cse10))) .cse7) (and .cse8 (let ((.cse13 (not (= (mod .cse12 18446744073709551616) 0)))) (or (and .cse13 (exists ((|aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62| Int)) (and (<= |aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62| 9223372036854775807) (<= 0 |aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62|) (= (mod |ULTIMATE.start_memset_impl_~c#1| 256) (select (select |v_#memory_int_42| |ULTIMATE.start_memset_impl_~sp~0#1.base|) (+ |ULTIMATE.start_memset_impl_~sp~0#1.offset| (mod |aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62| 18446744073709551616))))))) (and .cse13 (exists ((|aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62| Int)) (and (< 9223372036854775807 |aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62|) (= (mod |ULTIMATE.start_memset_impl_~c#1| 256) (select (select |v_#memory_int_42| |ULTIMATE.start_memset_impl_~sp~0#1.base|) (+ |ULTIMATE.start_memset_impl_~sp~0#1.offset| (mod |aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62| 18446744073709551616) (- 18446744073709551616)))) (< |aux_mod_ULTIMATE.start_memset_impl_~i~6#1_62| 18446744073709551616))))))))))))))";
		final String expectedResultAsString = formulaAsString;
		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}




//	// read_type_#64._token is function symbol with
//	// param sorts [(Array Int (Array Int Int)), (Array Int (Array Int Int)), (Array Int (Array Int Int)), Int, Int]
//    // and return sort Int
//	@Test
//	public void daxus01() {
//		final FunDecl[] funDecls = new FunDecl[] {
//				new FunDecl(SmtSortUtils::getIntSort, "routine_#33910_luaX_next_local_#4227_ls_IN.base", "routine_#33910_luaX_next_local_#4227_ls_IN.offset"),
//				new FunDecl(QuantifierEliminationTest::getArrayIntIntIntSort, "_memory", "old(_memory)", "read_type_#64._token"),
//			};
//		final String formulaAsString = "(exists ((v__memory_1153 (Array Int (Array Int Int))) (v__memory_ptr.base_1009 (Array Int (Array Int Int))) (v__memory_ptr.offset_1009 (Array Int (Array Int Int))) (|routine_#33910_luaX_next_local_#4227_ls.offset| Int)) (and (<= |routine_#33910_luaX_next_local_#4227_ls.offset| |routine_#33910_luaX_next_local_#4227_ls_IN.offset|) (= (store v__memory_1153 |routine_#33910_luaX_next_local_#4227_ls_IN.base| (let ((.cse0 (+ 32 |routine_#33910_luaX_next_local_#4227_ls.offset|))) (store (store (store (select v__memory_1153 |routine_#33910_luaX_next_local_#4227_ls_IN.base|) (+ 16 |routine_#33910_luaX_next_local_#4227_ls.offset|) (|read_type_#64._token| v__memory_1153 v__memory_ptr.base_1009 v__memory_ptr.offset_1009 |routine_#33910_luaX_next_local_#4227_ls_IN.base| .cse0)) (+ |routine_#33910_luaX_next_local_#4227_ls.offset| 24) (|read_type_#64._seminfo._i| v__memory_1153 v__memory_ptr.base_1009 v__memory_ptr.offset_1009 |routine_#33910_luaX_next_local_#4227_ls_IN.base| .cse0)) .cse0 289))) _memory) (<= |routine_#33910_luaX_next_local_#4227_ls_IN.offset| |routine_#33910_luaX_next_local_#4227_ls.offset|)))";
//		final String expectedResult = null;
//		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResult, false, mServices, mLogger, mMgdScript, mCsvWriter);
//	}
//
//
//	// read_type_#64._token is function symbol with
//	// param sorts [(Array Int (Array Int Int)), (Array Int (Array Int Int)), (Array Int (Array Int Int)), Int, Int]
//    // and return sort Int
//	@Test
//	public void daxus02() {
//		final FunDecl[] funDecls = new FunDecl[] {
//				new FunDecl(SmtSortUtils::getIntSort, "routine_#33910_luaX_next_local_#4227_ls_IN.base", "routine_#33910_luaX_next_local_#4227_ls_IN.offset"),
//				new FunDecl(QuantifierEliminationTest::getArrayIntIntIntSort, "_memory", "old(_memory)", "read_type_#64._token"),
//			};
//		final String formulaAsString = "(exists ((v__memory_ptr.offset_1308 (Array Int (Array Int Int))) (v__memory_ptr.base_1308 (Array Int (Array Int Int)))) (= _memory (store |old(_memory)| |routine_#33910_luaX_next_local_#4227_ls_IN.base| (let ((.cse2 (+ 32 |routine_#33910_luaX_next_local_#4227_ls_IN.offset|))) (store (let ((.cse0 (let ((.cse3 (select |old(_memory)| |routine_#33910_luaX_next_local_#4227_ls_IN.base|))) (store .cse3 (+ |routine_#33910_luaX_next_local_#4227_ls_IN.offset| 8) (select .cse3 (+ |routine_#33910_luaX_next_local_#4227_ls_IN.offset| 4)))))) (let ((.cse1 (store |old(_memory)| |routine_#33910_luaX_next_local_#4227_ls_IN.base| .cse0))) (store (store .cse0 (+ 16 |routine_#33910_luaX_next_local_#4227_ls_IN.offset|) (|read_type_#64._token| .cse1 v__memory_ptr.base_1308 v__memory_ptr.offset_1308 |routine_#33910_luaX_next_local_#4227_ls_IN.base| .cse2)) (+ |routine_#33910_luaX_next_local_#4227_ls_IN.offset| 24) (|read_type_#64._seminfo._i| .cse1 v__memory_ptr.base_1308 v__memory_ptr.offset_1308 |routine_#33910_luaX_next_local_#4227_ls_IN.base| .cse2)))) .cse2 289)))))";
//		final String expectedResult = null;
//		QuantifierEliminationTest.runQuantifierEliminationTest(funDecls, formulaAsString, expectedResult, false, mServices, mLogger, mMgdScript, mCsvWriter);
//	}




	//@formatter:on
}