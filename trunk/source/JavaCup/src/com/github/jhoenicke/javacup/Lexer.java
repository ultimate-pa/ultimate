/* The following code was generated by JFlex 1.4.2 on 20.07.16 16:51 */

package com.github.jhoenicke.javacup;
import com.github.jhoenicke.javacup.runtime.ComplexSymbolFactory;
import com.github.jhoenicke.javacup.runtime.ComplexSymbolFactory.Location;
import com.github.jhoenicke.javacup.runtime.Symbol;
import java.io.InputStream;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 20.07.16 16:51 from the specification file
 * <tt>/home/hoenicke/work/git/javacup/flex/Lexer.jflex</tt>
 */
public class Lexer implements sym, com.github.jhoenicke.javacup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CODESEG = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\0\1\3\1\1\16\6\4\0\1\3\3\0"+
    "\1\6\1\21\4\0\1\5\1\12\1\11\1\0\1\13\1\4\12\6"+
    "\1\17\1\10\1\27\1\20\1\26\1\7\1\0\32\6\1\15\1\0"+
    "\1\16\1\0\1\6\1\0\1\31\1\6\1\25\1\41\1\24\1\46"+
    "\1\33\1\45\1\34\1\6\1\32\1\43\1\35\1\40\1\36\1\22"+
    "\1\6\1\23\1\42\1\37\1\50\1\6\1\44\1\47\2\6\1\30"+
    "\1\14\1\51\1\0\41\6\2\0\4\6\4\0\1\6\2\0\1\6"+
    "\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6"+
    "\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\6"+
    "\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0"+
    "\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\6\2\0"+
    "\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0"+
    "\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\10\0"+
    "\33\6\5\0\3\6\15\0\5\6\6\0\1\6\4\0\13\6\5\0"+
    "\53\6\37\6\4\0\2\6\1\6\143\6\1\0\1\6\10\6\1\0"+
    "\6\6\2\6\2\6\1\0\4\6\2\6\12\6\3\6\2\0\1\6"+
    "\17\0\1\6\1\6\1\6\36\6\33\6\2\0\131\6\13\6\1\6"+
    "\16\0\12\6\41\6\11\6\2\6\4\0\1\6\5\0\26\6\4\6"+
    "\1\6\11\6\1\6\3\6\1\6\5\6\22\0\31\6\3\6\104\0"+
    "\1\6\1\0\13\6\67\0\33\6\1\0\4\6\66\6\3\6\1\6"+
    "\22\6\1\6\7\6\12\6\2\6\2\0\12\6\1\0\7\6\1\0"+
    "\7\6\1\0\3\6\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\6\1\6\7\6\2\0"+
    "\2\6\2\0\3\6\1\6\10\0\1\6\4\0\2\6\1\0\3\6"+
    "\2\6\2\0\12\6\4\6\7\0\1\6\5\0\3\6\1\0\6\6"+
    "\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6"+
    "\3\0\1\6\7\0\4\6\1\0\1\6\7\0\14\6\3\6\1\6"+
    "\13\0\3\6\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\6\1\6\10\6\1\0\3\6"+
    "\1\0\3\6\2\0\1\6\17\0\2\6\2\6\2\0\12\6\1\0"+
    "\1\6\17\0\3\6\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\6\1\6\7\6\2\0"+
    "\2\6\2\0\3\6\10\0\2\6\4\0\2\6\1\0\3\6\2\6"+
    "\2\0\12\6\1\0\1\6\20\0\1\6\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\14\6\4\0\5\6\3\0\3\6\1\0"+
    "\4\6\2\0\1\6\6\0\1\6\16\0\12\6\11\0\1\6\7\0"+
    "\3\6\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\3\0\1\6\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\6\2\0\12\6\22\0\2\6\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\6\1\6\7\6\1\0\3\6\1\0\4\6\7\0\2\6\7\0"+
    "\1\6\1\0\2\6\2\6\2\0\12\6\1\0\2\6\17\0\2\6"+
    "\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\6\1\0"+
    "\3\6\1\0\4\6\1\6\10\0\1\6\10\0\2\6\2\6\2\0"+
    "\12\6\12\0\6\6\2\0\2\6\1\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\3\0\1\6\4\0\6\6\1\0"+
    "\1\6\1\0\10\6\22\0\2\6\15\0\60\6\1\6\2\6\7\6"+
    "\4\0\10\6\10\6\1\0\12\6\47\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\6"+
    "\2\6\6\6\1\0\2\6\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\6\2\0\12\6\2\0\4\6\40\0\1\6\27\0\2\6\6\0"+
    "\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6\10\6"+
    "\1\0\44\6\4\0\24\6\1\0\2\6\5\6\13\6\1\0\44\6"+
    "\11\0\1\6\71\0\53\6\24\6\1\6\12\6\6\0\6\6\4\6"+
    "\4\6\3\6\1\6\3\6\2\6\7\6\3\6\4\6\15\6\14\6"+
    "\1\6\17\6\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6"+
    "\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6"+
    "\2\0\103\6\2\0\3\6\40\0\20\6\20\0\125\6\14\0\u026c\6"+
    "\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6"+
    "\1\0\4\6\3\6\13\0\22\6\3\6\13\0\22\6\2\6\14\0"+
    "\15\6\1\0\3\6\1\0\2\6\14\0\64\6\40\6\3\0\1\6"+
    "\3\0\2\6\1\6\2\0\12\6\41\0\3\6\2\0\12\6\6\0"+
    "\130\6\10\0\51\6\1\6\1\6\5\0\106\6\12\0\35\6\3\0"+
    "\14\6\4\0\14\6\12\0\12\6\36\6\2\0\5\6\13\0\54\6"+
    "\4\0\21\6\7\6\2\6\6\0\12\6\46\0\27\6\5\6\4\0"+
    "\65\6\12\6\1\0\35\6\2\0\13\6\6\0\12\6\15\0\1\6"+
    "\130\0\5\6\57\6\21\6\7\6\4\0\12\6\21\0\11\6\14\0"+
    "\3\6\36\6\15\6\2\6\12\6\54\6\16\6\14\0\44\6\24\6"+
    "\10\0\12\6\3\0\3\6\12\6\44\6\122\0\3\6\1\0\25\6"+
    "\4\6\1\6\4\6\3\6\2\6\11\0\300\6\47\6\25\0\4\6"+
    "\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0"+
    "\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0"+
    "\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\6\32\0"+
    "\5\6\20\0\2\6\23\0\1\6\13\0\5\6\5\0\6\6\1\0"+
    "\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\6\4\0"+
    "\1\6\3\0\14\6\21\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0"+
    "\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\6"+
    "\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0"+
    "\1\6\17\0\1\6\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\40\6\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\6\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\6\2\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0"+
    "\u010d\6\3\0\20\6\12\6\2\6\24\0\57\6\1\6\4\0\12\6"+
    "\1\0\31\6\7\0\1\6\120\6\2\6\45\0\11\6\2\0\147\6"+
    "\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\6\3\6"+
    "\1\6\4\6\1\6\27\6\5\6\20\0\1\6\7\0\64\6\14\0"+
    "\2\6\62\6\21\6\13\0\12\6\6\0\22\6\6\6\3\0\1\6"+
    "\4\0\12\6\34\6\10\6\2\0\27\6\15\6\14\0\35\6\3\0"+
    "\4\6\57\6\16\6\16\0\1\6\12\6\46\0\51\6\16\6\11\0"+
    "\3\6\1\6\10\6\2\6\2\0\12\6\6\0\27\6\3\0\1\6"+
    "\1\6\4\0\60\6\1\6\1\6\3\6\2\6\2\6\5\6\2\6"+
    "\1\6\1\6\1\6\30\0\3\6\2\0\13\6\5\6\2\0\3\6"+
    "\2\6\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0"+
    "\7\6\221\0\43\6\10\6\1\0\2\6\2\0\12\6\6\0\u2ba4\6"+
    "\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\6\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\6\20\0\7\6"+
    "\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6"+
    "\2\0\1\6\4\0\1\6\13\0\12\6\7\0\32\6\4\0\1\6"+
    "\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\2\3\1\2\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\2\4\1\1\17\1\20\1\2\10\1\2\21"+
    "\4\0\5\1\1\22\13\1\1\23\1\0\1\24\1\0"+
    "\13\1\1\25\5\1\1\0\5\1\1\26\2\1\1\27"+
    "\4\1\1\30\2\1\1\31\1\32\1\33\3\1\1\34"+
    "\7\1\1\35\1\36\1\1\1\37\2\1\1\40\1\41"+
    "\1\42\4\1\1\43\1\44\4\1\1\45\1\46\3\1"+
    "\1\47\1\1\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\124\0\250\0\124\0\322"+
    "\0\124\0\124\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\374\0\124\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\124"+
    "\0\124\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4"+
    "\0\u031e\0\u0348\0\124\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a"+
    "\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\124\0\u0516\0\u0540"+
    "\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690"+
    "\0\u06ba\0\124\0\u06e4\0\124\0\u070e\0\u0738\0\u0762\0\u078c"+
    "\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc"+
    "\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\322\0\u0afe\0\u0b28\0\322"+
    "\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\322\0\u0bfa\0\u0c24\0\322"+
    "\0\322\0\124\0\u0c4e\0\u0c78\0\u0ca2\0\322\0\u0ccc\0\u0cf6"+
    "\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\322\0\322\0\u0df2"+
    "\0\322\0\u0e1c\0\u0e46\0\322\0\322\0\322\0\u0e70\0\u0e9a"+
    "\0\u0ec4\0\u0eee\0\322\0\322\0\u0f18\0\u0f42\0\u0f6c\0\u0f96"+
    "\0\322\0\322\0\u0fc0\0\u0fea\0\u1014\0\322\0\u103e\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\10\1\34\1\10\1\35\1\36\1\37\1\10"+
    "\1\40\1\41\1\42\4\10\1\3\17\43\1\44\32\43"+
    "\54\0\1\5\53\0\1\45\1\46\52\0\1\10\13\0"+
    "\4\10\3\0\20\10\20\0\1\47\54\0\1\50\35\0"+
    "\1\10\13\0\1\10\1\51\2\10\3\0\1\52\17\10"+
    "\7\0\1\10\13\0\4\10\3\0\3\10\1\53\14\10"+
    "\7\0\1\10\13\0\4\10\3\0\16\10\1\54\1\10"+
    "\7\0\1\10\13\0\4\10\3\0\5\10\1\55\12\10"+
    "\20\0\1\56\40\0\1\10\13\0\3\10\1\57\3\0"+
    "\20\10\7\0\1\10\13\0\4\10\3\0\4\10\1\60"+
    "\2\10\1\61\10\10\7\0\1\10\13\0\1\62\3\10"+
    "\3\0\20\10\7\0\1\10\13\0\2\10\1\63\1\10"+
    "\3\0\20\10\7\0\1\10\13\0\4\10\3\0\5\10"+
    "\1\64\12\10\7\0\1\10\13\0\3\10\1\65\3\0"+
    "\6\10\1\66\10\10\1\67\7\0\1\10\13\0\2\10"+
    "\1\70\1\10\3\0\20\10\7\0\1\10\13\0\4\10"+
    "\3\0\3\10\1\71\14\10\52\0\1\72\1\45\1\4"+
    "\1\5\47\45\5\46\1\73\44\46\20\0\1\74\54\0"+
    "\1\75\34\0\1\10\13\0\2\10\1\76\1\10\3\0"+
    "\20\10\7\0\1\10\13\0\1\10\1\77\1\10\1\100"+
    "\3\0\20\10\7\0\1\10\13\0\4\10\3\0\2\10"+
    "\1\101\15\10\7\0\1\10\13\0\4\10\3\0\6\10"+
    "\1\102\11\10\7\0\1\10\13\0\4\10\3\0\10\10"+
    "\1\103\7\10\7\0\1\10\13\0\4\10\3\0\6\10"+
    "\1\104\11\10\7\0\1\10\13\0\1\105\3\10\3\0"+
    "\20\10\7\0\1\10\13\0\4\10\3\0\3\10\1\106"+
    "\14\10\7\0\1\10\13\0\4\10\3\0\6\10\1\107"+
    "\11\10\7\0\1\10\13\0\1\10\1\110\2\10\3\0"+
    "\20\10\7\0\1\10\13\0\4\10\3\0\7\10\1\111"+
    "\10\10\7\0\1\10\13\0\4\10\3\0\1\112\17\10"+
    "\7\0\1\10\13\0\4\10\3\0\1\113\17\10\7\0"+
    "\1\10\13\0\1\114\3\10\3\0\20\10\7\0\1\10"+
    "\13\0\4\10\3\0\15\10\1\115\2\10\7\0\1\10"+
    "\13\0\4\10\3\0\6\10\1\116\11\10\1\0\4\46"+
    "\1\5\1\73\44\46\24\0\1\117\33\0\1\10\13\0"+
    "\3\10\1\120\3\0\20\10\7\0\1\10\13\0\4\10"+
    "\3\0\11\10\1\121\6\10\7\0\1\10\13\0\4\10"+
    "\3\0\1\10\1\122\16\10\7\0\1\10\13\0\4\10"+
    "\3\0\14\10\1\123\3\10\7\0\1\10\13\0\2\10"+
    "\1\124\1\10\3\0\20\10\7\0\1\10\13\0\2\10"+
    "\1\125\1\10\3\0\20\10\7\0\1\10\13\0\4\10"+
    "\3\0\3\10\1\126\14\10\7\0\1\10\13\0\4\10"+
    "\3\0\5\10\1\127\12\10\7\0\1\10\13\0\4\10"+
    "\3\0\6\10\1\130\11\10\7\0\1\10\13\0\4\10"+
    "\3\0\3\10\1\131\14\10\7\0\1\10\13\0\4\10"+
    "\3\0\4\10\1\132\13\10\7\0\1\10\13\0\4\10"+
    "\3\0\1\133\5\10\1\134\11\10\7\0\1\10\13\0"+
    "\4\10\3\0\7\10\1\135\10\10\7\0\1\10\13\0"+
    "\1\10\1\136\2\10\3\0\20\10\7\0\1\10\13\0"+
    "\2\10\1\137\1\10\3\0\20\10\7\0\1\10\13\0"+
    "\4\10\3\0\6\10\1\140\11\10\7\0\1\10\13\0"+
    "\4\10\3\0\14\10\1\141\3\10\26\0\1\142\32\0"+
    "\1\10\13\0\2\10\1\143\1\10\3\0\20\10\7\0"+
    "\1\10\13\0\2\10\1\144\1\10\3\0\20\10\7\0"+
    "\1\10\13\0\4\10\3\0\1\145\17\10\7\0\1\10"+
    "\13\0\4\10\3\0\6\10\1\146\11\10\7\0\1\10"+
    "\13\0\4\10\3\0\7\10\1\147\10\10\7\0\1\10"+
    "\13\0\4\10\3\0\5\10\1\150\12\10\7\0\1\10"+
    "\13\0\1\10\1\151\2\10\3\0\20\10\7\0\1\10"+
    "\13\0\4\10\3\0\5\10\1\152\12\10\7\0\1\10"+
    "\13\0\4\10\3\0\3\10\1\153\14\10\7\0\1\10"+
    "\13\0\4\10\3\0\11\10\1\154\6\10\7\0\1\10"+
    "\13\0\2\10\1\155\1\10\3\0\20\10\7\0\1\10"+
    "\13\0\4\10\3\0\6\10\1\156\11\10\7\0\1\10"+
    "\13\0\1\10\1\157\2\10\3\0\20\10\7\0\1\10"+
    "\13\0\4\10\3\0\10\10\1\160\7\10\7\0\1\10"+
    "\13\0\1\10\1\161\2\10\3\0\20\10\7\0\1\10"+
    "\13\0\4\10\3\0\2\10\1\162\15\10\7\0\1\10"+
    "\13\0\4\10\3\0\10\10\1\163\7\10\7\0\1\10"+
    "\13\0\4\10\3\0\7\10\1\164\10\10\7\0\1\10"+
    "\13\0\4\10\3\0\6\10\1\165\11\10\7\0\1\10"+
    "\13\0\4\10\3\0\7\10\1\166\10\10\7\0\1\10"+
    "\13\0\4\10\3\0\7\10\1\167\10\10\7\0\1\10"+
    "\13\0\4\10\3\0\11\10\1\170\6\10\7\0\1\10"+
    "\13\0\1\10\1\171\2\10\3\0\20\10\7\0\1\10"+
    "\13\0\2\10\1\172\1\10\3\0\20\10\7\0\1\10"+
    "\13\0\2\10\1\173\1\10\3\0\20\10\7\0\1\10"+
    "\13\0\4\10\3\0\11\10\1\174\6\10\7\0\1\10"+
    "\13\0\4\10\3\0\1\175\17\10\7\0\1\10\13\0"+
    "\4\10\3\0\5\10\1\176\12\10\7\0\1\10\13\0"+
    "\4\10\3\0\4\10\1\177\13\10\7\0\1\10\13\0"+
    "\4\10\3\0\7\10\1\200\10\10\7\0\1\10\13\0"+
    "\4\10\3\0\12\10\1\201\5\10\7\0\1\10\13\0"+
    "\3\10\1\202\3\0\20\10\7\0\1\10\13\0\4\10"+
    "\3\0\3\10\1\203\14\10\7\0\1\10\13\0\3\10"+
    "\1\204\3\0\20\10\7\0\1\10\13\0\4\10\3\0"+
    "\7\10\1\205\10\10\7\0\1\10\13\0\2\10\1\206"+
    "\1\10\3\0\20\10\7\0\1\10\13\0\4\10\3\0"+
    "\1\207\17\10\7\0\1\10\13\0\4\10\3\0\12\10"+
    "\1\210\5\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\10\11\1\1\1\11\5\1\2\11\11\1\1\11\1\1"+
    "\4\0\5\1\1\11\13\1\1\11\1\0\1\11\1\0"+
    "\21\1\1\0\22\1\1\11\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public Lexer(InputStream is, ComplexSymbolFactory sf){
	this(new InputStreamReader(is));
	symbolFactory = sf;
    }
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;
    public Symbol symbol(String name, int code){
//	System.out.println("code:"+code+" "+yytext());
	return symbolFactory.newSymbol(name, code,new Location(yyline+1,yycolumn+1-yylength()),new Location(yyline+1,yycolumn+1));
    }
    public Symbol symbol(String name, int code, String lexem){
//	System.out.println("code:"+code+", lexem :"+lexem);
	return symbolFactory.newSymbol(name, code, new Location(yyline+1, yycolumn +1), new Location(yyline+1,yycolumn+yylength()), lexem);
    }
    protected void emit_warning(String message){
	ErrorManager.getManager().emit_warning("Scanner at " + (yyline+1) + "(" + (yycolumn+1) + "): " + message);
    }
    protected void emit_error(String message){
	ErrorManager.getManager().emit_error("Scanner at " + (yyline+1) + "(" + (yycolumn+1) +  "): " + message);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.github.jhoenicke.javacup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return symbol("PLUS",PLUS);
          }
        case 41: break;
        case 6: 
          { return symbol("SEMI",SEMI);
          }
        case 42: break;
        case 16: 
          { return symbol("LT",LT);
          }
        case 43: break;
        case 23: 
          { return symbol("INIT",INIT,yytext());
          }
        case 44: break;
        case 32: 
          { return symbol("ACTION",ACTION,yytext());
          }
        case 45: break;
        case 11: 
          { return symbol("LBRACK",LBRACK);
          }
        case 46: break;
        case 5: 
          { return symbol("QUESTION",QUESTION);
          }
        case 47: break;
        case 10: 
          { return symbol("BAR",BAR);
          }
        case 48: break;
        case 25: 
          { return symbol("LEFT",LEFT,yytext());
          }
        case 49: break;
        case 39: 
          { return symbol("PRECEDENCE",PRECEDENCE,yytext());
          }
        case 50: break;
        case 38: 
          { return symbol("NONASSOC",NONASSOC,yytext());
          }
        case 51: break;
        case 21: 
          { return symbol("NON",NON,yytext());
          }
        case 52: break;
        case 20: 
          { return symbol("COLON_COLON_EQUALS",COLON_COLON_EQUALS);
          }
        case 53: break;
        case 35: 
          { return symbol("PACKAGE",PACKAGE,yytext());
          }
        case 54: break;
        case 18: 
          { sb = new StringBuffer(); csline=yyline+1; cscolumn=yycolumn+1; yybegin(CODESEG);
          }
        case 55: break;
        case 12: 
          { return symbol("RBRACK",RBRACK);
          }
        case 56: break;
        case 28: 
          { return symbol("RIGHT",RIGHT,yytext());
          }
        case 57: break;
        case 34: 
          { return symbol("OPTION",OPTION,yytext());
          }
        case 58: break;
        case 13: 
          { return symbol("COLON",COLON);
          }
        case 59: break;
        case 17: 
          { sb.append(yytext());
          }
        case 60: break;
        case 31: 
          { return symbol("PARSER",PARSER,yytext());
          }
        case 61: break;
        case 40: 
          { return symbol("NONTERMINAL",NONTERMINAL,yytext());
          }
        case 62: break;
        case 1: 
          { return symbol("ID",ID,yytext());
          }
        case 63: break;
        case 26: 
          { return symbol("WITH",WITH,yytext());
          }
        case 64: break;
        case 15: 
          { return symbol("GT",GT);
          }
        case 65: break;
        case 9: 
          { return symbol("DOT",DOT);
          }
        case 66: break;
        case 22: 
          { return symbol("CODE",CODE,yytext());
          }
        case 67: break;
        case 36: 
          { return symbol("EXTENDS",EXTENDS,yytext());
          }
        case 68: break;
        case 19: 
          { yybegin(YYINITIAL); return symbolFactory.newSymbol("CODE_STRING",CODE_STRING, new Location(csline, cscolumn),new Location(yyline+1,yycolumn+1+yylength()), sb.toString());
          }
        case 69: break;
        case 7: 
          { return symbol("COMMA",COMMA);
          }
        case 70: break;
        case 24: 
          { return symbol("SCAN",SCAN,yytext());
          }
        case 71: break;
        case 33: 
          { return symbol("IMPORT",IMPORT,yytext());
          }
        case 72: break;
        case 37: 
          { return symbol("PARSER",TERMINAL,yytext());
          }
        case 73: break;
        case 4: 
          { return symbol("STAR",STAR);
          }
        case 74: break;
        case 14: 
          { return symbol("EQUALS",EQUALS);
          }
        case 75: break;
        case 27: 
          { return symbol("PERCENT_PREC",PERCENT_PREC);
          }
        case 76: break;
        case 2: 
          { emit_warning("Unrecognized character '" +yytext()+"' -- ignored");
          }
        case 77: break;
        case 30: 
          { return symbol("SUPER",SUPER,yytext());
          }
        case 78: break;
        case 3: 
          { 
          }
        case 79: break;
        case 29: 
          { return symbol("START",START,yytext());
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
