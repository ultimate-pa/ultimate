
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20110608
// Wed Jul 20 17:03:12 CEST 2016
//----------------------------------------------------

package com.github.jhoenicke.javacup;

import com.github.jhoenicke.javacup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;

/** CUP v0.12joho 20110608 generated parser.
  * @version Wed Jul 20 17:03:12 CEST 2016
  */
public class parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\212\000\002\031\007\031\005\001\003\001\000" +
    "\013\003\007\000\007\002\002\003\002\006\003" +
    "\003\004\003\005\001\005\003\006\004\011\004" +
    "\014\004\015\004\016\005\055\000\016\003\017" +
    "\001\017\002\017\001\020\003\021\001\022\004" +
    "\023\001\023\001\023\001\024\003\025\001\012" +
    "\004\012\000\026\005\056\000\026\002\027\003" +
    "\045\002\045\000\030\002\044\002\044\001\043" +
    "\002\043\002\043\002\043\001\033\002\035\003" +
    "\035\001\036\003\037\003\037\004\040\003\042" +
    "\001\042\003\042\003\034\001\054\000\047\000" +
    "\046\002\050\002\052\000\051\002\053\002\061" +
    "\000\060\000\057\001\057\002\222\u050e\u010a\u0424" +
    "\246\264\222\u0274\222\u026e\u0116\222\222\u01ac\u03e2" +
    "\234\230\222\222\u01c6\222\u0272\u02c6\u0116\u0264\222" +
    "\u0238\224\226\222\u03be\u0162\u010a\u0450\222\222\222" +
    "\222\u05d8\u02c4\u04e2\222\222\222\u05b4\u0218\u0226\u0590" +
    "\222\222\u01e4\u0268\u037c\u02be\u0278\u0358\222\u0268\222" +
    "\u0230\u056c\362\u0176\u0492\222\222\222\u01a8\u01e8\362" +
    "\252\u01c0\222\u02bc\u02ba\u01a0\u02b8\u02b6\u0228\u011e\u026c" +
    "\u02c4\222\u0548\336\222\u0166\222\u01a2\222\u0316\u02f2" +
    "\222\u0244\u01fa\222\u0160\u01f2\u01b4\u02b0\222\u028c\u04b6" +
    "\222\222\352\u0226\u01f4\222\u028c\u021e\u01dc\u0166\u0198" +
    "\222\222\u015e\u01e0\232\234\222\222\222\222\u0466" +
    "\222\222\u0108\u0162\222\222\232\310\222\276\222" +
    "\u024a\222\222\222\u0524\222\222\222\222\222\222" +
    "\u0626\000\000\000\170\000\054\000\060\176\000" +
    "\164\144\000\000\016\016\002\056\000\174\104" +
    "\104\164\144\064\000\050\050\010\000\000\000" +
    "\000\172\070\072\074\000\000\000\200\052\052" +
    "\000\000\000\000\142\014\000\000\000\000\000" +
    "\000\020\176\100\000\000\000\000\000\062\150" +
    "\156\000\000\000\000\000\146\000\144\000\000" +
    "\000\032\000\104\104\066\000\000\112\000\202" +
    "\000\152\000\000\046\166\166\022\000\166\166" +
    "\000\026\000\000\076\102\206\154\154\154\154" +
    "\162\162\160\160\036\040\000\000\000\000\042" +
    "\044\034\030\000\136\126\000\204\210\120\120" +
    "\000\106\206\130\000\134\132\124\000\212\122" +
    "\024\114\140\116\201\000\032\000\033\000\017" +
    "\000\202\000\016\000\032\073\165\257\166\257" +
    "\201\u0117\003\000\032\131\033\131\202\u0117\032" +
    "\133\105\257\165\u0107\166\u0107\004\041\201\371" +
    "\201\371\201\371\205\000\016\033\105\261\201" +
    "\371\201\371\201\371\003\033\203\u011d\201\371" +
    "\201\371\201\371\201\371\201\371\201\371\201" +
    "\371\201\373\166\263\166\265\123\317\205\371" +
    "\205\371\205\371\150\000\105\263\105\265\205" +
    "\371\205\371\205\371\074\251\104\257\205\371" +
    "\205\371\205\371\205\371\205\371\205\371\205" +
    "\371\205\373\104\261\176\u0109\037\141\150\371" +
    "\150\371\150\371\011\055\176\u010b\026\123\150" +
    "\371\150\371\150\371\116\307\116\311\150\371" +
    "\150\371\150\371\150\371\150\371\150\371\150" +
    "\371\150\373\001\013\001\015\001\017\011\057" +
    "\011\057\011\057\011\027\011\027\011\027\011" +
    "\057\011\057\011\057\011\027\011\027\011\057" +
    "\011\057\011\057\011\061\011\061\011\057\011" +
    "\057\137\025\177\000\163\257\036\141\163\073" +
    "\177\u010d\036\143\177\u010f\157\073\163\131\125" +
    "\321\163\u0107\163\133\157\131\137\203\177\u0111" +
    "\157\133\177\u0113\075\110\137\027\137\027\137" +
    "\027\137\027\137\027\137\027\137\027\137\027" +
    "\137\027\137\027\137\027\137\027\137\027\137" +
    "\027\127\025\112\275\137\027\137\027\112\073" +
    "\160\131\102\257\014\071\102\073\141\000\014" +
    "\073\141\361\112\277\102\131\127\203\102\261" +
    "\102\133\106\267\106\127\127\027\127\027\127" +
    "\027\127\027\127\027\127\027\127\027\127\027" +
    "\127\027\127\027\127\027\127\027\127\027\127" +
    "\027\061\025\164\257\127\027\127\027\061\217" +
    "\103\257\156\131\140\000\164\131\140\357\164" +
    "\u0107\135\000\103\131\135\345\103\261\022\105" +
    "\022\107\022\111\152\131\061\137\061\137\061" +
    "\137\061\137\061\137\061\137\061\137\061\137" +
    "\061\137\061\137\061\137\061\137\061\137\061" +
    "\137\055\025\155\073\061\137\061\137\054\201" +
    "\151\073\155\131\072\243\072\245\155\133\151" +
    "\131\031\125\031\127\151\133\055\203\134\000" +
    "\115\305\134\343\207\025\055\027\055\027\055" +
    "\027\055\027\055\027\055\027\055\027\055\027" +
    "\055\027\055\027\055\027\055\027\055\027\055" +
    "\027\027\064\027\064\055\027\055\027\207\u0121" +
    "\207\u0121\207\u0121\207\u0121\207\u0121\207\u0121\207" +
    "\u0121\207\u0121\207\u0121\207\u0121\207\u0121\207\u0121" +
    "\207\u0121\207\u0121\144\025\062\221\207\u0121\207" +
    "\u0121\070\013\070\015\070\017\010\013\010\015" +
    "\010\017\006\043\070\045\117\115\117\045\010" +
    "\045\024\115\024\045\065\231\142\025\144\233" +
    "\144\233\144\233\144\233\144\233\144\233\144" +
    "\233\144\233\144\233\144\233\144\233\144\233" +
    "\144\233\144\233\154\263\154\265\144\233\144" +
    "\233\142\363\142\363\142\363\142\363\142\363" +
    "\142\363\142\363\142\363\142\363\142\363\142" +
    "\363\142\363\142\363\142\363\132\025\064\227" +
    "\142\363\142\363\046\167\120\115\025\115\114" +
    "\303\113\301\111\273\110\271\222\001\222\001" +
    "\222\001\222\001\222\001\222\001\222\001\131" +
    "\025\132\027\132\027\132\027\132\027\132\027" +
    "\132\027\132\027\132\027\132\027\132\027\132" +
    "\027\132\027\132\027\132\027\222\001\222\001" +
    "\132\027\132\027\131\027\131\027\131\027\131" +
    "\027\131\027\131\027\131\027\131\027\131\027" +
    "\131\027\131\027\131\027\131\027\131\027\066" +
    "\025\222\001\131\027\131\027\222\001\222\001" +
    "\222\001\222\001\222\001\222\001\222\001\222" +
    "\001\222\001\222\001\222\001\222\001\222\001" +
    "\222\001\063\025\066\233\066\233\066\233\066" +
    "\233\066\233\066\233\066\233\066\233\066\233" +
    "\066\233\066\233\066\233\066\233\066\233\222" +
    "\001\222\001\066\233\066\233\063\223\063\027" +
    "\063\027\063\027\063\027\063\027\063\027\063" +
    "\027\063\027\063\027\063\027\063\027\063\027" +
    "\063\027\035\025\222\001\063\027\063\027\222" +
    "\001\222\001\222\001\222\001\222\001\222\001" +
    "\222\001\222\001\222\001\222\001\222\001\222" +
    "\001\222\001\222\001\015\025\035\137\035\137" +
    "\035\137\035\137\035\137\035\137\035\137\035" +
    "\137\035\137\035\137\035\137\035\137\035\137" +
    "\035\137\222\001\222\001\035\137\035\137\015" +
    "\027\015\027\015\027\015\027\015\027\015\027" +
    "\015\027\015\027\015\027\015\027\015\027\015" +
    "\027\015\027\015\027\002\025\222\001\015\027" +
    "\015\027\222\001\222\001\222\001\222\001\222" +
    "\001\222\001\222\001\222\001\222\001\222\001" +
    "\222\001\222\001\222\001\222\001\222\001\002" +
    "\027\002\027\002\027\002\027\002\027\002\027" +
    "\002\027\002\027\002\027\002\027\002\027\002" +
    "\027\002\027\002\027\173\171\173\004\002\027" +
    "\002\027\222\001\222\001\222\001\222\001\222" +
    "\001\040\145\040\147\040\013\040\015\040\017" +
    "\040\151\040\153\222\001\222\001\222\001\173" +
    "\173\173\173\173\173\076\171\076\006\040\155" +
    "\173\173\173\173\173\173\222\001\222\001\173" +
    "\173\173\173\173\173\173\173\173\173\173\173" +
    "\173\173\222\001\222\001\222\001\145\171\076" +
    "\173\076\173\076\173\222\001\222\001\222\001" +
    "\076\173\076\173\076\173\222\001\222\001\076" +
    "\173\076\173\076\173\076\173\076\173\076\173" +
    "\076\173\145\173\145\173\145\173\047\171\222" +
    "\001\222\001\145\173\145\173\145\173\222\001" +
    "\222\001\145\173\145\173\145\173\145\173\145" +
    "\173\145\173\145\173\222\001\222\001\222\001" +
    "\222\001\047\173\047\173\047\173\000\003\222" +
    "\001\222\001\047\173\047\173\047\173\222\001" +
    "\222\001\047\173\047\173\047\173\047\173\047" +
    "\173\047\173\047\173\222\001\222\001\000\005" +
    "\000\012\222\001\000\012\000\012\000\012\000" +
    "\012\000\012\000\012\000\012\222\001\222\001" +
    "\222\001\213\u0123\213\u0123\213\u0123\222\001\222" +
    "\001\000\012\213\u0123\213\u0123\213\u0123\222\001" +
    "\222\001\213\u0123\213\u0123\213\u0123\213\u0123\213" +
    "\u0123\213\u0123\213\u0123\122\163\122\163\122\163" +
    "\222\001\222\001\222\001\122\163\122\163\122" +
    "\163\222\001\222\001\122\163\122\163\122\163" +
    "\122\163\122\163\122\163\122\163\073\247\073" +
    "\247\073\247\222\001\222\001\222\001\073\247" +
    "\073\247\073\247\222\001\222\001\073\247\073" +
    "\247\073\247\073\247\073\247\073\247\073\247" +
    "\056\061\056\061\056\061\222\001\222\001\222" +
    "\001\056\061\056\061\056\061\222\001\222\001" +
    "\056\061\056\061\056\061\056\061\056\061\056" +
    "\061\056\061\053\061\053\061\053\061\222\001" +
    "\222\001\222\001\053\061\053\061\053\061\222" +
    "\001\222\001\053\061\053\061\053\061\053\061" +
    "\053\061\053\061\053\061\045\163\045\163\045" +
    "\163\222\001\222\001\222\001\045\163\045\163" +
    "\045\163\222\001\222\001\045\163\045\163\045" +
    "\163\045\163\045\163\045\163\045\163\222\001" +
    "\222\001\272\012\002\234\016\116\116\001\040" +
    "\106\174\172\003\145\231\014\000\010\011\005" +
    "\040\045\014\047\041\045\016\161\152\115\102" +
    "\023\011\076\115\117\004\145\200\212\137\106" +
    "\106\010\056\050\207\030\047\221\077\030\166" +
    "\016\017\000\050\020\117\120\067\212\167\134" +
    "\077\067\067\013\157\067\160\067\067\030\146" +
    "\067\067\070\011\071\032\002\123\064\220\023" +
    "\011\171\216\024\225\046\057\142\124\057\200" +
    "\116\110\072\126\005\123\070\075\124\173\215" +
    "\176\176\075\174\024\025\217\126\174\170\076" +
    "\075\177\200\075\167\115\177\200\173\013\162" +
    "\154\105\201\202\131\174\067\201\202\076\026" +
    "\031\031\161\177\214\215\013\112\072\072\030" +
    "\056\013\032\071\033\013\163\056\164\165\165" +
    "\166\013\102\125\103\104\104\105\013\151\001" +
    "\152\001\153\154\013\155\001\156\013\036\037" +
    "\013\014"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }



  Main main;
  emit emit;
  
 /* override error routines */
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


  Grammar grammar = new Grammar();

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol> symbols = new HashMap<String, symbol>();

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" and "EOF" as a symbols */
    symbols.put("error", terminal.error);
    symbols.put("EOF", terminal.EOF);
  }  

  /** true, if declaring non-terminals. */
  boolean _cur_is_nonterm;
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p)
    {
      _cur_side = p;
      _cur_prec++;
    }
  
  private terminal get_term(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (terminal)sym;
    }
  
  private non_terminal get_nonterm(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof non_terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Non-terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (non_terminal)sym;
    }

  private final parser parser;

  /** Constructor */
  Action$(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= spec EOF 
          case 0:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$rhs$ = CUP$stack.get(CUP$size - 2);
              Grammar CUP$rhs = (Grammar) CUP$rhs$.value;
RESULT = CUP$rhs;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$rhs$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= package_spec import_spec* code_parts symbol+ preced* start_spec production+ 
          case 1:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 25, CUP$stack.get(CUP$size - 7), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= error symbol+ preced* start_spec production+ 
          case 2:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 25, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // package_spec ::= PACKAGE multipart_id SEMI 
          case 3:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.main.setOption("package", id.toString());
	
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // package_spec ::= 
          case 4:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$sym, CUP$sym);
            }

          // import_spec ::= IMPORT import_id SEMI 
          case 5:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              return parser.getSymbolFactory().newSymbol("import_spec", 11, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // code_parts ::= 
          case 6:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("code_parts", 7, CUP$sym, CUP$sym);
            }

          // code_parts ::= code_parts code_part 
          case 7:
            {
              return parser.getSymbolFactory().newSymbol("code_parts", 7, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id SEMI 
          case 8:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 2);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 2, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id LT typearglist GT SEMI 
          case 9:
            {
              com.github.jhoenicke.javacup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 3);
              StringBuilder types = (StringBuilder) types$.value;
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 5);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString());
	    parser.main.setOption("typearg", types.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 2, CUP$stack.get(CUP$size - 6), CUP$stack.get(CUP$size - 1));
            }

          // option_spec ::= OPTION option_list SEMI 
          case 10:
            {
              return parser.getSymbolFactory().newSymbol("option_spec", 3, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_list COMMA option_ 
          case 11:
            {
              return parser.getSymbolFactory().newSymbol("option_list", 4, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_ ::= robust_id 
          case 12:
            {
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;
 parser.main.setOption(opt); 
              return parser.getSymbolFactory().newSymbol("option_", 5, opt$, opt$);
            }

          // option_ ::= robust_id EQUALS robust_id 
          case 13:
            {
              com.github.jhoenicke.javacup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 3);
              String opt = (String) opt$.value;
 parser.main.setOption(opt, val); 
              return parser.getSymbolFactory().newSymbol("option_", 5, opt$, val$);
            }

          // action_code_part ::= ACTION CODE CODE_STRING SEMI? 
          case 14:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("action_code_part", 6, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // parser_code_part ::= PARSER CODE CODE_STRING SEMI? 
          case 15:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("parser_code_part", 9, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // init_code ::= INIT WITH CODE_STRING SEMI? 
          case 16:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("init_code", 12, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // scan_code ::= SCAN WITH CODE_STRING SEMI? 
          case 17:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("scan_code", 13, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // symbol ::= terminal_non_terminal type_id NT$0 decl_symbol_list SEMI 
          case 18:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 14, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // NT$0 ::= 
          case 19:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              return parser.getSymbolFactory().newSymbol("NT$0", 45, CUP$stack.get(CUP$size - 2), id$);
            }

          // symbol ::= terminal_non_terminal decl_symbol_list SEMI 
          // symbol ::= terminal_non_terminal error SEMI 
          case 20:
            {
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 14, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= TERMINAL 
          case 21:
            {
 _cur_is_nonterm = false; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 15, CUP$sym, CUP$sym);
            }

          // terminal_non_terminal ::= NON TERMINAL 
          case 22:
            {
 _cur_is_nonterm = true; 
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 15, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= NONTERMINAL 
          case 23:
            {
 _cur_is_nonterm = true; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 15, CUP$sym, CUP$sym);
            }

          // decl_symbol_list ::= decl_symbol_list COMMA new_symbol_id 
          case 24:
            {
              return parser.getSymbolFactory().newSymbol("decl_symbol_list", 16, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // new_symbol_id ::= symbol_id 
          case 25:
            {
              com.github.jhoenicke.javacup.runtime.Symbol sym_id$ = CUP$stack.get(CUP$size - 1);
              String sym_id = (String) sym_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(sym_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Symbol \"" + sym_id + 
			   "\" has already been declared", sym_id$);
	    }
	  else
	    {
	      /* build the symbol and put it in the symbol table */
	      symbol sym;
	      if (_cur_is_nonterm) 
	      	sym = grammar.add_non_terminal(sym_id, _cur_symbol_type);
	      else
	      	sym = grammar.add_terminal(sym_id, _cur_symbol_type);
	      symbols.put(sym_id, sym);
	    }
	
              return parser.getSymbolFactory().newSymbol("new_symbol_id", 17, sym_id$, sym_id$);
            }

          // preced ::= PRECEDENCE assoc precterminal_list SEMI 
          case 26:
            {
              return parser.getSymbolFactory().newSymbol("preced", 18, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // assoc ::= LEFT 
          case 27:
            {
 update_precedence(assoc.left); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 19, CUP$sym, CUP$sym);
            }

          // assoc ::= RIGHT 
          case 28:
            {
 update_precedence(assoc.right); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 19, CUP$sym, CUP$sym);
            }

          // assoc ::= NONASSOC 
          case 29:
            {
 update_precedence(assoc.nonassoc); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 19, CUP$sym, CUP$sym);
            }

          // precterminal_list ::= precterminal_list COMMA precterminal_id 
          case 30:
            {
              return parser.getSymbolFactory().newSymbol("precterminal_list", 20, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // precterminal_id ::= symbol_id 
          case 31:
            {
              com.github.jhoenicke.javacup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
	
	  get_term(term$, term).set_precedence(_cur_side, _cur_prec);
	
              return parser.getSymbolFactory().newSymbol("precterminal_id", 21, term$, term$);
            }

          // start_spec ::= START WITH symbol_id SEMI 
          case 32:
            {
              com.github.jhoenicke.javacup.runtime.Symbol start_name$ = CUP$stack.get(CUP$size - 2);
              String start_name = (String) start_name$.value;
 non_terminal nt = get_nonterm(start_name$, start_name);
	   if (nt != null) 
	     grammar.set_start_symbol(nt); 
	
              return parser.getSymbolFactory().newSymbol("start_spec", 10, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // start_spec ::= 
          case 33:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("start_spec", 10, CUP$sym, CUP$sym);
            }

          // production ::= symbol_id NT$1 COLON_COLON_EQUALS rhs_list SEMI 
          case 34:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 5);
              String lhs_id = (String) lhs_id$.value;
              return parser.getSymbolFactory().newSymbol("production", 22, lhs_id$, CUP$stack.get(CUP$size - 1));
            }

          // NT$1 ::= 
          case 35:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = get_nonterm(lhs_id$, lhs_id);
	
              return parser.getSymbolFactory().newSymbol("NT$1", 46, lhs_id$, lhs_id$);
            }

          // production ::= error SEMI 
          case 36:
            {
              return parser.getSymbolFactory().newSymbol("production", 22, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_list ::= rhs_list BAR rhs 
          case 37:
            {
              return parser.getSymbolFactory().newSymbol("rhs_list", 23, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // prod_precedence ::= PERCENT_PREC symbol_id 
          case 38:
            {
              symbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
 RESULT = get_term(term$, term); 
              return parser.getSymbolFactory().newSymbol("prod_precedence", 37, CUP$stack.get(CUP$size - 2), term$, RESULT);
            }

          // prod_precedence ::= 
          case 39:
            {
              symbol RESULT;
 RESULT = null; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_precedence", 37, CUP$sym, CUP$sym, RESULT);
            }

          // rhs ::= prod_part* prod_precedence 
          case 40:
            {
              com.github.jhoenicke.javacup.runtime.Symbol precsym$ = CUP$stack.get(CUP$size - 1);
              symbol precsym = (symbol) precsym$.value;
              com.github.jhoenicke.javacup.runtime.Symbol rhs$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<production_part> CUP$list$rhs = (java.util.ArrayList<production_part>) rhs$.value;
              production_part[] rhs = CUP$list$rhs.toArray(new production_part[CUP$list$rhs.size()]);

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      ArrayList<production_part> rhs_list = 
	      	new ArrayList<production_part>(rhs.length);
	      rhs_list.addAll(Arrays.asList(rhs));
	      grammar.build_production(lhs_nt, rhs_list, (terminal) precsym);
	    }
	
              return parser.getSymbolFactory().newSymbol("rhs", 24, rhs$, precsym$);
            }

          // prod_part ::= wild_symbol_id label_id? 
          case 41:
            {
              production_part RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
              com.github.jhoenicke.javacup.runtime.Symbol symb$ = CUP$stack.get(CUP$size - 2);
              symbol symb = (symbol) symb$.value;
 
	  /* add a labeled production part */
	  RESULT = new symbol_part(symb, labid);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 36, symb$, labid$, RESULT);
            }

          // prod_part ::= CODE_STRING 
          case 42:
            {
              production_part RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol code_str$ = CUP$stack.get(CUP$size - 1);
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 36, code_str$, code_str$, RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id STAR 
          case 43:
            {
              symbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.star_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 35, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id PLUS 
          case 44:
            {
              symbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.plus_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 35, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id QUESTION 
          case 45:
            {
              symbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.opt_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 35, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= symbol_id 
          case 46:
            {
              symbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol symid$ = CUP$stack.get(CUP$size - 1);
              String symid = (String) symid$.value;
 /* try to look up the id */
	   symbol symb = symbols.get(symid);

	   /* if that fails, symbol is undeclared */
	   if (symb == null)
	     {
	       if (ErrorManager.getManager().getErrorCount() == 0)
	         ErrorManager.getManager().emit_error("Symbol \"" + symid + 
			        "\" has not been declared");
	       RESULT = null;
	     }
	   else
	     {
           RESULT = symb; 
         }
    
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 35, symid$, symid$, RESULT);
            }

          // label_id ::= COLON robust_id 
          case 47:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
 RESULT = labid; 
              return parser.getSymbolFactory().newSymbol("label_id", 27, CUP$stack.get(CUP$size - 2), labid$, RESULT);
            }

          // multipart_id ::= multipart_id DOT robust_id 
          case 48:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol another_id$ = CUP$stack.get(CUP$size - 1);
              String another_id = (String) another_id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              return parser.getSymbolFactory().newSymbol("multipart_id", 29, id$, another_id$, RESULT);
            }

          // multipart_id ::= robust_id 
          case 49:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol an_id$ = CUP$stack.get(CUP$size - 1);
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              return parser.getSymbolFactory().newSymbol("multipart_id", 29, an_id$, an_id$, RESULT);
            }

          // import_id ::= multipart_id DOT STAR 
          case 50:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("import_id", 30, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= type_id LBRACK RBRACK 
          case 51:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("type_id", 31, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= multipart_id LT typearglist GT 
          case 52:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 2);
              StringBuilder types = (StringBuilder) types$.value;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              return parser.getSymbolFactory().newSymbol("type_id", 31, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // typearglist ::= typearglist COMMA typeargument 
          case 53:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
              com.github.jhoenicke.javacup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append(",").append(arg); 
              return parser.getSymbolFactory().newSymbol("typearglist", 32, list$, arg$, RESULT);
            }

          // wildcard ::= QUESTION 
          case 54:
            {
              StringBuilder RESULT;
 RESULT = new StringBuilder("?"); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("wildcard", 34, CUP$sym, CUP$sym, RESULT);
            }

          // wildcard ::= wildcard EXTENDS type_id 
          case 55:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" extends ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 34, w$, id$, RESULT);
            }

          // wildcard ::= wildcard SUPER type_id 
          case 56:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" super ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 34, w$, id$, RESULT);
            }

          // robust_id ::= error 
          case 57:
            {
              String RESULT;

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 28, CUP$sym, CUP$sym, RESULT);
            }

          // SEMI? ::= 
          case 58:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("SEMI?", 44, CUP$sym, CUP$sym);
            }

          // import_spec* ::= 
          case 59:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("import_spec*", 39, CUP$sym, CUP$sym);
            }

          // import_spec+ ::= import_spec+ import_spec 
          case 60:
            {
              return parser.getSymbolFactory().newSymbol("import_spec+", 38, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol+ ::= symbol+ symbol 
          case 61:
            {
              return parser.getSymbolFactory().newSymbol("symbol+", 40, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // preced* ::= 
          case 62:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("preced*", 42, CUP$sym, CUP$sym);
            }

          // preced+ ::= preced+ preced 
          case 63:
            {
              return parser.getSymbolFactory().newSymbol("preced+", 41, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // production+ ::= production+ production 
          case 64:
            {
              return parser.getSymbolFactory().newSymbol("production+", 43, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // label_id? ::= 
          case 65:
            {
              String RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("label_id?", 49, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part* ::= 
          case 66:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_part*", 48, CUP$sym, CUP$sym, new java.util.ArrayList<production_part>());
            }

          // prod_part+ ::= prod_part 
          case 67:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<production_part> RESULT = new java.util.ArrayList<production_part>();
              RESULT.add((production_part) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("prod_part+", 47, CUP$0, CUP$0, RESULT);
            }

          // prod_part+ ::= prod_part+ prod_part 
          case 68:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<production_part> RESULT = (java.util.ArrayList<production_part>) CUP$0.value;
              RESULT.add((production_part) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("prod_part+", 47, CUP$0, CUP$1, RESULT);
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
