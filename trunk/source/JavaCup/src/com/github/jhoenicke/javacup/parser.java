
//----------------------------------------------------
// The following code was generated by jh-javacup-1.2 20210807
// Sat Aug 07 12:52:46 CEST 2021
//----------------------------------------------------

package com.github.jhoenicke.javacup;

import com.github.jhoenicke.javacup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;

/** jh-javacup-1.2 20210807 generated parser.
  * @version Sat Aug 07 12:52:46 CEST 2021
  */
public class parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** The static parse table */
  static com.github.jhoenicke.javacup.runtime.ParseTable CUP$parse_table =
    new com.github.jhoenicke.javacup.runtime.ParseTable(new String[] {
    "\214\000\002\032\007\032\005\001\003\001\000" +
    "\013\003\007\000\007\002\002\003\002\006\003" +
    "\003\004\003\005\001\005\003\006\004\011\004" +
    "\014\004\015\004\016\004\017\005\056\000\017" +
    "\003\020\001\020\002\020\001\021\003\022\001" +
    "\023\004\024\001\024\001\024\001\025\003\026" +
    "\001\012\004\012\000\027\005\057\000\027\002" +
    "\030\003\046\002\046\000\031\002\045\002\045" +
    "\001\044\002\044\002\044\002\044\001\034\002" +
    "\036\003\036\001\037\003\040\003\040\004\041" +
    "\003\043\001\043\003\043\003\035\001\055\000" +
    "\050\000\047\002\051\002\053\000\052\002\054" +
    "\002\062\000\061\000\060\001\060\002\226\u05c0" +
    "\u0194\u04ce\252\316\226\u0294\226\u0262\u011a\226\226" +
    "\u016a\u048c\240\244\226\226\u01da\226\u029e\u02d4\u01a8" +
    "\u0258\226\u024a\u016c\230\226\u044a\256\u0186\u06c8\226" +
    "\226\226\226\u06a2\u02ac\u0594\226\226\226\u067a\u0206" +
    "\u023a\u0652\226\226\u01f8\u027a\u0408\u02aa\u02a8\u02c6\u03c6" +
    "\226\u025c\226\u01e8\u062a\u013a\u01bc\u053c\226\226\226" +
    "\u01f4\u01fc\u0164\u0174\u0122\226\u02ca\u02c8\u016e\u02c6\u02c4" +
    "\u02c2\u0260\366\u029a\u02ca\226\u0602\u0118\226\u01ae\226" +
    "\u01aa\226\u0384\u0342\226\u02cc\u02ca\226\u0168\u029a\u0294" +
    "\u0206\u0300\226\u02be\u0568\226\226\356\u0240\u01fe\226" +
    "\u0298\u023e\u01f0\u0232\u01e8\226\226\u01b4\u016a\230\256" +
    "\226\226\226\226\226\u0510\226\226\u010e\232\226" +
    "\226\234\342\226\302\226\u027c\226\226\226\u05da" +
    "\226\226\226\226\226\226\u071a\000\000\000\172" +
    "\000\056\000\062\200\000\166\146\000\000\016" +
    "\016\002\060\000\176\106\106\166\146\066\000" +
    "\052\052\010\000\000\000\000\174\072\074\076" +
    "\000\000\000\202\054\054\000\000\000\000\144" +
    "\014\000\000\000\000\000\000\000\020\200\102" +
    "\000\000\000\000\000\064\152\160\000\000\000" +
    "\000\000\150\000\146\000\000\000\000\032\000" +
    "\106\106\070\000\000\114\000\204\000\154\000" +
    "\000\050\170\170\022\000\170\170\170\000\026" +
    "\000\000\100\104\210\156\156\156\156\164\164" +
    "\162\162\036\040\000\000\000\000\042\044\046" +
    "\034\030\000\140\130\000\206\212\122\122\000" +
    "\110\210\132\000\136\134\126\000\214\124\024" +
    "\116\142\120\205\000\033\000\203\000\206\000" +
    "\170\263\016\000\203\u0115\017\000\203\u0117\205" +
    "\u011f\003\000\033\131\206\u011f\170\u010f\036\141" +
    "\171\263\203\u0119\036\143\203\u011b\205\u0101\205" +
    "\u0101\205\u0101\211\000\016\033\171\u010f\205\u0101" +
    "\205\u0101\205\u0101\003\033\004\041\205\u0101\205" +
    "\u0101\205\u0101\205\u0101\205\u0101\205\u0101\205\u0101" +
    "\205\u0101\205\u0101\205\u0103\207\u0125\211\u0101\211" +
    "\u0101\211\u0101\153\000\171\267\171\271\211\u0101" +
    "\211\u0101\211\u0101\120\315\120\317\211\u0101\211" +
    "\u0101\211\u0101\211\u0101\211\u0101\211\u0101\211\u0101" +
    "\211\u0101\211\u0101\211\u0103\202\u0111\153\u0101\153" +
    "\u0101\153\u0101\011\055\125\325\202\u0113\153\u0101" +
    "\153\u0101\153\u0101\107\273\107\127\153\u0101\153" +
    "\u0101\153\u0101\153\u0101\153\u0101\153\u0101\153\u0101" +
    "\153\u0101\153\u0101\153\u0103\075\255\011\057\011" +
    "\057\011\057\011\027\011\027\011\027\011\057" +
    "\011\057\011\057\011\027\011\027\011\057\011" +
    "\057\011\057\011\061\011\061\011\057\011\057" +
    "\011\057\011\057\141\025\105\263\032\000\014" +
    "\071\167\263\113\301\014\073\032\073\113\073" +
    "\106\263\105\265\167\131\032\131\167\u010f\141" +
    "\205\032\133\113\303\037\141\106\265\141\027" +
    "\141\027\141\027\141\027\141\027\141\027\141" +
    "\027\141\027\141\027\141\027\141\027\141\027" +
    "\141\027\141\027\131\025\026\123\141\027\141" +
    "\027\141\027\141\027\106\267\106\271\166\263" +
    "\127\327\166\073\001\013\001\015\001\017\131" +
    "\205\166\131\076\112\166\u010f\166\133\131\027" +
    "\131\027\131\027\131\027\131\027\131\027\131" +
    "\027\131\027\131\027\131\027\131\027\131\027" +
    "\131\027\131\027\073\247\073\251\131\027\131" +
    "\027\131\027\131\027\061\025\103\263\163\131" +
    "\103\073\061\221\104\263\161\131\144\000\103" +
    "\131\144\371\103\265\103\133\104\131\155\131" +
    "\104\265\022\105\022\107\022\111\054\203\061" +
    "\137\061\137\061\137\061\137\061\137\061\137" +
    "\061\137\061\137\061\137\061\137\061\137\061" +
    "\137\061\137\061\137\055\025\162\073\061\137" +
    "\061\137\061\137\061\137\162\131\160\073\154" +
    "\073\162\133\031\125\031\127\160\131\154\131" +
    "\055\205\160\133\154\133\027\066\027\066\055" +
    "\027\055\027\055\027\055\027\055\027\055\027" +
    "\055\027\055\027\055\027\055\027\055\027\055" +
    "\027\055\027\055\027\213\025\117\313\055\027" +
    "\055\027\055\027\055\027\071\013\071\015\071" +
    "\017\010\013\010\015\010\017\143\000\071\045" +
    "\143\367\142\000\010\045\142\365\062\223\213" +
    "\u0129\213\u0129\213\u0129\213\u0129\213\u0129\213\u0129" +
    "\213\u0129\213\u0129\213\u0129\213\u0129\213\u0129\213" +
    "\u0129\213\u0129\213\u0129\147\025\006\043\213\u0129" +
    "\213\u0129\213\u0129\213\u0129\137\000\136\000\137" +
    "\353\136\351\121\115\121\045\024\115\024\045" +
    "\157\267\157\271\065\233\064\231\046\171\147" +
    "\237\147\237\147\237\147\237\147\237\147\237" +
    "\147\237\147\237\147\237\147\237\147\237\147" +
    "\237\147\237\147\237\145\025\122\115\147\237" +
    "\147\237\147\237\147\237\025\115\066\235\116" +
    "\311\115\307\114\305\112\277\111\275\226\001" +
    "\226\001\226\001\226\001\226\001\226\001\145" +
    "\373\145\373\145\373\145\373\145\373\145\373" +
    "\145\373\145\373\145\373\145\373\145\373\145" +
    "\373\145\373\145\373\134\025\226\001\145\373" +
    "\145\373\145\373\145\373\226\001\226\001\226" +
    "\001\226\001\226\001\226\001\226\001\226\001" +
    "\226\001\226\001\226\001\226\001\226\001\134" +
    "\027\134\027\134\027\134\027\134\027\134\027" +
    "\134\027\134\027\134\027\134\027\134\027\134" +
    "\027\134\027\134\027\133\025\226\001\134\027" +
    "\134\027\134\027\134\027\226\001\226\001\226" +
    "\001\226\001\226\001\226\001\226\001\226\001" +
    "\226\001\226\001\226\001\226\001\226\001\133" +
    "\027\133\027\133\027\133\027\133\027\133\027" +
    "\133\027\133\027\133\027\133\027\133\027\133" +
    "\027\133\027\133\027\067\025\226\001\133\027" +
    "\133\027\133\027\133\027\226\001\226\001\226" +
    "\001\226\001\226\001\226\001\226\001\226\001" +
    "\226\001\226\001\226\001\226\001\226\001\067" +
    "\237\067\237\067\237\067\237\067\237\067\237" +
    "\067\237\067\237\067\237\067\237\067\237\067" +
    "\237\067\237\067\237\063\025\226\001\067\237" +
    "\067\237\067\237\067\237\226\001\226\001\226" +
    "\001\226\001\226\001\226\001\226\001\226\001" +
    "\226\001\226\001\226\001\226\001\226\001\063" +
    "\225\063\027\063\027\063\027\063\027\063\027" +
    "\063\027\063\027\063\027\063\027\063\027\063" +
    "\027\063\027\063\027\035\025\226\001\063\027" +
    "\063\027\063\027\063\027\226\001\226\001\226" +
    "\001\226\001\226\001\226\001\226\001\226\001" +
    "\226\001\226\001\226\001\226\001\226\001\035" +
    "\137\035\137\035\137\035\137\035\137\035\137" +
    "\035\137\035\137\035\137\035\137\035\137\035" +
    "\137\035\137\035\137\015\025\226\001\035\137" +
    "\035\137\035\137\035\137\226\001\226\001\226" +
    "\001\226\001\226\001\226\001\226\001\226\001" +
    "\226\001\226\001\226\001\226\001\226\001\015" +
    "\027\015\027\015\027\015\027\015\027\015\027" +
    "\015\027\015\027\015\027\015\027\015\027\015" +
    "\027\015\027\015\027\002\025\226\001\015\027" +
    "\015\027\015\027\015\027\226\001\226\001\226" +
    "\001\226\001\226\001\226\001\226\001\226\001" +
    "\226\001\226\001\226\001\226\001\226\001\002" +
    "\027\002\027\002\027\002\027\002\027\002\027" +
    "\002\027\002\027\002\027\002\027\002\027\002" +
    "\027\002\027\002\027\177\173\177\004\002\027" +
    "\002\027\002\027\002\027\226\001\226\001\226" +
    "\001\226\001\226\001\226\001\226\001\226\001" +
    "\226\001\226\001\226\001\226\001\226\001\177" +
    "\175\177\175\177\175\077\173\077\006\226\001" +
    "\177\175\177\175\177\175\226\001\226\001\177" +
    "\175\177\175\177\175\177\175\177\175\177\175" +
    "\177\175\177\175\177\175\226\001\226\001\077" +
    "\175\077\175\077\175\150\173\226\001\226\001" +
    "\077\175\077\175\077\175\226\001\226\001\077" +
    "\175\077\175\077\175\077\175\077\175\077\175" +
    "\077\175\077\175\077\175\226\001\226\001\150" +
    "\175\150\175\150\175\047\173\226\001\226\001" +
    "\150\175\150\175\150\175\226\001\226\001\150" +
    "\175\150\175\150\175\150\175\150\175\150\175" +
    "\150\175\150\175\150\175\226\001\226\001\047" +
    "\175\047\175\047\175\000\003\226\001\226\001" +
    "\047\175\047\175\047\175\226\001\226\001\047" +
    "\175\047\175\047\175\047\175\047\175\047\175" +
    "\047\175\047\175\047\175\000\005\000\012\226" +
    "\001\000\012\000\012\000\012\000\012\000\012" +
    "\000\012\000\012\226\001\226\001\226\001\226" +
    "\001\226\001\217\u012b\217\u012b\217\u012b\000\012" +
    "\226\001\000\012\217\u012b\217\u012b\217\u012b\226" +
    "\001\226\001\217\u012b\217\u012b\217\u012b\217\u012b" +
    "\217\u012b\217\u012b\217\u012b\217\u012b\217\u012b\124" +
    "\165\124\165\124\165\226\001\226\001\226\001" +
    "\124\165\124\165\124\165\226\001\226\001\124" +
    "\165\124\165\124\165\124\165\124\165\124\165" +
    "\124\165\124\165\124\165\074\253\074\253\074" +
    "\253\226\001\226\001\226\001\074\253\074\253" +
    "\074\253\226\001\226\001\074\253\074\253\074" +
    "\253\074\253\074\253\074\253\074\253\074\253" +
    "\074\253\056\061\056\061\056\061\226\001\226" +
    "\001\226\001\056\061\056\061\056\061\226\001" +
    "\226\001\056\061\056\061\056\061\056\061\056" +
    "\061\056\061\056\061\056\061\056\061\053\061" +
    "\053\061\053\061\226\001\226\001\226\001\053" +
    "\061\053\061\053\061\226\001\226\001\053\061" +
    "\053\061\053\061\053\061\053\061\053\061\053" +
    "\061\053\061\053\061\045\165\045\165\045\165" +
    "\226\001\226\001\226\001\045\165\045\165\045" +
    "\165\226\001\226\001\045\165\045\165\045\165" +
    "\045\165\045\165\045\165\045\165\045\165\045" +
    "\165\040\145\040\147\040\013\040\015\040\017" +
    "\040\151\040\153\226\001\226\001\226\001\226" +
    "\001\226\001\226\001\226\001\226\001\040\155" +
    "\226\001\040\157\226\001\226\001\226\001\277" +
    "\011\001\240\001\001\120\120\176\135\135\003" +
    "\040\016\205\137\004\010\011\020\150\034\014" +
    "\047\107\107\150\143\126\216\073\117\117\100" +
    "\030\050\004\045\057\047\037\016\017\010\042" +
    "\177\212\006\050\076\070\216\172\100\225\077" +
    "\001\125\107\076\151\035\030\156\173\072\177" +
    "\070\070\073\073\070\224\070\070\072\077\070" +
    "\070\070\071\011\017\011\175\045\057\023\011" +
    "\057\221\121\234\230\221\117\114\174\176\111" +
    "\106\063\066\040\002\025\071\041\134\023\011" +
    "\031\031\024\121\122\173\202\202\172\200\030" +
    "\165\013\032\164\033\130\147\203\204\076\000" +
    "\056\157\067\024\025\165\200\052\205\206\223" +
    "\032\200\056\130\203\220\221\076\013\113\203" +
    "\204\013\166\127\167\170\170\171\013\036\037" +
    "\205\206\013\103\001\104\105\105\106\013\154" +
    "\001\155\001\156\157\013\162\001\163\013\160" +
    "\001\161\013\014"
    });

  /** Return parse table */
  protected com.github.jhoenicke.javacup.runtime.ParseTable parse_table() {
    return CUP$parse_table;
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }



  Main main;
  emit emit;
  
 /* override error routines */
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


  Grammar grammar = new Grammar();

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol> symbols = new HashMap<String, symbol>();

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" and "EOF" as a symbols */
    symbols.put("error", terminal.error);
    symbols.put("EOF", terminal.EOF);
  }  

  /** true, if declaring non-terminals. */
  boolean _cur_is_nonterm;
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p)
    {
      _cur_side = p;
      _cur_prec++;
    }
  
  private terminal get_term(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (terminal)sym;
    }
  
  private non_terminal get_nonterm(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof non_terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Non-terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (non_terminal)sym;
    }

  private final parser parser;

  /** Constructor */
  Action$(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= spec EOF 
          case 0:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$rhs$ = CUP$stack.get(CUP$size - 2);
              Grammar CUP$rhs = (Grammar) CUP$rhs$.value;
RESULT = CUP$rhs;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$rhs$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= package_spec import_spec* code_parts symbol+ preced* start_spec production+ 
          case 1:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 26, CUP$stack.get(CUP$size - 7), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= error symbol+ preced* start_spec production+ 
          case 2:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 26, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // package_spec ::= PACKAGE multipart_id SEMI 
          case 3:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.main.setOption("package", id.toString());
	
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // package_spec ::= 
          case 4:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$sym, CUP$sym);
            }

          // import_spec ::= IMPORT import_id SEMI 
          case 5:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              return parser.getSymbolFactory().newSymbol("import_spec", 11, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // code_parts ::= 
          case 6:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("code_parts", 7, CUP$sym, CUP$sym);
            }

          // code_parts ::= code_parts code_part 
          case 7:
            {
              return parser.getSymbolFactory().newSymbol("code_parts", 7, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id SEMI 
          case 8:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 2);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 2, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id LT typearglist GT SEMI 
          case 9:
            {
              com.github.jhoenicke.javacup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 3);
              StringBuilder types = (StringBuilder) types$.value;
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 5);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString());
	    parser.main.setOption("typearg", types.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 2, CUP$stack.get(CUP$size - 6), CUP$stack.get(CUP$size - 1));
            }

          // option_spec ::= OPTION option_list SEMI 
          case 10:
            {
              return parser.getSymbolFactory().newSymbol("option_spec", 3, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_list COMMA option_ 
          case 11:
            {
              return parser.getSymbolFactory().newSymbol("option_list", 4, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_ ::= robust_id 
          case 12:
            {
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;
 parser.main.setOption(opt); 
              return parser.getSymbolFactory().newSymbol("option_", 5, opt$, opt$);
            }

          // option_ ::= robust_id EQUALS robust_id 
          case 13:
            {
              com.github.jhoenicke.javacup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 3);
              String opt = (String) opt$.value;
 parser.main.setOption(opt, val); 
              return parser.getSymbolFactory().newSymbol("option_", 5, opt$, val$);
            }

          // action_code_part ::= ACTION CODE CODE_STRING SEMI? 
          case 14:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("action_code_part", 6, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // parser_code_part ::= PARSER CODE CODE_STRING SEMI? 
          case 15:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("parser_code_part", 9, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // init_code ::= INIT WITH CODE_STRING SEMI? 
          case 16:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("init_code", 12, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // scan_code ::= SCAN WITH CODE_STRING SEMI? 
          case 17:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("scan_code", 13, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // after_reduce_code ::= AFTER REDUCE CODE_STRING SEMI? 
          case 18:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.after_reduce_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant after reduce code (skipping)");
	  else /* save the user code */
	    parser.emit.after_reduce_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("after_reduce_code", 14, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // symbol ::= terminal_non_terminal type_id NT$0 decl_symbol_list SEMI 
          case 19:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // NT$0 ::= 
          case 20:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              return parser.getSymbolFactory().newSymbol("NT$0", 46, CUP$stack.get(CUP$size - 2), id$);
            }

          // symbol ::= terminal_non_terminal decl_symbol_list SEMI 
          // symbol ::= terminal_non_terminal error SEMI 
          case 21:
            {
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= TERMINAL 
          case 22:
            {
 _cur_is_nonterm = false; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$sym, CUP$sym);
            }

          // terminal_non_terminal ::= NON TERMINAL 
          case 23:
            {
 _cur_is_nonterm = true; 
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= NONTERMINAL 
          case 24:
            {
 _cur_is_nonterm = true; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$sym, CUP$sym);
            }

          // decl_symbol_list ::= decl_symbol_list COMMA new_symbol_id 
          case 25:
            {
              return parser.getSymbolFactory().newSymbol("decl_symbol_list", 17, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // new_symbol_id ::= symbol_id 
          case 26:
            {
              com.github.jhoenicke.javacup.runtime.Symbol sym_id$ = CUP$stack.get(CUP$size - 1);
              String sym_id = (String) sym_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(sym_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Symbol \"" + sym_id + 
			   "\" has already been declared", sym_id$);
	    }
	  else
	    {
	      /* build the symbol and put it in the symbol table */
	      symbol sym;
	      if (_cur_is_nonterm) 
	      	sym = grammar.add_non_terminal(sym_id, _cur_symbol_type);
	      else
	      	sym = grammar.add_terminal(sym_id, _cur_symbol_type);
	      symbols.put(sym_id, sym);
	    }
	
              return parser.getSymbolFactory().newSymbol("new_symbol_id", 18, sym_id$, sym_id$);
            }

          // preced ::= PRECEDENCE assoc precterminal_list SEMI 
          case 27:
            {
              return parser.getSymbolFactory().newSymbol("preced", 19, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // assoc ::= LEFT 
          case 28:
            {
 update_precedence(assoc.left); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 20, CUP$sym, CUP$sym);
            }

          // assoc ::= RIGHT 
          case 29:
            {
 update_precedence(assoc.right); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 20, CUP$sym, CUP$sym);
            }

          // assoc ::= NONASSOC 
          case 30:
            {
 update_precedence(assoc.nonassoc); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 20, CUP$sym, CUP$sym);
            }

          // precterminal_list ::= precterminal_list COMMA precterminal_id 
          case 31:
            {
              return parser.getSymbolFactory().newSymbol("precterminal_list", 21, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // precterminal_id ::= symbol_id 
          case 32:
            {
              com.github.jhoenicke.javacup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
	
	  get_term(term$, term).set_precedence(_cur_side, _cur_prec);
	
              return parser.getSymbolFactory().newSymbol("precterminal_id", 22, term$, term$);
            }

          // start_spec ::= START WITH symbol_id SEMI 
          case 33:
            {
              com.github.jhoenicke.javacup.runtime.Symbol start_name$ = CUP$stack.get(CUP$size - 2);
              String start_name = (String) start_name$.value;
 non_terminal nt = get_nonterm(start_name$, start_name);
	   if (nt != null) 
	     grammar.set_start_symbol(nt); 
	
              return parser.getSymbolFactory().newSymbol("start_spec", 10, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // start_spec ::= 
          case 34:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("start_spec", 10, CUP$sym, CUP$sym);
            }

          // production ::= symbol_id NT$1 COLON_COLON_EQUALS rhs_list SEMI 
          case 35:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 5);
              String lhs_id = (String) lhs_id$.value;
              return parser.getSymbolFactory().newSymbol("production", 23, lhs_id$, CUP$stack.get(CUP$size - 1));
            }

          // NT$1 ::= 
          case 36:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = get_nonterm(lhs_id$, lhs_id);
	
              return parser.getSymbolFactory().newSymbol("NT$1", 47, lhs_id$, lhs_id$);
            }

          // production ::= error SEMI 
          case 37:
            {
              return parser.getSymbolFactory().newSymbol("production", 23, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_list ::= rhs_list BAR rhs 
          case 38:
            {
              return parser.getSymbolFactory().newSymbol("rhs_list", 24, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // prod_precedence ::= PERCENT_PREC symbol_id 
          case 39:
            {
              symbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
 RESULT = get_term(term$, term); 
              return parser.getSymbolFactory().newSymbol("prod_precedence", 38, CUP$stack.get(CUP$size - 2), term$, RESULT);
            }

          // prod_precedence ::= 
          case 40:
            {
              symbol RESULT;
 RESULT = null; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_precedence", 38, CUP$sym, CUP$sym, RESULT);
            }

          // rhs ::= prod_part* prod_precedence 
          case 41:
            {
              com.github.jhoenicke.javacup.runtime.Symbol precsym$ = CUP$stack.get(CUP$size - 1);
              symbol precsym = (symbol) precsym$.value;
              com.github.jhoenicke.javacup.runtime.Symbol rhs$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<production_part> CUP$list$rhs = (java.util.ArrayList<production_part>) rhs$.value;
              production_part[] rhs = CUP$list$rhs.toArray(new production_part[CUP$list$rhs.size()]);

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      ArrayList<production_part> rhs_list = 
	      	new ArrayList<production_part>(rhs.length);
	      rhs_list.addAll(Arrays.asList(rhs));
	      grammar.build_production(lhs_nt, rhs_list, (terminal) precsym);
	    }
	
              return parser.getSymbolFactory().newSymbol("rhs", 25, rhs$, precsym$);
            }

          // prod_part ::= wild_symbol_id label_id? 
          case 42:
            {
              production_part RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
              com.github.jhoenicke.javacup.runtime.Symbol symb$ = CUP$stack.get(CUP$size - 2);
              symbol symb = (symbol) symb$.value;
 
	  /* add a labeled production part */
	  RESULT = new symbol_part(symb, labid);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 37, symb$, labid$, RESULT);
            }

          // prod_part ::= CODE_STRING 
          case 43:
            {
              production_part RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol code_str$ = CUP$stack.get(CUP$size - 1);
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 37, code_str$, code_str$, RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id STAR 
          case 44:
            {
              symbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.star_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 36, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id PLUS 
          case 45:
            {
              symbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.plus_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 36, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id QUESTION 
          case 46:
            {
              symbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.opt_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 36, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= symbol_id 
          case 47:
            {
              symbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol symid$ = CUP$stack.get(CUP$size - 1);
              String symid = (String) symid$.value;
 /* try to look up the id */
	   symbol symb = symbols.get(symid);

	   /* if that fails, symbol is undeclared */
	   if (symb == null)
	     {
	       if (ErrorManager.getManager().getErrorCount() == 0)
	         ErrorManager.getManager().emit_error("Symbol \"" + symid + 
			        "\" has not been declared");
	       RESULT = null;
	     }
	   else
	     {
           RESULT = symb; 
         }
    
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 36, symid$, symid$, RESULT);
            }

          // label_id ::= COLON robust_id 
          case 48:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
 RESULT = labid; 
              return parser.getSymbolFactory().newSymbol("label_id", 28, CUP$stack.get(CUP$size - 2), labid$, RESULT);
            }

          // multipart_id ::= multipart_id DOT robust_id 
          case 49:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol another_id$ = CUP$stack.get(CUP$size - 1);
              String another_id = (String) another_id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              return parser.getSymbolFactory().newSymbol("multipart_id", 30, id$, another_id$, RESULT);
            }

          // multipart_id ::= robust_id 
          case 50:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol an_id$ = CUP$stack.get(CUP$size - 1);
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              return parser.getSymbolFactory().newSymbol("multipart_id", 30, an_id$, an_id$, RESULT);
            }

          // import_id ::= multipart_id DOT STAR 
          case 51:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("import_id", 31, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= type_id LBRACK RBRACK 
          case 52:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("type_id", 32, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= multipart_id LT typearglist GT 
          case 53:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 2);
              StringBuilder types = (StringBuilder) types$.value;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              return parser.getSymbolFactory().newSymbol("type_id", 32, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // typearglist ::= typearglist COMMA typeargument 
          case 54:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
              com.github.jhoenicke.javacup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append(",").append(arg); 
              return parser.getSymbolFactory().newSymbol("typearglist", 33, list$, arg$, RESULT);
            }

          // wildcard ::= QUESTION 
          case 55:
            {
              StringBuilder RESULT;
 RESULT = new StringBuilder("?"); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("wildcard", 35, CUP$sym, CUP$sym, RESULT);
            }

          // wildcard ::= wildcard EXTENDS type_id 
          case 56:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" extends ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 35, w$, id$, RESULT);
            }

          // wildcard ::= wildcard SUPER type_id 
          case 57:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" super ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 35, w$, id$, RESULT);
            }

          // robust_id ::= error 
          case 58:
            {
              String RESULT;

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 29, CUP$sym, CUP$sym, RESULT);
            }

          // SEMI? ::= 
          case 59:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("SEMI?", 45, CUP$sym, CUP$sym);
            }

          // import_spec* ::= 
          case 60:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("import_spec*", 40, CUP$sym, CUP$sym);
            }

          // import_spec+ ::= import_spec+ import_spec 
          case 61:
            {
              return parser.getSymbolFactory().newSymbol("import_spec+", 39, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol+ ::= symbol+ symbol 
          case 62:
            {
              return parser.getSymbolFactory().newSymbol("symbol+", 41, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // preced* ::= 
          case 63:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("preced*", 43, CUP$sym, CUP$sym);
            }

          // preced+ ::= preced+ preced 
          case 64:
            {
              return parser.getSymbolFactory().newSymbol("preced+", 42, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // production+ ::= production+ production 
          case 65:
            {
              return parser.getSymbolFactory().newSymbol("production+", 44, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // label_id? ::= 
          case 66:
            {
              String RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("label_id?", 50, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part* ::= 
          case 67:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_part*", 49, CUP$sym, CUP$sym, new java.util.ArrayList<production_part>());
            }

          // prod_part+ ::= prod_part 
          case 68:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<production_part> RESULT = new java.util.ArrayList<production_part>();
              RESULT.add((production_part) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("prod_part+", 48, CUP$0, CUP$0, RESULT);
            }

          // prod_part+ ::= prod_part+ prod_part 
          case 69:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<production_part> RESULT = (java.util.ArrayList<production_part>) CUP$0.value;
              RESULT.add((production_part) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("prod_part+", 48, CUP$0, CUP$1, RESULT);
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
