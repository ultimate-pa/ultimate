/*
 * Copyright (C) 2014-2015 Jan Leike (leike@informatik.uni-freiburg.de)
 * Copyright (C) 2012-2015 University of Freiburg
 * 
 * This file is part of the ULTIMATE LassoRanker Library.
 * 
 * The ULTIMATE LassoRanker Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The ULTIMATE LassoRanker Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ULTIMATE LassoRanker Library. If not, see <http://www.gnu.org/licenses/>.
 * 
 * Additional permission under GNU GPL version 3 section 7:
 * If you modify the ULTIMATE LassoRanker Library, or any covered work, by linking
 * or combining it with Eclipse RCP (or a modified version of Eclipse RCP),
 * containing parts covered by the terms of the Eclipse Public License, the
 * licensors of the ULTIMATE LassoRanker Library grant you additional permission
 * to convey the resulting work.
 */
package de.uni_freiburg.informatik.ultimate.lassoranker.termination.rankingfunctions;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.uni_freiburg.informatik.ultimate.lib.modelcheckerutils.cfg.variables.IProgramVar;
import de.uni_freiburg.informatik.ultimate.logic.Rational;
import de.uni_freiburg.informatik.ultimate.logic.SMTLIBException;
import de.uni_freiburg.informatik.ultimate.logic.Script;
import de.uni_freiburg.informatik.ultimate.logic.Term;


/**
 * A lexicographic ranking function as generated by the lexicographic template
 * 
 * @author Jan Leike
 */
public class LexicographicRankingFunction extends RankingFunction {
	private static final long serialVersionUID = -7426526617632086331L;
	
	private final RankingFunction[] mParts;
	
	public LexicographicRankingFunction(final RankingFunction[] parts) {
		assert(parts.length >= 1);
		mParts = parts;
	}
	
	@Override
	public String getName() {
		return mParts.length + "-lex";
	}
	
	public RankingFunction[] getComponents() {
		return mParts;
	}
	
	@Override
	public Set<IProgramVar> getVariables() {
		final Set<IProgramVar> vars = new LinkedHashSet<IProgramVar>();
		for (final RankingFunction rf : mParts) {
			vars.addAll(rf.getVariables());
		}
		return vars;
	}
	
	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder();
		sb.append(mParts.length);
		sb.append("-lexicographic ranking function:\n");
		sb.append("  f(");
		boolean first = true;
		for (final IProgramVar var : getVariables()) {
			if (!first) {
				sb.append(", ");
			}
			sb.append(var.getGloballyUniqueId());
			first = false;
		}
		sb.append(") = <");
		for (int i = 0; i < mParts.length; ++i) {
			if (i > 0) {
				sb.append(",  ");
			}
			sb.append(mParts[i]);
		}
		sb.append(">");
		return sb.toString();
	}
	
	@Override
	public Term[] asLexTerm(final Script script) throws SMTLIBException {
		final List<Term> lex = new ArrayList<Term>();
		for (int i = 0; i < mParts.length; ++i) {
			final Term[] lex_part = mParts[i].asLexTerm(script);
			for (int j = 0; j < lex_part.length; ++j) {
				lex.add(lex_part[j]);
			}
		}
		return lex.toArray(new Term[lex.size()]);
	}
	
	@Override
	public Ordinal evaluate(final Map<IProgramVar, Rational> assignment) {
		final Ordinal o = Ordinal.ZERO;
		// TODO
//		Ordinal w_pow = Ordinal.ONE;
//		for (int i = mParts.length - 1; i >= 0; --i) {
//			Ordinal a = mParts[i].evaluate(assignment);
//			if (r.compareTo(Rational.ZERO) > 0) {
//				BigInteger k = r.ceil().numerator();
//				o = o.add(w_pow.mult(Ordinal.fromInteger(k)));
//			}
//			w_pow = w_pow.mult(Ordinal.OMEGA);
//		}
		return o;
	}
	
	@Override
	public Ordinal codomain() {
		// TODO
		return Ordinal.OMEGA;
	}
}
