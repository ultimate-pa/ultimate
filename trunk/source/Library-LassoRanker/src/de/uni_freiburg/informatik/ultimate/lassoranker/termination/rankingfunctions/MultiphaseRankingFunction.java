/*
 * Copyright (C) 2014-2015 Jan Leike (leike@informatik.uni-freiburg.de)
 * Copyright (C) 2012-2015 University of Freiburg
 *
 * This file is part of the ULTIMATE LassoRanker Library.
 *
 * The ULTIMATE LassoRanker Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The ULTIMATE LassoRanker Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ULTIMATE LassoRanker Library. If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional permission under GNU GPL version 3 section 7:
 * If you modify the ULTIMATE LassoRanker Library, or any covered work, by linking
 * or combining it with Eclipse RCP (or a modified version of Eclipse RCP),
 * containing parts covered by the terms of the Eclipse Public License, the
 * licensors of the ULTIMATE LassoRanker Library grant you additional permission
 * to convey the resulting work.
 */
package de.uni_freiburg.informatik.ultimate.lassoranker.termination.rankingfunctions;

import java.math.BigInteger;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import de.uni_freiburg.informatik.ultimate.lassoranker.termination.AffineFunction;
import de.uni_freiburg.informatik.ultimate.lib.modelcheckerutils.cfg.variables.IProgramVar;
import de.uni_freiburg.informatik.ultimate.lib.smtlibutils.SmtUtils;
import de.uni_freiburg.informatik.ultimate.logic.Rational;
import de.uni_freiburg.informatik.ultimate.logic.SMTLIBException;
import de.uni_freiburg.informatik.ultimate.logic.Script;
import de.uni_freiburg.informatik.ultimate.logic.Term;

/**
 * A multiphase ranking function as generated by the multiphase template
 *
 * @author Jan Leike
 */
public class MultiphaseRankingFunction extends RankingFunction {
	private static final long serialVersionUID = 5376322220596462295L;

	private final AffineFunction[] mRanking;
	private final int mPhases;

	public MultiphaseRankingFunction(final AffineFunction[] ranking) {
		mRanking = ranking;
		mPhases = ranking.length;
		assert mPhases > 0;
	}

	@Override
	public String getName() {
		return mRanking.length + "-phase";
	}

	@Override
	public Set<IProgramVar> getVariables() {
		final Set<IProgramVar> vars = new LinkedHashSet<>();
		for (final AffineFunction af : mRanking) {
			vars.addAll(af.getVariables());
		}
		return vars;
	}

	public AffineFunction[] getComponents() {
		return mRanking;
	}

	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder();
		sb.append(mRanking.length);
		sb.append("-phase ranking function:\n");
		for (int i = 0; i < mPhases; ++i) {
			sb.append("  f" + i);
			sb.append(" = ");
			sb.append(mRanking[i]);
			if (i < mPhases - 1) {
				sb.append("\n");
			}
		}
		return sb.toString();
	}

	@Override
	public Term[] asLexTerm(final Script script) throws SMTLIBException {
		BigInteger n = BigInteger.ZERO;
		Term phase = SmtUtils.constructIntValue(script, n);
		Term value = mRanking[mRanking.length - 1].asTerm(script);
		for (int i = mRanking.length - 2; i >= 0; --i) {
			n = n.add(BigInteger.ONE);
			final Term f_term = mRanking[i].asTerm(script);
			final Term cond = script.term(">", f_term, SmtUtils.constructIntValue(script, BigInteger.ZERO));
			phase = script.term("ite", cond, SmtUtils.constructIntValue(script, n), phase);
			value = script.term("ite", cond, f_term, value);
		}
		return new Term[] { phase, value };
	}

	@Override
	public Ordinal evaluate(final Map<IProgramVar, Rational> assignment) {
		Ordinal o = Ordinal.ZERO;
		for (int i = 0; i < mPhases; ++i) {
			final Rational r = mRanking[i].evaluate(assignment);
			if (r.compareTo(Rational.ZERO) > 0) {
				return o.add(Ordinal.fromInteger(r.ceil().numerator()));
			}
			o = o.add(Ordinal.OMEGA);
		}
		assert (false);
		return o;
	}

	@Override
	public Ordinal codomain() {
		// phases * omega
		return Ordinal.fromInteger(BigInteger.valueOf(mPhases)).mult(Ordinal.OMEGA);
	}
}
