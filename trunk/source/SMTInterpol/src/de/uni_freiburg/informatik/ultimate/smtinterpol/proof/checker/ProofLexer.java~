/* The following code was generated by JFlex 1.4.2 on 9/26/22, 5:35 PM */

/*
 * Copyright (C) 2009-2022 University of Freiburg
 *
 * This file is part of SMTInterpol.
 *
 * SMTInterpol is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SMTInterpol is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SMTInterpol.  If not, see <http://www.gnu.org/licenses/>.
 */
/* SMT-Lib lexer */
package de.uni_freiburg.informatik.ultimate.smtinterpol.proof.checker;
import java.math.BigDecimal;
import java.math.BigInteger;
import com.github.jhoenicke.javacup.runtime.Symbol;
import com.github.jhoenicke.javacup.runtime.SimpleSymbolFactory;
import de.uni_freiburg.informatik.ultimate.util.datastructures.UnifyHash;

/**
 * This is a autogenerated lexer for the smtlib 2 script files.
 * It is generated from smtlib.flex by JFlex.
 */

public class ProofLexer implements com.github.jhoenicke.javacup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING25 = 4;
  public static final int YYINITIAL = 0;
  public static final int STRING20 = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\26\1\62"+
    "\1\12\3\5\1\0\1\21\1\22\1\60\1\23\1\0\1\24\1\11"+
    "\1\57\1\7\1\17\1\51\7\10\1\20\1\4\1\5\1\47\1\50"+
    "\2\5\6\14\24\5\3\0\1\5\1\25\1\0\1\27\1\16\1\31"+
    "\1\45\1\34\1\37\1\53\1\32\1\35\1\61\1\55\1\41\1\42"+
    "\1\46\1\33\1\44\1\5\1\40\1\30\1\36\1\43\1\54\1\56"+
    "\1\13\1\52\1\5\1\0\1\15\1\0\1\5\53\0\1\5\12\0"+
    "\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5\4\0"+
    "\14\5\16\0\5\5\7\0\1\5\1\0\1\5\201\0\5\5\1\0"+
    "\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0"+
    "\1\5\1\0\24\5\1\0\123\5\1\0\213\5\10\0\246\5\1\0"+
    "\46\5\2\0\1\5\7\0\47\5\110\0\33\5\5\0\3\5\55\0"+
    "\53\5\25\0\12\6\4\0\2\5\1\0\143\5\1\0\1\5\17\0"+
    "\2\5\7\0\2\5\12\6\3\5\2\0\1\5\20\0\1\5\1\0"+
    "\36\5\35\0\131\5\13\0\1\5\16\0\12\6\41\5\11\0\2\5"+
    "\4\0\1\5\5\0\26\5\4\0\1\5\11\0\1\5\3\0\1\5"+
    "\27\0\31\5\7\0\13\5\65\0\25\5\1\0\10\5\106\0\66\5"+
    "\3\0\1\5\22\0\1\5\7\0\12\5\4\0\12\6\1\0\20\5"+
    "\4\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5"+
    "\3\0\4\5\3\0\1\5\20\0\1\5\15\0\2\5\1\0\3\5"+
    "\4\0\12\6\2\5\12\0\1\5\10\0\6\5\4\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\37\0"+
    "\4\5\1\0\1\5\7\0\12\6\2\0\3\5\20\0\11\5\1\0"+
    "\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0"+
    "\1\5\22\0\1\5\17\0\2\5\4\0\12\6\11\0\1\5\13\0"+
    "\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\5\5\3\0\1\5\36\0\2\5\1\0\3\5\4\0\12\6\1\0"+
    "\1\5\21\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0"+
    "\14\5\26\0\1\5\25\0\12\6\25\0\10\5\1\0\3\5\1\0"+
    "\27\5\1\0\20\5\3\0\1\5\32\0\3\5\5\0\2\5\4\0"+
    "\12\6\20\0\1\5\4\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\3\0\1\5\40\0\1\5\1\0\2\5\4\0"+
    "\12\6\1\0\2\5\22\0\10\5\1\0\3\5\1\0\51\5\2\0"+
    "\1\5\20\0\1\5\5\0\3\5\10\0\3\5\4\0\12\6\12\0"+
    "\6\5\5\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0"+
    "\7\5\37\0\12\6\21\0\60\5\1\0\2\5\14\0\7\5\11\0"+
    "\12\6\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0"+
    "\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0"+
    "\1\5\2\0\2\5\1\0\4\5\1\0\2\5\11\0\1\5\2\0"+
    "\5\5\1\0\1\5\11\0\12\6\2\0\4\5\40\0\1\5\37\0"+
    "\12\6\26\0\10\5\1\0\44\5\33\0\5\5\163\0\53\5\24\0"+
    "\1\5\12\6\6\0\6\5\4\0\4\5\3\0\1\5\3\0\2\5"+
    "\7\0\3\5\4\0\15\5\14\0\1\5\1\0\12\6\6\0\46\5"+
    "\1\0\1\5\5\0\1\5\2\0\53\5\1\0\u014d\5\1\0\4\5"+
    "\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5\1\0\4\5"+
    "\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5\45\0\20\5"+
    "\20\0\126\5\2\0\6\5\3\0\u026c\5\2\0\21\5\1\0\32\5"+
    "\5\0\113\5\6\0\10\5\7\0\15\5\1\0\4\5\16\0\22\5"+
    "\16\0\22\5\16\0\15\5\1\0\3\5\17\0\64\5\43\0\1\5"+
    "\4\0\1\5\3\0\12\6\46\0\12\6\6\0\130\5\10\0\5\5"+
    "\2\0\42\5\1\0\1\5\5\0\106\5\12\0\37\5\47\0\12\6"+
    "\36\5\2\0\5\5\13\0\54\5\4\0\32\5\6\0\12\6\46\0"+
    "\27\5\11\0\65\5\53\0\12\6\6\0\12\6\15\0\1\5\135\0"+
    "\57\5\21\0\7\5\4\0\12\6\51\0\36\5\15\0\2\5\12\6"+
    "\54\5\32\0\44\5\34\0\12\6\3\0\3\5\12\6\44\5\2\0"+
    "\11\5\140\0\4\5\1\0\4\5\3\0\2\5\11\0\300\5\100\0"+
    "\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5\1\0"+
    "\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0"+
    "\6\5\4\0\15\5\5\0\3\5\1\0\7\5\164\0\1\5\15\0"+
    "\1\5\20\0\15\5\145\0\1\5\4\0\1\5\2\0\12\5\1\0"+
    "\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5\64\0"+
    "\2\5\u0a7b\0\57\5\1\0\57\5\1\0\205\5\6\0\4\5\3\0"+
    "\2\5\14\0\46\5\1\0\1\5\5\0\1\5\2\0\70\5\7\0"+
    "\1\5\20\0\27\5\11\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\120\0"+
    "\1\5\u01d5\0\2\5\52\0\5\5\5\0\2\5\4\0\126\5\6\0"+
    "\3\5\1\0\132\5\1\0\4\5\5\0\52\5\2\0\136\5\21\0"+
    "\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51eb\5\25\0\u048d\5\103\0"+
    "\56\5\2\0\u010d\5\3\0\20\5\12\6\2\5\24\0\57\5\20\0"+
    "\37\5\2\0\106\5\61\0\11\5\2\0\147\5\2\0\44\5\1\0"+
    "\10\5\77\0\13\5\1\0\3\5\1\0\4\5\1\0\27\5\35\0"+
    "\64\5\16\0\62\5\34\0\12\6\30\0\6\5\3\0\1\5\1\0"+
    "\1\5\2\0\12\6\34\5\12\0\27\5\31\0\35\5\7\0\57\5"+
    "\34\0\1\5\12\6\6\0\5\5\1\0\12\5\12\6\5\5\1\0"+
    "\51\5\27\0\3\5\1\0\10\5\4\0\12\6\6\0\27\5\3\0"+
    "\1\5\3\0\62\5\1\0\1\5\3\0\2\5\2\0\5\5\2\0"+
    "\1\5\1\0\1\5\30\0\3\5\2\0\13\5\7\0\3\5\14\0"+
    "\6\5\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5\1\0"+
    "\53\5\1\0\12\5\12\0\163\5\15\0\12\6\6\0\u2ba4\5\14\0"+
    "\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0\7\5\14\0"+
    "\5\5\5\0\1\5\1\0\12\5\1\0\15\5\1\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0"+
    "\100\5\2\0\66\5\50\0\14\5\164\0\5\5\1\0\207\5\23\0"+
    "\12\6\7\0\32\5\6\0\32\5\13\0\131\5\3\0\6\5\2\0"+
    "\6\5\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\3\2\1\3\2\4\1\1\1\3\2\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\21\3\1\13"+
    "\1\14\1\15\3\0\1\3\1\0\1\16\3\17\1\3"+
    "\1\20\26\3\1\21\1\22\4\3\1\23\1\24\1\25"+
    "\1\26\1\3\2\17\7\3\1\27\1\30\15\3\1\31"+
    "\1\3\1\32\2\3\1\33\10\3\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\3\3\1\42\1\43\2\17\1\44"+
    "\1\3\1\45\1\46\1\3\1\47\2\3\1\50\4\3"+
    "\1\51\1\52\11\3\1\53\6\3\1\54\11\3\1\55"+
    "\1\56\1\57\1\3\1\60\2\17\3\3\1\61\6\3"+
    "\1\62\1\63\1\3\1\64\4\3\1\65\1\3\1\66"+
    "\1\67\14\3\1\70\1\17\1\71\1\72\1\3\1\73"+
    "\1\74\1\75\1\3\1\76\4\3\1\77\1\100\1\101"+
    "\16\3\1\17\1\3\1\102\1\103\1\104\4\3\1\105"+
    "\1\106\1\3\1\107\4\3\1\110\2\3\1\111\4\3"+
    "\1\112\12\3\1\113\3\3\1\114\1\115\1\116\5\3"+
    "\1\117\1\3\1\120\2\3\1\121\1\122\6\3\1\123"+
    "\1\3\1\124\1\3\1\125\1\3\1\126\1\127\1\130"+
    "\1\3\1\131\1\132\1\133\1\3\1\134\1\135\1\3"+
    "\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\231\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\231\0\231"+
    "\0\u0132\0\u0297\0\u0132\0\u0132\0\u02ca\0\u02fd\0\u0330\0\u0363"+
    "\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb"+
    "\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\231\0\u062d\0\u0660"+
    "\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u0231\0\231\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\231"+
    "\0\u0693\0\u06c6\0\u06f9\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0132\0\u0132\0\u0ff0"+
    "\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188"+
    "\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u0132\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u0132\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452"+
    "\0\u1485\0\u14b8\0\u0132\0\u0132\0\u0132\0\u0132\0\u0132\0\u0132"+
    "\0\u14eb\0\u151e\0\u1551\0\u0132\0\u0132\0\u1584\0\u15b7\0\u0132"+
    "\0\u15ea\0\u0132\0\u0132\0\u161d\0\u0132\0\u1650\0\u1683\0\u0132"+
    "\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u0132\0\u0132\0\u1782\0\u17b5"+
    "\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u0132"+
    "\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u0132\0\u1a7f"+
    "\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17"+
    "\0\u0132\0\u0132\0\u0132\0\u1c4a\0\u0132\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u0132\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48"+
    "\0\u1e7b\0\u1eae\0\u0132\0\u1ee1\0\u0132\0\u1f14\0\u1f47\0\u1f7a"+
    "\0\u1fad\0\u0132\0\u1fe0\0\u0132\0\u0132\0\u2013\0\u2046\0\u2079"+
    "\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211"+
    "\0\u2244\0\u0132\0\u2277\0\u075f\0\u0132\0\u22aa\0\u0132\0\u0132"+
    "\0\u22dd\0\u2310\0\u0132\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u0132"+
    "\0\u0132\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9"+
    "\0\u270c\0\u273f\0\u0132\0\u0132\0\u0132\0\u2772\0\u27a5\0\u27d8"+
    "\0\u280b\0\u0132\0\u0132\0\u283e\0\u0132\0\u2871\0\u28a4\0\u28d7"+
    "\0\u290a\0\u0132\0\u293d\0\u2970\0\u0132\0\u29a3\0\u29d6\0\u2a09"+
    "\0\u2a3c\0\u075f\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e"+
    "\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u0132\0\u2c6d\0\u2ca0\0\u2cd3"+
    "\0\u0132\0\u0132\0\u0132\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2"+
    "\0\u0132\0\u2e05\0\u0132\0\u2e38\0\u2e6b\0\u0132\0\u0132\0\u2e9e"+
    "\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u0132\0\u2fd0\0\u0132"+
    "\0\u3003\0\u0132\0\u3036\0\u0132\0\u0132\0\u0132\0\u3069\0\u0132"+
    "\0\u0132\0\u0132\0\u309c\0\u0132\0\u0132\0\u30cf\0\u0132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\10\1\13\1\14\1\10\1\15\1\10\1\12\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\10\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\10\1\40\1\41\1\42\1\43\1\44"+
    "\1\12\5\10\1\45\2\10\1\46\63\4\62\47\1\50"+
    "\65\0\1\6\60\0\1\7\1\5\1\6\60\7\5\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\37\10\12\0"+
    "\1\51\60\0\2\12\1\51\5\0\1\12\31\0\1\12"+
    "\24\0\1\52\2\0\1\53\51\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\10\10\1\54\26\10\1\0\15\55"+
    "\1\56\45\55\5\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\21\57\1\60\1\57\1\61\13\57\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\22\10\1\62\14\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\5\10"+
    "\1\63\15\10\1\64\13\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\11\10\1\65\15\10\1\66\7\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\7\10"+
    "\1\67\1\70\26\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\15\10\1\71\21\10\6\0\5\10\1\0"+
    "\1\72\1\10\1\0\2\10\3\0\37\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\13\10\1\73\23\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\10\10"+
    "\1\74\4\10\1\75\21\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\4\10\1\76\3\10\1\77\26\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\11\10"+
    "\1\100\25\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\11\10\1\101\25\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\4\10\1\102\3\10\1\103\26\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\4\10"+
    "\1\104\3\10\1\105\26\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\11\10\1\106\1\107\1\110\23\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\10\10"+
    "\1\111\26\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\1\112\1\113\23\10\1\114\11\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\22\10\1\115\1\10"+
    "\1\116\12\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\22\10\1\117\14\10\1\0\62\47\63\0\1\120"+
    "\7\0\2\121\6\0\1\121\31\0\1\121\20\0\2\122"+
    "\3\0\1\122\1\0\2\122\7\0\1\122\1\0\1\122"+
    "\2\0\1\122\2\0\1\122\5\0\1\122\3\0\1\122"+
    "\20\0\1\123\7\0\1\123\50\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\15\10\1\124\21\10\6\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\37\57\6\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\4\57\1\125\32\57"+
    "\6\0\5\57\1\0\2\57\1\0\2\57\3\0\4\57"+
    "\1\126\32\57\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\11\10\1\127\25\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\5\10\1\130\31\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\22\10\1\131\14\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\16\10"+
    "\1\132\20\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\17\10\1\133\17\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\10\10\1\134\26\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\23\10\1\135\13\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\1\136"+
    "\1\137\2\10\1\140\32\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\12\10\1\141\1\142\5\10\1\143"+
    "\15\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\11\10\1\144\25\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\2\10\1\145\10\10\1\146\23\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\4\10\1\147"+
    "\5\10\1\150\5\10\1\151\16\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\15\10\1\152\1\153\20\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\15\10"+
    "\1\154\21\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\5\10\1\155\6\10\1\156\22\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\13\10\1\157\23\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\13\10"+
    "\1\160\23\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\22\10\1\161\14\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\15\10\1\162\21\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\16\10\1\163\20\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\6\10"+
    "\1\164\5\10\1\165\1\10\1\166\20\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\5\10\1\167\23\10"+
    "\1\170\5\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\1\10\1\171\35\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\13\10\1\172\23\10\6\0\5\10"+
    "\1\0\2\10\1\0\1\10\1\173\3\0\26\10\1\174"+
    "\10\10\6\0\5\10\1\0\2\10\1\0\1\10\1\175"+
    "\3\0\26\10\1\176\10\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\1\177\1\200\35\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\11\10\1\201\25\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\22\10"+
    "\1\202\14\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\11\10\1\203\25\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\1\204\1\205\35\10\6\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\13\57\1\206\23\57"+
    "\6\0\5\57\1\0\2\57\1\0\2\57\3\0\17\57"+
    "\1\207\17\57\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\14\10\1\210\22\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\20\10\1\211\16\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\1\212\1\213\35\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\11\10"+
    "\1\214\25\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\17\10\1\215\17\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\10\10\1\216\26\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\5\10\1\217\22\10"+
    "\1\220\6\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\6\10\1\221\30\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\5\10\1\222\31\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\22\10\1\223\14\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\4\10"+
    "\1\224\32\10\6\0\5\10\1\0\2\10\1\0\1\10"+
    "\1\225\3\0\26\10\1\226\10\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\12\10\1\227\2\10\1\230"+
    "\21\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\4\10\1\231\32\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\23\10\1\232\13\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\6\10\1\233\30\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\11\10\1\234"+
    "\25\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\32\10\1\235\4\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\5\10\1\236\31\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\4\10\1\237\32\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\16\10\1\240"+
    "\20\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\1\10\1\241\35\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\6\10\1\242\30\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\1\10\1\243\35\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\27\10\1\244"+
    "\7\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\16\10\1\245\20\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\12\10\1\246\24\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\3\10\1\247\33\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\13\10\1\250"+
    "\23\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\1\10\1\251\10\10\1\252\24\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\4\10\1\253\1\10\1\254"+
    "\2\10\1\255\1\10\1\256\3\10\1\257\1\10\1\260"+
    "\15\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\1\261\1\262\35\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\14\10\1\263\22\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\11\10\1\264\25\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\14\10\1\265"+
    "\22\10\6\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\13\57\1\266\23\57\6\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\11\57\1\267\25\57\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\17\10\1\270\17\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\6\10\1\271"+
    "\30\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\5\10\1\272\31\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\13\10\1\273\23\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\16\10\1\274\20\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\13\10\1\275"+
    "\23\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\12\10\1\276\24\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\23\10\1\277\13\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\23\10\1\300\13\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\11\10\1\301"+
    "\25\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\16\10\1\302\20\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\5\10\1\303\31\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\7\10\1\304\27\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\1\305\36\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\4\10"+
    "\1\306\32\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\11\10\1\307\25\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\16\10\1\310\20\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\21\10\1\311\15\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\7\10"+
    "\1\312\27\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\22\10\1\313\14\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\1\314\34\10\1\315\1\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\4\10\1\316"+
    "\32\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\23\10\1\317\13\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\12\10\1\320\24\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\7\10\1\321\6\10\1\322"+
    "\20\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\5\10\1\323\31\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\6\10\1\324\30\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\10\10\1\325\26\10\6\0"+
    "\5\10\1\0\1\326\1\10\1\0\2\10\3\0\37\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\11\10"+
    "\1\327\25\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\4\10\1\330\32\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\15\10\1\331\21\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\14\10\1\332\22\10"+
    "\6\0\5\57\1\0\2\57\1\0\2\57\3\0\11\57"+
    "\1\333\25\57\6\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\22\57\1\334\14\57\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\11\10\1\335\25\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\13\10\1\336\23\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\11\10"+
    "\1\337\25\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\11\10\1\340\25\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\5\10\1\341\31\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\14\10\1\342\22\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\22\10"+
    "\1\343\14\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\13\10\1\344\23\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\4\10\1\345\32\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\1\10\1\346\35\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\10\10"+
    "\1\347\26\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\5\10\1\350\31\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\1\10\1\351\35\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\16\10\1\352\20\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\15\10"+
    "\1\353\21\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\11\10\1\354\25\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\15\10\1\355\21\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\11\10\1\356\25\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\23\10"+
    "\1\357\13\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\12\10\1\360\24\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\10\10\1\361\26\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\12\10\1\362\24\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\27\10"+
    "\1\363\7\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\23\10\1\364\13\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\7\10\1\365\27\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\5\10\1\366\31\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\13\10"+
    "\1\367\23\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\10\10\1\370\26\10\6\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\15\57\1\371\21\57\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\5\10\1\372\31\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\1\373"+
    "\1\374\35\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\14\10\1\375\22\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\1\10\1\376\35\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\16\10\1\377\20\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\12\10"+
    "\1\u0100\24\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\13\10\1\u0101\23\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\1\u0102\1\u0103\35\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\10\10\1\u0104\26\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\14\10"+
    "\1\u0105\22\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\11\10\1\u0106\25\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\1\10\1\u0107\35\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\6\10\1\u0108\30\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\30\10"+
    "\1\u0109\6\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\33\10\1\u010a\3\10\6\0\5\10\1\0\2\10"+
    "\1\0\1\u010b\1\10\3\0\37\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\6\10\1\u010c\30\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\5\10\1\u010d"+
    "\31\10\6\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\4\10\1\u010e\32\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\13\10\1\u010f\23\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\6\10\1\u0110\30\10\6\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\36\10\1\u0111"+
    "\6\0\5\57\1\0\2\57\1\0\2\57\3\0\23\57"+
    "\1\u0112\13\57\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\13\10\1\u0113\23\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\7\10\1\u0114\6\10\1\u0115\20\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\1\10"+
    "\1\u0116\35\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\23\10\1\u0117\13\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\10\10\1\u0118\26\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\10\10\1\u0119\26\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\1\10"+
    "\1\u011a\35\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\14\10\1\u011b\22\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\13\10\1\u011c\23\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\7\10\1\u011d\27\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\16\10"+
    "\1\u011e\20\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\16\10\1\u011f\20\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\20\10\1\u0120\16\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\1\u0121\1\u0122\35\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\7\10"+
    "\1\u0123\27\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\11\10\1\u0124\25\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\10\10\1\u0125\26\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\12\10\1\u0126\24\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\10\10"+
    "\1\u0127\26\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\22\10\1\u0128\14\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\13\10\1\u0129\23\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\17\10\1\u012a\17\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\14\10"+
    "\1\u012b\22\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\14\10\1\u012c\22\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\20\10\1\u012d\16\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\1\u012e\1\u012f\35\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\11\10"+
    "\1\u0130\25\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\12\10\1\u0131\24\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\5\10\1\u0132\31\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\6\10\1\u0133\30\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\15\10"+
    "\1\u0134\21\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\30\10\1\u0135\6\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\33\10\1\u0136\3\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\11\10\1\u0137\25\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\27\10"+
    "\1\u0138\7\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\20\10\1\u0139\16\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\23\10\1\u013a\13\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\1\10\1\u013b\35\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\6\10"+
    "\1\u013c\30\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\13\10\1\u013d\23\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\13\10\1\u013e\23\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\11\10\1\u013f\25\10"+
    "\6\0\5\10\1\0\2\10\1\0\2\10\3\0\7\10"+
    "\1\u0140\27\10\6\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\14\10\1\u0141\22\10\6\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\23\10\1\u0142\13\10\6\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\22\10\1\u0143\14\10"+
    "\6\0\5\10\1\0\2\10\1\0\1\10\1\u0144\3\0"+
    "\26\10\1\u0145\10\10\6\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\11\10\1\u0146\25\10\6\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\14\10\1\u0147\22\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12546];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\10\1\2\11\25\1\1\11"+
    "\2\1\3\0\1\1\1\0\1\11\41\1\1\11\367\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private StringBuilder string; // NOPMD
  private SimpleSymbolFactory symFactory;
  private final UnifyHash<BigInteger> bignumbers = new UnifyHash<BigInteger>();
  private boolean version25 = true;
  
  public void setVersion25(boolean on) {
    version25 = on;
  }
  
  public boolean isVersion25() {
    return version25;
  }
  
  public void setSymbolFactory(SimpleSymbolFactory factory) {
    symFactory = factory;
  }

  private Symbol symbol(int type) {
    return symFactory.newSymbol(yytext(), type, yyline+1, yycolumn, yyline+1, yycolumn+yylength());
  }
  private Symbol symbol(int type, Object value) {
    return symFactory.newSymbol(yytext(), type, yyline+1, yycolumn, yyline+1, yycolumn+yylength(), value);
  }
  
  private BigInteger convertNumeral(String numeral) {
	BigInteger result = new BigInteger(numeral);
	int hash = result.hashCode();
	for (BigInteger integer : bignumbers.iterateHashCode(hash)) {
		if (integer.equals(result))
			return integer;
	}
	bignumbers.put(hash, result);
	return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ProofLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ProofLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.github.jhoenicke.javacup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 65: 
          { return symbol(ProofSymbols.FORALL, yytext());
          }
        case 95: break;
        case 21: 
          { return symbol(ProofSymbols.HEXADECIMAL, yytext());
          }
        case 96: break;
        case 19: 
          { string.append ('\"');
          }
        case 97: break;
        case 78: 
          { return symbol(ProofSymbols.DT_MATCH, yytext());
          }
        case 98: break;
        case 29: 
          { return symbol(ProofSymbols.IFFI2, yytext());
          }
        case 99: break;
        case 45: 
          { return symbol(ProofSymbols.NOTI, yytext());
          }
        case 100: break;
        case 20: 
          { return symbol(ProofSymbols.DECIMAL, new BigDecimal(yytext()));
          }
        case 101: break;
        case 43: 
          { return symbol(ProofSymbols.REFL, yytext());
          }
        case 102: break;
        case 76: 
          { return symbol(ProofSymbols.DT_TESTI, yytext());
          }
        case 103: break;
        case 90: 
          { return symbol(ProofSymbols.TOREALDEF, yytext());
          }
        case 104: break;
        case 48: 
          { return symbol(ProofSymbols.DIVIDEDEF, yytext());
          }
        case 105: break;
        case 52: 
          { return symbol(ProofSymbols.TRUEI, yytext());
          }
        case 106: break;
        case 50: 
          { return symbol(ProofSymbols.TOTAL, yytext());
          }
        case 107: break;
        case 63: 
          { return symbol(ProofSymbols.FARKAS, yytext());
          }
        case 108: break;
        case 40: 
          { return symbol(ProofSymbols.CONG, yytext());
          }
        case 109: break;
        case 59: 
          { return symbol(ProofSymbols.CHOOSE, yytext());
          }
        case 110: break;
        case 35: 
          { return symbol(ProofSymbols.XORE, yytext());
          }
        case 111: break;
        case 62: 
          { return symbol(ProofSymbols.EXPAND, yytext());
          }
        case 112: break;
        case 27: 
          { return symbol(ProofSymbols.PAR, yytext());
          }
        case 113: break;
        case 88: 
          { return symbol(ProofSymbols.DT_PROJECT, yytext());
          }
        case 114: break;
        case 69: 
          { return symbol(ProofSymbols.FORALLI, yytext());
          }
        case 115: break;
        case 56: 
          { return symbol(ProofSymbols.GEQDEF, yytext());
          }
        case 116: break;
        case 10: 
          { return symbol(ProofSymbols.BANG, yytext());
          }
        case 117: break;
        case 54: 
          { return symbol(ProofSymbols.POLYADD, yytext());
          }
        case 118: break;
        case 85: 
          { return symbol(ProofSymbols.DEFINEFUN, yytext());
          }
        case 119: break;
        case 41: 
          { return symbol(ProofSymbols.ITE1, yytext());
          }
        case 120: break;
        case 30: 
          { return symbol(ProofSymbols.IFFE1, yytext());
          }
        case 121: break;
        case 7: 
          { return symbol(ProofSymbols.PLUS, yytext());
          }
        case 122: break;
        case 68: 
          { return symbol(ProofSymbols.EXTDIFF, yytext());
          }
        case 123: break;
        case 26: 
          { return symbol(ProofSymbols.LET, yytext());
          }
        case 124: break;
        case 80: 
          { return symbol(ProofSymbols.LETPROOF, yytext());
          }
        case 125: break;
        case 18: 
          { return symbol(ProofSymbols.EQE, yytext());
          }
        case 126: break;
        case 24: 
          { return symbol(ProofSymbols.ORE, yytext());
          }
        case 127: break;
        case 3: 
          { return symbol(ProofSymbols.SYMBOL, yytext());
          }
        case 128: break;
        case 22: 
          { return symbol(ProofSymbols.BINARY, yytext());
          }
        case 129: break;
        case 81: 
          { return symbol(ProofSymbols.DISTINCTI, yytext());
          }
        case 130: break;
        case 39: 
          { return symbol(ProofSymbols.SYMM, yytext());
          }
        case 131: break;
        case 74: 
          { return symbol(ProofSymbols.CPATTERN, yytext());
          }
        case 132: break;
        case 73: 
          { return symbol(ProofSymbols.DT_CONS, yytext());
          }
        case 133: break;
        case 13: 
          { String value = string.toString();
                                   string = null;
                                   yybegin(YYINITIAL);
                                   return symbol(ProofSymbols.STRING, value);
          }
        case 134: break;
        case 67: 
          { return symbol(ProofSymbols.EXISTSE, yytext());
          }
        case 135: break;
        case 77: 
          { return symbol(ProofSymbols.DT_TESTE, yytext());
          }
        case 136: break;
        case 8: 
          { return symbol(ProofSymbols.MINUS, yytext());
          }
        case 137: break;
        case 44: 
          { return symbol(ProofSymbols.DELANNOT, yytext());
          }
        case 138: break;
        case 83: 
          { return symbol(ProofSymbols.TOINTLOW, yytext());
          }
        case 139: break;
        case 46: 
          { return symbol(ProofSymbols.NOTE, yytext());
          }
        case 140: break;
        case 91: 
          { return symbol(ProofSymbols.DECLAREFUN, yytext());
          }
        case 141: break;
        case 1: 
          { return symbol(ProofSymbols.error, yytext());
          }
        case 142: break;
        case 70: 
          { return symbol(ProofSymbols.FORALLE, yytext());
          }
        case 143: break;
        case 92: 
          { return symbol(ProofSymbols.SELECTSTORE1, yytext());
          }
        case 144: break;
        case 51: 
          { return symbol(ProofSymbols.TRANS, yytext());
          }
        case 145: break;
        case 28: 
          { return symbol(ProofSymbols.IFFI1, yytext());
          }
        case 146: break;
        case 53: 
          { return symbol(ProofSymbols.MATCH, yytext());
          }
        case 147: break;
        case 37: 
          { return symbol(ProofSymbols.ANDI, yytext());
          }
        case 148: break;
        case 89: 
          { return symbol(ProofSymbols.TOINTHIGH, yytext());
          }
        case 149: break;
        case 36: 
          { return symbol(ProofSymbols.MINUSDEF, yytext());
          }
        case 150: break;
        case 72: 
          { return symbol(ProofSymbols.DIVLOW, yytext());
          }
        case 151: break;
        case 84: 
          { return symbol(ProofSymbols.TRICHOTOMY, yytext());
          }
        case 152: break;
        case 57: 
          { return symbol(ProofSymbols.CNAMED, yytext());
          }
        case 153: break;
        case 16: 
          { return symbol(ProofSymbols.AS, yytext());
          }
        case 154: break;
        case 42: 
          { return symbol(ProofSymbols.ITE2, yytext());
          }
        case 155: break;
        case 61: 
          { return symbol(ProofSymbols.EXISTS, yytext());
          }
        case 156: break;
        case 58: 
          { return symbol(ProofSymbols.ASSUME, yytext());
          }
        case 157: break;
        case 32: 
          { return symbol(ProofSymbols.IMPI, yytext());
          }
        case 158: break;
        case 4: 
          { return symbol(ProofSymbols.NUMERAL, convertNumeral(yytext()));
          }
        case 159: break;
        case 71: 
          { return symbol(ProofSymbols.MODDEF, yytext());
          }
        case 160: break;
        case 55: 
          { return symbol(ProofSymbols.POLYMUL, yytext());
          }
        case 161: break;
        case 82: 
          { return symbol(ProofSymbols.DISTINCTE, yytext());
          }
        case 162: break;
        case 6: 
          { return symbol(ProofSymbols.RPAR);
          }
        case 163: break;
        case 64: 
          { return symbol(ProofSymbols.FALSEE, yytext());
          }
        case 164: break;
        case 31: 
          { return symbol(ProofSymbols.IFFE2, yytext());
          }
        case 165: break;
        case 34: 
          { return symbol(ProofSymbols.XORI, yytext());
          }
        case 166: break;
        case 5: 
          { return symbol(ProofSymbols.LPAR);
          }
        case 167: break;
        case 11: 
          { string = new StringBuilder(); yybegin(STRING25);
          }
        case 168: break;
        case 9: 
          { return symbol(ProofSymbols.UNDERSCORE, yytext());
          }
        case 169: break;
        case 86: 
          { return symbol(ProofSymbols.DT_ACYCLIC, yytext());
          }
        case 170: break;
        case 14: 
          { return symbol(ProofSymbols.SYMBOL, yytext().substring(1, yylength()-1));
          }
        case 171: break;
        case 49: 
          { return symbol(ProofSymbols.CONST, yytext());
          }
        case 172: break;
        case 25: 
          { return symbol(ProofSymbols.RES, yytext());
          }
        case 173: break;
        case 87: 
          { return symbol(ProofSymbols.DT_EXHAUST, yytext());
          }
        case 174: break;
        case 2: 
          { /* ignore */
          }
        case 175: break;
        case 23: 
          { return symbol(ProofSymbols.ORI, yytext());
          }
        case 176: break;
        case 47: 
          { return symbol(ProofSymbols.GTDEF, yytext());
          }
        case 177: break;
        case 75: 
          { return symbol(ProofSymbols.DIVHIGH, yytext());
          }
        case 178: break;
        case 60: 
          { return symbol(ProofSymbols.ORACLE, yytext());
          }
        case 179: break;
        case 93: 
          { return symbol(ProofSymbols.SELECTSTORE2, yytext());
          }
        case 180: break;
        case 94: 
          { return symbol(ProofSymbols.DIVISIBLEDEF, yytext());
          }
        case 181: break;
        case 12: 
          { string.append( yytext() );
          }
        case 182: break;
        case 79: 
          { return symbol(ProofSymbols.TOTALINT, yytext());
          }
        case 183: break;
        case 15: 
          { return symbol(ProofSymbols.KEYWORD, yytext());
          }
        case 184: break;
        case 33: 
          { return symbol(ProofSymbols.IMPE, yytext());
          }
        case 185: break;
        case 38: 
          { return symbol(ProofSymbols.ANDE, yytext());
          }
        case 186: break;
        case 17: 
          { return symbol(ProofSymbols.EQI, yytext());
          }
        case 187: break;
        case 66: 
          { return symbol(ProofSymbols.EXISTSI, yytext());
          }
        case 188: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return symbol(ProofSymbols.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
