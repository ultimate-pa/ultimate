/*
 * Copyright (C) 2007-2015 Christian Ortolf
 * Copyright (C) 2008-2015 Daniel Dietsch (dietsch@informatik.uni-freiburg.de)
 * Copyright (C) 2015 University of Freiburg
 * 
 * This file is part of the ULTIMATE Core.
 * 
 * The ULTIMATE Core is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The ULTIMATE Core is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ULTIMATE Core. If not, see <http://www.gnu.org/licenses/>.
 * 
 * Additional permission under GNU GPL version 3 section 7:
 * If you modify the ULTIMATE Core, or any covered work, by linking
 * or combining it with Eclipse RCP (or a modified version of Eclipse RCP), 
 * containing parts covered by the terms of the Eclipse Public License, the 
 * licensors of the ULTIMATE Core grant you additional permission 
 * to convey the resulting work.
 */
package de.uni_freiburg.informatik.ultimate.core.model;

import de.uni_freiburg.informatik.ultimate.core.model.models.IElement;

/**
 * An {@link IGenerator} plugin creates a new model, typically from some input
 * provided by an {@link ISource} plugin.
 * 
 * @see {@link IModifyingTool}
 * 
 * @author dietsch
 * 
 */
public interface IGenerator extends IModifyingTool {

	/**
	 * The root node of the model the plugin generated. Will be called by
	 * Ultimate after {@link #getObservers()} was called and all observers have
	 * been run on the current model. May be null for some models.  
	 */
	IElement getModel();

	/**
	 * Each {@link IGenerator} plugin has to supply a {@link ITranslator} object
	 * that allows the core to translate from the model generated by this plugin
	 * and supplied by {@link #getModel()} back to the model this plugin
	 * received as input.
	 * 
	 * @see {@link ITranslator}, {@link IBacktranslationService}
	 * 
	 */
//	ITranslator<?, ?, ?, ?> getBacktranslator();
}
