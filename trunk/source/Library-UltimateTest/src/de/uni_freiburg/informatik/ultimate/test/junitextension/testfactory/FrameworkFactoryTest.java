/*
 * Copyright (C) 2013-2015 Daniel Dietsch (dietsch@informatik.uni-freiburg.de)
 * Copyright (C) 2015 University of Freiburg
 *
 * This file is part of the ULTIMATE JUnit Helper Library.
 *
 * The ULTIMATE JUnit Helper Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The ULTIMATE JUnit Helper Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ULTIMATE JUnit Helper Library. If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional permission under GNU GPL version 3 section 7:
 * If you modify the ULTIMATE JUnit Helper Library, or any covered work, by linking
 * or combining it with Eclipse RCP (or a modified version of Eclipse RCP),
 * containing parts covered by the terms of the Eclipse Public License, the
 * licensors of the ULTIMATE JUnit Helper Library grant you additional permission
 * to convey the resulting work.
 */

package de.uni_freiburg.informatik.ultimate.test.junitextension.testfactory;

import java.lang.reflect.Method;

import org.junit.runners.model.FrameworkMethod;

import de.uni_freiburg.informatik.ultimate.test.util.TestUtil;

/**
 * Represents a single test-case that corresponds to an object generated by a \@TestFactory method. Is only used
 * internally by the FactoryTestRunner and named to be consistent with JUnit naming conventions.
 *
 * @author dietsch@informatik.uni-freiburg.de
 *
 */
public class FrameworkFactoryTest extends FrameworkMethod {
	private static final int HASH_CONSTANT_PRIME = 31;

	private Object mTarget;
	private final String mName;

	/**
	 *
	 * @param method
	 *            The method which should be invoked
	 * @param target
	 *            The instance on which the method should be invoked
	 * @param name
	 *            The name that will be displayed in JUnit reports for this test
	 */
	public FrameworkFactoryTest(final Method method, final Object target, final String name,
			final int testsuiteFQDNlength) {
		super(method);
		assert name != null;
		mTarget = target;
		mName = TestUtil.minimizeTestCaseName(name, testsuiteFQDNlength);
	}

	@Override
	public Object invokeExplosively(final Object target, final Object... params) throws Throwable {
		// Executes the test method on the supplied target (returned by the
		// TestFactory)
		// and not the instance generated by FrameworkMethod.
		try {
			return super.invokeExplosively(mTarget, params);
		} finally {
			// remove root of all evil (aka memory leak)
			// in case of flying exceptions, we need to make sure that mTarget
			// is released
			// but we keep the name
			mTarget = null;
		}
	}

	@Override
	public String getName() {
		return mName;
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (!super.equals(obj)) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final FrameworkFactoryTest other = (FrameworkFactoryTest) obj;
		if (mName == null) {
			if (other.mName != null) {
				return false;
			}
		} else if (!mName.equals(other.mName)) {
			return false;
		}
		if (mTarget == null) {
			if (other.mTarget != null) {
				return false;
			}
		} else if (!mTarget.equals(other.mTarget)) {
			return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		return HASH_CONSTANT_PRIME * (HASH_CONSTANT_PRIME * super.hashCode() + ((mName == null) ? 0 : mName.hashCode()))
				+ ((mTarget == null) ? 0 : mTarget.hashCode());
	}

	@Override
	public String toString() {
		return mName;
	}
}
